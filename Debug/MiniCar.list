
MiniCar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012d78  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008a0  08012f78  08012f78  00022f78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013818  08013818  00030214  2**0
                  CONTENTS
  4 .ARM          00000008  08013818  08013818  00023818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013820  08013820  00030214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013820  08013820  00023820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013824  08013824  00023824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  08013828  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000047ac  20000218  08013a3c  00030218  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200049c4  08013a3c  000349c4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003f615  00000000  00000000  00030242  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005966  00000000  00000000  0006f857  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002958  00000000  00000000  000751c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000026b0  00000000  00000000  00077b18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00031e31  00000000  00000000  0007a1c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000225ee  00000000  00000000  000abff9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00125788  00000000  00000000  000ce5e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001f3d6f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000be00  00000000  00000000  001f3dec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000218 	.word	0x20000218
 800021c:	00000000 	.word	0x00000000
 8000220:	08012f60 	.word	0x08012f60

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000021c 	.word	0x2000021c
 800023c:	08012f60 	.word	0x08012f60

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b972 	b.w	800060c <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9e08      	ldr	r6, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	4688      	mov	r8, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14b      	bne.n	80003e6 <__udivmoddi4+0xa6>
 800034e:	428a      	cmp	r2, r1
 8000350:	4615      	mov	r5, r2
 8000352:	d967      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b14a      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035a:	f1c2 0720 	rsb	r7, r2, #32
 800035e:	fa01 f302 	lsl.w	r3, r1, r2
 8000362:	fa20 f707 	lsr.w	r7, r0, r7
 8000366:	4095      	lsls	r5, r2
 8000368:	ea47 0803 	orr.w	r8, r7, r3
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbb8 f7fe 	udiv	r7, r8, lr
 8000378:	fa1f fc85 	uxth.w	ip, r5
 800037c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000380:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000384:	fb07 f10c 	mul.w	r1, r7, ip
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18eb      	adds	r3, r5, r3
 800038e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000392:	f080 811b 	bcs.w	80005cc <__udivmoddi4+0x28c>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8118 	bls.w	80005cc <__udivmoddi4+0x28c>
 800039c:	3f02      	subs	r7, #2
 800039e:	442b      	add	r3, r5
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80003b4:	45a4      	cmp	ip, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	192c      	adds	r4, r5, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80003be:	f080 8107 	bcs.w	80005d0 <__udivmoddi4+0x290>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	f240 8104 	bls.w	80005d0 <__udivmoddi4+0x290>
 80003c8:	3802      	subs	r0, #2
 80003ca:	442c      	add	r4, r5
 80003cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003d0:	eba4 040c 	sub.w	r4, r4, ip
 80003d4:	2700      	movs	r7, #0
 80003d6:	b11e      	cbz	r6, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c6 4300 	strd	r4, r3, [r6]
 80003e0:	4639      	mov	r1, r7
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0xbe>
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	f000 80eb 	beq.w	80005c6 <__udivmoddi4+0x286>
 80003f0:	2700      	movs	r7, #0
 80003f2:	e9c6 0100 	strd	r0, r1, [r6]
 80003f6:	4638      	mov	r0, r7
 80003f8:	4639      	mov	r1, r7
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f783 	clz	r7, r3
 8000402:	2f00      	cmp	r7, #0
 8000404:	d147      	bne.n	8000496 <__udivmoddi4+0x156>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0xd0>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80fa 	bhi.w	8000604 <__udivmoddi4+0x2c4>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0303 	sbc.w	r3, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	4698      	mov	r8, r3
 800041a:	2e00      	cmp	r6, #0
 800041c:	d0e0      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800041e:	e9c6 4800 	strd	r4, r8, [r6]
 8000422:	e7dd      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000424:	b902      	cbnz	r2, 8000428 <__udivmoddi4+0xe8>
 8000426:	deff      	udf	#255	; 0xff
 8000428:	fab2 f282 	clz	r2, r2
 800042c:	2a00      	cmp	r2, #0
 800042e:	f040 808f 	bne.w	8000550 <__udivmoddi4+0x210>
 8000432:	1b49      	subs	r1, r1, r5
 8000434:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000438:	fa1f f885 	uxth.w	r8, r5
 800043c:	2701      	movs	r7, #1
 800043e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000442:	0c23      	lsrs	r3, r4, #16
 8000444:	fb0e 111c 	mls	r1, lr, ip, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb08 f10c 	mul.w	r1, r8, ip
 8000450:	4299      	cmp	r1, r3
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x124>
 8000454:	18eb      	adds	r3, r5, r3
 8000456:	f10c 30ff 	add.w	r0, ip, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x122>
 800045c:	4299      	cmp	r1, r3
 800045e:	f200 80cd 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 8000462:	4684      	mov	ip, r0
 8000464:	1a59      	subs	r1, r3, r1
 8000466:	b2a3      	uxth	r3, r4
 8000468:	fbb1 f0fe 	udiv	r0, r1, lr
 800046c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000470:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000474:	fb08 f800 	mul.w	r8, r8, r0
 8000478:	45a0      	cmp	r8, r4
 800047a:	d907      	bls.n	800048c <__udivmoddi4+0x14c>
 800047c:	192c      	adds	r4, r5, r4
 800047e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000482:	d202      	bcs.n	800048a <__udivmoddi4+0x14a>
 8000484:	45a0      	cmp	r8, r4
 8000486:	f200 80b6 	bhi.w	80005f6 <__udivmoddi4+0x2b6>
 800048a:	4618      	mov	r0, r3
 800048c:	eba4 0408 	sub.w	r4, r4, r8
 8000490:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000494:	e79f      	b.n	80003d6 <__udivmoddi4+0x96>
 8000496:	f1c7 0c20 	rsb	ip, r7, #32
 800049a:	40bb      	lsls	r3, r7
 800049c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80004a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80004a4:	fa01 f407 	lsl.w	r4, r1, r7
 80004a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80004ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80004b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80004b4:	4325      	orrs	r5, r4
 80004b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80004ba:	0c2c      	lsrs	r4, r5, #16
 80004bc:	fb08 3319 	mls	r3, r8, r9, r3
 80004c0:	fa1f fa8e 	uxth.w	sl, lr
 80004c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004c8:	fb09 f40a 	mul.w	r4, r9, sl
 80004cc:	429c      	cmp	r4, r3
 80004ce:	fa02 f207 	lsl.w	r2, r2, r7
 80004d2:	fa00 f107 	lsl.w	r1, r0, r7
 80004d6:	d90b      	bls.n	80004f0 <__udivmoddi4+0x1b0>
 80004d8:	eb1e 0303 	adds.w	r3, lr, r3
 80004dc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e0:	f080 8087 	bcs.w	80005f2 <__udivmoddi4+0x2b2>
 80004e4:	429c      	cmp	r4, r3
 80004e6:	f240 8084 	bls.w	80005f2 <__udivmoddi4+0x2b2>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4473      	add	r3, lr
 80004f0:	1b1b      	subs	r3, r3, r4
 80004f2:	b2ad      	uxth	r5, r5
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3310 	mls	r3, r8, r0, r3
 80004fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000500:	fb00 fa0a 	mul.w	sl, r0, sl
 8000504:	45a2      	cmp	sl, r4
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x1da>
 8000508:	eb1e 0404 	adds.w	r4, lr, r4
 800050c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000510:	d26b      	bcs.n	80005ea <__udivmoddi4+0x2aa>
 8000512:	45a2      	cmp	sl, r4
 8000514:	d969      	bls.n	80005ea <__udivmoddi4+0x2aa>
 8000516:	3802      	subs	r0, #2
 8000518:	4474      	add	r4, lr
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	fba0 8902 	umull	r8, r9, r0, r2
 8000522:	eba4 040a 	sub.w	r4, r4, sl
 8000526:	454c      	cmp	r4, r9
 8000528:	46c2      	mov	sl, r8
 800052a:	464b      	mov	r3, r9
 800052c:	d354      	bcc.n	80005d8 <__udivmoddi4+0x298>
 800052e:	d051      	beq.n	80005d4 <__udivmoddi4+0x294>
 8000530:	2e00      	cmp	r6, #0
 8000532:	d069      	beq.n	8000608 <__udivmoddi4+0x2c8>
 8000534:	ebb1 050a 	subs.w	r5, r1, sl
 8000538:	eb64 0403 	sbc.w	r4, r4, r3
 800053c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000540:	40fd      	lsrs	r5, r7
 8000542:	40fc      	lsrs	r4, r7
 8000544:	ea4c 0505 	orr.w	r5, ip, r5
 8000548:	e9c6 5400 	strd	r5, r4, [r6]
 800054c:	2700      	movs	r7, #0
 800054e:	e747      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000550:	f1c2 0320 	rsb	r3, r2, #32
 8000554:	fa20 f703 	lsr.w	r7, r0, r3
 8000558:	4095      	lsls	r5, r2
 800055a:	fa01 f002 	lsl.w	r0, r1, r2
 800055e:	fa21 f303 	lsr.w	r3, r1, r3
 8000562:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000566:	4338      	orrs	r0, r7
 8000568:	0c01      	lsrs	r1, r0, #16
 800056a:	fbb3 f7fe 	udiv	r7, r3, lr
 800056e:	fa1f f885 	uxth.w	r8, r5
 8000572:	fb0e 3317 	mls	r3, lr, r7, r3
 8000576:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057a:	fb07 f308 	mul.w	r3, r7, r8
 800057e:	428b      	cmp	r3, r1
 8000580:	fa04 f402 	lsl.w	r4, r4, r2
 8000584:	d907      	bls.n	8000596 <__udivmoddi4+0x256>
 8000586:	1869      	adds	r1, r5, r1
 8000588:	f107 3cff 	add.w	ip, r7, #4294967295
 800058c:	d22f      	bcs.n	80005ee <__udivmoddi4+0x2ae>
 800058e:	428b      	cmp	r3, r1
 8000590:	d92d      	bls.n	80005ee <__udivmoddi4+0x2ae>
 8000592:	3f02      	subs	r7, #2
 8000594:	4429      	add	r1, r5
 8000596:	1acb      	subs	r3, r1, r3
 8000598:	b281      	uxth	r1, r0
 800059a:	fbb3 f0fe 	udiv	r0, r3, lr
 800059e:	fb0e 3310 	mls	r3, lr, r0, r3
 80005a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005a6:	fb00 f308 	mul.w	r3, r0, r8
 80005aa:	428b      	cmp	r3, r1
 80005ac:	d907      	bls.n	80005be <__udivmoddi4+0x27e>
 80005ae:	1869      	adds	r1, r5, r1
 80005b0:	f100 3cff 	add.w	ip, r0, #4294967295
 80005b4:	d217      	bcs.n	80005e6 <__udivmoddi4+0x2a6>
 80005b6:	428b      	cmp	r3, r1
 80005b8:	d915      	bls.n	80005e6 <__udivmoddi4+0x2a6>
 80005ba:	3802      	subs	r0, #2
 80005bc:	4429      	add	r1, r5
 80005be:	1ac9      	subs	r1, r1, r3
 80005c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005c4:	e73b      	b.n	800043e <__udivmoddi4+0xfe>
 80005c6:	4637      	mov	r7, r6
 80005c8:	4630      	mov	r0, r6
 80005ca:	e709      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005cc:	4607      	mov	r7, r0
 80005ce:	e6e7      	b.n	80003a0 <__udivmoddi4+0x60>
 80005d0:	4618      	mov	r0, r3
 80005d2:	e6fb      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d4:	4541      	cmp	r1, r8
 80005d6:	d2ab      	bcs.n	8000530 <__udivmoddi4+0x1f0>
 80005d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005dc:	eb69 020e 	sbc.w	r2, r9, lr
 80005e0:	3801      	subs	r0, #1
 80005e2:	4613      	mov	r3, r2
 80005e4:	e7a4      	b.n	8000530 <__udivmoddi4+0x1f0>
 80005e6:	4660      	mov	r0, ip
 80005e8:	e7e9      	b.n	80005be <__udivmoddi4+0x27e>
 80005ea:	4618      	mov	r0, r3
 80005ec:	e795      	b.n	800051a <__udivmoddi4+0x1da>
 80005ee:	4667      	mov	r7, ip
 80005f0:	e7d1      	b.n	8000596 <__udivmoddi4+0x256>
 80005f2:	4681      	mov	r9, r0
 80005f4:	e77c      	b.n	80004f0 <__udivmoddi4+0x1b0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	442c      	add	r4, r5
 80005fa:	e747      	b.n	800048c <__udivmoddi4+0x14c>
 80005fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000600:	442b      	add	r3, r5
 8000602:	e72f      	b.n	8000464 <__udivmoddi4+0x124>
 8000604:	4638      	mov	r0, r7
 8000606:	e708      	b.n	800041a <__udivmoddi4+0xda>
 8000608:	4637      	mov	r7, r6
 800060a:	e6e9      	b.n	80003e0 <__udivmoddi4+0xa0>

0800060c <__aeabi_idiv0>:
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop

08000610 <start_pwm1>:
 *      Author: raing
 */
#include "main.h"

void start_pwm1(int onTimemSec)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
    TIM2->CCR1 = onTimemSec * 4 / 10;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	009b      	lsls	r3, r3, #2
 800061c:	4a08      	ldr	r2, [pc, #32]	; (8000640 <start_pwm1+0x30>)
 800061e:	fb82 1203 	smull	r1, r2, r2, r3
 8000622:	1092      	asrs	r2, r2, #2
 8000624:	17db      	asrs	r3, r3, #31
 8000626:	1ad2      	subs	r2, r2, r3
 8000628:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800062c:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800062e:	2100      	movs	r1, #0
 8000630:	4804      	ldr	r0, [pc, #16]	; (8000644 <start_pwm1+0x34>)
 8000632:	f009 facd 	bl	8009bd0 <HAL_TIM_PWM_Start>
}
 8000636:	bf00      	nop
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	66666667 	.word	0x66666667
 8000644:	20004810 	.word	0x20004810

08000648 <start_pwm2>:
{
    HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
}

void start_pwm2(int PercentOn)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
    TIM1->CCR4 = PercentOn;
 8000650:	4a05      	ldr	r2, [pc, #20]	; (8000668 <start_pwm2+0x20>)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000656:	210c      	movs	r1, #12
 8000658:	4804      	ldr	r0, [pc, #16]	; (800066c <start_pwm2+0x24>)
 800065a:	f009 fab9 	bl	8009bd0 <HAL_TIM_PWM_Start>
}
 800065e:	bf00      	nop
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40010000 	.word	0x40010000
 800066c:	200046e8 	.word	0x200046e8

08000670 <CheckButton>:
uint32_t ButtonPressCycleStart = 0;
uint32_t ButtonPressDurationmSec[5] = {0};
uint8_t ButtonCycle = 0;

void CheckButton(void)
{
 8000670:	b5b0      	push	{r4, r5, r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af02      	add	r7, sp, #8
	PA0PinState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000676:	2101      	movs	r1, #1
 8000678:	4881      	ldr	r0, [pc, #516]	; (8000880 <CheckButton+0x210>)
 800067a:	f005 f947 	bl	800590c <HAL_GPIO_ReadPin>
 800067e:	4603      	mov	r3, r0
 8000680:	461a      	mov	r2, r3
 8000682:	4b80      	ldr	r3, [pc, #512]	; (8000884 <CheckButton+0x214>)
 8000684:	701a      	strb	r2, [r3, #0]
	if (PA0PinState == GPIO_PIN_RESET)
 8000686:	4b7f      	ldr	r3, [pc, #508]	; (8000884 <CheckButton+0x214>)
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d108      	bne.n	80006a0 <CheckButton+0x30>
	{
		SetRGB(0, 250, 0);
 800068e:	2200      	movs	r2, #0
 8000690:	21fa      	movs	r1, #250	; 0xfa
 8000692:	2000      	movs	r0, #0
 8000694:	f000 fd0c 	bl	80010b0 <SetRGB>
		ButtonIsLow = true;
 8000698:	4b7b      	ldr	r3, [pc, #492]	; (8000888 <CheckButton+0x218>)
 800069a:	2201      	movs	r2, #1
 800069c:	701a      	strb	r2, [r3, #0]
		if (ButtonCycle == 0)
		{
			ButtonPressCycleStart = HAL_GetTick();
		}
	}
}
 800069e:	e0e7      	b.n	8000870 <CheckButton+0x200>
		if (ButtonIsLow)
 80006a0:	4b79      	ldr	r3, [pc, #484]	; (8000888 <CheckButton+0x218>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d045      	beq.n	8000734 <CheckButton+0xc4>
			if (ButtonCycle < 5)
 80006a8:	4b78      	ldr	r3, [pc, #480]	; (800088c <CheckButton+0x21c>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b04      	cmp	r3, #4
 80006ae:	d818      	bhi.n	80006e2 <CheckButton+0x72>
				ButtonPressDurationmSec[ButtonCycle] = ((HAL_GetTick()
 80006b0:	f003 fc8e 	bl	8003fd0 <HAL_GetTick>
 80006b4:	4602      	mov	r2, r0
						- ButtonPressStart) / 100) * 100;
 80006b6:	4b76      	ldr	r3, [pc, #472]	; (8000890 <CheckButton+0x220>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	1ad3      	subs	r3, r2, r3
 80006bc:	4a75      	ldr	r2, [pc, #468]	; (8000894 <CheckButton+0x224>)
 80006be:	fba2 2303 	umull	r2, r3, r2, r3
 80006c2:	095b      	lsrs	r3, r3, #5
				ButtonPressDurationmSec[ButtonCycle] = ((HAL_GetTick()
 80006c4:	4a71      	ldr	r2, [pc, #452]	; (800088c <CheckButton+0x21c>)
 80006c6:	7812      	ldrb	r2, [r2, #0]
 80006c8:	4611      	mov	r1, r2
						- ButtonPressStart) / 100) * 100;
 80006ca:	2264      	movs	r2, #100	; 0x64
 80006cc:	fb02 f303 	mul.w	r3, r2, r3
				ButtonPressDurationmSec[ButtonCycle] = ((HAL_GetTick()
 80006d0:	4a71      	ldr	r2, [pc, #452]	; (8000898 <CheckButton+0x228>)
 80006d2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
				ButtonCycle++;
 80006d6:	4b6d      	ldr	r3, [pc, #436]	; (800088c <CheckButton+0x21c>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	3301      	adds	r3, #1
 80006dc:	b2da      	uxtb	r2, r3
 80006de:	4b6b      	ldr	r3, [pc, #428]	; (800088c <CheckButton+0x21c>)
 80006e0:	701a      	strb	r2, [r3, #0]
			if (ButtonCycle >= 5)
 80006e2:	4b6a      	ldr	r3, [pc, #424]	; (800088c <CheckButton+0x21c>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	2b04      	cmp	r3, #4
 80006e8:	d907      	bls.n	80006fa <CheckButton+0x8a>
				ButtonCycle = 0;
 80006ea:	4b68      	ldr	r3, [pc, #416]	; (800088c <CheckButton+0x21c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	701a      	strb	r2, [r3, #0]
				memset(ButtonPressDurationmSec, 0, 20);
 80006f0:	2214      	movs	r2, #20
 80006f2:	2100      	movs	r1, #0
 80006f4:	4868      	ldr	r0, [pc, #416]	; (8000898 <CheckButton+0x228>)
 80006f6:	f00e ff94 	bl	800f622 <memset>
			sprintf(USBTXArray, "%6.3f, Button press duration: %6.3f\r\n",
 80006fa:	f002 fd7d 	bl	80031f8 <CurrentTime>
 80006fe:	ec55 4b10 	vmov	r4, r5, d0
					CurrentTime(), (HAL_GetTick() - ButtonPressStart) / 1000.0);
 8000702:	f003 fc65 	bl	8003fd0 <HAL_GetTick>
 8000706:	4602      	mov	r2, r0
 8000708:	4b61      	ldr	r3, [pc, #388]	; (8000890 <CheckButton+0x220>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	1ad3      	subs	r3, r2, r3
			sprintf(USBTXArray, "%6.3f, Button press duration: %6.3f\r\n",
 800070e:	ee07 3a90 	vmov	s15, r3
 8000712:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000716:	ed9f 5b58 	vldr	d5, [pc, #352]	; 8000878 <CheckButton+0x208>
 800071a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800071e:	ed8d 7b00 	vstr	d7, [sp]
 8000722:	4622      	mov	r2, r4
 8000724:	462b      	mov	r3, r5
 8000726:	495d      	ldr	r1, [pc, #372]	; (800089c <CheckButton+0x22c>)
 8000728:	485d      	ldr	r0, [pc, #372]	; (80008a0 <CheckButton+0x230>)
 800072a:	f00f fd9b 	bl	8010264 <siprintf>
			SendToScreen(false);
 800072e:	2000      	movs	r0, #0
 8000730:	f001 fd44 	bl	80021bc <SendToScreen>
		if (HAL_GetTick() - ButtonPressCycleStart > 3000)
 8000734:	f003 fc4c 	bl	8003fd0 <HAL_GetTick>
 8000738:	4602      	mov	r2, r0
 800073a:	4b5a      	ldr	r3, [pc, #360]	; (80008a4 <CheckButton+0x234>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	1ad3      	subs	r3, r2, r3
 8000740:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000744:	4293      	cmp	r3, r2
 8000746:	d97a      	bls.n	800083e <CheckButton+0x1ce>
			if (ButtonPressDurationmSec[0] >= 2000)
 8000748:	4b53      	ldr	r3, [pc, #332]	; (8000898 <CheckButton+0x228>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000750:	d30f      	bcc.n	8000772 <CheckButton+0x102>
				sprintf(USBTXArray, "%6.3f, Do this\r\n", CurrentTime());
 8000752:	f002 fd51 	bl	80031f8 <CurrentTime>
 8000756:	ec54 3b10 	vmov	r3, r4, d0
 800075a:	461a      	mov	r2, r3
 800075c:	4623      	mov	r3, r4
 800075e:	4952      	ldr	r1, [pc, #328]	; (80008a8 <CheckButton+0x238>)
 8000760:	484f      	ldr	r0, [pc, #316]	; (80008a0 <CheckButton+0x230>)
 8000762:	f00f fd7f 	bl	8010264 <siprintf>
				SendToScreen(false);
 8000766:	2000      	movs	r0, #0
 8000768:	f001 fd28 	bl	80021bc <SendToScreen>
				HAL_PWR_EnterSTANDBYMode();
 800076c:	f006 f938 	bl	80069e0 <HAL_PWR_EnterSTANDBYMode>
 8000770:	e05d      	b.n	800082e <CheckButton+0x1be>
			else if ((ButtonPressDurationmSec[0] >= 1000)
 8000772:	4b49      	ldr	r3, [pc, #292]	; (8000898 <CheckButton+0x228>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800077a:	d312      	bcc.n	80007a2 <CheckButton+0x132>
					&& (ButtonPressDurationmSec[1] >= 1000))
 800077c:	4b46      	ldr	r3, [pc, #280]	; (8000898 <CheckButton+0x228>)
 800077e:	685b      	ldr	r3, [r3, #4]
 8000780:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000784:	d30d      	bcc.n	80007a2 <CheckButton+0x132>
				sprintf(USBTXArray, "%6.3f, Do that\r\n", CurrentTime());
 8000786:	f002 fd37 	bl	80031f8 <CurrentTime>
 800078a:	ec54 3b10 	vmov	r3, r4, d0
 800078e:	461a      	mov	r2, r3
 8000790:	4623      	mov	r3, r4
 8000792:	4946      	ldr	r1, [pc, #280]	; (80008ac <CheckButton+0x23c>)
 8000794:	4842      	ldr	r0, [pc, #264]	; (80008a0 <CheckButton+0x230>)
 8000796:	f00f fd65 	bl	8010264 <siprintf>
				SendToScreen(false);
 800079a:	2000      	movs	r0, #0
 800079c:	f001 fd0e 	bl	80021bc <SendToScreen>
 80007a0:	e045      	b.n	800082e <CheckButton+0x1be>
			else if ((ButtonPressDurationmSec[0] >= 1000)
 80007a2:	4b3d      	ldr	r3, [pc, #244]	; (8000898 <CheckButton+0x228>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80007aa:	d311      	bcc.n	80007d0 <CheckButton+0x160>
					&& (ButtonPressDurationmSec[1] == 0))
 80007ac:	4b3a      	ldr	r3, [pc, #232]	; (8000898 <CheckButton+0x228>)
 80007ae:	685b      	ldr	r3, [r3, #4]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d10d      	bne.n	80007d0 <CheckButton+0x160>
				sprintf(USBTXArray, "%6.3f, Do that Single Press\r\n",
 80007b4:	f002 fd20 	bl	80031f8 <CurrentTime>
 80007b8:	ec54 3b10 	vmov	r3, r4, d0
 80007bc:	461a      	mov	r2, r3
 80007be:	4623      	mov	r3, r4
 80007c0:	493b      	ldr	r1, [pc, #236]	; (80008b0 <CheckButton+0x240>)
 80007c2:	4837      	ldr	r0, [pc, #220]	; (80008a0 <CheckButton+0x230>)
 80007c4:	f00f fd4e 	bl	8010264 <siprintf>
				SendToScreen(false);
 80007c8:	2000      	movs	r0, #0
 80007ca:	f001 fcf7 	bl	80021bc <SendToScreen>
 80007ce:	e02e      	b.n	800082e <CheckButton+0x1be>
			else if ((ButtonPressDurationmSec[0] >= 500)
 80007d0:	4b31      	ldr	r3, [pc, #196]	; (8000898 <CheckButton+0x228>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80007d8:	d312      	bcc.n	8000800 <CheckButton+0x190>
					&& (ButtonPressDurationmSec[1] >= 1000))
 80007da:	4b2f      	ldr	r3, [pc, #188]	; (8000898 <CheckButton+0x228>)
 80007dc:	685b      	ldr	r3, [r3, #4]
 80007de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80007e2:	d30d      	bcc.n	8000800 <CheckButton+0x190>
				sprintf(USBTXArray, "%6.3f, Or maybe this\r\n", CurrentTime());
 80007e4:	f002 fd08 	bl	80031f8 <CurrentTime>
 80007e8:	ec54 3b10 	vmov	r3, r4, d0
 80007ec:	461a      	mov	r2, r3
 80007ee:	4623      	mov	r3, r4
 80007f0:	4930      	ldr	r1, [pc, #192]	; (80008b4 <CheckButton+0x244>)
 80007f2:	482b      	ldr	r0, [pc, #172]	; (80008a0 <CheckButton+0x230>)
 80007f4:	f00f fd36 	bl	8010264 <siprintf>
				SendToScreen(false);
 80007f8:	2000      	movs	r0, #0
 80007fa:	f001 fcdf 	bl	80021bc <SendToScreen>
 80007fe:	e016      	b.n	800082e <CheckButton+0x1be>
			else if ((ButtonPressDurationmSec[0] >= 500)
 8000800:	4b25      	ldr	r3, [pc, #148]	; (8000898 <CheckButton+0x228>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000808:	d311      	bcc.n	800082e <CheckButton+0x1be>
					&& (ButtonPressDurationmSec[1] >= 500))
 800080a:	4b23      	ldr	r3, [pc, #140]	; (8000898 <CheckButton+0x228>)
 800080c:	685b      	ldr	r3, [r3, #4]
 800080e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000812:	d30c      	bcc.n	800082e <CheckButton+0x1be>
				sprintf(USBTXArray, "%6.3f, Or maybe that\r\n", CurrentTime());
 8000814:	f002 fcf0 	bl	80031f8 <CurrentTime>
 8000818:	ec54 3b10 	vmov	r3, r4, d0
 800081c:	461a      	mov	r2, r3
 800081e:	4623      	mov	r3, r4
 8000820:	4925      	ldr	r1, [pc, #148]	; (80008b8 <CheckButton+0x248>)
 8000822:	481f      	ldr	r0, [pc, #124]	; (80008a0 <CheckButton+0x230>)
 8000824:	f00f fd1e 	bl	8010264 <siprintf>
				SendToScreen(false);
 8000828:	2000      	movs	r0, #0
 800082a:	f001 fcc7 	bl	80021bc <SendToScreen>
			ButtonCycle = 0;
 800082e:	4b17      	ldr	r3, [pc, #92]	; (800088c <CheckButton+0x21c>)
 8000830:	2200      	movs	r2, #0
 8000832:	701a      	strb	r2, [r3, #0]
			memset(ButtonPressDurationmSec, 0, 20);
 8000834:	2214      	movs	r2, #20
 8000836:	2100      	movs	r1, #0
 8000838:	4817      	ldr	r0, [pc, #92]	; (8000898 <CheckButton+0x228>)
 800083a:	f00e fef2 	bl	800f622 <memset>
		SetRGB(250, 0, 0);
 800083e:	2200      	movs	r2, #0
 8000840:	2100      	movs	r1, #0
 8000842:	20fa      	movs	r0, #250	; 0xfa
 8000844:	f000 fc34 	bl	80010b0 <SetRGB>
		ButtonIsHigh = true;
 8000848:	4b1c      	ldr	r3, [pc, #112]	; (80008bc <CheckButton+0x24c>)
 800084a:	2201      	movs	r2, #1
 800084c:	701a      	strb	r2, [r3, #0]
		ButtonIsLow = false;
 800084e:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <CheckButton+0x218>)
 8000850:	2200      	movs	r2, #0
 8000852:	701a      	strb	r2, [r3, #0]
		ButtonPressStart = HAL_GetTick();
 8000854:	f003 fbbc 	bl	8003fd0 <HAL_GetTick>
 8000858:	4602      	mov	r2, r0
 800085a:	4b0d      	ldr	r3, [pc, #52]	; (8000890 <CheckButton+0x220>)
 800085c:	601a      	str	r2, [r3, #0]
		if (ButtonCycle == 0)
 800085e:	4b0b      	ldr	r3, [pc, #44]	; (800088c <CheckButton+0x21c>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d104      	bne.n	8000870 <CheckButton+0x200>
			ButtonPressCycleStart = HAL_GetTick();
 8000866:	f003 fbb3 	bl	8003fd0 <HAL_GetTick>
 800086a:	4602      	mov	r2, r0
 800086c:	4b0d      	ldr	r3, [pc, #52]	; (80008a4 <CheckButton+0x234>)
 800086e:	601a      	str	r2, [r3, #0]
}
 8000870:	bf00      	nop
 8000872:	46bd      	mov	sp, r7
 8000874:	bdb0      	pop	{r4, r5, r7, pc}
 8000876:	bf00      	nop
 8000878:	00000000 	.word	0x00000000
 800087c:	408f4000 	.word	0x408f4000
 8000880:	40020000 	.word	0x40020000
 8000884:	20001314 	.word	0x20001314
 8000888:	20000235 	.word	0x20000235
 800088c:	20000254 	.word	0x20000254
 8000890:	20000238 	.word	0x20000238
 8000894:	51eb851f 	.word	0x51eb851f
 8000898:	20000240 	.word	0x20000240
 800089c:	08012f78 	.word	0x08012f78
 80008a0:	200008ac 	.word	0x200008ac
 80008a4:	2000023c 	.word	0x2000023c
 80008a8:	08012fa0 	.word	0x08012fa0
 80008ac:	08012fb4 	.word	0x08012fb4
 80008b0:	08012fc8 	.word	0x08012fc8
 80008b4:	08012fe8 	.word	0x08012fe8
 80008b8:	08013000 	.word	0x08013000
 80008bc:	20000234 	.word	0x20000234

080008c0 <QSPI_Init>:
  * @brief  QSPI Init
  * @param  None
  * @retval HAL_ERROR or HAL_OK
  */
uint8_t QSPI_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* Configuration of the dummy cycles on QSPI memory side */
  if (QSPI_DummyCyclesCfg(&hqspi) != HAL_OK)
 80008c4:	4805      	ldr	r0, [pc, #20]	; (80008dc <QSPI_Init+0x1c>)
 80008c6:	f000 fb26 	bl	8000f16 <QSPI_DummyCyclesCfg>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <QSPI_Init+0x14>
  {
    return HAL_ERROR;
 80008d0:	2301      	movs	r3, #1
 80008d2:	e000      	b.n	80008d6 <QSPI_Init+0x16>
  }
  return HAL_OK;
 80008d4:	2300      	movs	r3, #0
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	20004948 	.word	0x20004948

080008e0 <QSPI_Erase_Sector4K>:
  * @brief  Erases the specified sector of the QSPI memory.
  * @param  SectorAddress: Block address to erase
  * @retval QSPI memory status
  */
uint8_t QSPI_Erase_Sector4K(uint32_t SectorAddress)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b092      	sub	sp, #72	; 0x48
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  uint8_t reg1[6];

  if (QSPI_WriteEnable() != HAL_OK)
 80008e8:	f000 f90e 	bl	8000b08 <QSPI_WriteEnable>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <QSPI_Erase_Sector4K+0x16>
  {
    return HAL_ERROR;
 80008f2:	2301      	movs	r3, #1
 80008f4:	e030      	b.n	8000958 <QSPI_Erase_Sector4K+0x78>
  }

  /* Initialize the erase command */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80008f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008fa:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction = 0x20; //SUBSECTOR_ERASE_4_BYTE_ADDR_CMD;
 80008fc:	2320      	movs	r3, #32
 80008fe:	613b      	str	r3, [r7, #16]
  s_command.AddressMode = QSPI_ADDRESS_1_LINE;
 8000900:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000904:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressSize = QSPI_ADDRESS_24_BITS; //QSPI_ADDRESS_32_BITS;
 8000906:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800090a:	61fb      	str	r3, [r7, #28]
  s_command.Address = SectorAddress;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	617b      	str	r3, [r7, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000910:	2300      	movs	r3, #0
 8000912:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode = QSPI_DATA_NONE;
 8000914:	2300      	movs	r3, #0
 8000916:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles = 0;
 8000918:	2300      	movs	r3, #0
 800091a:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 800091c:	2300      	movs	r3, #0
 800091e:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000920:	2300      	movs	r3, #0
 8000922:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000924:	2300      	movs	r3, #0
 8000926:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000928:	f107 0310 	add.w	r3, r7, #16
 800092c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000930:	4619      	mov	r1, r3
 8000932:	480b      	ldr	r0, [pc, #44]	; (8000960 <QSPI_Erase_Sector4K+0x80>)
 8000934:	f006 faf2 	bl	8006f1c <HAL_QSPI_Command>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <QSPI_Erase_Sector4K+0x62>
  {
    return HAL_ERROR;
 800093e:	2301      	movs	r3, #1
 8000940:	e00a      	b.n	8000958 <QSPI_Erase_Sector4K+0x78>
  }

  // -------------------------------------------------------------------------------------

  //  if (QSPI_AutoPolling_Erase_in_progress(&hqspi, QSPI_SUBSECTOR_ERASE_MAX_TIME) != HAL_OK)  {    return HAL_ERROR;  }
  if (QSPI_AutoPolling_Write_in_progress(&hqspi, QSPI_SUBSECTOR_ERASE_MAX_TIME) != HAL_OK)
 8000942:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000946:	4806      	ldr	r0, [pc, #24]	; (8000960 <QSPI_Erase_Sector4K+0x80>)
 8000948:	f000 f96a 	bl	8000c20 <QSPI_AutoPolling_Write_in_progress>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <QSPI_Erase_Sector4K+0x76>
  {
    return HAL_ERROR;
 8000952:	2301      	movs	r3, #1
 8000954:	e000      	b.n	8000958 <QSPI_Erase_Sector4K+0x78>
  }

  return HAL_OK;
 8000956:	2300      	movs	r3, #0
}
 8000958:	4618      	mov	r0, r3
 800095a:	3748      	adds	r7, #72	; 0x48
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	20004948 	.word	0x20004948

08000964 <QSPI_Write>:
  * @param  WriteAddr: Write start address
  * @param  Size: Size of data to write
  * @retval QSPI memory status
  */
uint8_t QSPI_Write(uint8_t *pData, uint32_t WriteAddr, uint32_t Size)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b096      	sub	sp, #88	; 0x58
 8000968:	af00      	add	r7, sp, #0
 800096a:	60f8      	str	r0, [r7, #12]
 800096c:	60b9      	str	r1, [r7, #8]
 800096e:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint32_t end_addr = 0, current_size = 0, current_addr = 0;
 8000970:	2300      	movs	r3, #0
 8000972:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000974:	2300      	movs	r3, #0
 8000976:	657b      	str	r3, [r7, #84]	; 0x54
 8000978:	2300      	movs	r3, #0
 800097a:	653b      	str	r3, [r7, #80]	; 0x50
  pData = pData - 1;
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	3b01      	subs	r3, #1
 8000980:	60fb      	str	r3, [r7, #12]
  /* Calculation of the size between the write address and the end of the page */
  current_addr = 0;
 8000982:	2300      	movs	r3, #0
 8000984:	653b      	str	r3, [r7, #80]	; 0x50
  while (current_addr <= WriteAddr)
 8000986:	e003      	b.n	8000990 <QSPI_Write+0x2c>
  {
    current_addr += QSPI_PAGE_SIZE;
 8000988:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800098a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800098e:	653b      	str	r3, [r7, #80]	; 0x50
  while (current_addr <= WriteAddr)
 8000990:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000992:	68bb      	ldr	r3, [r7, #8]
 8000994:	429a      	cmp	r2, r3
 8000996:	d9f7      	bls.n	8000988 <QSPI_Write+0x24>
  }
  current_size = current_addr - WriteAddr;
 8000998:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800099a:	68bb      	ldr	r3, [r7, #8]
 800099c:	1ad3      	subs	r3, r2, r3
 800099e:	657b      	str	r3, [r7, #84]	; 0x54

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 80009a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	d901      	bls.n	80009ac <QSPI_Write+0x48>
  {
    current_size = Size;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	657b      	str	r3, [r7, #84]	; 0x54
  }
  //  wr_time1 = systick_count_up;
  /* Initialize the address variables */
  current_addr = WriteAddr;
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	653b      	str	r3, [r7, #80]	; 0x50
  end_addr = WriteAddr + Size;
 80009b0:	68ba      	ldr	r2, [r7, #8]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4413      	add	r3, r2
 80009b6:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Initialize the program command */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80009b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.Instruction = 0x02; // simple page programm //QPI_PAGE_PROG_4_BYTE_ADDR_CMD;
 80009be:	2302      	movs	r3, #2
 80009c0:	617b      	str	r3, [r7, #20]
  s_command.AddressMode = QSPI_ADDRESS_1_LINE;
 80009c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009c6:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.AddressSize = QSPI_ADDRESS_24_BITS;
 80009c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009cc:	623b      	str	r3, [r7, #32]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80009ce:	2300      	movs	r3, #0
 80009d0:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DataMode = QSPI_DATA_1_LINE;
 80009d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80009d6:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DummyCycles = 0;
 80009d8:	2300      	movs	r3, #0
 80009da:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 80009dc:	2300      	movs	r3, #0
 80009de:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80009e0:	2300      	movs	r3, #0
 80009e2:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80009e4:	2300      	movs	r3, #0
 80009e6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Perform the write page by page */
  do
  {
    /* Enable write operations */
    if (QSPI_WriteEnable() != HAL_OK)
 80009e8:	f000 f88e 	bl	8000b08 <QSPI_WriteEnable>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <QSPI_Write+0x92>
    {
      return HAL_ERROR;
 80009f2:	2301      	movs	r3, #1
 80009f4:	e03f      	b.n	8000a76 <QSPI_Write+0x112>
    }

    /* Configure the command */
    s_command.Address = current_addr;
 80009f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80009f8:	61bb      	str	r3, [r7, #24]
    s_command.NbData = current_size;
 80009fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80009fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80009fe:	f107 0314 	add.w	r3, r7, #20
 8000a02:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a06:	4619      	mov	r1, r3
 8000a08:	481d      	ldr	r0, [pc, #116]	; (8000a80 <QSPI_Write+0x11c>)
 8000a0a:	f006 fa87 	bl	8006f1c <HAL_QSPI_Command>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <QSPI_Write+0xb4>
    {
      return HAL_ERROR;
 8000a14:	2301      	movs	r3, #1
 8000a16:	e02e      	b.n	8000a76 <QSPI_Write+0x112>
    }

    /* Transmission of the data */
    if (HAL_QSPI_Transmit(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000a18:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a1c:	68f9      	ldr	r1, [r7, #12]
 8000a1e:	4818      	ldr	r0, [pc, #96]	; (8000a80 <QSPI_Write+0x11c>)
 8000a20:	f006 fada 	bl	8006fd8 <HAL_QSPI_Transmit>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <QSPI_Write+0xca>
    {
      return HAL_ERROR;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	e023      	b.n	8000a76 <QSPI_Write+0x112>
    }

    if (QSPI_AutoPolling_Write_in_progress(&hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000a2e:	f241 3188 	movw	r1, #5000	; 0x1388
 8000a32:	4813      	ldr	r0, [pc, #76]	; (8000a80 <QSPI_Write+0x11c>)
 8000a34:	f000 f8f4 	bl	8000c20 <QSPI_AutoPolling_Write_in_progress>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <QSPI_Write+0xde>
    {
      return HAL_ERROR;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	e019      	b.n	8000a76 <QSPI_Write+0x112>
    }

    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 8000a42:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000a44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000a46:	4413      	add	r3, r2
 8000a48:	653b      	str	r3, [r7, #80]	; 0x50
    pData += current_size;
 8000a4a:	68fa      	ldr	r2, [r7, #12]
 8000a4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000a4e:	4413      	add	r3, r2
 8000a50:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + QSPI_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : QSPI_PAGE_SIZE;
 8000a52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a54:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000a58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000a5a:	429a      	cmp	r2, r3
 8000a5c:	d203      	bcs.n	8000a66 <QSPI_Write+0x102>
 8000a5e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000a60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a62:	1ad3      	subs	r3, r2, r3
 8000a64:	e001      	b.n	8000a6a <QSPI_Write+0x106>
 8000a66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a6a:	657b      	str	r3, [r7, #84]	; 0x54
  } while (current_addr < end_addr);
 8000a6c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000a6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a70:	429a      	cmp	r2, r3
 8000a72:	d3b9      	bcc.n	80009e8 <QSPI_Write+0x84>

  return HAL_OK;
 8000a74:	2300      	movs	r3, #0
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3758      	adds	r7, #88	; 0x58
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20004948 	.word	0x20004948

08000a84 <QSPI_Read>:
  * @param  ReadAddr: Read start address
  * @param  Size: Size of data to read
  * @retval QSPI memory status
  */
uint8_t QSPI_Read(uint8_t *pData, uint32_t ReadAddr, uint32_t Size)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b092      	sub	sp, #72	; 0x48
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	60f8      	str	r0, [r7, #12]
 8000a8c:	60b9      	str	r1, [r7, #8]
 8000a8e:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the read command */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000a90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a94:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction = 0x03; // simple data read // QPI_READ_4_BYTE_ADDR_CMD; //
 8000a96:	2303      	movs	r3, #3
 8000a98:	613b      	str	r3, [r7, #16]
  s_command.AddressMode = QSPI_ADDRESS_1_LINE;
 8000a9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressSize = QSPI_ADDRESS_24_BITS;
 8000aa0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aa4:	61fb      	str	r3, [r7, #28]
  s_command.Address = ReadAddr;
 8000aa6:	68bb      	ldr	r3, [r7, #8]
 8000aa8:	617b      	str	r3, [r7, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode = QSPI_DATA_1_LINE;
 8000aae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ab2:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles = QSPI_DUMMY_CYCLES_READ;
 8000ab4:	2308      	movs	r3, #8
 8000ab6:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData = Size;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000abc:	2300      	movs	r3, #0
 8000abe:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000ac8:	f107 0310 	add.w	r3, r7, #16
 8000acc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	480c      	ldr	r0, [pc, #48]	; (8000b04 <QSPI_Read+0x80>)
 8000ad4:	f006 fa22 	bl	8006f1c <HAL_QSPI_Command>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <QSPI_Read+0x5e>
  {
    return HAL_ERROR;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	e00b      	b.n	8000afa <QSPI_Read+0x76>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ae6:	68f9      	ldr	r1, [r7, #12]
 8000ae8:	4806      	ldr	r0, [pc, #24]	; (8000b04 <QSPI_Read+0x80>)
 8000aea:	f006 fb07 	bl	80070fc <HAL_QSPI_Receive>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <QSPI_Read+0x74>
  {
    return HAL_ERROR;
 8000af4:	2301      	movs	r3, #1
 8000af6:	e000      	b.n	8000afa <QSPI_Read+0x76>
  }

  return HAL_OK;
 8000af8:	2300      	movs	r3, #0
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3748      	adds	r7, #72	; 0x48
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20004948 	.word	0x20004948

08000b08 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
uint8_t QSPI_WriteEnable(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b094      	sub	sp, #80	; 0x50
 8000b0c:	af00      	add	r7, sp, #0
  QSPI_CommandTypeDef s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000b0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b12:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Instruction = WRITE_ENABLE_CMD; // ok
 8000b14:	2306      	movs	r3, #6
 8000b16:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DataMode = QSPI_DATA_NONE;
 8000b20:	2300      	movs	r3, #0
 8000b22:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DummyCycles = 0;
 8000b24:	2300      	movs	r3, #0
 8000b26:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000b30:	2300      	movs	r3, #0
 8000b32:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000b34:	f107 0318 	add.w	r3, r7, #24
 8000b38:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4816      	ldr	r0, [pc, #88]	; (8000b98 <QSPI_WriteEnable+0x90>)
 8000b40:	f006 f9ec 	bl	8006f1c <HAL_QSPI_Command>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <QSPI_WriteEnable+0x46>
  {
    return HAL_ERROR;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	e01f      	b.n	8000b8e <QSPI_WriteEnable+0x86>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match = QSPI_SR_WREN;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	603b      	str	r3, [r7, #0]
  s_config.Mask = QSPI_SR_WREN;
 8000b52:	2302      	movs	r3, #2
 8000b54:	607b      	str	r3, [r7, #4]
  s_config.MatchMode = QSPI_MATCH_MODE_AND;
 8000b56:	2300      	movs	r3, #0
 8000b58:	613b      	str	r3, [r7, #16]
  s_config.StatusBytesSize = 1;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	60fb      	str	r3, [r7, #12]
  s_config.Interval = 1;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	60bb      	str	r3, [r7, #8]
  s_config.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8000b62:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b66:	617b      	str	r3, [r7, #20]

  s_command.Instruction = READ_STATUS_REG_CMD;
 8000b68:	2305      	movs	r3, #5
 8000b6a:	61bb      	str	r3, [r7, #24]
  s_command.DataMode = QSPI_DATA_1_LINE;
 8000b6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b70:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_QSPI_AutoPolling(&hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000b72:	463a      	mov	r2, r7
 8000b74:	f107 0118 	add.w	r1, r7, #24
 8000b78:	f241 3388 	movw	r3, #5000	; 0x1388
 8000b7c:	4806      	ldr	r0, [pc, #24]	; (8000b98 <QSPI_WriteEnable+0x90>)
 8000b7e:	f006 fb5a 	bl	8007236 <HAL_QSPI_AutoPolling>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <QSPI_WriteEnable+0x84>
  {
    return HAL_ERROR;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	e000      	b.n	8000b8e <QSPI_WriteEnable+0x86>
  }

  return HAL_OK;
 8000b8c:	2300      	movs	r3, #0
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3750      	adds	r7, #80	; 0x50
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20004948 	.word	0x20004948

08000b9c <QSPI_READMD>:

uint8_t QSPI_READMD(uint8_t *Mid, uint8_t *Did)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b098      	sub	sp, #96	; 0x60
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000ba6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000baa:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction = 0x90; // ok
 8000bac:	2390      	movs	r3, #144	; 0x90
 8000bae:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataMode = QSPI_DATA_1_LINE;
 8000bb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000bbc:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DummyCycles = 0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.NbData = 5;
 8000bc2:	2305      	movs	r3, #5
 8000bc4:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000bd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8000bda:	4619      	mov	r1, r3
 8000bdc:	480f      	ldr	r0, [pc, #60]	; (8000c1c <QSPI_READMD+0x80>)
 8000bde:	f006 f99d 	bl	8006f1c <HAL_QSPI_Command>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <QSPI_READMD+0x50>
  {
    return HAL_ERROR;
 8000be8:	2301      	movs	r3, #1
 8000bea:	e013      	b.n	8000c14 <QSPI_READMD+0x78>
  }


 uint8_t reg2[6] = {0};
 8000bec:	f107 0308 	add.w	r3, r7, #8
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	809a      	strh	r2, [r3, #4]
 HAL_QSPI_Receive(&hqspi, &(reg2), HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 8000bf6:	f107 0308 	add.w	r3, r7, #8
 8000bfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4806      	ldr	r0, [pc, #24]	; (8000c1c <QSPI_READMD+0x80>)
 8000c02:	f006 fa7b 	bl	80070fc <HAL_QSPI_Receive>
 *Mid = reg2[3];
 8000c06:	7afa      	ldrb	r2, [r7, #11]
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	701a      	strb	r2, [r3, #0]
 *Did = reg2[4];
 8000c0c:	7b3a      	ldrb	r2, [r7, #12]
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	701a      	strb	r2, [r3, #0]
//  HAL_QSPI_Receive(&hqspi, &(reg2[2]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
//  HAL_QSPI_Receive(&hqspi, &(reg2[3]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
//  HAL_QSPI_Receive(&hqspi, &(reg2[4]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
//  HAL_QSPI_Receive(&hqspi, &(reg2[5]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE);

  return HAL_OK;
 8000c12:	2300      	movs	r3, #0
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	3760      	adds	r7, #96	; 0x60
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	20004948 	.word	0x20004948

08000c20 <QSPI_AutoPolling_Write_in_progress>:
  * @param  hqspi: QSPI handle
  * @param  Timeout
  * @retval None
  */
uint8_t QSPI_AutoPolling_Write_in_progress(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b096      	sub	sp, #88	; 0x58
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000c2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c2e:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction = READ_STATUS_REG_CMD;
 8000c30:	2305      	movs	r3, #5
 8000c32:	623b      	str	r3, [r7, #32]
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 8000c34:	2300      	movs	r3, #0
 8000c36:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode = QSPI_DATA_1_LINE;
 8000c3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c40:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles = 0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000c46:	2300      	movs	r3, #0
 8000c48:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	657b      	str	r3, [r7, #84]	; 0x54

  s_config.Match = 0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	60bb      	str	r3, [r7, #8]
  //  s_config.Mask            = QSPI_SR_WIP;
  s_config.Mask = QSPI_SR_WIP; /*!< Write in progress */
 8000c56:	2301      	movs	r3, #1
 8000c58:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode = QSPI_MATCH_MODE_AND;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	617b      	str	r3, [r7, #20]
  s_config.Interval = 1; //0x10;
 8000c62:	2301      	movs	r3, #1
 8000c64:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8000c66:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c6a:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8000c6c:	f107 0208 	add.w	r2, r7, #8
 8000c70:	f107 0120 	add.w	r1, r7, #32
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	6878      	ldr	r0, [r7, #4]
 8000c78:	f006 fadd 	bl	8007236 <HAL_QSPI_AutoPolling>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <QSPI_AutoPolling_Write_in_progress+0x66>
  {
    return HAL_ERROR;
 8000c82:	2301      	movs	r3, #1
 8000c84:	e000      	b.n	8000c88 <QSPI_AutoPolling_Write_in_progress+0x68>
  }

  return HAL_OK;
 8000c86:	2300      	movs	r3, #0
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3758      	adds	r7, #88	; 0x58
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <QSPI_Read_Status_registers>:
  return HAL_OK;
}

// Read Status Register-1 (05h), Status Register-2 (35h) & Status Register-3 (15h)
uint8_t QSPI_Read_Status_registers(QSPI_HandleTypeDef *hqspi, uint16_t *R1, uint16_t *R2, uint16_t *R3)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b098      	sub	sp, #96	; 0x60
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	60f8      	str	r0, [r7, #12]
 8000c98:	60b9      	str	r1, [r7, #8]
 8000c9a:	607a      	str	r2, [r7, #4]
 8000c9c:	603b      	str	r3, [r7, #0]
  uint8_t reg1[6];
  uint8_t reg2[6];
  uint8_t reg3[6];

  /* Initialize the reading of status register */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE; //QSPI_INSTRUCTION_4_LINES;
 8000c9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ca2:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction = 0x05;
 8000ca4:	2305      	movs	r3, #5
 8000ca6:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000cac:	2300      	movs	r3, #0
 8000cae:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataMode = QSPI_DATA_1_LINE; // QSPI_DATA_4_LINES;
 8000cb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000cb4:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DummyCycles = 0;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.NbData = 1;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000cca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cce:	f241 3288 	movw	r2, #5000	; 0x1388
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	68f8      	ldr	r0, [r7, #12]
 8000cd6:	f006 f921 	bl	8006f1c <HAL_QSPI_Command>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <QSPI_Read_Status_registers+0x54>
  {
    return HAL_ERROR;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	e079      	b.n	8000dd8 <QSPI_Read_Status_registers+0x148>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, (uint8_t *)reg1, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000ce4:	f107 0320 	add.w	r3, r7, #32
 8000ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000cec:	4619      	mov	r1, r3
 8000cee:	68f8      	ldr	r0, [r7, #12]
 8000cf0:	f006 fa04 	bl	80070fc <HAL_QSPI_Receive>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <QSPI_Read_Status_registers+0x6e>
  {
    return HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e06c      	b.n	8000dd8 <QSPI_Read_Status_registers+0x148>
  }
  *R1 = reg1[0];
 8000cfe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d02:	b29a      	uxth	r2, r3
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	801a      	strh	r2, [r3, #0]
  /* Initialize the reading of status register */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE; //QSPI_INSTRUCTION_4_LINES;
 8000d08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d0c:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction = 0x35;
 8000d0e:	2335      	movs	r3, #53	; 0x35
 8000d10:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 8000d12:	2300      	movs	r3, #0
 8000d14:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000d16:	2300      	movs	r3, #0
 8000d18:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataMode = QSPI_DATA_1_LINE; // QSPI_DATA_4_LINES;
 8000d1a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DummyCycles = 0;
 8000d20:	2300      	movs	r3, #0
 8000d22:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.NbData = 1;
 8000d24:	2301      	movs	r3, #1
 8000d26:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000d30:	2300      	movs	r3, #0
 8000d32:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000d34:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d38:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	68f8      	ldr	r0, [r7, #12]
 8000d40:	f006 f8ec 	bl	8006f1c <HAL_QSPI_Command>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <QSPI_Read_Status_registers+0xbe>
  {
    return HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e044      	b.n	8000dd8 <QSPI_Read_Status_registers+0x148>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, (uint8_t *)reg2, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000d4e:	f107 0318 	add.w	r3, r7, #24
 8000d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d56:	4619      	mov	r1, r3
 8000d58:	68f8      	ldr	r0, [r7, #12]
 8000d5a:	f006 f9cf 	bl	80070fc <HAL_QSPI_Receive>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <QSPI_Read_Status_registers+0xd8>
  {
    return HAL_ERROR;
 8000d64:	2301      	movs	r3, #1
 8000d66:	e037      	b.n	8000dd8 <QSPI_Read_Status_registers+0x148>
  }
  *R2 = reg2[0];
 8000d68:	7e3b      	ldrb	r3, [r7, #24]
 8000d6a:	b29a      	uxth	r2, r3
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	801a      	strh	r2, [r3, #0]
  /* Initialize the reading of status register */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE; //QSPI_INSTRUCTION_4_LINES;
 8000d70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d74:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction = 0x15;
 8000d76:	2315      	movs	r3, #21
 8000d78:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataMode = QSPI_DATA_1_LINE; // QSPI_DATA_4_LINES;
 8000d82:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d86:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DummyCycles = 0;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.NbData = 1;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000d90:	2300      	movs	r3, #0
 8000d92:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000d94:	2300      	movs	r3, #0
 8000d96:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000d9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000da0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000da4:	4619      	mov	r1, r3
 8000da6:	68f8      	ldr	r0, [r7, #12]
 8000da8:	f006 f8b8 	bl	8006f1c <HAL_QSPI_Command>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <QSPI_Read_Status_registers+0x126>
  {
    return HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
 8000db4:	e010      	b.n	8000dd8 <QSPI_Read_Status_registers+0x148>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, (uint8_t *)reg3, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000db6:	f107 0310 	add.w	r3, r7, #16
 8000dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	68f8      	ldr	r0, [r7, #12]
 8000dc2:	f006 f99b 	bl	80070fc <HAL_QSPI_Receive>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <QSPI_Read_Status_registers+0x140>
  {
    return HAL_ERROR;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	e003      	b.n	8000dd8 <QSPI_Read_Status_registers+0x148>
  }
  *R3 = reg3[0];
 8000dd0:	7c3b      	ldrb	r3, [r7, #16]
 8000dd2:	b29a      	uxth	r2, r3
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	801a      	strh	r2, [r3, #0]
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3760      	adds	r7, #96	; 0x60
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <QSPI_Reset_Status_registers>:

// Reset Status Register-1 (05h), Status Register-2 (35h) & Status Register-3 (15h)
uint8_t QSPI_Reset_Status_registers(QSPI_HandleTypeDef *hqspi, uint16_t *R1, uint16_t *R2, uint16_t *R3)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b092      	sub	sp, #72	; 0x48
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
 8000dec:	603b      	str	r3, [r7, #0]
  QSPI_CommandTypeDef s_command;

  QSPI_WriteEnable();
 8000dee:	f7ff fe8b 	bl	8000b08 <QSPI_WriteEnable>

  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE; //QSPI_INSTRUCTION_4_LINES;
 8000df2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000df6:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction = 0x01;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	613b      	str	r3, [r7, #16]
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000e00:	2300      	movs	r3, #0
 8000e02:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode = QSPI_DATA_1_LINE; // QSPI_DATA_4_LINES;
 8000e04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e08:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles = 0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData = 1;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000e12:	2300      	movs	r3, #0
 8000e14:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000e16:	2300      	movs	r3, #0
 8000e18:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000e1e:	f107 0310 	add.w	r3, r7, #16
 8000e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e26:	4619      	mov	r1, r3
 8000e28:	68f8      	ldr	r0, [r7, #12]
 8000e2a:	f006 f877 	bl	8006f1c <HAL_QSPI_Command>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <QSPI_Reset_Status_registers+0x58>
  {
    return HAL_ERROR;
 8000e34:	2301      	movs	r3, #1
 8000e36:	e06a      	b.n	8000f0e <QSPI_Reset_Status_registers+0x12e>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, (uint8_t *)R1, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000e38:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e3c:	68b9      	ldr	r1, [r7, #8]
 8000e3e:	68f8      	ldr	r0, [r7, #12]
 8000e40:	f006 f8ca 	bl	8006fd8 <HAL_QSPI_Transmit>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <QSPI_Reset_Status_registers+0x6e>
  {
    return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e05f      	b.n	8000f0e <QSPI_Reset_Status_registers+0x12e>
  }

  QSPI_WriteEnable();
 8000e4e:	f7ff fe5b 	bl	8000b08 <QSPI_WriteEnable>

  /* Initialize the reading of status register */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE; //QSPI_INSTRUCTION_4_LINES;
 8000e52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e56:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction = 0x31;
 8000e58:	2331      	movs	r3, #49	; 0x31
 8000e5a:	613b      	str	r3, [r7, #16]
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000e60:	2300      	movs	r3, #0
 8000e62:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode = QSPI_DATA_1_LINE; // QSPI_DATA_4_LINES;
 8000e64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e68:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles = 0;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData = 1;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000e72:	2300      	movs	r3, #0
 8000e74:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000e76:	2300      	movs	r3, #0
 8000e78:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000e7e:	f107 0310 	add.w	r3, r7, #16
 8000e82:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e86:	4619      	mov	r1, r3
 8000e88:	68f8      	ldr	r0, [r7, #12]
 8000e8a:	f006 f847 	bl	8006f1c <HAL_QSPI_Command>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <QSPI_Reset_Status_registers+0xb8>
  {
    return HAL_ERROR;
 8000e94:	2301      	movs	r3, #1
 8000e96:	e03a      	b.n	8000f0e <QSPI_Reset_Status_registers+0x12e>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, (uint8_t *)R2, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000e98:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e9c:	6879      	ldr	r1, [r7, #4]
 8000e9e:	68f8      	ldr	r0, [r7, #12]
 8000ea0:	f006 f89a 	bl	8006fd8 <HAL_QSPI_Transmit>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <QSPI_Reset_Status_registers+0xce>
  {
    return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e02f      	b.n	8000f0e <QSPI_Reset_Status_registers+0x12e>
  }

  QSPI_WriteEnable();
 8000eae:	f7ff fe2b 	bl	8000b08 <QSPI_WriteEnable>

  /* Initialize the reading of status register */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE; //QSPI_INSTRUCTION_4_LINES;
 8000eb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000eb6:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction = 0x11;
 8000eb8:	2311      	movs	r3, #17
 8000eba:	613b      	str	r3, [r7, #16]
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode = QSPI_DATA_1_LINE; // QSPI_DATA_4_LINES;
 8000ec4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ec8:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles = 0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData = 1;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000eda:	2300      	movs	r3, #0
 8000edc:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000ede:	f107 0310 	add.w	r3, r7, #16
 8000ee2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	68f8      	ldr	r0, [r7, #12]
 8000eea:	f006 f817 	bl	8006f1c <HAL_QSPI_Command>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <QSPI_Reset_Status_registers+0x118>
  {
    return HAL_ERROR;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e00a      	b.n	8000f0e <QSPI_Reset_Status_registers+0x12e>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, (uint8_t *)R3, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000ef8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000efc:	6839      	ldr	r1, [r7, #0]
 8000efe:	68f8      	ldr	r0, [r7, #12]
 8000f00:	f006 f86a 	bl	8006fd8 <HAL_QSPI_Transmit>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <QSPI_Reset_Status_registers+0x12e>
  {
    return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e7ff      	b.n	8000f0e <QSPI_Reset_Status_registers+0x12e>
  }
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3748      	adds	r7, #72	; 0x48
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <QSPI_DummyCyclesCfg>:
  * @brief  This function configure the dummy cycles on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
uint8_t QSPI_DummyCyclesCfg(QSPI_HandleTypeDef *hqspi)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b094      	sub	sp, #80	; 0x50
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint8_t reg[2];

  /* Initialize the reading of status register */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE; //QSPI_INSTRUCTION_4_LINES;
 8000f1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f22:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction = READ_STATUS_REG_CMD;
 8000f24:	2305      	movs	r3, #5
 8000f26:	613b      	str	r3, [r7, #16]
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode = QSPI_DATA_1_LINE; // QSPI_DATA_4_LINES;
 8000f30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f34:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles = 0;
 8000f36:	2300      	movs	r3, #0
 8000f38:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData = 1;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000f42:	2300      	movs	r3, #0
 8000f44:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000f46:	2300      	movs	r3, #0
 8000f48:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000f4a:	f107 0310 	add.w	r3, r7, #16
 8000f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f52:	4619      	mov	r1, r3
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f005 ffe1 	bl	8006f1c <HAL_QSPI_Command>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <QSPI_DummyCyclesCfg+0x4e>
  {
    return HAL_ERROR;
 8000f60:	2301      	movs	r3, #1
 8000f62:	e08f      	b.n	8001084 <QSPI_DummyCyclesCfg+0x16e>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000f64:	f107 030c 	add.w	r3, r7, #12
 8000f68:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f006 f8c4 	bl	80070fc <HAL_QSPI_Receive>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <QSPI_DummyCyclesCfg+0x68>
  {
    return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e082      	b.n	8001084 <QSPI_DummyCyclesCfg+0x16e>
  }

  /* Initialize the reading of configuration register */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000f7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f82:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction = READ_CFG_REG_CMD;
 8000f84:	2315      	movs	r3, #21
 8000f86:	613b      	str	r3, [r7, #16]
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode = QSPI_DATA_1_LINE;
 8000f90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f94:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles = 0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData = 1;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000faa:	f107 0310 	add.w	r3, r7, #16
 8000fae:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f005 ffb1 	bl	8006f1c <HAL_QSPI_Command>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <QSPI_DummyCyclesCfg+0xae>
  {
    return HAL_ERROR;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	e05f      	b.n	8001084 <QSPI_DummyCyclesCfg+0x16e>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000fc4:	f107 030c 	add.w	r3, r7, #12
 8000fc8:	3301      	adds	r3, #1
 8000fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fce:	4619      	mov	r1, r3
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f006 f893 	bl	80070fc <HAL_QSPI_Receive>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <QSPI_DummyCyclesCfg+0xca>
  {
    return HAL_ERROR;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e051      	b.n	8001084 <QSPI_DummyCyclesCfg+0x16e>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable() != HAL_OK)
 8000fe0:	f7ff fd92 	bl	8000b08 <QSPI_WriteEnable>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <QSPI_DummyCyclesCfg+0xd8>
  {
    return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e04a      	b.n	8001084 <QSPI_DummyCyclesCfg+0x16e>
  }

  /* Update the configuration register with new dummy cycles */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000fee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ff2:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction = WRITE_STATUS_CFG_REG_CMD;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	613b      	str	r3, [r7, #16]
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode = QSPI_DATA_1_LINE;
 8001000:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001004:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles = 0;
 8001006:	2300      	movs	r3, #0
 8001008:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData = 2;
 800100a:	2302      	movs	r3, #2
 800100c:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 800100e:	2300      	movs	r3, #0
 8001010:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001012:	2300      	movs	r3, #0
 8001014:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001016:	2300      	movs	r3, #0
 8001018:	647b      	str	r3, [r7, #68]	; 0x44

  /* QSPI_DUMMY_CYCLES_READ_QUAD = 3 for 10 cycles in QPI mode */
  //  MODIFY_REG( reg[1], QSPI_CR_NB_DUMMY, (QSPI_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(QSPI_CR_NB_DUMMY)));
  MODIFY_REG(reg[1], QSPI_CR_NB_DUMMY, (QSPI_DUMMY_CYCLES_READ << POSITION_VAL(QSPI_CR_NB_DUMMY)));
 800101a:	7b7b      	ldrb	r3, [r7, #13]
 800101c:	b25b      	sxtb	r3, r3
 800101e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001022:	b25a      	sxtb	r2, r3
 8001024:	23c0      	movs	r3, #192	; 0xc0
 8001026:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001028:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800102a:	fa93 f3a3 	rbit	r3, r3
 800102e:	64bb      	str	r3, [r7, #72]	; 0x48
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001030:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001032:	fab3 f383 	clz	r3, r3
 8001036:	b2db      	uxtb	r3, r3
 8001038:	4619      	mov	r1, r3
 800103a:	2308      	movs	r3, #8
 800103c:	408b      	lsls	r3, r1
 800103e:	b25b      	sxtb	r3, r3
 8001040:	4313      	orrs	r3, r2
 8001042:	b25b      	sxtb	r3, r3
 8001044:	b2db      	uxtb	r3, r3
 8001046:	737b      	strb	r3, [r7, #13]

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001048:	f107 0310 	add.w	r3, r7, #16
 800104c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001050:	4619      	mov	r1, r3
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f005 ff62 	bl	8006f1c <HAL_QSPI_Command>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <QSPI_DummyCyclesCfg+0x14c>
  {
    return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e010      	b.n	8001084 <QSPI_DummyCyclesCfg+0x16e>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001062:	f107 030c 	add.w	r3, r7, #12
 8001066:	f241 3288 	movw	r2, #5000	; 0x1388
 800106a:	4619      	mov	r1, r3
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f005 ffb3 	bl	8006fd8 <HAL_QSPI_Transmit>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <QSPI_DummyCyclesCfg+0x166>
  {
    return HAL_ERROR;
 8001078:	2301      	movs	r3, #1
 800107a:	e003      	b.n	8001084 <QSPI_DummyCyclesCfg+0x16e>
  }

  /* 40ms  Write Status/Configuration Register Cycle Time */
  HAL_Delay(40);
 800107c:	2028      	movs	r0, #40	; 0x28
 800107e:	f002 ffb3 	bl	8003fe8 <HAL_Delay>

  return HAL_OK;
 8001082:	2300      	movs	r3, #0
}
 8001084:	4618      	mov	r0, r3
 8001086:	3750      	adds	r7, #80	; 0x50
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <led_init>:
 */

#include "main.h"

void led_init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2); //Red LED
 8001090:	2104      	movs	r1, #4
 8001092:	4806      	ldr	r0, [pc, #24]	; (80010ac <led_init+0x20>)
 8001094:	f008 fd9c 	bl	8009bd0 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); //Green LED
 8001098:	2100      	movs	r1, #0
 800109a:	4804      	ldr	r0, [pc, #16]	; (80010ac <led_init+0x20>)
 800109c:	f008 fd98 	bl	8009bd0 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); //Blue LED
 80010a0:	210c      	movs	r1, #12
 80010a2:	4802      	ldr	r0, [pc, #8]	; (80010ac <led_init+0x20>)
 80010a4:	f008 fd94 	bl	8009bd0 <HAL_TIM_PWM_Start>
}
 80010a8:	bf00      	nop
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20004430 	.word	0x20004430

080010b0 <SetRGB>:
	  HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_4); //Blue LED
}

// Input: 0 to 250
void SetRGB(int Red, int Green, int Blue)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	607a      	str	r2, [r7, #4]
	//  SetRGB(250, 0, 0); // Red
	//  SetRGB(0, 250, 0); // Green
	//  SetRGB(0, 0, 250); // Blue
	//  SetRGB(250, 250, 0);// Yellow
	TIM4->CCR2 = Red * 8000 / 250;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80010c2:	fb02 f303 	mul.w	r3, r2, r3
 80010c6:	4a14      	ldr	r2, [pc, #80]	; (8001118 <SetRGB+0x68>)
 80010c8:	fb82 1203 	smull	r1, r2, r2, r3
 80010cc:	1112      	asrs	r2, r2, #4
 80010ce:	17db      	asrs	r3, r3, #31
 80010d0:	1ad2      	subs	r2, r2, r3
 80010d2:	4b12      	ldr	r3, [pc, #72]	; (800111c <SetRGB+0x6c>)
 80010d4:	639a      	str	r2, [r3, #56]	; 0x38
	TIM4->CCR1 = Green * 8000 / 250;
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80010dc:	fb02 f303 	mul.w	r3, r2, r3
 80010e0:	4a0d      	ldr	r2, [pc, #52]	; (8001118 <SetRGB+0x68>)
 80010e2:	fb82 1203 	smull	r1, r2, r2, r3
 80010e6:	1112      	asrs	r2, r2, #4
 80010e8:	17db      	asrs	r3, r3, #31
 80010ea:	1ad2      	subs	r2, r2, r3
 80010ec:	4b0b      	ldr	r3, [pc, #44]	; (800111c <SetRGB+0x6c>)
 80010ee:	635a      	str	r2, [r3, #52]	; 0x34
	TIM4->CCR4 = Blue * 8000 / 250;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80010f6:	fb02 f303 	mul.w	r3, r2, r3
 80010fa:	4a07      	ldr	r2, [pc, #28]	; (8001118 <SetRGB+0x68>)
 80010fc:	fb82 1203 	smull	r1, r2, r2, r3
 8001100:	1112      	asrs	r2, r2, #4
 8001102:	17db      	asrs	r3, r3, #31
 8001104:	1ad2      	subs	r2, r2, r3
 8001106:	4b05      	ldr	r3, [pc, #20]	; (800111c <SetRGB+0x6c>)
 8001108:	641a      	str	r2, [r3, #64]	; 0x40
}
 800110a:	bf00      	nop
 800110c:	3714      	adds	r7, #20
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	10624dd3 	.word	0x10624dd3
 800111c:	40000800 	.word	0x40000800

08001120 <ParseRFMessage>:

uint8_t GeneralHeader[8] = {'A','B','5','6','F','E','2','1'};
uint8_t LocalUART5RXArray[256] = {0};

uint8_t ParseRFMessage(uint8_t *Angle, uint8_t *Power)
{
 8001120:	b590      	push	{r4, r7, lr}
 8001122:	b091      	sub	sp, #68	; 0x44
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
//	AB56FE21,7,20580,#0,90!~
	int ret = 0;
 800112a:	2300      	movs	r3, #0
 800112c:	617b      	str	r3, [r7, #20]
	int HeaderStartIndex = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	613b      	str	r3, [r7, #16]
	int HeaderStopIndex = 0;
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
	int MessageEndIndex = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	63fb      	str	r3, [r7, #60]	; 0x3c
	int HashTagIndex = 0;
 800113a:	2300      	movs	r3, #0
 800113c:	63bb      	str	r3, [r7, #56]	; 0x38
	int CommaIndex = 0;
 800113e:	2300      	movs	r3, #0
 8001140:	637b      	str	r3, [r7, #52]	; 0x34
	int LocalCounter = 0;
 8001142:	2300      	movs	r3, #0
 8001144:	633b      	str	r3, [r7, #48]	; 0x30
	bool HeaderFound = false;
 8001146:	2300      	movs	r3, #0
 8001148:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	bool MessageEndFound = false;
 800114c:	2300      	movs	r3, #0
 800114e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	bool HashFound = false;
 8001152:	2300      	movs	r3, #0
 8001154:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	bool CommaFound = false;
 8001158:	2300      	movs	r3, #0
 800115a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	*Angle = 90;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	225a      	movs	r2, #90	; 0x5a
 8001162:	701a      	strb	r2, [r3, #0]
	*Power = 0;
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	2200      	movs	r2, #0
 8001168:	701a      	strb	r2, [r3, #0]
	if (strlen(UART5RXArray) > strlen(GeneralHeader))
 800116a:	4889      	ldr	r0, [pc, #548]	; (8001390 <ParseRFMessage+0x270>)
 800116c:	f7ff f872 	bl	8000254 <strlen>
 8001170:	4604      	mov	r4, r0
 8001172:	4888      	ldr	r0, [pc, #544]	; (8001394 <ParseRFMessage+0x274>)
 8001174:	f7ff f86e 	bl	8000254 <strlen>
 8001178:	4603      	mov	r3, r0
 800117a:	429c      	cmp	r4, r3
 800117c:	d94a      	bls.n	8001214 <ParseRFMessage+0xf4>
	{
		for (int i = 0 ; i< strlen(UART5RXArray) - strlen(GeneralHeader); i++ )
 800117e:	2300      	movs	r3, #0
 8001180:	62bb      	str	r3, [r7, #40]	; 0x28
 8001182:	e039      	b.n	80011f8 <ParseRFMessage+0xd8>
		{
			if (HeaderFound)
 8001184:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001188:	2b00      	cmp	r3, #0
 800118a:	d142      	bne.n	8001212 <ParseRFMessage+0xf2>
			{
				break;
			}
			for (int j = 0; j < strlen(GeneralHeader); j++)
 800118c:	2300      	movs	r3, #0
 800118e:	627b      	str	r3, [r7, #36]	; 0x24
 8001190:	e028      	b.n	80011e4 <ParseRFMessage+0xc4>
			{
				if (GeneralHeader[j] == UART5RXArray[j+i])
 8001192:	4a80      	ldr	r2, [pc, #512]	; (8001394 <ParseRFMessage+0x274>)
 8001194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001196:	4413      	add	r3, r2
 8001198:	781a      	ldrb	r2, [r3, #0]
 800119a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800119c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800119e:	440b      	add	r3, r1
 80011a0:	497b      	ldr	r1, [pc, #492]	; (8001390 <ParseRFMessage+0x270>)
 80011a2:	5ccb      	ldrb	r3, [r1, r3]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d10a      	bne.n	80011be <ParseRFMessage+0x9e>
				{
					LocalCounter++;
 80011a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011aa:	3301      	adds	r3, #1
 80011ac:	633b      	str	r3, [r7, #48]	; 0x30
				else
				{
					LocalCounter = 0;
					break;
				}
				if (strlen(GeneralHeader) == LocalCounter)
 80011ae:	4879      	ldr	r0, [pc, #484]	; (8001394 <ParseRFMessage+0x274>)
 80011b0:	f7ff f850 	bl	8000254 <strlen>
 80011b4:	4602      	mov	r2, r0
 80011b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d110      	bne.n	80011de <ParseRFMessage+0xbe>
 80011bc:	e002      	b.n	80011c4 <ParseRFMessage+0xa4>
					LocalCounter = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	633b      	str	r3, [r7, #48]	; 0x30
					break;
 80011c2:	e016      	b.n	80011f2 <ParseRFMessage+0xd2>
				{
					HeaderStartIndex = i;
 80011c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011c6:	613b      	str	r3, [r7, #16]
					HeaderStopIndex = i + strlen(GeneralHeader);
 80011c8:	4872      	ldr	r0, [pc, #456]	; (8001394 <ParseRFMessage+0x274>)
 80011ca:	f7ff f843 	bl	8000254 <strlen>
 80011ce:	4602      	mov	r2, r0
 80011d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011d2:	4413      	add	r3, r2
 80011d4:	60fb      	str	r3, [r7, #12]
					HeaderFound = true;
 80011d6:	2301      	movs	r3, #1
 80011d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					continue;
 80011dc:	bf00      	nop
			for (int j = 0; j < strlen(GeneralHeader); j++)
 80011de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e0:	3301      	adds	r3, #1
 80011e2:	627b      	str	r3, [r7, #36]	; 0x24
 80011e4:	486b      	ldr	r0, [pc, #428]	; (8001394 <ParseRFMessage+0x274>)
 80011e6:	f7ff f835 	bl	8000254 <strlen>
 80011ea:	4602      	mov	r2, r0
 80011ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d8cf      	bhi.n	8001192 <ParseRFMessage+0x72>
		for (int i = 0 ; i< strlen(UART5RXArray) - strlen(GeneralHeader); i++ )
 80011f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011f4:	3301      	adds	r3, #1
 80011f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80011f8:	4865      	ldr	r0, [pc, #404]	; (8001390 <ParseRFMessage+0x270>)
 80011fa:	f7ff f82b 	bl	8000254 <strlen>
 80011fe:	4604      	mov	r4, r0
 8001200:	4864      	ldr	r0, [pc, #400]	; (8001394 <ParseRFMessage+0x274>)
 8001202:	f7ff f827 	bl	8000254 <strlen>
 8001206:	4603      	mov	r3, r0
 8001208:	1ae2      	subs	r2, r4, r3
 800120a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800120c:	429a      	cmp	r2, r3
 800120e:	d8b9      	bhi.n	8001184 <ParseRFMessage+0x64>
 8001210:	e000      	b.n	8001214 <ParseRFMessage+0xf4>
				break;
 8001212:	bf00      	nop
			}
		}
	}


	if (HeaderFound)
 8001214:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001218:	2b00      	cmp	r3, #0
 800121a:	d04a      	beq.n	80012b2 <ParseRFMessage+0x192>
	{
		for (int i = 0 ; i< strlen(UART5RXArray); i++ )
 800121c:	2300      	movs	r3, #0
 800121e:	623b      	str	r3, [r7, #32]
 8001220:	e040      	b.n	80012a4 <ParseRFMessage+0x184>
		{
			if ( (UART5RXArray[i] == '#') && (!HashFound) )
 8001222:	4a5b      	ldr	r2, [pc, #364]	; (8001390 <ParseRFMessage+0x270>)
 8001224:	6a3b      	ldr	r3, [r7, #32]
 8001226:	4413      	add	r3, r2
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	2b23      	cmp	r3, #35	; 0x23
 800122c:	d10b      	bne.n	8001246 <ParseRFMessage+0x126>
 800122e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001232:	f083 0301 	eor.w	r3, r3, #1
 8001236:	b2db      	uxtb	r3, r3
 8001238:	2b00      	cmp	r3, #0
 800123a:	d004      	beq.n	8001246 <ParseRFMessage+0x126>
			{
				HashFound = true;
 800123c:	2301      	movs	r3, #1
 800123e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				HashTagIndex = i;
 8001242:	6a3b      	ldr	r3, [r7, #32]
 8001244:	63bb      	str	r3, [r7, #56]	; 0x38
			}
			if ( (UART5RXArray[i] == ',') && (HashFound) && (!CommaFound))
 8001246:	4a52      	ldr	r2, [pc, #328]	; (8001390 <ParseRFMessage+0x270>)
 8001248:	6a3b      	ldr	r3, [r7, #32]
 800124a:	4413      	add	r3, r2
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	2b2c      	cmp	r3, #44	; 0x2c
 8001250:	d10f      	bne.n	8001272 <ParseRFMessage+0x152>
 8001252:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001256:	2b00      	cmp	r3, #0
 8001258:	d00b      	beq.n	8001272 <ParseRFMessage+0x152>
 800125a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800125e:	f083 0301 	eor.w	r3, r3, #1
 8001262:	b2db      	uxtb	r3, r3
 8001264:	2b00      	cmp	r3, #0
 8001266:	d004      	beq.n	8001272 <ParseRFMessage+0x152>
			{
				CommaFound = true;
 8001268:	2301      	movs	r3, #1
 800126a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				CommaIndex = i;
 800126e:	6a3b      	ldr	r3, [r7, #32]
 8001270:	637b      	str	r3, [r7, #52]	; 0x34
			}
			if ( (UART5RXArray[i] == '!') && (CommaFound) && (!MessageEndFound) )
 8001272:	4a47      	ldr	r2, [pc, #284]	; (8001390 <ParseRFMessage+0x270>)
 8001274:	6a3b      	ldr	r3, [r7, #32]
 8001276:	4413      	add	r3, r2
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b21      	cmp	r3, #33	; 0x21
 800127c:	d10f      	bne.n	800129e <ParseRFMessage+0x17e>
 800127e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001282:	2b00      	cmp	r3, #0
 8001284:	d00b      	beq.n	800129e <ParseRFMessage+0x17e>
 8001286:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800128a:	f083 0301 	eor.w	r3, r3, #1
 800128e:	b2db      	uxtb	r3, r3
 8001290:	2b00      	cmp	r3, #0
 8001292:	d004      	beq.n	800129e <ParseRFMessage+0x17e>
			{
				MessageEndFound = true;
 8001294:	2301      	movs	r3, #1
 8001296:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				MessageEndIndex = i;
 800129a:	6a3b      	ldr	r3, [r7, #32]
 800129c:	63fb      	str	r3, [r7, #60]	; 0x3c
		for (int i = 0 ; i< strlen(UART5RXArray); i++ )
 800129e:	6a3b      	ldr	r3, [r7, #32]
 80012a0:	3301      	adds	r3, #1
 80012a2:	623b      	str	r3, [r7, #32]
 80012a4:	483a      	ldr	r0, [pc, #232]	; (8001390 <ParseRFMessage+0x270>)
 80012a6:	f7fe ffd5 	bl	8000254 <strlen>
 80012aa:	4602      	mov	r2, r0
 80012ac:	6a3b      	ldr	r3, [r7, #32]
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d8b7      	bhi.n	8001222 <ParseRFMessage+0x102>
			}
		}
	}
	if ((HashFound) && (HashFound) && (CommaFound) )
 80012b2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d065      	beq.n	8001386 <ParseRFMessage+0x266>
 80012ba:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d061      	beq.n	8001386 <ParseRFMessage+0x266>
 80012c2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d05d      	beq.n	8001386 <ParseRFMessage+0x266>
	{
		*Angle = 0;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2200      	movs	r2, #0
 80012ce:	701a      	strb	r2, [r3, #0]
		*Power = 0;
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	2200      	movs	r2, #0
 80012d4:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < CommaIndex - HashTagIndex -1 ; i++)
 80012d6:	2300      	movs	r3, #0
 80012d8:	61fb      	str	r3, [r7, #28]
 80012da:	e015      	b.n	8001308 <ParseRFMessage+0x1e8>
		{
			*Power = *Power * 10 + UART5RXArray[HashTagIndex + i + 1] - '0';
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	461a      	mov	r2, r3
 80012e2:	0092      	lsls	r2, r2, #2
 80012e4:	4413      	add	r3, r2
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	b2da      	uxtb	r2, r3
 80012ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	440b      	add	r3, r1
 80012f0:	3301      	adds	r3, #1
 80012f2:	4927      	ldr	r1, [pc, #156]	; (8001390 <ParseRFMessage+0x270>)
 80012f4:	5ccb      	ldrb	r3, [r1, r3]
 80012f6:	4413      	add	r3, r2
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	3b30      	subs	r3, #48	; 0x30
 80012fc:	b2da      	uxtb	r2, r3
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < CommaIndex - HashTagIndex -1 ; i++)
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	3301      	adds	r3, #1
 8001306:	61fb      	str	r3, [r7, #28]
 8001308:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800130a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	3b01      	subs	r3, #1
 8001310:	69fa      	ldr	r2, [r7, #28]
 8001312:	429a      	cmp	r2, r3
 8001314:	dbe2      	blt.n	80012dc <ParseRFMessage+0x1bc>
		}
		for (int i = 0; i < MessageEndIndex - CommaIndex -1; i++)
 8001316:	2300      	movs	r3, #0
 8001318:	61bb      	str	r3, [r7, #24]
 800131a:	e015      	b.n	8001348 <ParseRFMessage+0x228>
		{
			*Angle = *Angle * 10 + UART5RXArray[CommaIndex + i + 1] - '0';
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	461a      	mov	r2, r3
 8001322:	0092      	lsls	r2, r2, #2
 8001324:	4413      	add	r3, r2
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	b2da      	uxtb	r2, r3
 800132a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	440b      	add	r3, r1
 8001330:	3301      	adds	r3, #1
 8001332:	4917      	ldr	r1, [pc, #92]	; (8001390 <ParseRFMessage+0x270>)
 8001334:	5ccb      	ldrb	r3, [r1, r3]
 8001336:	4413      	add	r3, r2
 8001338:	b2db      	uxtb	r3, r3
 800133a:	3b30      	subs	r3, #48	; 0x30
 800133c:	b2da      	uxtb	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < MessageEndIndex - CommaIndex -1; i++)
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	3301      	adds	r3, #1
 8001346:	61bb      	str	r3, [r7, #24]
 8001348:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800134a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	3b01      	subs	r3, #1
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	429a      	cmp	r2, r3
 8001354:	dbe2      	blt.n	800131c <ParseRFMessage+0x1fc>
		}
//		sprintf(USBTXArray, "%6.3f, ",CurrentTime());
//		SendToScreen(false);
//		memcpy(USBTXArray,UART5RXArray,MessageEndIndex);
//		SendToScreen(true);
		memcpy(&UART5RXArray[0],&UART5RXArray[MessageEndIndex+1],255-MessageEndIndex);
 8001356:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001358:	3301      	adds	r3, #1
 800135a:	4a0d      	ldr	r2, [pc, #52]	; (8001390 <ParseRFMessage+0x270>)
 800135c:	1899      	adds	r1, r3, r2
 800135e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001360:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8001364:	461a      	mov	r2, r3
 8001366:	480a      	ldr	r0, [pc, #40]	; (8001390 <ParseRFMessage+0x270>)
 8001368:	f00e f950 	bl	800f60c <memcpy>
		memset(&UART5RXArray[255-MessageEndIndex],0,MessageEndIndex+1);
 800136c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800136e:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8001372:	4a07      	ldr	r2, [pc, #28]	; (8001390 <ParseRFMessage+0x270>)
 8001374:	1898      	adds	r0, r3, r2
 8001376:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001378:	3301      	adds	r3, #1
 800137a:	461a      	mov	r2, r3
 800137c:	2100      	movs	r1, #0
 800137e:	f00e f950 	bl	800f622 <memset>
		return 0;
 8001382:	2300      	movs	r3, #0
 8001384:	e000      	b.n	8001388 <ParseRFMessage+0x268>
	}
//	sprintf(USBTXArray, "%6.3f, Error Code",CurrentTime());
//	SendToScreen(false);
	return 1;
 8001386:	2301      	movs	r3, #1
}
 8001388:	4618      	mov	r0, r3
 800138a:	3744      	adds	r7, #68	; 0x44
 800138c:	46bd      	mov	sp, r7
 800138e:	bd90      	pop	{r4, r7, pc}
 8001390:	200007ac 	.word	0x200007ac
 8001394:	20000000 	.word	0x20000000

08001398 <CheckDataFromUART>:
	NumberOfBytesRead = LocalCounter;
	return NumberOfBytesRead;
}

uint32_t CheckDataFromUART(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
	int NumberOfBytesRead = 0;
 800139e:	2300      	movs	r3, #0
 80013a0:	60bb      	str	r3, [r7, #8]
	int LocalCounter = 0;
 80013a2:	2300      	movs	r3, #0
 80013a4:	617b      	str	r3, [r7, #20]
	int StepInc = 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	613b      	str	r3, [r7, #16]
	int ret = 0;
 80013aa:	2300      	movs	r3, #0
 80013ac:	607b      	str	r3, [r7, #4]
	HAL_StatusTypeDef Uart_Ret;
	HAL_UART_Receive_DMA(&huart5, LocalUART5RXArray, 256);
 80013ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013b2:	4927      	ldr	r1, [pc, #156]	; (8001450 <CheckDataFromUART+0xb8>)
 80013b4:	4827      	ldr	r0, [pc, #156]	; (8001454 <CheckDataFromUART+0xbc>)
 80013b6:	f009 fc69 	bl	800ac8c <HAL_UART_Receive_DMA>
	HAL_UART_DMAPause(&huart5);
 80013ba:	4826      	ldr	r0, [pc, #152]	; (8001454 <CheckDataFromUART+0xbc>)
 80013bc:	f009 fcea 	bl	800ad94 <HAL_UART_DMAPause>
	memcpy(&UART5RXArray, &LocalUART5RXArray,256);
 80013c0:	4a25      	ldr	r2, [pc, #148]	; (8001458 <CheckDataFromUART+0xc0>)
 80013c2:	4b23      	ldr	r3, [pc, #140]	; (8001450 <CheckDataFromUART+0xb8>)
 80013c4:	4610      	mov	r0, r2
 80013c6:	4619      	mov	r1, r3
 80013c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013cc:	461a      	mov	r2, r3
 80013ce:	f00e f91d 	bl	800f60c <memcpy>
	memset(LocalUART5RXArray,0,256);
 80013d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013d6:	2100      	movs	r1, #0
 80013d8:	481d      	ldr	r0, [pc, #116]	; (8001450 <CheckDataFromUART+0xb8>)
 80013da:	f00e f922 	bl	800f622 <memset>
	HAL_UART_DMAResume(&huart5);
 80013de:	481d      	ldr	r0, [pc, #116]	; (8001454 <CheckDataFromUART+0xbc>)
 80013e0:	f009 fd2c 	bl	800ae3c <HAL_UART_DMAResume>
	for (int i = 0; i<256;i++)
 80013e4:	2300      	movs	r3, #0
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	e01d      	b.n	8001426 <CheckDataFromUART+0x8e>
	{
		if (UART5RXArray[0] == 0)
 80013ea:	4b1b      	ldr	r3, [pc, #108]	; (8001458 <CheckDataFromUART+0xc0>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d113      	bne.n	800141a <CheckDataFromUART+0x82>
		{
			memcpy(&UART5RXArray[StepInc],&UART5RXArray[StepInc+1],255-i);
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	4a18      	ldr	r2, [pc, #96]	; (8001458 <CheckDataFromUART+0xc0>)
 80013f6:	1898      	adds	r0, r3, r2
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	3301      	adds	r3, #1
 80013fc:	4a16      	ldr	r2, [pc, #88]	; (8001458 <CheckDataFromUART+0xc0>)
 80013fe:	1899      	adds	r1, r3, r2
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8001406:	461a      	mov	r2, r3
 8001408:	f00e f900 	bl	800f60c <memcpy>
			UART5RXArray[255 - i] = 0;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8001412:	4a11      	ldr	r2, [pc, #68]	; (8001458 <CheckDataFromUART+0xc0>)
 8001414:	2100      	movs	r1, #0
 8001416:	54d1      	strb	r1, [r2, r3]
 8001418:	e002      	b.n	8001420 <CheckDataFromUART+0x88>
		}
		else
		{
			StepInc++;
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	3301      	adds	r3, #1
 800141e:	613b      	str	r3, [r7, #16]
	for (int i = 0; i<256;i++)
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	3301      	adds	r3, #1
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	2bff      	cmp	r3, #255	; 0xff
 800142a:	ddde      	ble.n	80013ea <CheckDataFromUART+0x52>
		}
	}
	while (UART5RXArray[LocalCounter] != 0)
 800142c:	e002      	b.n	8001434 <CheckDataFromUART+0x9c>
	{
		LocalCounter++;
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	3301      	adds	r3, #1
 8001432:	617b      	str	r3, [r7, #20]
	while (UART5RXArray[LocalCounter] != 0)
 8001434:	4a08      	ldr	r2, [pc, #32]	; (8001458 <CheckDataFromUART+0xc0>)
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	4413      	add	r3, r2
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d1f6      	bne.n	800142e <CheckDataFromUART+0x96>
	}
	NumberOfBytesRead = LocalCounter;
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	60bb      	str	r3, [r7, #8]
	return NumberOfBytesRead;
 8001444:	68bb      	ldr	r3, [r7, #8]
}
 8001446:	4618      	mov	r0, r3
 8001448:	3718      	adds	r7, #24
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	20000258 	.word	0x20000258
 8001454:	20004580 	.word	0x20004580
 8001458:	200007ac 	.word	0x200007ac

0800145c <bno055_init>:
 *  make sure your changes will not
 *  affect the reference value of the parameter
 *  (Better case don't change the reference value of the parameter)
 */
BNO055_RETURN_FUNCTION_TYPE bno055_init(struct bno055_t *bno055)
{
 800145c:	b590      	push	{r4, r7, lr}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8001464:	23ff      	movs	r3, #255	; 0xff
 8001466:	73fb      	strb	r3, [r7, #15]
    u8 data_u8 = BNO055_INIT_VALUE;
 8001468:	2300      	movs	r3, #0
 800146a:	73bb      	strb	r3, [r7, #14]
    u8 bno055_page_zero_u8 = BNO055_PAGE_ZERO;
 800146c:	2300      	movs	r3, #0
 800146e:	737b      	strb	r3, [r7, #13]

    /* Array holding the Software revision id
     */
    u8 a_SW_ID_u8[BNO055_REV_ID_SIZE] = { BNO055_INIT_VALUE, BNO055_INIT_VALUE };
 8001470:	2300      	movs	r3, #0
 8001472:	723b      	strb	r3, [r7, #8]
 8001474:	2300      	movs	r3, #0
 8001476:	727b      	strb	r3, [r7, #9]

    /* stuct parameters are assign to bno055*/
    p_bno055 = bno055;
 8001478:	4a58      	ldr	r2, [pc, #352]	; (80015dc <bno055_init+0x180>)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6013      	str	r3, [r2, #0]

    /* Write the default page as zero*/
    com_rslt = p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 800147e:	4b57      	ldr	r3, [pc, #348]	; (80015dc <bno055_init+0x180>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	68dc      	ldr	r4, [r3, #12]
 8001484:	4b55      	ldr	r3, [pc, #340]	; (80015dc <bno055_init+0x180>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	7a58      	ldrb	r0, [r3, #9]
 800148a:	f107 020d 	add.w	r2, r7, #13
 800148e:	2301      	movs	r3, #1
 8001490:	2107      	movs	r1, #7
 8001492:	47a0      	blx	r4
 8001494:	4603      	mov	r3, r0
 8001496:	73fb      	strb	r3, [r7, #15]
                                               &bno055_page_zero_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);

    /* Read the chip id of the sensor from page
     * zero 0x00 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001498:	4b50      	ldr	r3, [pc, #320]	; (80015dc <bno055_init+0x180>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	691c      	ldr	r4, [r3, #16]
 800149e:	4b4f      	ldr	r3, [pc, #316]	; (80015dc <bno055_init+0x180>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	7a58      	ldrb	r0, [r3, #9]
 80014a4:	f107 020e 	add.w	r2, r7, #14
 80014a8:	2301      	movs	r3, #1
 80014aa:	2100      	movs	r1, #0
 80014ac:	47a0      	blx	r4
 80014ae:	4603      	mov	r3, r0
 80014b0:	b2da      	uxtb	r2, r3
 80014b2:	7bfb      	ldrb	r3, [r7, #15]
 80014b4:	4413      	add	r3, r2
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	73fb      	strb	r3, [r7, #15]
                                               BNO055_CHIP_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->chip_id = data_u8;
 80014ba:	4b48      	ldr	r3, [pc, #288]	; (80015dc <bno055_init+0x180>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	7bba      	ldrb	r2, [r7, #14]
 80014c0:	701a      	strb	r2, [r3, #0]

    /* Read the accel revision id from page
     * zero 0x01 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80014c2:	4b46      	ldr	r3, [pc, #280]	; (80015dc <bno055_init+0x180>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	691c      	ldr	r4, [r3, #16]
 80014c8:	4b44      	ldr	r3, [pc, #272]	; (80015dc <bno055_init+0x180>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	7a58      	ldrb	r0, [r3, #9]
 80014ce:	f107 020e 	add.w	r2, r7, #14
 80014d2:	2301      	movs	r3, #1
 80014d4:	2101      	movs	r1, #1
 80014d6:	47a0      	blx	r4
 80014d8:	4603      	mov	r3, r0
 80014da:	b2da      	uxtb	r2, r3
 80014dc:	7bfb      	ldrb	r3, [r7, #15]
 80014de:	4413      	add	r3, r2
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	73fb      	strb	r3, [r7, #15]
                                               BNO055_ACCEL_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->accel_rev_id = data_u8;
 80014e4:	4b3d      	ldr	r3, [pc, #244]	; (80015dc <bno055_init+0x180>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	7bba      	ldrb	r2, [r7, #14]
 80014ea:	715a      	strb	r2, [r3, #5]

    /* Read the mag revision id from page
     * zero 0x02 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80014ec:	4b3b      	ldr	r3, [pc, #236]	; (80015dc <bno055_init+0x180>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	691c      	ldr	r4, [r3, #16]
 80014f2:	4b3a      	ldr	r3, [pc, #232]	; (80015dc <bno055_init+0x180>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	7a58      	ldrb	r0, [r3, #9]
 80014f8:	f107 020e 	add.w	r2, r7, #14
 80014fc:	2301      	movs	r3, #1
 80014fe:	2102      	movs	r1, #2
 8001500:	47a0      	blx	r4
 8001502:	4603      	mov	r3, r0
 8001504:	b2da      	uxtb	r2, r3
 8001506:	7bfb      	ldrb	r3, [r7, #15]
 8001508:	4413      	add	r3, r2
 800150a:	b2db      	uxtb	r3, r3
 800150c:	73fb      	strb	r3, [r7, #15]
                                               BNO055_MAG_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->mag_rev_id = data_u8;
 800150e:	4b33      	ldr	r3, [pc, #204]	; (80015dc <bno055_init+0x180>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	7bba      	ldrb	r2, [r7, #14]
 8001514:	719a      	strb	r2, [r3, #6]

    /* Read the gyro revision id from page
     * zero 0x02 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001516:	4b31      	ldr	r3, [pc, #196]	; (80015dc <bno055_init+0x180>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	691c      	ldr	r4, [r3, #16]
 800151c:	4b2f      	ldr	r3, [pc, #188]	; (80015dc <bno055_init+0x180>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	7a58      	ldrb	r0, [r3, #9]
 8001522:	f107 020e 	add.w	r2, r7, #14
 8001526:	2301      	movs	r3, #1
 8001528:	2103      	movs	r1, #3
 800152a:	47a0      	blx	r4
 800152c:	4603      	mov	r3, r0
 800152e:	b2da      	uxtb	r2, r3
 8001530:	7bfb      	ldrb	r3, [r7, #15]
 8001532:	4413      	add	r3, r2
 8001534:	b2db      	uxtb	r3, r3
 8001536:	73fb      	strb	r3, [r7, #15]
                                               BNO055_GYRO_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->gyro_rev_id = data_u8;
 8001538:	4b28      	ldr	r3, [pc, #160]	; (80015dc <bno055_init+0x180>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	7bba      	ldrb	r2, [r7, #14]
 800153e:	71da      	strb	r2, [r3, #7]

    /* Read the boot loader revision from page
     * zero 0x06 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001540:	4b26      	ldr	r3, [pc, #152]	; (80015dc <bno055_init+0x180>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	691c      	ldr	r4, [r3, #16]
 8001546:	4b25      	ldr	r3, [pc, #148]	; (80015dc <bno055_init+0x180>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	7a58      	ldrb	r0, [r3, #9]
 800154c:	f107 020e 	add.w	r2, r7, #14
 8001550:	2301      	movs	r3, #1
 8001552:	2106      	movs	r1, #6
 8001554:	47a0      	blx	r4
 8001556:	4603      	mov	r3, r0
 8001558:	b2da      	uxtb	r2, r3
 800155a:	7bfb      	ldrb	r3, [r7, #15]
 800155c:	4413      	add	r3, r2
 800155e:	b2db      	uxtb	r3, r3
 8001560:	73fb      	strb	r3, [r7, #15]
                                               BNO055_BL_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->bl_rev_id = data_u8;
 8001562:	4b1e      	ldr	r3, [pc, #120]	; (80015dc <bno055_init+0x180>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	7bba      	ldrb	r2, [r7, #14]
 8001568:	721a      	strb	r2, [r3, #8]

    /* Read the software revision id from page
     * zero 0x04 and 0x05 register( 2 bytes of data)*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 800156a:	4b1c      	ldr	r3, [pc, #112]	; (80015dc <bno055_init+0x180>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	691c      	ldr	r4, [r3, #16]
 8001570:	4b1a      	ldr	r3, [pc, #104]	; (80015dc <bno055_init+0x180>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	7a58      	ldrb	r0, [r3, #9]
 8001576:	f107 0208 	add.w	r2, r7, #8
 800157a:	2302      	movs	r3, #2
 800157c:	2104      	movs	r1, #4
 800157e:	47a0      	blx	r4
 8001580:	4603      	mov	r3, r0
 8001582:	b2da      	uxtb	r2, r3
 8001584:	7bfb      	ldrb	r3, [r7, #15]
 8001586:	4413      	add	r3, r2
 8001588:	b2db      	uxtb	r3, r3
 800158a:	73fb      	strb	r3, [r7, #15]
                                               BNO055_SW_REV_ID_LSB_REG,
                                               a_SW_ID_u8,
                                               BNO055_LSB_MSB_READ_LENGTH);
    a_SW_ID_u8[BNO055_SW_ID_LSB] = BNO055_GET_BITSLICE(a_SW_ID_u8[BNO055_SW_ID_LSB], BNO055_SW_REV_ID_LSB);
 800158c:	7a3b      	ldrb	r3, [r7, #8]
 800158e:	723b      	strb	r3, [r7, #8]
    p_bno055->sw_rev_id =
        (u16)((((u32)((u8)a_SW_ID_u8[BNO055_SW_ID_MSB])) << BNO055_SHIFT_EIGHT_BITS) | (a_SW_ID_u8[BNO055_SW_ID_LSB]));
 8001590:	7a7b      	ldrb	r3, [r7, #9]
 8001592:	b29b      	uxth	r3, r3
 8001594:	021b      	lsls	r3, r3, #8
 8001596:	b299      	uxth	r1, r3
 8001598:	7a3b      	ldrb	r3, [r7, #8]
 800159a:	b29a      	uxth	r2, r3
    p_bno055->sw_rev_id =
 800159c:	4b0f      	ldr	r3, [pc, #60]	; (80015dc <bno055_init+0x180>)
 800159e:	681b      	ldr	r3, [r3, #0]
        (u16)((((u32)((u8)a_SW_ID_u8[BNO055_SW_ID_MSB])) << BNO055_SHIFT_EIGHT_BITS) | (a_SW_ID_u8[BNO055_SW_ID_LSB]));
 80015a0:	430a      	orrs	r2, r1
 80015a2:	b292      	uxth	r2, r2
    p_bno055->sw_rev_id =
 80015a4:	805a      	strh	r2, [r3, #2]

    /* Read the page id from the register 0x07*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80015a6:	4b0d      	ldr	r3, [pc, #52]	; (80015dc <bno055_init+0x180>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	691c      	ldr	r4, [r3, #16]
 80015ac:	4b0b      	ldr	r3, [pc, #44]	; (80015dc <bno055_init+0x180>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	7a58      	ldrb	r0, [r3, #9]
 80015b2:	f107 020e 	add.w	r2, r7, #14
 80015b6:	2301      	movs	r3, #1
 80015b8:	2107      	movs	r1, #7
 80015ba:	47a0      	blx	r4
 80015bc:	4603      	mov	r3, r0
 80015be:	b2da      	uxtb	r2, r3
 80015c0:	7bfb      	ldrb	r3, [r7, #15]
 80015c2:	4413      	add	r3, r2
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	73fb      	strb	r3, [r7, #15]
                                               BNO055_PAGE_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->page_id = data_u8;
 80015c8:	4b04      	ldr	r3, [pc, #16]	; (80015dc <bno055_init+0x180>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	7bba      	ldrb	r2, [r7, #14]
 80015ce:	711a      	strb	r2, [r3, #4]

    return com_rslt;
 80015d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3714      	adds	r7, #20
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd90      	pop	{r4, r7, pc}
 80015dc:	20000358 	.word	0x20000358

080015e0 <bno055_write_register>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_write_register(u8 addr_u8, u8 *data_u8, u8 len_u8)
{
 80015e0:	b590      	push	{r4, r7, lr}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	6039      	str	r1, [r7, #0]
 80015ea:	71fb      	strb	r3, [r7, #7]
 80015ec:	4613      	mov	r3, r2
 80015ee:	71bb      	strb	r3, [r7, #6]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 80015f0:	23ff      	movs	r3, #255	; 0xff
 80015f2:	73fb      	strb	r3, [r7, #15]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 80015f4:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <bno055_write_register+0x48>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d102      	bne.n	8001602 <bno055_write_register+0x22>
    {
        return BNO055_E_NULL_PTR;
 80015fc:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8001600:	e00d      	b.n	800161e <bno055_write_register+0x3e>
    }
    else
    {
        /* Write the values of respective given register */
        com_rslt = p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr, addr_u8, data_u8, len_u8);
 8001602:	4b09      	ldr	r3, [pc, #36]	; (8001628 <bno055_write_register+0x48>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	68dc      	ldr	r4, [r3, #12]
 8001608:	4b07      	ldr	r3, [pc, #28]	; (8001628 <bno055_write_register+0x48>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	7a58      	ldrb	r0, [r3, #9]
 800160e:	79bb      	ldrb	r3, [r7, #6]
 8001610:	79f9      	ldrb	r1, [r7, #7]
 8001612:	683a      	ldr	r2, [r7, #0]
 8001614:	47a0      	blx	r4
 8001616:	4603      	mov	r3, r0
 8001618:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 800161a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800161e:	4618      	mov	r0, r3
 8001620:	3714      	adds	r7, #20
 8001622:	46bd      	mov	sp, r7
 8001624:	bd90      	pop	{r4, r7, pc}
 8001626:	bf00      	nop
 8001628:	20000358 	.word	0x20000358

0800162c <bno055_write_page_id>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_write_page_id(u8 page_id_u8)
{
 800162c:	b590      	push	{r4, r7, lr}
 800162e:	b085      	sub	sp, #20
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	71fb      	strb	r3, [r7, #7]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8001636:	23ff      	movs	r3, #255	; 0xff
 8001638:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 800163a:	2300      	movs	r3, #0
 800163c:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 800163e:	4b1e      	ldr	r3, [pc, #120]	; (80016b8 <bno055_write_page_id+0x8c>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d102      	bne.n	800164c <bno055_write_page_id+0x20>
    {
        return BNO055_E_NULL_PTR;
 8001646:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 800164a:	e030      	b.n	80016ae <bno055_write_page_id+0x82>
    }
    else
    {
        /* Read the current page*/
        com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 800164c:	4b1a      	ldr	r3, [pc, #104]	; (80016b8 <bno055_write_page_id+0x8c>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	691c      	ldr	r4, [r3, #16]
 8001652:	4b19      	ldr	r3, [pc, #100]	; (80016b8 <bno055_write_page_id+0x8c>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	7a58      	ldrb	r0, [r3, #9]
 8001658:	f107 020e 	add.w	r2, r7, #14
 800165c:	2301      	movs	r3, #1
 800165e:	2107      	movs	r1, #7
 8001660:	47a0      	blx	r4
 8001662:	4603      	mov	r3, r0
 8001664:	73fb      	strb	r3, [r7, #15]
                                                  BNO055_PAGE_ID_REG,
                                                  &data_u8r,
                                                  BNO055_GEN_READ_WRITE_LENGTH);

        /* Check condition for communication BNO055_SUCCESS*/
        if (com_rslt == BNO055_SUCCESS)
 8001666:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d11b      	bne.n	80016a6 <bno055_write_page_id+0x7a>
        {
            data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_PAGE_ID, page_id_u8);
 800166e:	79fb      	ldrb	r3, [r7, #7]
 8001670:	73bb      	strb	r3, [r7, #14]

            /* Write the page id*/
            com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8001672:	4b11      	ldr	r3, [pc, #68]	; (80016b8 <bno055_write_page_id+0x8c>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	68dc      	ldr	r4, [r3, #12]
 8001678:	4b0f      	ldr	r3, [pc, #60]	; (80016b8 <bno055_write_page_id+0x8c>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	7a58      	ldrb	r0, [r3, #9]
 800167e:	f107 020e 	add.w	r2, r7, #14
 8001682:	2301      	movs	r3, #1
 8001684:	2107      	movs	r1, #7
 8001686:	47a0      	blx	r4
 8001688:	4603      	mov	r3, r0
 800168a:	b2da      	uxtb	r2, r3
 800168c:	7bfb      	ldrb	r3, [r7, #15]
 800168e:	4413      	add	r3, r2
 8001690:	b2db      	uxtb	r3, r3
 8001692:	73fb      	strb	r3, [r7, #15]
                                                        BNO055_PAGE_ID_REG,
                                                        &data_u8r,
                                                        BNO055_GEN_READ_WRITE_LENGTH);
            if (com_rslt == BNO055_SUCCESS)
 8001694:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d106      	bne.n	80016aa <bno055_write_page_id+0x7e>
            {
                p_bno055->page_id = page_id_u8;
 800169c:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <bno055_write_page_id+0x8c>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	79fa      	ldrb	r2, [r7, #7]
 80016a2:	711a      	strb	r2, [r3, #4]
 80016a4:	e001      	b.n	80016aa <bno055_write_page_id+0x7e>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 80016a6:	23ff      	movs	r3, #255	; 0xff
 80016a8:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 80016aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3714      	adds	r7, #20
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd90      	pop	{r4, r7, pc}
 80016b6:	bf00      	nop
 80016b8:	20000358 	.word	0x20000358

080016bc <bno055_get_operation_mode>:
 *  becomes zero and it is mainly derived
 *  to configure the various settings of the BNO
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_get_operation_mode(u8 *operation_mode_u8)
{
 80016bc:	b590      	push	{r4, r7, lr}
 80016be:	b085      	sub	sp, #20
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 80016c4:	23ff      	movs	r3, #255	; 0xff
 80016c6:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 80016c8:	2300      	movs	r3, #0
 80016ca:	737b      	strb	r3, [r7, #13]
    s8 stat_s8 = BNO055_ERROR;
 80016cc:	23ff      	movs	r3, #255	; 0xff
 80016ce:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 80016d0:	4b1a      	ldr	r3, [pc, #104]	; (800173c <bno055_get_operation_mode+0x80>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d102      	bne.n	80016de <bno055_get_operation_mode+0x22>
    {
        return BNO055_E_NULL_PTR;
 80016d8:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 80016dc:	e02a      	b.n	8001734 <bno055_get_operation_mode+0x78>
    }
    else
    {
        /*condition check for page, operation mode is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 80016de:	4b17      	ldr	r3, [pc, #92]	; (800173c <bno055_get_operation_mode+0x80>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	791b      	ldrb	r3, [r3, #4]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d004      	beq.n	80016f2 <bno055_get_operation_mode+0x36>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 80016e8:	2000      	movs	r0, #0
 80016ea:	f7ff ff9f 	bl	800162c <bno055_write_page_id>
 80016ee:	4603      	mov	r3, r0
 80016f0:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 80016f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d004      	beq.n	8001704 <bno055_get_operation_mode+0x48>
 80016fa:	4b10      	ldr	r3, [pc, #64]	; (800173c <bno055_get_operation_mode+0x80>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	791b      	ldrb	r3, [r3, #4]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d113      	bne.n	800172c <bno055_get_operation_mode+0x70>
        {
            /* Read the value of operation mode*/
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001704:	4b0d      	ldr	r3, [pc, #52]	; (800173c <bno055_get_operation_mode+0x80>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	691c      	ldr	r4, [r3, #16]
 800170a:	4b0c      	ldr	r3, [pc, #48]	; (800173c <bno055_get_operation_mode+0x80>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	7a58      	ldrb	r0, [r3, #9]
 8001710:	f107 020d 	add.w	r2, r7, #13
 8001714:	2301      	movs	r3, #1
 8001716:	213d      	movs	r1, #61	; 0x3d
 8001718:	47a0      	blx	r4
 800171a:	4603      	mov	r3, r0
 800171c:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_OPERATION_MODE_REG,
                                                      &data_u8r,
                                                      BNO055_GEN_READ_WRITE_LENGTH);
            *operation_mode_u8 = BNO055_GET_BITSLICE(data_u8r, BNO055_OPERATION_MODE);
 800171e:	7b7b      	ldrb	r3, [r7, #13]
 8001720:	f003 030f 	and.w	r3, r3, #15
 8001724:	b2da      	uxtb	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	701a      	strb	r2, [r3, #0]
 800172a:	e001      	b.n	8001730 <bno055_get_operation_mode+0x74>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 800172c:	23ff      	movs	r3, #255	; 0xff
 800172e:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8001730:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001734:	4618      	mov	r0, r3
 8001736:	3714      	adds	r7, #20
 8001738:	46bd      	mov	sp, r7
 800173a:	bd90      	pop	{r4, r7, pc}
 800173c:	20000358 	.word	0x20000358

08001740 <bno055_set_operation_mode>:
 *  becomes zero and it is mainly derived
 *  to configure the various settings of the BNO
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_operation_mode(u8 operation_mode_u8)
{
 8001740:	b590      	push	{r4, r7, lr}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 800174a:	23ff      	movs	r3, #255	; 0xff
 800174c:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 800174e:	2300      	movs	r3, #0
 8001750:	737b      	strb	r3, [r7, #13]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 8001752:	2300      	movs	r3, #0
 8001754:	733b      	strb	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 8001756:	23ff      	movs	r3, #255	; 0xff
 8001758:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 800175a:	4b5c      	ldr	r3, [pc, #368]	; (80018cc <bno055_set_operation_mode+0x18c>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d102      	bne.n	8001768 <bno055_set_operation_mode+0x28>
    {
        return BNO055_E_NULL_PTR;
 8001762:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8001766:	e0ac      	b.n	80018c2 <bno055_set_operation_mode+0x182>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 8001768:	f107 030c 	add.w	r3, r7, #12
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff ffa5 	bl	80016bc <bno055_get_operation_mode>
 8001772:	4603      	mov	r3, r0
 8001774:	73bb      	strb	r3, [r7, #14]
        if (stat_s8 == BNO055_SUCCESS)
 8001776:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800177a:	2b00      	cmp	r3, #0
 800177c:	f040 809d 	bne.w	80018ba <bno055_set_operation_mode+0x17a>
        {
            /* If the previous operation mode is config it is
             * directly write the operation mode */
            if (prev_opmode_u8 == BNO055_OPERATION_MODE_CONFIG)
 8001780:	7b3b      	ldrb	r3, [r7, #12]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d137      	bne.n	80017f6 <bno055_set_operation_mode+0xb6>
            {
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001786:	4b51      	ldr	r3, [pc, #324]	; (80018cc <bno055_set_operation_mode+0x18c>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	691c      	ldr	r4, [r3, #16]
 800178c:	4b4f      	ldr	r3, [pc, #316]	; (80018cc <bno055_set_operation_mode+0x18c>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	7a58      	ldrb	r0, [r3, #9]
 8001792:	f107 020d 	add.w	r2, r7, #13
 8001796:	2301      	movs	r3, #1
 8001798:	213d      	movs	r1, #61	; 0x3d
 800179a:	47a0      	blx	r4
 800179c:	4603      	mov	r3, r0
 800179e:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_OPERATION_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 80017a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	f040 808a 	bne.w	80018be <bno055_set_operation_mode+0x17e>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, operation_mode_u8);
 80017aa:	7b7b      	ldrb	r3, [r7, #13]
 80017ac:	b25b      	sxtb	r3, r3
 80017ae:	f023 030f 	bic.w	r3, r3, #15
 80017b2:	b25a      	sxtb	r2, r3
 80017b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b8:	f003 030f 	and.w	r3, r3, #15
 80017bc:	b25b      	sxtb	r3, r3
 80017be:	4313      	orrs	r3, r2
 80017c0:	b25b      	sxtb	r3, r3
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	737b      	strb	r3, [r7, #13]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 80017c6:	4b41      	ldr	r3, [pc, #260]	; (80018cc <bno055_set_operation_mode+0x18c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	68dc      	ldr	r4, [r3, #12]
 80017cc:	4b3f      	ldr	r3, [pc, #252]	; (80018cc <bno055_set_operation_mode+0x18c>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	7a58      	ldrb	r0, [r3, #9]
 80017d2:	f107 020d 	add.w	r2, r7, #13
 80017d6:	2301      	movs	r3, #1
 80017d8:	213d      	movs	r1, #61	; 0x3d
 80017da:	47a0      	blx	r4
 80017dc:	4603      	mov	r3, r0
 80017de:	b2da      	uxtb	r2, r3
 80017e0:	7bfb      	ldrb	r3, [r7, #15]
 80017e2:	4413      	add	r3, r2
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	73fb      	strb	r3, [r7, #15]
                                                                BNO055_GEN_READ_WRITE_LENGTH);

                    /* Config mode to other
                     * operation mode switching
                     * required delay of 600ms*/
                    p_bno055->delay_msec(BNO055_MODE_SWITCHING_DELAY);
 80017e8:	4b38      	ldr	r3, [pc, #224]	; (80018cc <bno055_set_operation_mode+0x18c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	695b      	ldr	r3, [r3, #20]
 80017ee:	f44f 7016 	mov.w	r0, #600	; 0x258
 80017f2:	4798      	blx	r3
 80017f4:	e063      	b.n	80018be <bno055_set_operation_mode+0x17e>
            else
            {
                /* If the previous operation
                 * mode is not config it is
                 * write the config mode */
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80017f6:	4b35      	ldr	r3, [pc, #212]	; (80018cc <bno055_set_operation_mode+0x18c>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	691c      	ldr	r4, [r3, #16]
 80017fc:	4b33      	ldr	r3, [pc, #204]	; (80018cc <bno055_set_operation_mode+0x18c>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	7a58      	ldrb	r0, [r3, #9]
 8001802:	f107 020d 	add.w	r2, r7, #13
 8001806:	2301      	movs	r3, #1
 8001808:	213d      	movs	r1, #61	; 0x3d
 800180a:	47a0      	blx	r4
 800180c:	4603      	mov	r3, r0
 800180e:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_OPERATION_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8001810:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d116      	bne.n	8001846 <bno055_set_operation_mode+0x106>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, BNO055_OPERATION_MODE_CONFIG);
 8001818:	7b7b      	ldrb	r3, [r7, #13]
 800181a:	f023 030f 	bic.w	r3, r3, #15
 800181e:	b2db      	uxtb	r3, r3
 8001820:	737b      	strb	r3, [r7, #13]
                    com_rslt +=
                        bno055_write_register(BNO055_OPERATION_MODE_REG, &data_u8r, BNO055_GEN_READ_WRITE_LENGTH);
 8001822:	f107 030d 	add.w	r3, r7, #13
 8001826:	2201      	movs	r2, #1
 8001828:	4619      	mov	r1, r3
 800182a:	203d      	movs	r0, #61	; 0x3d
 800182c:	f7ff fed8 	bl	80015e0 <bno055_write_register>
 8001830:	4603      	mov	r3, r0
 8001832:	b2da      	uxtb	r2, r3
                    com_rslt +=
 8001834:	7bfb      	ldrb	r3, [r7, #15]
 8001836:	4413      	add	r3, r2
 8001838:	b2db      	uxtb	r3, r3
 800183a:	73fb      	strb	r3, [r7, #15]

                    /* other mode to config mode switching
                     * required delay of 20ms*/
                    p_bno055->delay_msec(BNO055_CONFIG_MODE_SWITCHING_DELAY);
 800183c:	4b23      	ldr	r3, [pc, #140]	; (80018cc <bno055_set_operation_mode+0x18c>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	2014      	movs	r0, #20
 8001844:	4798      	blx	r3
                }

                /* Write the operation mode */
                if (operation_mode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8001846:	79fb      	ldrb	r3, [r7, #7]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d038      	beq.n	80018be <bno055_set_operation_mode+0x17e>
                {
                    com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 800184c:	4b1f      	ldr	r3, [pc, #124]	; (80018cc <bno055_set_operation_mode+0x18c>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	691c      	ldr	r4, [r3, #16]
 8001852:	4b1e      	ldr	r3, [pc, #120]	; (80018cc <bno055_set_operation_mode+0x18c>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	7a58      	ldrb	r0, [r3, #9]
 8001858:	f107 020d 	add.w	r2, r7, #13
 800185c:	2301      	movs	r3, #1
 800185e:	213d      	movs	r1, #61	; 0x3d
 8001860:	47a0      	blx	r4
 8001862:	4603      	mov	r3, r0
 8001864:	73fb      	strb	r3, [r7, #15]
                                                              BNO055_OPERATION_MODE_REG,
                                                              &data_u8r,
                                                              BNO055_GEN_READ_WRITE_LENGTH);
                    if (com_rslt == BNO055_SUCCESS)
 8001866:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d127      	bne.n	80018be <bno055_set_operation_mode+0x17e>
                    {
                        data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, operation_mode_u8);
 800186e:	7b7b      	ldrb	r3, [r7, #13]
 8001870:	b25b      	sxtb	r3, r3
 8001872:	f023 030f 	bic.w	r3, r3, #15
 8001876:	b25a      	sxtb	r2, r3
 8001878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187c:	f003 030f 	and.w	r3, r3, #15
 8001880:	b25b      	sxtb	r3, r3
 8001882:	4313      	orrs	r3, r2
 8001884:	b25b      	sxtb	r3, r3
 8001886:	b2db      	uxtb	r3, r3
 8001888:	737b      	strb	r3, [r7, #13]
                        com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 800188a:	4b10      	ldr	r3, [pc, #64]	; (80018cc <bno055_set_operation_mode+0x18c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	68dc      	ldr	r4, [r3, #12]
 8001890:	4b0e      	ldr	r3, [pc, #56]	; (80018cc <bno055_set_operation_mode+0x18c>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	7a58      	ldrb	r0, [r3, #9]
 8001896:	f107 020d 	add.w	r2, r7, #13
 800189a:	2301      	movs	r3, #1
 800189c:	213d      	movs	r1, #61	; 0x3d
 800189e:	47a0      	blx	r4
 80018a0:	4603      	mov	r3, r0
 80018a2:	b2da      	uxtb	r2, r3
 80018a4:	7bfb      	ldrb	r3, [r7, #15]
 80018a6:	4413      	add	r3, r2
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	73fb      	strb	r3, [r7, #15]
                                                                    BNO055_GEN_READ_WRITE_LENGTH);

                        /* Config mode to other
                         * operation mode switching
                         * required delay of 600ms*/
                        p_bno055->delay_msec(BNO055_MODE_SWITCHING_DELAY);
 80018ac:	4b07      	ldr	r3, [pc, #28]	; (80018cc <bno055_set_operation_mode+0x18c>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	695b      	ldr	r3, [r3, #20]
 80018b2:	f44f 7016 	mov.w	r0, #600	; 0x258
 80018b6:	4798      	blx	r3
 80018b8:	e001      	b.n	80018be <bno055_set_operation_mode+0x17e>
                }
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 80018ba:	23ff      	movs	r3, #255	; 0xff
 80018bc:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 80018be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3714      	adds	r7, #20
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd90      	pop	{r4, r7, pc}
 80018ca:	bf00      	nop
 80018cc:	20000358 	.word	0x20000358

080018d0 <bno055_set_power_mode>:
 *  @note For detailed about LOWPOWER mode
 *  refer data sheet 3.4.2
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_power_mode(u8 power_mode_u8)
{
 80018d0:	b590      	push	{r4, r7, lr}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4603      	mov	r3, r0
 80018d8:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 80018da:	23ff      	movs	r3, #255	; 0xff
 80018dc:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 80018de:	2300      	movs	r3, #0
 80018e0:	737b      	strb	r3, [r7, #13]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 80018e2:	2300      	movs	r3, #0
 80018e4:	733b      	strb	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 80018e6:	23ff      	movs	r3, #255	; 0xff
 80018e8:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 80018ea:	4b35      	ldr	r3, [pc, #212]	; (80019c0 <bno055_set_power_mode+0xf0>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d102      	bne.n	80018f8 <bno055_set_power_mode+0x28>
    {
        return BNO055_E_NULL_PTR;
 80018f2:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 80018f6:	e05f      	b.n	80019b8 <bno055_set_power_mode+0xe8>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 80018f8:	f107 030c 	add.w	r3, r7, #12
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff fedd 	bl	80016bc <bno055_get_operation_mode>
 8001902:	4603      	mov	r3, r0
 8001904:	73bb      	strb	r3, [r7, #14]
        if (stat_s8 == BNO055_SUCCESS)
 8001906:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d143      	bne.n	8001996 <bno055_set_power_mode+0xc6>
        {
            if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 800190e:	7b3b      	ldrb	r3, [r7, #12]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d008      	beq.n	8001926 <bno055_set_power_mode+0x56>
            {
                stat_s8 += bno055_set_operation_mode(BNO055_OPERATION_MODE_CONFIG);
 8001914:	2000      	movs	r0, #0
 8001916:	f7ff ff13 	bl	8001740 <bno055_set_operation_mode>
 800191a:	4603      	mov	r3, r0
 800191c:	b2da      	uxtb	r2, r3
 800191e:	7bbb      	ldrb	r3, [r7, #14]
 8001920:	4413      	add	r3, r2
 8001922:	b2db      	uxtb	r3, r3
 8001924:	73bb      	strb	r3, [r7, #14]
            }
            if (stat_s8 == BNO055_SUCCESS)
 8001926:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d130      	bne.n	8001990 <bno055_set_power_mode+0xc0>
            {
                /* Write the value of power mode */
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 800192e:	4b24      	ldr	r3, [pc, #144]	; (80019c0 <bno055_set_power_mode+0xf0>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	691c      	ldr	r4, [r3, #16]
 8001934:	4b22      	ldr	r3, [pc, #136]	; (80019c0 <bno055_set_power_mode+0xf0>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	7a58      	ldrb	r0, [r3, #9]
 800193a:	f107 020d 	add.w	r2, r7, #13
 800193e:	2301      	movs	r3, #1
 8001940:	213e      	movs	r1, #62	; 0x3e
 8001942:	47a0      	blx	r4
 8001944:	4603      	mov	r3, r0
 8001946:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_POWER_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8001948:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d124      	bne.n	800199a <bno055_set_power_mode+0xca>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_POWER_MODE, power_mode_u8);
 8001950:	7b7b      	ldrb	r3, [r7, #13]
 8001952:	b25b      	sxtb	r3, r3
 8001954:	f023 0303 	bic.w	r3, r3, #3
 8001958:	b25a      	sxtb	r2, r3
 800195a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195e:	f003 0303 	and.w	r3, r3, #3
 8001962:	b25b      	sxtb	r3, r3
 8001964:	4313      	orrs	r3, r2
 8001966:	b25b      	sxtb	r3, r3
 8001968:	b2db      	uxtb	r3, r3
 800196a:	737b      	strb	r3, [r7, #13]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 800196c:	4b14      	ldr	r3, [pc, #80]	; (80019c0 <bno055_set_power_mode+0xf0>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	68dc      	ldr	r4, [r3, #12]
 8001972:	4b13      	ldr	r3, [pc, #76]	; (80019c0 <bno055_set_power_mode+0xf0>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	7a58      	ldrb	r0, [r3, #9]
 8001978:	f107 020d 	add.w	r2, r7, #13
 800197c:	2301      	movs	r3, #1
 800197e:	213e      	movs	r1, #62	; 0x3e
 8001980:	47a0      	blx	r4
 8001982:	4603      	mov	r3, r0
 8001984:	b2da      	uxtb	r2, r3
 8001986:	7bfb      	ldrb	r3, [r7, #15]
 8001988:	4413      	add	r3, r2
 800198a:	b2db      	uxtb	r3, r3
 800198c:	73fb      	strb	r3, [r7, #15]
 800198e:	e004      	b.n	800199a <bno055_set_power_mode+0xca>
                                                                BNO055_GEN_READ_WRITE_LENGTH);
                }
            }
            else
            {
                com_rslt = BNO055_ERROR;
 8001990:	23ff      	movs	r3, #255	; 0xff
 8001992:	73fb      	strb	r3, [r7, #15]
 8001994:	e001      	b.n	800199a <bno055_set_power_mode+0xca>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8001996:	23ff      	movs	r3, #255	; 0xff
 8001998:	73fb      	strb	r3, [r7, #15]
        }
    }
    if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 800199a:	7b3b      	ldrb	r3, [r7, #12]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d009      	beq.n	80019b4 <bno055_set_power_mode+0xe4>
    {
        /* set the operation mode
         * of previous operation mode*/
        com_rslt += bno055_set_operation_mode(prev_opmode_u8);
 80019a0:	7b3b      	ldrb	r3, [r7, #12]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff fecc 	bl	8001740 <bno055_set_operation_mode>
 80019a8:	4603      	mov	r3, r0
 80019aa:	b2da      	uxtb	r2, r3
 80019ac:	7bfb      	ldrb	r3, [r7, #15]
 80019ae:	4413      	add	r3, r2
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 80019b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3714      	adds	r7, #20
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd90      	pop	{r4, r7, pc}
 80019c0:	20000358 	.word	0x20000358

080019c4 <I2C_routine>:
 *  Bus read function pointer: BNO055_RD_FUNC_PTR
 *  Delay function pointer: delay_msec
 *  I2C address: dev_addr
 *--------------------------------------------------------------------------*/
s8 I2C_routine(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
    bno055.bus_write = BNO055_I2C_bus_write;
 80019c8:	4b08      	ldr	r3, [pc, #32]	; (80019ec <I2C_routine+0x28>)
 80019ca:	4a09      	ldr	r2, [pc, #36]	; (80019f0 <I2C_routine+0x2c>)
 80019cc:	60da      	str	r2, [r3, #12]
    bno055.bus_read = BNO055_I2C_bus_read;
 80019ce:	4b07      	ldr	r3, [pc, #28]	; (80019ec <I2C_routine+0x28>)
 80019d0:	4a08      	ldr	r2, [pc, #32]	; (80019f4 <I2C_routine+0x30>)
 80019d2:	611a      	str	r2, [r3, #16]
    bno055.delay_msec = BNO055_delay_msek;
 80019d4:	4b05      	ldr	r3, [pc, #20]	; (80019ec <I2C_routine+0x28>)
 80019d6:	4a08      	ldr	r2, [pc, #32]	; (80019f8 <I2C_routine+0x34>)
 80019d8:	615a      	str	r2, [r3, #20]
    bno055.dev_addr = BNO055_I2C_ADDR2;
 80019da:	4b04      	ldr	r3, [pc, #16]	; (80019ec <I2C_routine+0x28>)
 80019dc:	2229      	movs	r2, #41	; 0x29
 80019de:	725a      	strb	r2, [r3, #9]

    return BNO055_INIT_VALUE;
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	20001318 	.word	0x20001318
 80019f0:	080019fd 	.word	0x080019fd
 80019f4:	08001a75 	.word	0x08001a75
 80019f8:	08001b05 	.word	0x08001b05

080019fc <BNO055_I2C_bus_write>:
 *  \param reg_data : It is a value hold in the array,
 *      will be used for write the value into the register
 *  \param cnt : The no of byte of data to be write
 */
s8 BNO055_I2C_bus_write(u8 dev_addr, u8 reg_addr, u8 *reg_data, u8 cnt)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b088      	sub	sp, #32
 8001a00:	af02      	add	r7, sp, #8
 8001a02:	603a      	str	r2, [r7, #0]
 8001a04:	461a      	mov	r2, r3
 8001a06:	4603      	mov	r3, r0
 8001a08:	71fb      	strb	r3, [r7, #7]
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	71bb      	strb	r3, [r7, #6]
 8001a0e:	4613      	mov	r3, r2
 8001a10:	717b      	strb	r3, [r7, #5]
    s32 BNO055_iERROR = BNO055_INIT_VALUE;
 8001a12:	2300      	movs	r3, #0
 8001a14:	613b      	str	r3, [r7, #16]
    u8 array[I2C_BUFFER_LEN];
    u8 stringpos = BNO055_INIT_VALUE;
 8001a16:	2300      	movs	r3, #0
 8001a18:	75fb      	strb	r3, [r7, #23]

    array[BNO055_INIT_VALUE] = reg_addr;
 8001a1a:	79bb      	ldrb	r3, [r7, #6]
 8001a1c:	723b      	strb	r3, [r7, #8]
    for (stringpos = BNO055_INIT_VALUE; stringpos < cnt; stringpos++)
 8001a1e:	2300      	movs	r3, #0
 8001a20:	75fb      	strb	r3, [r7, #23]
 8001a22:	e00d      	b.n	8001a40 <BNO055_I2C_bus_write+0x44>
    {
        array[stringpos + BNO055_I2C_BUS_WRITE_ARRAY_INDEX] = *(reg_data + stringpos);
 8001a24:	7dfb      	ldrb	r3, [r7, #23]
 8001a26:	683a      	ldr	r2, [r7, #0]
 8001a28:	441a      	add	r2, r3
 8001a2a:	7dfb      	ldrb	r3, [r7, #23]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	7812      	ldrb	r2, [r2, #0]
 8001a30:	f107 0118 	add.w	r1, r7, #24
 8001a34:	440b      	add	r3, r1
 8001a36:	f803 2c10 	strb.w	r2, [r3, #-16]
    for (stringpos = BNO055_INIT_VALUE; stringpos < cnt; stringpos++)
 8001a3a:	7dfb      	ldrb	r3, [r7, #23]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	75fb      	strb	r3, [r7, #23]
 8001a40:	7dfa      	ldrb	r2, [r7, #23]
 8001a42:	797b      	ldrb	r3, [r7, #5]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d3ed      	bcc.n	8001a24 <BNO055_I2C_bus_write+0x28>
    }
    HAL_I2C_Master_Transmit(&hi2c1, 0x29<<1, array, cnt+1, 10);
 8001a48:	797b      	ldrb	r3, [r7, #5]
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	b299      	uxth	r1, r3
 8001a50:	f107 0208 	add.w	r2, r7, #8
 8001a54:	230a      	movs	r3, #10
 8001a56:	9300      	str	r3, [sp, #0]
 8001a58:	460b      	mov	r3, r1
 8001a5a:	2152      	movs	r1, #82	; 0x52
 8001a5c:	4804      	ldr	r0, [pc, #16]	; (8001a70 <BNO055_I2C_bus_write+0x74>)
 8001a5e:	f004 f817 	bl	8005a90 <HAL_I2C_Master_Transmit>
    return (s8)BNO055_iERROR;
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	b25b      	sxtb	r3, r3
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3718      	adds	r7, #24
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	20004470 	.word	0x20004470

08001a74 <BNO055_I2C_bus_read>:
 */

uint8_t byte_out[3]={0};
uint8_t byte_in[3]={0};
s8 BNO055_I2C_bus_read(u8 dev_addr, u8 reg_addr, u8 *reg_data, u8 cnt)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b088      	sub	sp, #32
 8001a78:	af02      	add	r7, sp, #8
 8001a7a:	603a      	str	r2, [r7, #0]
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	4603      	mov	r3, r0
 8001a80:	71fb      	strb	r3, [r7, #7]
 8001a82:	460b      	mov	r3, r1
 8001a84:	71bb      	strb	r3, [r7, #6]
 8001a86:	4613      	mov	r3, r2
 8001a88:	717b      	strb	r3, [r7, #5]
    s32 BNO055_iERROR = BNO055_INIT_VALUE;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	613b      	str	r3, [r7, #16]
    u8 array[I2C_BUFFER_LEN] = { BNO055_INIT_VALUE };
 8001a8e:	f107 0308 	add.w	r3, r7, #8
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	605a      	str	r2, [r3, #4]
    u8 stringpos = BNO055_INIT_VALUE;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	75fb      	strb	r3, [r7, #23]

    array[BNO055_INIT_VALUE] = reg_addr;
 8001a9c:	79bb      	ldrb	r3, [r7, #6]
 8001a9e:	723b      	strb	r3, [r7, #8]
//     * BNO055_iERROR is an return value of SPI write API
//     * Please select your valid return value
//     * In the driver BNO055_SUCCESS defined as 0
//     * and FAILURE defined as -1
//     */
    for (stringpos = BNO055_INIT_VALUE; stringpos < cnt; stringpos++)
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	75fb      	strb	r3, [r7, #23]
 8001aa4:	e00c      	b.n	8001ac0 <BNO055_I2C_bus_read+0x4c>
    {
        *(reg_data + stringpos) = array[stringpos];
 8001aa6:	7dfa      	ldrb	r2, [r7, #23]
 8001aa8:	7dfb      	ldrb	r3, [r7, #23]
 8001aaa:	6839      	ldr	r1, [r7, #0]
 8001aac:	440b      	add	r3, r1
 8001aae:	f107 0118 	add.w	r1, r7, #24
 8001ab2:	440a      	add	r2, r1
 8001ab4:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8001ab8:	701a      	strb	r2, [r3, #0]
    for (stringpos = BNO055_INIT_VALUE; stringpos < cnt; stringpos++)
 8001aba:	7dfb      	ldrb	r3, [r7, #23]
 8001abc:	3301      	adds	r3, #1
 8001abe:	75fb      	strb	r3, [r7, #23]
 8001ac0:	7dfa      	ldrb	r2, [r7, #23]
 8001ac2:	797b      	ldrb	r3, [r7, #5]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d3ee      	bcc.n	8001aa6 <BNO055_I2C_bus_read+0x32>
    }
    HAL_I2C_Master_Transmit(&hi2c1, 0x29<<1, array, cnt, 10);
 8001ac8:	797b      	ldrb	r3, [r7, #5]
 8001aca:	b299      	uxth	r1, r3
 8001acc:	f107 0208 	add.w	r2, r7, #8
 8001ad0:	230a      	movs	r3, #10
 8001ad2:	9300      	str	r3, [sp, #0]
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	2152      	movs	r1, #82	; 0x52
 8001ad8:	4809      	ldr	r0, [pc, #36]	; (8001b00 <BNO055_I2C_bus_read+0x8c>)
 8001ada:	f003 ffd9 	bl	8005a90 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, 0x29<<1, (uint8_t*)reg_data, cnt, 10);
 8001ade:	797b      	ldrb	r3, [r7, #5]
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	230a      	movs	r3, #10
 8001ae4:	9300      	str	r3, [sp, #0]
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	683a      	ldr	r2, [r7, #0]
 8001aea:	2152      	movs	r1, #82	; 0x52
 8001aec:	4804      	ldr	r0, [pc, #16]	; (8001b00 <BNO055_I2C_bus_read+0x8c>)
 8001aee:	f004 f8c3 	bl	8005c78 <HAL_I2C_Master_Receive>
//		//    status = HAL_I2C_Master_Receive(&hi2c1,0x29<<1,reg_data ,cnt,10);
//		status = HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) 0x29 << 1,(uint8_t*) byte_out, 1, 10); //!!10
//		status = HAL_I2C_Master_Receive(&hi2c1, (uint16_t) 0x29 << 1,(uint8_t*) reg_data + i, 1, 10); //!!10
//	}

	return (s8) BNO055_iERROR;
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	b25b      	sxtb	r3, r3
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3718      	adds	r7, #24
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	20004470 	.word	0x20004470

08001b04 <BNO055_delay_msek>:

/*  Brief : The delay routine
 *  \param : delay in ms
 */
void BNO055_delay_msek(u32 msek)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
    /*Here you can write your own delay routine*/
	HAL_Delay(msek);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f002 fa6b 	bl	8003fe8 <HAL_Delay>
}
 8001b12:	bf00      	nop
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
	...

08001b1c <BNOInit>:

void BNOInit(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
	I2C_routine();
 8001b20:	f7ff ff50 	bl	80019c4 <I2C_routine>
	comres = bno055_init(&bno055);
 8001b24:	4810      	ldr	r0, [pc, #64]	; (8001b68 <BNOInit+0x4c>)
 8001b26:	f7ff fc99 	bl	800145c <bno055_init>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	4b0f      	ldr	r3, [pc, #60]	; (8001b6c <BNOInit+0x50>)
 8001b30:	601a      	str	r2, [r3, #0]
    power_mode = BNO055_POWER_MODE_NORMAL;
 8001b32:	4b0f      	ldr	r3, [pc, #60]	; (8001b70 <BNOInit+0x54>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	701a      	strb	r2, [r3, #0]
    comres += bno055_set_power_mode(power_mode);
 8001b38:	4b0d      	ldr	r3, [pc, #52]	; (8001b70 <BNOInit+0x54>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff fec7 	bl	80018d0 <bno055_set_power_mode>
 8001b42:	4603      	mov	r3, r0
 8001b44:	461a      	mov	r2, r3
 8001b46:	4b09      	ldr	r3, [pc, #36]	; (8001b6c <BNOInit+0x50>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	4a07      	ldr	r2, [pc, #28]	; (8001b6c <BNOInit+0x50>)
 8001b4e:	6013      	str	r3, [r2, #0]
    comres += bno055_set_operation_mode(BNO055_OPERATION_MODE_NDOF);
 8001b50:	200c      	movs	r0, #12
 8001b52:	f7ff fdf5 	bl	8001740 <bno055_set_operation_mode>
 8001b56:	4603      	mov	r3, r0
 8001b58:	461a      	mov	r2, r3
 8001b5a:	4b04      	ldr	r3, [pc, #16]	; (8001b6c <BNOInit+0x50>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4413      	add	r3, r2
 8001b60:	4a02      	ldr	r2, [pc, #8]	; (8001b6c <BNOInit+0x50>)
 8001b62:	6013      	str	r3, [r2, #0]
}
 8001b64:	bf00      	nop
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	20001318 	.word	0x20001318
 8001b6c:	20000018 	.word	0x20000018
 8001b70:	200010ac 	.word	0x200010ac

08001b74 <MS56XXReset>:
int64_t OFF = 0;
int64_t SNES = 0;
int32_t P = 0;

void MS56XXReset(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001b78:	2200      	movs	r2, #0
 8001b7a:	2110      	movs	r1, #16
 8001b7c:	480d      	ldr	r0, [pc, #52]	; (8001bb4 <MS56XXReset+0x40>)
 8001b7e:	f003 fedd 	bl	800593c <HAL_GPIO_WritePin>
	SPITX[0] = 0x1E;
 8001b82:	4b0d      	ldr	r3, [pc, #52]	; (8001bb8 <MS56XXReset+0x44>)
 8001b84:	221e      	movs	r2, #30
 8001b86:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, &SPITX[0], 1, HAL_MAX_DELAY);
 8001b88:	f04f 33ff 	mov.w	r3, #4294967295
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	490a      	ldr	r1, [pc, #40]	; (8001bb8 <MS56XXReset+0x44>)
 8001b90:	480a      	ldr	r0, [pc, #40]	; (8001bbc <MS56XXReset+0x48>)
 8001b92:	f007 f9cd 	bl	8008f30 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY);
 8001b96:	bf00      	nop
 8001b98:	4808      	ldr	r0, [pc, #32]	; (8001bbc <MS56XXReset+0x48>)
 8001b9a:	f007 fe6a 	bl	8009872 <HAL_SPI_GetState>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d0f9      	beq.n	8001b98 <MS56XXReset+0x24>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	2110      	movs	r1, #16
 8001ba8:	4802      	ldr	r0, [pc, #8]	; (8001bb4 <MS56XXReset+0x40>)
 8001baa:	f003 fec7 	bl	800593c <HAL_GPIO_WritePin>
}
 8001bae:	bf00      	nop
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40020000 	.word	0x40020000
 8001bb8:	2000035c 	.word	0x2000035c
 8001bbc:	200047ac 	.word	0x200047ac

08001bc0 <MS56XXReadProm>:

uint16_t MS56XXReadProm(uint8_t address)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	71fb      	strb	r3, [r7, #7]
	SPITX[0] = address;
 8001bca:	4a1b      	ldr	r2, [pc, #108]	; (8001c38 <MS56XXReadProm+0x78>)
 8001bcc:	79fb      	ldrb	r3, [r7, #7]
 8001bce:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	2110      	movs	r1, #16
 8001bd4:	4819      	ldr	r0, [pc, #100]	; (8001c3c <MS56XXReadProm+0x7c>)
 8001bd6:	f003 feb1 	bl	800593c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &SPITX[0], 1, HAL_MAX_DELAY);
 8001bda:	f04f 33ff 	mov.w	r3, #4294967295
 8001bde:	2201      	movs	r2, #1
 8001be0:	4915      	ldr	r1, [pc, #84]	; (8001c38 <MS56XXReadProm+0x78>)
 8001be2:	4817      	ldr	r0, [pc, #92]	; (8001c40 <MS56XXReadProm+0x80>)
 8001be4:	f007 f9a4 	bl	8008f30 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY);
 8001be8:	bf00      	nop
 8001bea:	4815      	ldr	r0, [pc, #84]	; (8001c40 <MS56XXReadProm+0x80>)
 8001bec:	f007 fe41 	bl	8009872 <HAL_SPI_GetState>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d0f9      	beq.n	8001bea <MS56XXReadProm+0x2a>
	HAL_SPI_Receive(&hspi1, &SPIRX2Byte[0], 1, HAL_MAX_DELAY);
 8001bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	4911      	ldr	r1, [pc, #68]	; (8001c44 <MS56XXReadProm+0x84>)
 8001bfe:	4810      	ldr	r0, [pc, #64]	; (8001c40 <MS56XXReadProm+0x80>)
 8001c00:	f007 fafc 	bl	80091fc <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &SPIRX2Byte[1], 1, HAL_MAX_DELAY);
 8001c04:	f04f 33ff 	mov.w	r3, #4294967295
 8001c08:	2201      	movs	r2, #1
 8001c0a:	490f      	ldr	r1, [pc, #60]	; (8001c48 <MS56XXReadProm+0x88>)
 8001c0c:	480c      	ldr	r0, [pc, #48]	; (8001c40 <MS56XXReadProm+0x80>)
 8001c0e:	f007 faf5 	bl	80091fc <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001c12:	2201      	movs	r2, #1
 8001c14:	2110      	movs	r1, #16
 8001c16:	4809      	ldr	r0, [pc, #36]	; (8001c3c <MS56XXReadProm+0x7c>)
 8001c18:	f003 fe90 	bl	800593c <HAL_GPIO_WritePin>
	return (SPIRX2Byte[0]<<8) + SPIRX2Byte[1];
 8001c1c:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <MS56XXReadProm+0x84>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	021b      	lsls	r3, r3, #8
 8001c24:	b29a      	uxth	r2, r3
 8001c26:	4b07      	ldr	r3, [pc, #28]	; (8001c44 <MS56XXReadProm+0x84>)
 8001c28:	785b      	ldrb	r3, [r3, #1]
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	4413      	add	r3, r2
 8001c2e:	b29b      	uxth	r3, r3
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	2000035c 	.word	0x2000035c
 8001c3c:	40020000 	.word	0x40020000
 8001c40:	200047ac 	.word	0x200047ac
 8001c44:	20000360 	.word	0x20000360
 8001c48:	20000361 	.word	0x20000361

08001c4c <MS56XXInit>:

void MS56XXInit(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
	MS56XXReset();
 8001c50:	f7ff ff90 	bl	8001b74 <MS56XXReset>
	HAL_Delay(50);
 8001c54:	2032      	movs	r0, #50	; 0x32
 8001c56:	f002 f9c7 	bl	8003fe8 <HAL_Delay>
	MS56XXReadProm(0xA0);
 8001c5a:	20a0      	movs	r0, #160	; 0xa0
 8001c5c:	f7ff ffb0 	bl	8001bc0 <MS56XXReadProm>
	Coeff1 = MS56XXReadProm(0xA2);
 8001c60:	20a2      	movs	r0, #162	; 0xa2
 8001c62:	f7ff ffad 	bl	8001bc0 <MS56XXReadProm>
 8001c66:	4603      	mov	r3, r0
 8001c68:	461a      	mov	r2, r3
 8001c6a:	4b24      	ldr	r3, [pc, #144]	; (8001cfc <MS56XXInit+0xb0>)
 8001c6c:	801a      	strh	r2, [r3, #0]
	Coeff2 = MS56XXReadProm(0xA4);
 8001c6e:	20a4      	movs	r0, #164	; 0xa4
 8001c70:	f7ff ffa6 	bl	8001bc0 <MS56XXReadProm>
 8001c74:	4603      	mov	r3, r0
 8001c76:	461a      	mov	r2, r3
 8001c78:	4b21      	ldr	r3, [pc, #132]	; (8001d00 <MS56XXInit+0xb4>)
 8001c7a:	801a      	strh	r2, [r3, #0]
	Coeff3 = MS56XXReadProm(0xA6);
 8001c7c:	20a6      	movs	r0, #166	; 0xa6
 8001c7e:	f7ff ff9f 	bl	8001bc0 <MS56XXReadProm>
 8001c82:	4603      	mov	r3, r0
 8001c84:	461a      	mov	r2, r3
 8001c86:	4b1f      	ldr	r3, [pc, #124]	; (8001d04 <MS56XXInit+0xb8>)
 8001c88:	801a      	strh	r2, [r3, #0]
	Coeff4 = MS56XXReadProm(0xA8);
 8001c8a:	20a8      	movs	r0, #168	; 0xa8
 8001c8c:	f7ff ff98 	bl	8001bc0 <MS56XXReadProm>
 8001c90:	4603      	mov	r3, r0
 8001c92:	461a      	mov	r2, r3
 8001c94:	4b1c      	ldr	r3, [pc, #112]	; (8001d08 <MS56XXInit+0xbc>)
 8001c96:	801a      	strh	r2, [r3, #0]
	Coeff5 = MS56XXReadProm(0xAA);
 8001c98:	20aa      	movs	r0, #170	; 0xaa
 8001c9a:	f7ff ff91 	bl	8001bc0 <MS56XXReadProm>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	4b1a      	ldr	r3, [pc, #104]	; (8001d0c <MS56XXInit+0xc0>)
 8001ca4:	801a      	strh	r2, [r3, #0]
	Coeff6 = MS56XXReadProm(0xAC);
 8001ca6:	20ac      	movs	r0, #172	; 0xac
 8001ca8:	f7ff ff8a 	bl	8001bc0 <MS56XXReadProm>
 8001cac:	4603      	mov	r3, r0
 8001cae:	461a      	mov	r2, r3
 8001cb0:	4b17      	ldr	r3, [pc, #92]	; (8001d10 <MS56XXInit+0xc4>)
 8001cb2:	801a      	strh	r2, [r3, #0]
	MSCRC = MS56XXReadProm(0xAE);
 8001cb4:	20ae      	movs	r0, #174	; 0xae
 8001cb6:	f7ff ff83 	bl	8001bc0 <MS56XXReadProm>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	4b15      	ldr	r3, [pc, #84]	; (8001d14 <MS56XXInit+0xc8>)
 8001cc0:	801a      	strh	r2, [r3, #0]

	MS56XXSendCmd(0x58);
 8001cc2:	2058      	movs	r0, #88	; 0x58
 8001cc4:	f000 f82c 	bl	8001d20 <MS56XXSendCmd>
	HAL_Delay(9);
 8001cc8:	2009      	movs	r0, #9
 8001cca:	f002 f98d 	bl	8003fe8 <HAL_Delay>
	RawTemp = MS56XXRead3Bytes(0);
 8001cce:	2000      	movs	r0, #0
 8001cd0:	f000 f856 	bl	8001d80 <MS56XXRead3Bytes>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	4b10      	ldr	r3, [pc, #64]	; (8001d18 <MS56XXInit+0xcc>)
 8001cd8:	601a      	str	r2, [r3, #0]

	MS56XXSendCmd(0x48);
 8001cda:	2048      	movs	r0, #72	; 0x48
 8001cdc:	f000 f820 	bl	8001d20 <MS56XXSendCmd>
	HAL_Delay(9);
 8001ce0:	2009      	movs	r0, #9
 8001ce2:	f002 f981 	bl	8003fe8 <HAL_Delay>
	RawPressure = MS56XXRead3Bytes(0);
 8001ce6:	2000      	movs	r0, #0
 8001ce8:	f000 f84a 	bl	8001d80 <MS56XXRead3Bytes>
 8001cec:	4602      	mov	r2, r0
 8001cee:	4b0b      	ldr	r3, [pc, #44]	; (8001d1c <MS56XXInit+0xd0>)
 8001cf0:	601a      	str	r2, [r3, #0]
	GetAltitudeAndTemp();
 8001cf2:	f000 f899 	bl	8001e28 <GetAltitudeAndTemp>
}
 8001cf6:	bf00      	nop
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	20000368 	.word	0x20000368
 8001d00:	2000036a 	.word	0x2000036a
 8001d04:	2000036c 	.word	0x2000036c
 8001d08:	2000036e 	.word	0x2000036e
 8001d0c:	20000370 	.word	0x20000370
 8001d10:	20000372 	.word	0x20000372
 8001d14:	20000374 	.word	0x20000374
 8001d18:	20000388 	.word	0x20000388
 8001d1c:	2000038c 	.word	0x2000038c

08001d20 <MS56XXSendCmd>:

void MS56XXSendCmd(uint8_t Cmd)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	2110      	movs	r1, #16
 8001d2e:	4810      	ldr	r0, [pc, #64]	; (8001d70 <MS56XXSendCmd+0x50>)
 8001d30:	f003 fe04 	bl	800593c <HAL_GPIO_WritePin>
	SPITX[0] = Cmd;
 8001d34:	4a0f      	ldr	r2, [pc, #60]	; (8001d74 <MS56XXSendCmd+0x54>)
 8001d36:	79fb      	ldrb	r3, [r7, #7]
 8001d38:	7013      	strb	r3, [r2, #0]
	HAL_SPI_Transmit(&hspi1, &SPITX[0], 1, HAL_MAX_DELAY);
 8001d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d3e:	2201      	movs	r2, #1
 8001d40:	490c      	ldr	r1, [pc, #48]	; (8001d74 <MS56XXSendCmd+0x54>)
 8001d42:	480d      	ldr	r0, [pc, #52]	; (8001d78 <MS56XXSendCmd+0x58>)
 8001d44:	f007 f8f4 	bl	8008f30 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY);
 8001d48:	bf00      	nop
 8001d4a:	480b      	ldr	r0, [pc, #44]	; (8001d78 <MS56XXSendCmd+0x58>)
 8001d4c:	f007 fd91 	bl	8009872 <HAL_SPI_GetState>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d0f9      	beq.n	8001d4a <MS56XXSendCmd+0x2a>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001d56:	2201      	movs	r2, #1
 8001d58:	2110      	movs	r1, #16
 8001d5a:	4805      	ldr	r0, [pc, #20]	; (8001d70 <MS56XXSendCmd+0x50>)
 8001d5c:	f003 fdee 	bl	800593c <HAL_GPIO_WritePin>
	isCmdSet = true;
 8001d60:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <MS56XXSendCmd+0x5c>)
 8001d62:	2201      	movs	r2, #1
 8001d64:	701a      	strb	r2, [r3, #0]
}
 8001d66:	bf00      	nop
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	40020000 	.word	0x40020000
 8001d74:	2000035c 	.word	0x2000035c
 8001d78:	200047ac 	.word	0x200047ac
 8001d7c:	20000376 	.word	0x20000376

08001d80 <MS56XXRead3Bytes>:

uint32_t MS56XXRead3Bytes(uint8_t address)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	4603      	mov	r3, r0
 8001d88:	71fb      	strb	r3, [r7, #7]
	SPITX[0] = 0x00;
 8001d8a:	4b20      	ldr	r3, [pc, #128]	; (8001e0c <MS56XXRead3Bytes+0x8c>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001d90:	2200      	movs	r2, #0
 8001d92:	2110      	movs	r1, #16
 8001d94:	481e      	ldr	r0, [pc, #120]	; (8001e10 <MS56XXRead3Bytes+0x90>)
 8001d96:	f003 fdd1 	bl	800593c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &SPITX[0], 1, HAL_MAX_DELAY);
 8001d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d9e:	2201      	movs	r2, #1
 8001da0:	491a      	ldr	r1, [pc, #104]	; (8001e0c <MS56XXRead3Bytes+0x8c>)
 8001da2:	481c      	ldr	r0, [pc, #112]	; (8001e14 <MS56XXRead3Bytes+0x94>)
 8001da4:	f007 f8c4 	bl	8008f30 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY);
 8001da8:	bf00      	nop
 8001daa:	481a      	ldr	r0, [pc, #104]	; (8001e14 <MS56XXRead3Bytes+0x94>)
 8001dac:	f007 fd61 	bl	8009872 <HAL_SPI_GetState>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d0f9      	beq.n	8001daa <MS56XXRead3Bytes+0x2a>
	HAL_SPI_Receive(&hspi1, &SPIRX3Byte[0], 1, HAL_MAX_DELAY);
 8001db6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dba:	2201      	movs	r2, #1
 8001dbc:	4916      	ldr	r1, [pc, #88]	; (8001e18 <MS56XXRead3Bytes+0x98>)
 8001dbe:	4815      	ldr	r0, [pc, #84]	; (8001e14 <MS56XXRead3Bytes+0x94>)
 8001dc0:	f007 fa1c 	bl	80091fc <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &SPIRX3Byte[1], 1, HAL_MAX_DELAY);
 8001dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8001dc8:	2201      	movs	r2, #1
 8001dca:	4914      	ldr	r1, [pc, #80]	; (8001e1c <MS56XXRead3Bytes+0x9c>)
 8001dcc:	4811      	ldr	r0, [pc, #68]	; (8001e14 <MS56XXRead3Bytes+0x94>)
 8001dce:	f007 fa15 	bl	80091fc <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &SPIRX3Byte[2], 1, HAL_MAX_DELAY);
 8001dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	4911      	ldr	r1, [pc, #68]	; (8001e20 <MS56XXRead3Bytes+0xa0>)
 8001dda:	480e      	ldr	r0, [pc, #56]	; (8001e14 <MS56XXRead3Bytes+0x94>)
 8001ddc:	f007 fa0e 	bl	80091fc <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001de0:	2201      	movs	r2, #1
 8001de2:	2110      	movs	r1, #16
 8001de4:	480a      	ldr	r0, [pc, #40]	; (8001e10 <MS56XXRead3Bytes+0x90>)
 8001de6:	f003 fda9 	bl	800593c <HAL_GPIO_WritePin>
	isCmdSet = false;
 8001dea:	4b0e      	ldr	r3, [pc, #56]	; (8001e24 <MS56XXRead3Bytes+0xa4>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	701a      	strb	r2, [r3, #0]
	return (SPIRX3Byte[0] << 16) + (SPIRX3Byte[1] << 8 ) + (SPIRX3Byte[0]);
 8001df0:	4b09      	ldr	r3, [pc, #36]	; (8001e18 <MS56XXRead3Bytes+0x98>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	041a      	lsls	r2, r3, #16
 8001df6:	4b08      	ldr	r3, [pc, #32]	; (8001e18 <MS56XXRead3Bytes+0x98>)
 8001df8:	785b      	ldrb	r3, [r3, #1]
 8001dfa:	021b      	lsls	r3, r3, #8
 8001dfc:	4413      	add	r3, r2
 8001dfe:	4a06      	ldr	r2, [pc, #24]	; (8001e18 <MS56XXRead3Bytes+0x98>)
 8001e00:	7812      	ldrb	r2, [r2, #0]
 8001e02:	4413      	add	r3, r2
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	2000035c 	.word	0x2000035c
 8001e10:	40020000 	.word	0x40020000
 8001e14:	200047ac 	.word	0x200047ac
 8001e18:	20000364 	.word	0x20000364
 8001e1c:	20000365 	.word	0x20000365
 8001e20:	20000366 	.word	0x20000366
 8001e24:	20000376 	.word	0x20000376

08001e28 <GetAltitudeAndTemp>:

uint16_t GetAltitudeAndTemp(void)
{
 8001e28:	b4f0      	push	{r4, r5, r6, r7}
 8001e2a:	af00      	add	r7, sp, #0
	dT = RawTemp - Coeff5 * 256;
 8001e2c:	4b47      	ldr	r3, [pc, #284]	; (8001f4c <GetAltitudeAndTemp+0x124>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a47      	ldr	r2, [pc, #284]	; (8001f50 <GetAltitudeAndTemp+0x128>)
 8001e32:	8812      	ldrh	r2, [r2, #0]
 8001e34:	0212      	lsls	r2, r2, #8
 8001e36:	1a9b      	subs	r3, r3, r2
 8001e38:	461a      	mov	r2, r3
 8001e3a:	4b46      	ldr	r3, [pc, #280]	; (8001f54 <GetAltitudeAndTemp+0x12c>)
 8001e3c:	601a      	str	r2, [r3, #0]
	TEMP = 2000 + dT * Coeff6 / 8388608;
 8001e3e:	4b46      	ldr	r3, [pc, #280]	; (8001f58 <GetAltitudeAndTemp+0x130>)
 8001e40:	881b      	ldrh	r3, [r3, #0]
 8001e42:	461a      	mov	r2, r3
 8001e44:	4b43      	ldr	r3, [pc, #268]	; (8001f54 <GetAltitudeAndTemp+0x12c>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	fb03 f302 	mul.w	r3, r3, r2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	da02      	bge.n	8001e56 <GetAltitudeAndTemp+0x2e>
 8001e50:	4a42      	ldr	r2, [pc, #264]	; (8001f5c <GetAltitudeAndTemp+0x134>)
 8001e52:	441a      	add	r2, r3
 8001e54:	4613      	mov	r3, r2
 8001e56:	15db      	asrs	r3, r3, #23
 8001e58:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001e5c:	4a40      	ldr	r2, [pc, #256]	; (8001f60 <GetAltitudeAndTemp+0x138>)
 8001e5e:	6013      	str	r3, [r2, #0]
	OFF = Coeff2 * 131072 + Coeff4 * dT / 64;
 8001e60:	4b40      	ldr	r3, [pc, #256]	; (8001f64 <GetAltitudeAndTemp+0x13c>)
 8001e62:	881b      	ldrh	r3, [r3, #0]
 8001e64:	045a      	lsls	r2, r3, #17
 8001e66:	4b40      	ldr	r3, [pc, #256]	; (8001f68 <GetAltitudeAndTemp+0x140>)
 8001e68:	881b      	ldrh	r3, [r3, #0]
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4b39      	ldr	r3, [pc, #228]	; (8001f54 <GetAltitudeAndTemp+0x12c>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	fb03 f301 	mul.w	r3, r3, r1
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	da00      	bge.n	8001e7a <GetAltitudeAndTemp+0x52>
 8001e78:	333f      	adds	r3, #63	; 0x3f
 8001e7a:	119b      	asrs	r3, r3, #6
 8001e7c:	4413      	add	r3, r2
 8001e7e:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001e82:	4a3a      	ldr	r2, [pc, #232]	; (8001f6c <GetAltitudeAndTemp+0x144>)
 8001e84:	e9c2 3400 	strd	r3, r4, [r2]
	SNES = Coeff1 * 32768 + (Coeff3 * dT) / 127;
 8001e88:	4b39      	ldr	r3, [pc, #228]	; (8001f70 <GetAltitudeAndTemp+0x148>)
 8001e8a:	881b      	ldrh	r3, [r3, #0]
 8001e8c:	03da      	lsls	r2, r3, #15
 8001e8e:	4b39      	ldr	r3, [pc, #228]	; (8001f74 <GetAltitudeAndTemp+0x14c>)
 8001e90:	881b      	ldrh	r3, [r3, #0]
 8001e92:	4619      	mov	r1, r3
 8001e94:	4b2f      	ldr	r3, [pc, #188]	; (8001f54 <GetAltitudeAndTemp+0x12c>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	fb03 f301 	mul.w	r3, r3, r1
 8001e9c:	4936      	ldr	r1, [pc, #216]	; (8001f78 <GetAltitudeAndTemp+0x150>)
 8001e9e:	fb81 0103 	smull	r0, r1, r1, r3
 8001ea2:	4419      	add	r1, r3
 8001ea4:	1189      	asrs	r1, r1, #6
 8001ea6:	17db      	asrs	r3, r3, #31
 8001ea8:	1acb      	subs	r3, r1, r3
 8001eaa:	4413      	add	r3, r2
 8001eac:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001eb0:	4a32      	ldr	r2, [pc, #200]	; (8001f7c <GetAltitudeAndTemp+0x154>)
 8001eb2:	e9c2 3400 	strd	r3, r4, [r2]
	P = ((RawPressure * SNES) / 2097152 - OFF) / 32768;
 8001eb6:	4b32      	ldr	r3, [pc, #200]	; (8001f80 <GetAltitudeAndTemp+0x158>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4619      	mov	r1, r3
 8001ebc:	f04f 0200 	mov.w	r2, #0
 8001ec0:	4b2e      	ldr	r3, [pc, #184]	; (8001f7c <GetAltitudeAndTemp+0x154>)
 8001ec2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001ec6:	fb03 f502 	mul.w	r5, r3, r2
 8001eca:	fb01 f004 	mul.w	r0, r1, r4
 8001ece:	4428      	add	r0, r5
 8001ed0:	fba1 3403 	umull	r3, r4, r1, r3
 8001ed4:	1902      	adds	r2, r0, r4
 8001ed6:	4614      	mov	r4, r2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	f174 0200 	sbcs.w	r2, r4, #0
 8001ede:	da05      	bge.n	8001eec <GetAltitudeAndTemp+0xc4>
 8001ee0:	4928      	ldr	r1, [pc, #160]	; (8001f84 <GetAltitudeAndTemp+0x15c>)
 8001ee2:	f04f 0200 	mov.w	r2, #0
 8001ee6:	185b      	adds	r3, r3, r1
 8001ee8:	eb44 0402 	adc.w	r4, r4, r2
 8001eec:	f04f 0100 	mov.w	r1, #0
 8001ef0:	f04f 0200 	mov.w	r2, #0
 8001ef4:	0d59      	lsrs	r1, r3, #21
 8001ef6:	ea41 21c4 	orr.w	r1, r1, r4, lsl #11
 8001efa:	1562      	asrs	r2, r4, #21
 8001efc:	4b1b      	ldr	r3, [pc, #108]	; (8001f6c <GetAltitudeAndTemp+0x144>)
 8001efe:	e9d3 5600 	ldrd	r5, r6, [r3]
 8001f02:	460b      	mov	r3, r1
 8001f04:	4614      	mov	r4, r2
 8001f06:	1b5b      	subs	r3, r3, r5
 8001f08:	eb64 0406 	sbc.w	r4, r4, r6
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	f174 0200 	sbcs.w	r2, r4, #0
 8001f12:	da06      	bge.n	8001f22 <GetAltitudeAndTemp+0xfa>
 8001f14:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001f18:	f04f 0200 	mov.w	r2, #0
 8001f1c:	185b      	adds	r3, r3, r1
 8001f1e:	eb44 0402 	adc.w	r4, r4, r2
 8001f22:	f04f 0100 	mov.w	r1, #0
 8001f26:	f04f 0200 	mov.w	r2, #0
 8001f2a:	0bd9      	lsrs	r1, r3, #15
 8001f2c:	ea41 4144 	orr.w	r1, r1, r4, lsl #17
 8001f30:	13e2      	asrs	r2, r4, #15
 8001f32:	460b      	mov	r3, r1
 8001f34:	4614      	mov	r4, r2
 8001f36:	461a      	mov	r2, r3
 8001f38:	4b13      	ldr	r3, [pc, #76]	; (8001f88 <GetAltitudeAndTemp+0x160>)
 8001f3a:	601a      	str	r2, [r3, #0]
	return P;
 8001f3c:	4b12      	ldr	r3, [pc, #72]	; (8001f88 <GetAltitudeAndTemp+0x160>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	b29b      	uxth	r3, r3
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bcf0      	pop	{r4, r5, r6, r7}
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	20000388 	.word	0x20000388
 8001f50:	20000370 	.word	0x20000370
 8001f54:	20000390 	.word	0x20000390
 8001f58:	20000372 	.word	0x20000372
 8001f5c:	007fffff 	.word	0x007fffff
 8001f60:	20000394 	.word	0x20000394
 8001f64:	2000036a 	.word	0x2000036a
 8001f68:	2000036e 	.word	0x2000036e
 8001f6c:	20000398 	.word	0x20000398
 8001f70:	20000368 	.word	0x20000368
 8001f74:	2000036c 	.word	0x2000036c
 8001f78:	81020409 	.word	0x81020409
 8001f7c:	200003a0 	.word	0x200003a0
 8001f80:	2000038c 	.word	0x2000038c
 8001f84:	001fffff 	.word	0x001fffff
 8001f88:	200003a8 	.word	0x200003a8

08001f8c <MS56XXCyclicRead>:

void MS56XXCyclicRead(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
	if ( (HAL_GetTick() - LastTempMeasurement) > 1000 )
 8001f90:	f002 f81e 	bl	8003fd0 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	4b39      	ldr	r3, [pc, #228]	; (800207c <MS56XXCyclicRead+0xf0>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001fa0:	d917      	bls.n	8001fd2 <MS56XXCyclicRead+0x46>
	{
		if (!isCmdSet)
 8001fa2:	4b37      	ldr	r3, [pc, #220]	; (8002080 <MS56XXCyclicRead+0xf4>)
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	f083 0301 	eor.w	r3, r3, #1
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d010      	beq.n	8001fd2 <MS56XXCyclicRead+0x46>
		{
			MS56XXSendCmd(0x58);
 8001fb0:	2058      	movs	r0, #88	; 0x58
 8001fb2:	f7ff feb5 	bl	8001d20 <MS56XXSendCmd>
			isCmdSet = true;
 8001fb6:	4b32      	ldr	r3, [pc, #200]	; (8002080 <MS56XXCyclicRead+0xf4>)
 8001fb8:	2201      	movs	r2, #1
 8001fba:	701a      	strb	r2, [r3, #0]
			isNewMS56XXDataAvailable = false;
 8001fbc:	4b31      	ldr	r3, [pc, #196]	; (8002084 <MS56XXCyclicRead+0xf8>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	701a      	strb	r2, [r3, #0]
			isPressureLastCmd = false;
 8001fc2:	4b31      	ldr	r3, [pc, #196]	; (8002088 <MS56XXCyclicRead+0xfc>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	701a      	strb	r2, [r3, #0]
			LastCommandSent = HAL_GetTick();
 8001fc8:	f002 f802 	bl	8003fd0 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	4b2f      	ldr	r3, [pc, #188]	; (800208c <MS56XXCyclicRead+0x100>)
 8001fd0:	601a      	str	r2, [r3, #0]
		}
	}

	if ((HAL_GetTick() - LastPressureMeasurement) > 20)
 8001fd2:	f001 fffd 	bl	8003fd0 <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	4b2d      	ldr	r3, [pc, #180]	; (8002090 <MS56XXCyclicRead+0x104>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b14      	cmp	r3, #20
 8001fe0:	d917      	bls.n	8002012 <MS56XXCyclicRead+0x86>
	{
		if (!isCmdSet)
 8001fe2:	4b27      	ldr	r3, [pc, #156]	; (8002080 <MS56XXCyclicRead+0xf4>)
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	f083 0301 	eor.w	r3, r3, #1
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d010      	beq.n	8002012 <MS56XXCyclicRead+0x86>
		{
			MS56XXSendCmd(0x48);
 8001ff0:	2048      	movs	r0, #72	; 0x48
 8001ff2:	f7ff fe95 	bl	8001d20 <MS56XXSendCmd>
			isCmdSet = true;
 8001ff6:	4b22      	ldr	r3, [pc, #136]	; (8002080 <MS56XXCyclicRead+0xf4>)
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	701a      	strb	r2, [r3, #0]
			isNewMS56XXDataAvailable = false;
 8001ffc:	4b21      	ldr	r3, [pc, #132]	; (8002084 <MS56XXCyclicRead+0xf8>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	701a      	strb	r2, [r3, #0]
			isPressureLastCmd = true;
 8002002:	4b21      	ldr	r3, [pc, #132]	; (8002088 <MS56XXCyclicRead+0xfc>)
 8002004:	2201      	movs	r2, #1
 8002006:	701a      	strb	r2, [r3, #0]
			LastCommandSent = HAL_GetTick();
 8002008:	f001 ffe2 	bl	8003fd0 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	4b1f      	ldr	r3, [pc, #124]	; (800208c <MS56XXCyclicRead+0x100>)
 8002010:	601a      	str	r2, [r3, #0]
		}
	}

	if ( (HAL_GetTick() - LastCommandSent) > 9 )
 8002012:	f001 ffdd 	bl	8003fd0 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	4b1c      	ldr	r3, [pc, #112]	; (800208c <MS56XXCyclicRead+0x100>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b09      	cmp	r3, #9
 8002020:	d929      	bls.n	8002076 <MS56XXCyclicRead+0xea>
	{
		if (isCmdSet)
 8002022:	4b17      	ldr	r3, [pc, #92]	; (8002080 <MS56XXCyclicRead+0xf4>)
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d025      	beq.n	8002076 <MS56XXCyclicRead+0xea>
		{
			if (!isPressureLastCmd)
 800202a:	4b17      	ldr	r3, [pc, #92]	; (8002088 <MS56XXCyclicRead+0xfc>)
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	f083 0301 	eor.w	r3, r3, #1
 8002032:	b2db      	uxtb	r3, r3
 8002034:	2b00      	cmp	r3, #0
 8002036:	d00b      	beq.n	8002050 <MS56XXCyclicRead+0xc4>
			{
				RawTemp = MS56XXRead3Bytes(0);
 8002038:	2000      	movs	r0, #0
 800203a:	f7ff fea1 	bl	8001d80 <MS56XXRead3Bytes>
 800203e:	4602      	mov	r2, r0
 8002040:	4b14      	ldr	r3, [pc, #80]	; (8002094 <MS56XXCyclicRead+0x108>)
 8002042:	601a      	str	r2, [r3, #0]
				LastTempMeasurement = HAL_GetTick();
 8002044:	f001 ffc4 	bl	8003fd0 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	4b0c      	ldr	r3, [pc, #48]	; (800207c <MS56XXCyclicRead+0xf0>)
 800204c:	601a      	str	r2, [r3, #0]
 800204e:	e00a      	b.n	8002066 <MS56XXCyclicRead+0xda>
			}
			else
			{
				RawPressure = MS56XXRead3Bytes(0);
 8002050:	2000      	movs	r0, #0
 8002052:	f7ff fe95 	bl	8001d80 <MS56XXRead3Bytes>
 8002056:	4602      	mov	r2, r0
 8002058:	4b0f      	ldr	r3, [pc, #60]	; (8002098 <MS56XXCyclicRead+0x10c>)
 800205a:	601a      	str	r2, [r3, #0]
				LastPressureMeasurement = HAL_GetTick();
 800205c:	f001 ffb8 	bl	8003fd0 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	4b0b      	ldr	r3, [pc, #44]	; (8002090 <MS56XXCyclicRead+0x104>)
 8002064:	601a      	str	r2, [r3, #0]
			}
			isCmdSet = false;
 8002066:	4b06      	ldr	r3, [pc, #24]	; (8002080 <MS56XXCyclicRead+0xf4>)
 8002068:	2200      	movs	r2, #0
 800206a:	701a      	strb	r2, [r3, #0]
			GetAltitudeAndTemp();
 800206c:	f7ff fedc 	bl	8001e28 <GetAltitudeAndTemp>
			isNewMS56XXDataAvailable = true;
 8002070:	4b04      	ldr	r3, [pc, #16]	; (8002084 <MS56XXCyclicRead+0xf8>)
 8002072:	2201      	movs	r2, #1
 8002074:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8002076:	bf00      	nop
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	2000037c 	.word	0x2000037c
 8002080:	20000376 	.word	0x20000376
 8002084:	20000378 	.word	0x20000378
 8002088:	20000377 	.word	0x20000377
 800208c:	20000384 	.word	0x20000384
 8002090:	20000380 	.word	0x20000380
 8002094:	20000388 	.word	0x20000388
 8002098:	2000038c 	.word	0x2000038c

0800209c <func_dir>:
 */
#include "main.h"
#include "string.h"

void func_dir(void)
{
 800209c:	b590      	push	{r4, r7, lr}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
	sprintf(USBTXArray, "%6.3f, dir command received\r\n",CurrentTime());
 80020a2:	f001 f8a9 	bl	80031f8 <CurrentTime>
 80020a6:	ec54 3b10 	vmov	r3, r4, d0
 80020aa:	461a      	mov	r2, r3
 80020ac:	4623      	mov	r3, r4
 80020ae:	4906      	ldr	r1, [pc, #24]	; (80020c8 <func_dir+0x2c>)
 80020b0:	4806      	ldr	r0, [pc, #24]	; (80020cc <func_dir+0x30>)
 80020b2:	f00e f8d7 	bl	8010264 <siprintf>
	SendToScreen(false);
 80020b6:	2000      	movs	r0, #0
 80020b8:	f000 f880 	bl	80021bc <SendToScreen>
	int a= 1;
 80020bc:	2301      	movs	r3, #1
 80020be:	607b      	str	r3, [r7, #4]
}
 80020c0:	bf00      	nop
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd90      	pop	{r4, r7, pc}
 80020c8:	08013018 	.word	0x08013018
 80020cc:	200008ac 	.word	0x200008ac

080020d0 <func_imp>:
void func_imp(void)
{
 80020d0:	b590      	push	{r4, r7, lr}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
	sprintf(USBTXArray, "%6.3f, import command received\r\n",CurrentTime());
 80020d6:	f001 f88f 	bl	80031f8 <CurrentTime>
 80020da:	ec54 3b10 	vmov	r3, r4, d0
 80020de:	461a      	mov	r2, r3
 80020e0:	4623      	mov	r3, r4
 80020e2:	4906      	ldr	r1, [pc, #24]	; (80020fc <func_imp+0x2c>)
 80020e4:	4806      	ldr	r0, [pc, #24]	; (8002100 <func_imp+0x30>)
 80020e6:	f00e f8bd 	bl	8010264 <siprintf>
	SendToScreen(false);
 80020ea:	2000      	movs	r0, #0
 80020ec:	f000 f866 	bl	80021bc <SendToScreen>
	int b =1;
 80020f0:	2301      	movs	r3, #1
 80020f2:	607b      	str	r3, [r7, #4]
}
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd90      	pop	{r4, r7, pc}
 80020fc:	08013038 	.word	0x08013038
 8002100:	200008ac 	.word	0x200008ac

08002104 <SearchString>:

uint32_t SearchString(char *pSrc, char *StringToLookFor)
{
 8002104:	b590      	push	{r4, r7, lr}
 8002106:	b087      	sub	sp, #28
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
	uint32_t LocalCounter = 0;
 800210e:	2300      	movs	r3, #0
 8002110:	617b      	str	r3, [r7, #20]
	bool StringFound = false;
 8002112:	2300      	movs	r3, #0
 8002114:	72fb      	strb	r3, [r7, #11]

	if (strlen(pSrc) > strlen(StringToLookFor))
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f7fe f89c 	bl	8000254 <strlen>
 800211c:	4604      	mov	r4, r0
 800211e:	6838      	ldr	r0, [r7, #0]
 8002120:	f7fe f898 	bl	8000254 <strlen>
 8002124:	4603      	mov	r3, r0
 8002126:	429c      	cmp	r4, r3
 8002128:	d943      	bls.n	80021b2 <SearchString+0xae>
	{
		for (int i = 0 ; i <= strlen(pSrc) - strlen(StringToLookFor); i++ )
 800212a:	2300      	movs	r3, #0
 800212c:	613b      	str	r3, [r7, #16]
 800212e:	e032      	b.n	8002196 <SearchString+0x92>
		{
			if (StringFound)
 8002130:	7afb      	ldrb	r3, [r7, #11]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d13c      	bne.n	80021b0 <SearchString+0xac>
			{
				break;
			}
			for (int j = 0; j < strlen(StringToLookFor); j++)
 8002136:	2300      	movs	r3, #0
 8002138:	60fb      	str	r3, [r7, #12]
 800213a:	e022      	b.n	8002182 <SearchString+0x7e>
			{
				if (StringToLookFor[j] == pSrc[j+i])
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	683a      	ldr	r2, [r7, #0]
 8002140:	4413      	add	r3, r2
 8002142:	781a      	ldrb	r2, [r3, #0]
 8002144:	68f9      	ldr	r1, [r7, #12]
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	440b      	add	r3, r1
 800214a:	4619      	mov	r1, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	440b      	add	r3, r1
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	429a      	cmp	r2, r3
 8002154:	d10a      	bne.n	800216c <SearchString+0x68>
				{
					LocalCounter++;
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	3301      	adds	r3, #1
 800215a:	617b      	str	r3, [r7, #20]
				else
				{
					LocalCounter = 0;
					break;
				}
				if (strlen(StringToLookFor) == LocalCounter)
 800215c:	6838      	ldr	r0, [r7, #0]
 800215e:	f7fe f879 	bl	8000254 <strlen>
 8002162:	4602      	mov	r2, r0
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	4293      	cmp	r3, r2
 8002168:	d108      	bne.n	800217c <SearchString+0x78>
 800216a:	e002      	b.n	8002172 <SearchString+0x6e>
					LocalCounter = 0;
 800216c:	2300      	movs	r3, #0
 800216e:	617b      	str	r3, [r7, #20]
					break;
 8002170:	e00e      	b.n	8002190 <SearchString+0x8c>
				{
					StringFound = true;
 8002172:	2301      	movs	r3, #1
 8002174:	72fb      	strb	r3, [r7, #11]
					return LocalCounter+1;
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	3301      	adds	r3, #1
 800217a:	e01b      	b.n	80021b4 <SearchString+0xb0>
			for (int j = 0; j < strlen(StringToLookFor); j++)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	3301      	adds	r3, #1
 8002180:	60fb      	str	r3, [r7, #12]
 8002182:	6838      	ldr	r0, [r7, #0]
 8002184:	f7fe f866 	bl	8000254 <strlen>
 8002188:	4602      	mov	r2, r0
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	429a      	cmp	r2, r3
 800218e:	d8d5      	bhi.n	800213c <SearchString+0x38>
		for (int i = 0 ; i <= strlen(pSrc) - strlen(StringToLookFor); i++ )
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	3301      	adds	r3, #1
 8002194:	613b      	str	r3, [r7, #16]
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f7fe f85c 	bl	8000254 <strlen>
 800219c:	4604      	mov	r4, r0
 800219e:	6838      	ldr	r0, [r7, #0]
 80021a0:	f7fe f858 	bl	8000254 <strlen>
 80021a4:	4603      	mov	r3, r0
 80021a6:	1ae2      	subs	r2, r4, r3
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d2c0      	bcs.n	8002130 <SearchString+0x2c>
 80021ae:	e000      	b.n	80021b2 <SearchString+0xae>
				break;
 80021b0:	bf00      	nop
					continue;
				}
			}
		}
	}
	return 0;
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	371c      	adds	r7, #28
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd90      	pop	{r4, r7, pc}

080021bc <SendToScreen>:
		{ "imp", func_imp }
};


void SendToScreen(bool AddNewLine)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	4603      	mov	r3, r0
 80021c4:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart2, USBTXArray, 256,10); // HAL_UART_Transmit(&huart2, USBTXArray, 1024,3); TIM2->CCR1
 80021c6:	230a      	movs	r3, #10
 80021c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021cc:	490b      	ldr	r1, [pc, #44]	; (80021fc <SendToScreen+0x40>)
 80021ce:	480c      	ldr	r0, [pc, #48]	; (8002200 <SendToScreen+0x44>)
 80021d0:	f008 fcca 	bl	800ab68 <HAL_UART_Transmit>
	memset(USBTXArray,0, 256);
 80021d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021d8:	2100      	movs	r1, #0
 80021da:	4808      	ldr	r0, [pc, #32]	; (80021fc <SendToScreen+0x40>)
 80021dc:	f00d fa21 	bl	800f622 <memset>
	if (AddNewLine)
 80021e0:	79fb      	ldrb	r3, [r7, #7]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d005      	beq.n	80021f2 <SendToScreen+0x36>
	{
		HAL_UART_Transmit(&huart2, "\r\n", 2,1);
 80021e6:	2301      	movs	r3, #1
 80021e8:	2202      	movs	r2, #2
 80021ea:	4906      	ldr	r1, [pc, #24]	; (8002204 <SendToScreen+0x48>)
 80021ec:	4804      	ldr	r0, [pc, #16]	; (8002200 <SendToScreen+0x44>)
 80021ee:	f008 fcbb 	bl	800ab68 <HAL_UART_Transmit>
	}
}
 80021f2:	bf00      	nop
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	200008ac 	.word	0x200008ac
 8002200:	20004850 	.word	0x20004850
 8002204:	08013064 	.word	0x08013064

08002208 <myswitch>:

uint8_t myswitch( char* token )
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
	for( stringcase* pCase = cases; pCase != cases + sizeof( cases ) / sizeof( cases[0] ); pCase++ )
 8002210:	4b0e      	ldr	r3, [pc, #56]	; (800224c <myswitch+0x44>)
 8002212:	60fb      	str	r3, [r7, #12]
 8002214:	e010      	b.n	8002238 <myswitch+0x30>
	{
		if( 0 == strcmp( pCase->string, token ) )
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	6879      	ldr	r1, [r7, #4]
 800221c:	4618      	mov	r0, r3
 800221e:	f7fe f80f 	bl	8000240 <strcmp>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d104      	bne.n	8002232 <myswitch+0x2a>
		{
			(*pCase->func)();
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	4798      	blx	r3
			return 1;
 800222e:	2301      	movs	r3, #1
 8002230:	e007      	b.n	8002242 <myswitch+0x3a>
	for( stringcase* pCase = cases; pCase != cases + sizeof( cases ) / sizeof( cases[0] ); pCase++ )
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	3308      	adds	r3, #8
 8002236:	60fb      	str	r3, [r7, #12]
 8002238:	4a05      	ldr	r2, [pc, #20]	; (8002250 <myswitch+0x48>)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	4293      	cmp	r3, r2
 800223e:	d1ea      	bne.n	8002216 <myswitch+0xe>
			break;
		}
	}
	return 0;
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3710      	adds	r7, #16
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	20000008 	.word	0x20000008
 8002250:	20000018 	.word	0x20000018

08002254 <getCMD>:

void getCMD(void)
{
 8002254:	b590      	push	{r4, r7, lr}
 8002256:	b087      	sub	sp, #28
 8002258:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart2, USBRXArray, 64);
 800225a:	2240      	movs	r2, #64	; 0x40
 800225c:	4935      	ldr	r1, [pc, #212]	; (8002334 <getCMD+0xe0>)
 800225e:	4836      	ldr	r0, [pc, #216]	; (8002338 <getCMD+0xe4>)
 8002260:	f008 fd14 	bl	800ac8c <HAL_UART_Receive_DMA>

	int LocalCounter = 0;
 8002264:	2300      	movs	r3, #0
 8002266:	617b      	str	r3, [r7, #20]
	uint8_t LocalRet = 2;
 8002268:	2302      	movs	r3, #2
 800226a:	74fb      	strb	r3, [r7, #19]
	if (USBRXArray[0] == 0)
 800226c:	4b31      	ldr	r3, [pc, #196]	; (8002334 <getCMD+0xe0>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d11b      	bne.n	80022ac <getCMD+0x58>
	{
		HAL_UART_DMAPause(&huart2);
 8002274:	4830      	ldr	r0, [pc, #192]	; (8002338 <getCMD+0xe4>)
 8002276:	f008 fd8d 	bl	800ad94 <HAL_UART_DMAPause>
		while ( (LocalCounter < sizeof(USBRXArray)) && (USBRXArray[0] == 0) )
 800227a:	e00c      	b.n	8002296 <getCMD+0x42>
		{
			memcpy(&USBRXArray[0], &USBRXArray[1],sizeof(USBRXArray)-1);
 800227c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8002280:	492e      	ldr	r1, [pc, #184]	; (800233c <getCMD+0xe8>)
 8002282:	482c      	ldr	r0, [pc, #176]	; (8002334 <getCMD+0xe0>)
 8002284:	f00d f9c2 	bl	800f60c <memcpy>
			memset(&USBRXArray[sizeof(USBRXArray)-1],0,1);
 8002288:	4b2a      	ldr	r3, [pc, #168]	; (8002334 <getCMD+0xe0>)
 800228a:	2200      	movs	r2, #0
 800228c:	f883 23ff 	strb.w	r2, [r3, #1023]	; 0x3ff
			LocalCounter++;
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	3301      	adds	r3, #1
 8002294:	617b      	str	r3, [r7, #20]
		while ( (LocalCounter < sizeof(USBRXArray)) && (USBRXArray[0] == 0) )
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800229c:	d203      	bcs.n	80022a6 <getCMD+0x52>
 800229e:	4b25      	ldr	r3, [pc, #148]	; (8002334 <getCMD+0xe0>)
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d0ea      	beq.n	800227c <getCMD+0x28>
		}
		HAL_UART_DMAResume(&huart2);
 80022a6:	4824      	ldr	r0, [pc, #144]	; (8002338 <getCMD+0xe4>)
 80022a8:	f008 fdc8 	bl	800ae3c <HAL_UART_DMAResume>
	}
	if ((strlen(USBRXArray) > 0) && (strstr(USBRXArray, "\r\n")) )
 80022ac:	4b21      	ldr	r3, [pc, #132]	; (8002334 <getCMD+0xe0>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d03a      	beq.n	800232a <getCMD+0xd6>
 80022b4:	4922      	ldr	r1, [pc, #136]	; (8002340 <getCMD+0xec>)
 80022b6:	481f      	ldr	r0, [pc, #124]	; (8002334 <getCMD+0xe0>)
 80022b8:	f00e f809 	bl	80102ce <strstr>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d033      	beq.n	800232a <getCMD+0xd6>
	{
		HAL_UART_DMAPause(&huart2);
 80022c2:	481d      	ldr	r0, [pc, #116]	; (8002338 <getCMD+0xe4>)
 80022c4:	f008 fd66 	bl	800ad94 <HAL_UART_DMAPause>
		uint32_t NewLineIndex = 0;
 80022c8:	2300      	movs	r3, #0
 80022ca:	60fb      	str	r3, [r7, #12]
		NewLineIndex = SearchString(USBRXArray,"\r\n");
 80022cc:	491c      	ldr	r1, [pc, #112]	; (8002340 <getCMD+0xec>)
 80022ce:	4819      	ldr	r0, [pc, #100]	; (8002334 <getCMD+0xe0>)
 80022d0:	f7ff ff18 	bl	8002104 <SearchString>
 80022d4:	60f8      	str	r0, [r7, #12]
		char LocalCMD[10] = {0};
 80022d6:	463b      	mov	r3, r7
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	605a      	str	r2, [r3, #4]
 80022de:	811a      	strh	r2, [r3, #8]
		strncpy(&LocalCMD,&USBRXArray,NewLineIndex);
 80022e0:	463b      	mov	r3, r7
 80022e2:	68fa      	ldr	r2, [r7, #12]
 80022e4:	4913      	ldr	r1, [pc, #76]	; (8002334 <getCMD+0xe0>)
 80022e6:	4618      	mov	r0, r3
 80022e8:	f00d ffdc 	bl	80102a4 <strncpy>


		LocalRet = myswitch(LocalCMD);
 80022ec:	463b      	mov	r3, r7
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7ff ff8a 	bl	8002208 <myswitch>
 80022f4:	4603      	mov	r3, r0
 80022f6:	74fb      	strb	r3, [r7, #19]
		if (!LocalRet)
 80022f8:	7cfb      	ldrb	r3, [r7, #19]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d10c      	bne.n	8002318 <getCMD+0xc4>
		{
			sprintf(USBTXArray, "%6.3f, failed to execute command\r\n",CurrentTime());
 80022fe:	f000 ff7b 	bl	80031f8 <CurrentTime>
 8002302:	ec54 3b10 	vmov	r3, r4, d0
 8002306:	461a      	mov	r2, r3
 8002308:	4623      	mov	r3, r4
 800230a:	490e      	ldr	r1, [pc, #56]	; (8002344 <getCMD+0xf0>)
 800230c:	480e      	ldr	r0, [pc, #56]	; (8002348 <getCMD+0xf4>)
 800230e:	f00d ffa9 	bl	8010264 <siprintf>
			SendToScreen(false);
 8002312:	2000      	movs	r0, #0
 8002314:	f7ff ff52 	bl	80021bc <SendToScreen>
		}
		memset(&USBRXArray,0,sizeof(USBRXArray));
 8002318:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800231c:	2100      	movs	r1, #0
 800231e:	4805      	ldr	r0, [pc, #20]	; (8002334 <getCMD+0xe0>)
 8002320:	f00d f97f 	bl	800f622 <memset>
		HAL_UART_DMAResume(&huart2);
 8002324:	4804      	ldr	r0, [pc, #16]	; (8002338 <getCMD+0xe4>)
 8002326:	f008 fd89 	bl	800ae3c <HAL_UART_DMAResume>
	}
//
}
 800232a:	bf00      	nop
 800232c:	371c      	adds	r7, #28
 800232e:	46bd      	mov	sp, r7
 8002330:	bd90      	pop	{r4, r7, pc}
 8002332:	bf00      	nop
 8002334:	200003ac 	.word	0x200003ac
 8002338:	20004850 	.word	0x20004850
 800233c:	200003ad 	.word	0x200003ad
 8002340:	08013064 	.word	0x08013064
 8002344:	08013068 	.word	0x08013068
 8002348:	200008ac 	.word	0x200008ac

0800234c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */
FATFS SDFatFS;
/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8002350:	4904      	ldr	r1, [pc, #16]	; (8002364 <MX_FATFS_Init+0x18>)
 8002352:	4805      	ldr	r0, [pc, #20]	; (8002368 <MX_FATFS_Init+0x1c>)
 8002354:	f00d f85a 	bl	800f40c <FATFS_LinkDriver>
 8002358:	4603      	mov	r3, r0
 800235a:	461a      	mov	r2, r3
 800235c:	4b03      	ldr	r3, [pc, #12]	; (800236c <MX_FATFS_Init+0x20>)
 800235e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8002360:	bf00      	nop
 8002362:	bd80      	pop	{r7, pc}
 8002364:	20001330 	.word	0x20001330
 8002368:	20000028 	.word	0x20000028
 800236c:	20001334 	.word	0x20001334

08002370 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8002374:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8002376:	4618      	mov	r0, r3
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 8002386:	b086      	sub	sp, #24
 8002388:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800238a:	f001 fdd0 	bl	8003f2e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800238e:	f000 f9cb 	bl	8002728 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002392:	f000 fe45 	bl	8003020 <MX_GPIO_Init>
  MX_DMA_Init();
 8002396:	f000 fe15 	bl	8002fc4 <MX_DMA_Init>
  MX_TIM4_Init();
 800239a:	f000 fd09 	bl	8002db0 <MX_TIM4_Init>
  MX_TIM1_Init();
 800239e:	f000 fbeb 	bl	8002b78 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80023a2:	f000 fddb 	bl	8002f5c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80023a6:	f000 fab9 	bl	800291c <MX_I2C1_Init>
  MX_FATFS_Init();
 80023aa:	f7ff ffcf 	bl	800234c <MX_FATFS_Init>
  MX_QUADSPI_Init();
 80023ae:	f000 faf5 	bl	800299c <MX_QUADSPI_Init>
  MX_SDMMC1_MMC_Init();
 80023b2:	f000 fb7d 	bl	8002ab0 <MX_SDMMC1_MMC_Init>
  MX_SPI1_Init();
 80023b6:	f000 fba1 	bl	8002afc <MX_SPI1_Init>
  MX_ADC1_Init();
 80023ba:	f000 fa5d 	bl	8002878 <MX_ADC1_Init>
  MX_RTC_Init();
 80023be:	f000 fb19 	bl	80029f4 <MX_RTC_Init>
  MX_TIM2_Init();
 80023c2:	f000 fc99 	bl	8002cf8 <MX_TIM2_Init>
  MX_UART5_Init();
 80023c6:	f000 fd95 	bl	8002ef4 <MX_UART5_Init>
  MX_UART4_Init();
 80023ca:	f000 fd63 	bl	8002e94 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Init(&htim1); // PWM Generation Servos
 80023ce:	48b8      	ldr	r0, [pc, #736]	; (80026b0 <main+0x330>)
 80023d0:	f007 fbd2 	bl	8009b78 <HAL_TIM_PWM_Init>
  HAL_TIM_PWM_Init(&htim4); // LED
 80023d4:	48b7      	ldr	r0, [pc, #732]	; (80026b4 <main+0x334>)
 80023d6:	f007 fbcf 	bl	8009b78 <HAL_TIM_PWM_Init>
  HAL_ADC_Start(&hadc1);    // Battery
 80023da:	48b7      	ldr	r0, [pc, #732]	; (80026b8 <main+0x338>)
 80023dc:	f001 fe6a 	bl	80040b4 <HAL_ADC_Start>
  //
  //	MS56XXInit();

  //	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET); 	// QSPI CS Low
  //	HAL_Delay(15);
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_SET); // QSPI WP High
 80023e0:	2201      	movs	r2, #1
 80023e2:	2104      	movs	r1, #4
 80023e4:	48b5      	ldr	r0, [pc, #724]	; (80026bc <main+0x33c>)
 80023e6:	f003 faa9 	bl	800593c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80023ea:	2001      	movs	r0, #1
 80023ec:	f001 fdfc 	bl	8003fe8 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET); // QSPI RST High
 80023f0:	2200      	movs	r2, #0
 80023f2:	2102      	movs	r1, #2
 80023f4:	48b2      	ldr	r0, [pc, #712]	; (80026c0 <main+0x340>)
 80023f6:	f003 faa1 	bl	800593c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80023fa:	2001      	movs	r0, #1
 80023fc:	f001 fdf4 	bl	8003fe8 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET); // QSPI RST High
 8002400:	2201      	movs	r2, #1
 8002402:	2102      	movs	r1, #2
 8002404:	48ae      	ldr	r0, [pc, #696]	; (80026c0 <main+0x340>)
 8002406:	f003 fa99 	bl	800593c <HAL_GPIO_WritePin>
  HAL_Delay(2);
 800240a:	2002      	movs	r0, #2
 800240c:	f001 fdec 	bl	8003fe8 <HAL_Delay>

  QSPI_Init();
 8002410:	f7fe fa56 	bl	80008c0 <QSPI_Init>
//  Flash example
  QSPI_Read_Status_registers(&hqspi, &RR1, &RR2, &RR3);
 8002414:	4bab      	ldr	r3, [pc, #684]	; (80026c4 <main+0x344>)
 8002416:	4aac      	ldr	r2, [pc, #688]	; (80026c8 <main+0x348>)
 8002418:	49ac      	ldr	r1, [pc, #688]	; (80026cc <main+0x34c>)
 800241a:	48ad      	ldr	r0, [pc, #692]	; (80026d0 <main+0x350>)
 800241c:	f7fe fc38 	bl	8000c90 <QSPI_Read_Status_registers>
  RR2 = 0x22;
 8002420:	4ba9      	ldr	r3, [pc, #676]	; (80026c8 <main+0x348>)
 8002422:	2222      	movs	r2, #34	; 0x22
 8002424:	801a      	strh	r2, [r3, #0]
  RR3 = 0x60;
 8002426:	4ba7      	ldr	r3, [pc, #668]	; (80026c4 <main+0x344>)
 8002428:	2260      	movs	r2, #96	; 0x60
 800242a:	801a      	strh	r2, [r3, #0]
  QSPI_Reset_Status_registers(&hqspi, &RR1, &RR2, &RR3);
 800242c:	4ba5      	ldr	r3, [pc, #660]	; (80026c4 <main+0x344>)
 800242e:	4aa6      	ldr	r2, [pc, #664]	; (80026c8 <main+0x348>)
 8002430:	49a6      	ldr	r1, [pc, #664]	; (80026cc <main+0x34c>)
 8002432:	48a7      	ldr	r0, [pc, #668]	; (80026d0 <main+0x350>)
 8002434:	f7fe fcd4 	bl	8000de0 <QSPI_Reset_Status_registers>
  HAL_Delay(40);
 8002438:	2028      	movs	r0, #40	; 0x28
 800243a:	f001 fdd5 	bl	8003fe8 <HAL_Delay>
  QSPI_READMD(&MID, &DID);
 800243e:	49a5      	ldr	r1, [pc, #660]	; (80026d4 <main+0x354>)
 8002440:	48a5      	ldr	r0, [pc, #660]	; (80026d8 <main+0x358>)
 8002442:	f7fe fbab 	bl	8000b9c <QSPI_READMD>

  QSPI_Read_Status_registers(&hqspi, &RR1, &RR2, &RR3);
 8002446:	4b9f      	ldr	r3, [pc, #636]	; (80026c4 <main+0x344>)
 8002448:	4a9f      	ldr	r2, [pc, #636]	; (80026c8 <main+0x348>)
 800244a:	49a0      	ldr	r1, [pc, #640]	; (80026cc <main+0x34c>)
 800244c:	48a0      	ldr	r0, [pc, #640]	; (80026d0 <main+0x350>)
 800244e:	f7fe fc1f 	bl	8000c90 <QSPI_Read_Status_registers>
  do
  {
    HAL_Delay(1);
 8002452:	2001      	movs	r0, #1
 8002454:	f001 fdc8 	bl	8003fe8 <HAL_Delay>
    FS_ret2 = f_mount(&USERFatFS, "\\", 0);
 8002458:	2200      	movs	r2, #0
 800245a:	49a0      	ldr	r1, [pc, #640]	; (80026dc <main+0x35c>)
 800245c:	48a0      	ldr	r0, [pc, #640]	; (80026e0 <main+0x360>)
 800245e:	f00b ff65 	bl	800e32c <f_mount>
 8002462:	4603      	mov	r3, r0
 8002464:	461a      	mov	r2, r3
 8002466:	4b9f      	ldr	r3, [pc, #636]	; (80026e4 <main+0x364>)
 8002468:	701a      	strb	r2, [r3, #0]
  } while (FS_ret2 != FR_OK);
 800246a:	4b9e      	ldr	r3, [pc, #632]	; (80026e4 <main+0x364>)
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1ef      	bne.n	8002452 <main+0xd2>

  DWORD free_clusters, free_sectors, total_sectors;

  FATFS *getFreeFs;
  uint8_t buffer[_MAX_SS];
  FS_ret2 = f_getfree("\\", &free_clusters, &getFreeFs);
 8002472:	f241 0208 	movw	r2, #4104	; 0x1008
 8002476:	443a      	add	r2, r7
 8002478:	f241 030c 	movw	r3, #4108	; 0x100c
 800247c:	443b      	add	r3, r7
 800247e:	4619      	mov	r1, r3
 8002480:	4896      	ldr	r0, [pc, #600]	; (80026dc <main+0x35c>)
 8002482:	f00c fa96 	bl	800e9b2 <f_getfree>
 8002486:	4603      	mov	r3, r0
 8002488:	461a      	mov	r2, r3
 800248a:	4b96      	ldr	r3, [pc, #600]	; (80026e4 <main+0x364>)
 800248c:	701a      	strb	r2, [r3, #0]
  if (FS_ret2 != FR_OK)
 800248e:	4b95      	ldr	r3, [pc, #596]	; (80026e4 <main+0x364>)
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d010      	beq.n	80024b8 <main+0x138>
  {
    FS_ret2 = f_mkfs("\\", FM_FAT, 0, buffer, sizeof(buffer));
 8002496:	4b94      	ldr	r3, [pc, #592]	; (80026e8 <main+0x368>)
 8002498:	f241 0250 	movw	r2, #4176	; 0x1050
 800249c:	443a      	add	r2, r7
 800249e:	4413      	add	r3, r2
 80024a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80024a4:	9200      	str	r2, [sp, #0]
 80024a6:	2200      	movs	r2, #0
 80024a8:	2101      	movs	r1, #1
 80024aa:	488c      	ldr	r0, [pc, #560]	; (80026dc <main+0x35c>)
 80024ac:	f00c fb36 	bl	800eb1c <f_mkfs>
 80024b0:	4603      	mov	r3, r0
 80024b2:	461a      	mov	r2, r3
 80024b4:	4b8b      	ldr	r3, [pc, #556]	; (80026e4 <main+0x364>)
 80024b6:	701a      	strb	r2, [r3, #0]
  }

  total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 80024b8:	f241 0308 	movw	r3, #4104	; 0x1008
 80024bc:	443b      	add	r3, r7
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	699b      	ldr	r3, [r3, #24]
 80024c2:	3b02      	subs	r3, #2
 80024c4:	f241 0208 	movw	r2, #4104	; 0x1008
 80024c8:	443a      	add	r2, r7
 80024ca:	6812      	ldr	r2, [r2, #0]
 80024cc:	8952      	ldrh	r2, [r2, #10]
 80024ce:	fb02 f303 	mul.w	r3, r2, r3
 80024d2:	f241 024c 	movw	r2, #4172	; 0x104c
 80024d6:	443a      	add	r2, r7
 80024d8:	6013      	str	r3, [r2, #0]
  free_sectors = free_clusters * getFreeFs->csize;
 80024da:	f241 0308 	movw	r3, #4104	; 0x1008
 80024de:	443b      	add	r3, r7
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	895b      	ldrh	r3, [r3, #10]
 80024e4:	461a      	mov	r2, r3
 80024e6:	f241 030c 	movw	r3, #4108	; 0x100c
 80024ea:	443b      	add	r3, r7
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	fb03 f302 	mul.w	r3, r3, r2
 80024f2:	f241 0248 	movw	r2, #4168	; 0x1048
 80024f6:	443a      	add	r2, r7
 80024f8:	6013      	str	r3, [r2, #0]

  do
  {
    HAL_Delay(1);
 80024fa:	2001      	movs	r0, #1
 80024fc:	f001 fd74 	bl	8003fe8 <HAL_Delay>
    FS_ret2 = f_open(&USERFile, "Test.txt", FA_READ | FA_CREATE_ALWAYS);
 8002500:	2209      	movs	r2, #9
 8002502:	497a      	ldr	r1, [pc, #488]	; (80026ec <main+0x36c>)
 8002504:	487a      	ldr	r0, [pc, #488]	; (80026f0 <main+0x370>)
 8002506:	f00b ff57 	bl	800e3b8 <f_open>
 800250a:	4603      	mov	r3, r0
 800250c:	461a      	mov	r2, r3
 800250e:	4b75      	ldr	r3, [pc, #468]	; (80026e4 <main+0x364>)
 8002510:	701a      	strb	r2, [r3, #0]
  } while ( (FS_ret2 != FR_OK) );
 8002512:	4b74      	ldr	r3, [pc, #464]	; (80026e4 <main+0x364>)
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1ef      	bne.n	80024fa <main+0x17a>

  unsigned int br = 0;
 800251a:	4b76      	ldr	r3, [pc, #472]	; (80026f4 <main+0x374>)
 800251c:	f241 0250 	movw	r2, #4176	; 0x1050
 8002520:	443a      	add	r2, r7
 8002522:	4413      	add	r3, r2
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]
  FS_ret2 = f_read(&USERFile, &FileReadBuffer, sizeof(FileReadBuffer), &br);
 8002528:	4b72      	ldr	r3, [pc, #456]	; (80026f4 <main+0x374>)
 800252a:	f241 0250 	movw	r2, #4176	; 0x1050
 800252e:	443a      	add	r2, r7
 8002530:	4413      	add	r3, r2
 8002532:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002536:	4970      	ldr	r1, [pc, #448]	; (80026f8 <main+0x378>)
 8002538:	486d      	ldr	r0, [pc, #436]	; (80026f0 <main+0x370>)
 800253a:	f00c f8fb 	bl	800e734 <f_read>
 800253e:	4603      	mov	r3, r0
 8002540:	461a      	mov	r2, r3
 8002542:	4b68      	ldr	r3, [pc, #416]	; (80026e4 <main+0x364>)
 8002544:	701a      	strb	r2, [r3, #0]

  vBat = measureBattery();
 8002546:	f000 fe6f 	bl	8003228 <measureBattery>
 800254a:	eeb0 7b40 	vmov.f64	d7, d0
 800254e:	4b6b      	ldr	r3, [pc, #428]	; (80026fc <main+0x37c>)
 8002550:	ed83 7b00 	vstr	d7, [r3]
  MS56XXInit();
 8002554:	f7ff fb7a 	bl	8001c4c <MS56XXInit>
  BNOInit();
 8002558:	f7ff fae0 	bl	8001b1c <BNOInit>
  led_init();
 800255c:	f7fe fd96 	bl	800108c <led_init>
  SetRGB(0, 250, 0);
 8002560:	2200      	movs	r2, #0
 8002562:	21fa      	movs	r1, #250	; 0xfa
 8002564:	2000      	movs	r0, #0
 8002566:	f7fe fda3 	bl	80010b0 <SetRGB>
//  Write Data to terminal - Example
//  ret = HAL_UART_Transmit_DMA(&huart2, USBTXArray, 1024);

//  HAL_UART_Receive_DMA(&huart5, UART5RXArray, 150);
//  NumberOfByteRet = CheckDataFromUART();
  LastBLERead = HAL_GetTick();
 800256a:	f001 fd31 	bl	8003fd0 <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	4b63      	ldr	r3, [pc, #396]	; (8002700 <main+0x380>)
 8002572:	601a      	str	r2, [r3, #0]
  HAL_Delay(100);
 8002574:	2064      	movs	r0, #100	; 0x64
 8002576:	f001 fd37 	bl	8003fe8 <HAL_Delay>
//	  }
//	  sprintf(USBTXArray, "%6.3f, Roll: %6.3f, Pitch: %6.3f, Yaw: %6.3f\r\n",
//			  CurrentTime(), Roll, Pitch, Yaw);
//	  SendToScreen();

	  MS56XXCyclicRead();
 800257a:	f7ff fd07 	bl	8001f8c <MS56XXCyclicRead>
	  if (isNewMS56XXDataAvailable)
 800257e:	4b61      	ldr	r3, [pc, #388]	; (8002704 <main+0x384>)
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d009      	beq.n	800259a <main+0x21a>
	  {
//		  sprintf(USBTXArray, "%6.3f, Pressure: %d, Temp: %d\r\n",
//				  CurrentTime(), P, TEMP);
		  ret = strlen(USBTXArray);
 8002586:	4860      	ldr	r0, [pc, #384]	; (8002708 <main+0x388>)
 8002588:	f7fd fe64 	bl	8000254 <strlen>
 800258c:	4603      	mov	r3, r0
 800258e:	b2da      	uxtb	r2, r3
 8002590:	4b5e      	ldr	r3, [pc, #376]	; (800270c <main+0x38c>)
 8002592:	701a      	strb	r2, [r3, #0]
//		  FS_ret2 = f_write(&USERFile, USBTXArray, strlen(USBTXArray), &BytesWritten);
		  SendToScreen(false);
 8002594:	2000      	movs	r0, #0
 8002596:	f7ff fe11 	bl	80021bc <SendToScreen>
	  }

    CheckButton();
 800259a:	f7fe f869 	bl	8000670 <CheckButton>
//	  MeasuredRPM = RPMMeasurement();
//    LastRPMCycle++;
//    sprintf(UART5TXArray, "%d\r\n",LastRPMCycle);

//	Read Sticks messages received through BlueTooth unit
    if (HAL_GetTick() - LastBLERead >= 100)
 800259e:	f001 fd17 	bl	8003fd0 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	4b56      	ldr	r3, [pc, #344]	; (8002700 <main+0x380>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b63      	cmp	r3, #99	; 0x63
 80025ac:	d93d      	bls.n	800262a <main+0x2aa>
    {
        getCMD();
 80025ae:	f7ff fe51 	bl	8002254 <getCMD>
    	LastBLERead = HAL_GetTick();
 80025b2:	f001 fd0d 	bl	8003fd0 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	4b51      	ldr	r3, [pc, #324]	; (8002700 <main+0x380>)
 80025ba:	601a      	str	r2, [r3, #0]
    	NumberOfByteRet = CheckDataFromUART();
 80025bc:	f7fe feec 	bl	8001398 <CheckDataFromUART>
 80025c0:	4602      	mov	r2, r0
 80025c2:	4b53      	ldr	r3, [pc, #332]	; (8002710 <main+0x390>)
 80025c4:	601a      	str	r2, [r3, #0]
    	ret = ParseRFMessage(&CurrentAngle, &CurrentPower);
 80025c6:	4953      	ldr	r1, [pc, #332]	; (8002714 <main+0x394>)
 80025c8:	4853      	ldr	r0, [pc, #332]	; (8002718 <main+0x398>)
 80025ca:	f7fe fda9 	bl	8001120 <ParseRFMessage>
 80025ce:	4603      	mov	r3, r0
 80025d0:	461a      	mov	r2, r3
 80025d2:	4b4e      	ldr	r3, [pc, #312]	; (800270c <main+0x38c>)
 80025d4:	701a      	strb	r2, [r3, #0]
    	FinalAngle = CurrentAngle * (1 - ret) + FinalAngle * ret;
 80025d6:	4b4d      	ldr	r3, [pc, #308]	; (800270c <main+0x38c>)
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	f1c3 0301 	rsb	r3, r3, #1
 80025de:	b2da      	uxtb	r2, r3
 80025e0:	4b4d      	ldr	r3, [pc, #308]	; (8002718 <main+0x398>)
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	fb12 f303 	smulbb	r3, r2, r3
 80025e8:	b2da      	uxtb	r2, r3
 80025ea:	4b4c      	ldr	r3, [pc, #304]	; (800271c <main+0x39c>)
 80025ec:	7819      	ldrb	r1, [r3, #0]
 80025ee:	4b47      	ldr	r3, [pc, #284]	; (800270c <main+0x38c>)
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	fb11 f303 	smulbb	r3, r1, r3
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	4413      	add	r3, r2
 80025fa:	b2da      	uxtb	r2, r3
 80025fc:	4b47      	ldr	r3, [pc, #284]	; (800271c <main+0x39c>)
 80025fe:	701a      	strb	r2, [r3, #0]
    	FinalPower = CurrentPower * (1 - ret) + FinalPower * ret;
 8002600:	4b42      	ldr	r3, [pc, #264]	; (800270c <main+0x38c>)
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	f1c3 0301 	rsb	r3, r3, #1
 8002608:	b2da      	uxtb	r2, r3
 800260a:	4b42      	ldr	r3, [pc, #264]	; (8002714 <main+0x394>)
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	fb12 f303 	smulbb	r3, r2, r3
 8002612:	b2da      	uxtb	r2, r3
 8002614:	4b42      	ldr	r3, [pc, #264]	; (8002720 <main+0x3a0>)
 8002616:	7819      	ldrb	r1, [r3, #0]
 8002618:	4b3c      	ldr	r3, [pc, #240]	; (800270c <main+0x38c>)
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	fb11 f303 	smulbb	r3, r1, r3
 8002620:	b2db      	uxtb	r3, r3
 8002622:	4413      	add	r3, r2
 8002624:	b2da      	uxtb	r2, r3
 8002626:	4b3e      	ldr	r3, [pc, #248]	; (8002720 <main+0x3a0>)
 8002628:	701a      	strb	r2, [r3, #0]
//    	//			  sprintf(USBTXArray,"%6.3f, Angle: %d, Power: %d ret: %d \r\n",CurrentTime(), CurrentAngle, CurrentPower, ret);
//    	//			  SendToScreen(false);
//    	sprintf(USBTXArray,"%6.3f, FAngle: %d, FPower: %d ret: %d \r\n",CurrentTime(), FinalAngle, FinalPower, ret);
//    	SendToScreen(false);
    }
    int PWMValue = 1000 * ((2 - 1) * (double)FinalAngle / (145.0 - 35.0) + 0.5);
 800262a:	4b3c      	ldr	r3, [pc, #240]	; (800271c <main+0x39c>)
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	ee07 3a90 	vmov	s15, r3
 8002632:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8002636:	ed9f 5b1a 	vldr	d5, [pc, #104]	; 80026a0 <main+0x320>
 800263a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800263e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8002642:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002646:	ed9f 6b18 	vldr	d6, [pc, #96]	; 80026a8 <main+0x328>
 800264a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800264e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002652:	ee17 3a90 	vmov	r3, s15
 8002656:	f241 0244 	movw	r2, #4164	; 0x1044
 800265a:	443a      	add	r2, r7
 800265c:	6013      	str	r3, [r2, #0]
    start_pwm1(PWMValue); // Control Servo
 800265e:	f241 0344 	movw	r3, #4164	; 0x1044
 8002662:	443b      	add	r3, r7
 8002664:	6818      	ldr	r0, [r3, #0]
 8002666:	f7fd ffd3 	bl	8000610 <start_pwm1>
    start_pwm2(FinalPower * 80);   // Control Car Motor
 800266a:	4b2d      	ldr	r3, [pc, #180]	; (8002720 <main+0x3a0>)
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	461a      	mov	r2, r3
 8002670:	4613      	mov	r3, r2
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	4413      	add	r3, r2
 8002676:	011b      	lsls	r3, r3, #4
 8002678:	4618      	mov	r0, r3
 800267a:	f7fd ffe5 	bl	8000648 <start_pwm2>

    if (HAL_GetTick() - LastRPMCycle >= 1000)
 800267e:	f001 fca7 	bl	8003fd0 <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	4b27      	ldr	r3, [pc, #156]	; (8002724 <main+0x3a4>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800268e:	f4ff af74 	bcc.w	800257a <main+0x1fa>
    {
    	LastRPMCycle = HAL_GetTick();
 8002692:	f001 fc9d 	bl	8003fd0 <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	4b22      	ldr	r3, [pc, #136]	; (8002724 <main+0x3a4>)
 800269a:	601a      	str	r2, [r3, #0]
  {
 800269c:	e76d      	b.n	800257a <main+0x1fa>
 800269e:	bf00      	nop
 80026a0:	00000000 	.word	0x00000000
 80026a4:	405b8000 	.word	0x405b8000
 80026a8:	00000000 	.word	0x00000000
 80026ac:	408f4000 	.word	0x408f4000
 80026b0:	200046e8 	.word	0x200046e8
 80026b4:	20004430 	.word	0x20004430
 80026b8:	20004608 	.word	0x20004608
 80026bc:	40021000 	.word	0x40021000
 80026c0:	40020000 	.word	0x40020000
 80026c4:	200010bc 	.word	0x200010bc
 80026c8:	200010ba 	.word	0x200010ba
 80026cc:	200010b8 	.word	0x200010b8
 80026d0:	20004948 	.word	0x20004948
 80026d4:	200010cd 	.word	0x200010cd
 80026d8:	200010cc 	.word	0x200010cc
 80026dc:	0801308c 	.word	0x0801308c
 80026e0:	2000339c 	.word	0x2000339c
 80026e4:	20004728 	.word	0x20004728
 80026e8:	ffffefb8 	.word	0xffffefb8
 80026ec:	08013090 	.word	0x08013090
 80026f0:	20001338 	.word	0x20001338
 80026f4:	ffffefb4 	.word	0xffffefb4
 80026f8:	20000cac 	.word	0x20000cac
 80026fc:	200010b0 	.word	0x200010b0
 8002700:	200010c8 	.word	0x200010c8
 8002704:	20000378 	.word	0x20000378
 8002708:	200008ac 	.word	0x200008ac
 800270c:	200010d1 	.word	0x200010d1
 8002710:	200010c4 	.word	0x200010c4
 8002714:	200010d0 	.word	0x200010d0
 8002718:	200010cf 	.word	0x200010cf
 800271c:	2000001c 	.word	0x2000001c
 8002720:	200010ce 	.word	0x200010ce
 8002724:	200010c0 	.word	0x200010c0

08002728 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b0b8      	sub	sp, #224	; 0xe0
 800272c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800272e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002732:	2234      	movs	r2, #52	; 0x34
 8002734:	2100      	movs	r1, #0
 8002736:	4618      	mov	r0, r3
 8002738:	f00c ff73 	bl	800f622 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800273c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	605a      	str	r2, [r3, #4]
 8002746:	609a      	str	r2, [r3, #8]
 8002748:	60da      	str	r2, [r3, #12]
 800274a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800274c:	f107 0308 	add.w	r3, r7, #8
 8002750:	2290      	movs	r2, #144	; 0x90
 8002752:	2100      	movs	r1, #0
 8002754:	4618      	mov	r0, r3
 8002756:	f00c ff64 	bl	800f622 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 800275a:	f004 f931 	bl	80069c0 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800275e:	4b42      	ldr	r3, [pc, #264]	; (8002868 <SystemClock_Config+0x140>)
 8002760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002762:	4a41      	ldr	r2, [pc, #260]	; (8002868 <SystemClock_Config+0x140>)
 8002764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002768:	6413      	str	r3, [r2, #64]	; 0x40
 800276a:	4b3f      	ldr	r3, [pc, #252]	; (8002868 <SystemClock_Config+0x140>)
 800276c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002772:	607b      	str	r3, [r7, #4]
 8002774:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002776:	4b3d      	ldr	r3, [pc, #244]	; (800286c <SystemClock_Config+0x144>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a3c      	ldr	r2, [pc, #240]	; (800286c <SystemClock_Config+0x144>)
 800277c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002780:	6013      	str	r3, [r2, #0]
 8002782:	4b3a      	ldr	r3, [pc, #232]	; (800286c <SystemClock_Config+0x144>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800278a:	603b      	str	r3, [r7, #0]
 800278c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800278e:	2301      	movs	r3, #1
 8002790:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002794:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002798:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800279c:	2302      	movs	r3, #2
 800279e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80027a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80027a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 80027aa:	2319      	movs	r3, #25
 80027ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 432;
 80027b0:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80027b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80027b8:	2302      	movs	r3, #2
 80027ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80027be:	2309      	movs	r3, #9
 80027c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027c4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80027c8:	4618      	mov	r0, r3
 80027ca:	f004 fff9 	bl	80077c0 <HAL_RCC_OscConfig>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80027d4:	f000 fd4e 	bl	8003274 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80027d8:	f004 f91a 	bl	8006a10 <HAL_PWREx_EnableOverDrive>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80027e2:	f000 fd47 	bl	8003274 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027e6:	230f      	movs	r3, #15
 80027e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027ec:	2302      	movs	r3, #2
 80027ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027f2:	2300      	movs	r3, #0
 80027f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80027f8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80027fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002800:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002804:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002808:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800280c:	2107      	movs	r1, #7
 800280e:	4618      	mov	r0, r3
 8002810:	f005 fa84 	bl	8007d1c <HAL_RCC_ClockConfig>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800281a:	f000 fd2b 	bl	8003274 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_TIM|RCC_PERIPHCLK_RTC
 800281e:	4b14      	ldr	r3, [pc, #80]	; (8002870 <SystemClock_Config+0x148>)
 8002820:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_UART4
                              |RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 8002822:	4b14      	ldr	r3, [pc, #80]	; (8002874 <SystemClock_Config+0x14c>)
 8002824:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002826:	2300      	movs	r3, #0
 8002828:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800282a:	2300      	movs	r3, #0
 800282c:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 800282e:	2300      	movs	r3, #0
 8002830:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002832:	2300      	movs	r3, #0
 8002834:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002836:	2300      	movs	r3, #0
 8002838:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800283c:	2300      	movs	r3, #0
 800283e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  PeriphClkInitStruct.TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8002842:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002846:	643b      	str	r3, [r7, #64]	; 0x40

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002848:	f107 0308 	add.w	r3, r7, #8
 800284c:	4618      	mov	r0, r3
 800284e:	f005 fc63 	bl	8008118 <HAL_RCCEx_PeriphCLKConfig>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <SystemClock_Config+0x134>
  {
    Error_Handler();
 8002858:	f000 fd0c 	bl	8003274 <Error_Handler>
  }
  /** Enables the Clock Security System 
  */
  HAL_RCC_EnableCSS();
 800285c:	f005 fb4a 	bl	8007ef4 <HAL_RCC_EnableCSS>
}
 8002860:	bf00      	nop
 8002862:	37e0      	adds	r7, #224	; 0xe0
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	40023800 	.word	0x40023800
 800286c:	40007000 	.word	0x40007000
 8002870:	00a046b0 	.word	0x00a046b0
 8002874:	00190300 	.word	0x00190300

08002878 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800287e:	463b      	mov	r3, r7
 8002880:	2200      	movs	r2, #0
 8002882:	601a      	str	r2, [r3, #0]
 8002884:	605a      	str	r2, [r3, #4]
 8002886:	609a      	str	r2, [r3, #8]
 8002888:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800288a:	4b21      	ldr	r3, [pc, #132]	; (8002910 <MX_ADC1_Init+0x98>)
 800288c:	4a21      	ldr	r2, [pc, #132]	; (8002914 <MX_ADC1_Init+0x9c>)
 800288e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002890:	4b1f      	ldr	r3, [pc, #124]	; (8002910 <MX_ADC1_Init+0x98>)
 8002892:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002896:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002898:	4b1d      	ldr	r3, [pc, #116]	; (8002910 <MX_ADC1_Init+0x98>)
 800289a:	2200      	movs	r2, #0
 800289c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800289e:	4b1c      	ldr	r3, [pc, #112]	; (8002910 <MX_ADC1_Init+0x98>)
 80028a0:	2201      	movs	r2, #1
 80028a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80028a4:	4b1a      	ldr	r3, [pc, #104]	; (8002910 <MX_ADC1_Init+0x98>)
 80028a6:	2201      	movs	r2, #1
 80028a8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80028aa:	4b19      	ldr	r3, [pc, #100]	; (8002910 <MX_ADC1_Init+0x98>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80028b2:	4b17      	ldr	r3, [pc, #92]	; (8002910 <MX_ADC1_Init+0x98>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80028b8:	4b15      	ldr	r3, [pc, #84]	; (8002910 <MX_ADC1_Init+0x98>)
 80028ba:	4a17      	ldr	r2, [pc, #92]	; (8002918 <MX_ADC1_Init+0xa0>)
 80028bc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80028be:	4b14      	ldr	r3, [pc, #80]	; (8002910 <MX_ADC1_Init+0x98>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80028c4:	4b12      	ldr	r3, [pc, #72]	; (8002910 <MX_ADC1_Init+0x98>)
 80028c6:	2201      	movs	r2, #1
 80028c8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80028ca:	4b11      	ldr	r3, [pc, #68]	; (8002910 <MX_ADC1_Init+0x98>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80028d2:	4b0f      	ldr	r3, [pc, #60]	; (8002910 <MX_ADC1_Init+0x98>)
 80028d4:	2201      	movs	r2, #1
 80028d6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80028d8:	480d      	ldr	r0, [pc, #52]	; (8002910 <MX_ADC1_Init+0x98>)
 80028da:	f001 fba7 	bl	800402c <HAL_ADC_Init>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d001      	beq.n	80028e8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80028e4:	f000 fcc6 	bl	8003274 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80028e8:	230d      	movs	r3, #13
 80028ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80028ec:	2301      	movs	r3, #1
 80028ee:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80028f0:	2300      	movs	r3, #0
 80028f2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80028f4:	463b      	mov	r3, r7
 80028f6:	4619      	mov	r1, r3
 80028f8:	4805      	ldr	r0, [pc, #20]	; (8002910 <MX_ADC1_Init+0x98>)
 80028fa:	f001 fe07 	bl	800450c <HAL_ADC_ConfigChannel>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002904:	f000 fcb6 	bl	8003274 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002908:	bf00      	nop
 800290a:	3710      	adds	r7, #16
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	20004608 	.word	0x20004608
 8002914:	40012000 	.word	0x40012000
 8002918:	0f000001 	.word	0x0f000001

0800291c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002920:	4b1b      	ldr	r3, [pc, #108]	; (8002990 <MX_I2C1_Init+0x74>)
 8002922:	4a1c      	ldr	r2, [pc, #112]	; (8002994 <MX_I2C1_Init+0x78>)
 8002924:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 8002926:	4b1a      	ldr	r3, [pc, #104]	; (8002990 <MX_I2C1_Init+0x74>)
 8002928:	4a1b      	ldr	r2, [pc, #108]	; (8002998 <MX_I2C1_Init+0x7c>)
 800292a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 82;
 800292c:	4b18      	ldr	r3, [pc, #96]	; (8002990 <MX_I2C1_Init+0x74>)
 800292e:	2252      	movs	r2, #82	; 0x52
 8002930:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002932:	4b17      	ldr	r3, [pc, #92]	; (8002990 <MX_I2C1_Init+0x74>)
 8002934:	2201      	movs	r2, #1
 8002936:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002938:	4b15      	ldr	r3, [pc, #84]	; (8002990 <MX_I2C1_Init+0x74>)
 800293a:	2200      	movs	r2, #0
 800293c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800293e:	4b14      	ldr	r3, [pc, #80]	; (8002990 <MX_I2C1_Init+0x74>)
 8002940:	2200      	movs	r2, #0
 8002942:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002944:	4b12      	ldr	r3, [pc, #72]	; (8002990 <MX_I2C1_Init+0x74>)
 8002946:	2200      	movs	r2, #0
 8002948:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800294a:	4b11      	ldr	r3, [pc, #68]	; (8002990 <MX_I2C1_Init+0x74>)
 800294c:	2200      	movs	r2, #0
 800294e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002950:	4b0f      	ldr	r3, [pc, #60]	; (8002990 <MX_I2C1_Init+0x74>)
 8002952:	2200      	movs	r2, #0
 8002954:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002956:	480e      	ldr	r0, [pc, #56]	; (8002990 <MX_I2C1_Init+0x74>)
 8002958:	f003 f80a 	bl	8005970 <HAL_I2C_Init>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002962:	f000 fc87 	bl	8003274 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002966:	2100      	movs	r1, #0
 8002968:	4809      	ldr	r0, [pc, #36]	; (8002990 <MX_I2C1_Init+0x74>)
 800296a:	f003 fc75 	bl	8006258 <HAL_I2CEx_ConfigAnalogFilter>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d001      	beq.n	8002978 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002974:	f000 fc7e 	bl	8003274 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002978:	2100      	movs	r1, #0
 800297a:	4805      	ldr	r0, [pc, #20]	; (8002990 <MX_I2C1_Init+0x74>)
 800297c:	f003 fcb7 	bl	80062ee <HAL_I2CEx_ConfigDigitalFilter>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002986:	f000 fc75 	bl	8003274 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800298a:	bf00      	nop
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	20004470 	.word	0x20004470
 8002994:	40005400 	.word	0x40005400
 8002998:	6000030d 	.word	0x6000030d

0800299c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80029a0:	4b12      	ldr	r3, [pc, #72]	; (80029ec <MX_QUADSPI_Init+0x50>)
 80029a2:	4a13      	ldr	r2, [pc, #76]	; (80029f0 <MX_QUADSPI_Init+0x54>)
 80029a4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80029a6:	4b11      	ldr	r3, [pc, #68]	; (80029ec <MX_QUADSPI_Init+0x50>)
 80029a8:	22ff      	movs	r2, #255	; 0xff
 80029aa:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 32;
 80029ac:	4b0f      	ldr	r3, [pc, #60]	; (80029ec <MX_QUADSPI_Init+0x50>)
 80029ae:	2220      	movs	r2, #32
 80029b0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80029b2:	4b0e      	ldr	r3, [pc, #56]	; (80029ec <MX_QUADSPI_Init+0x50>)
 80029b4:	2210      	movs	r2, #16
 80029b6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 80029b8:	4b0c      	ldr	r3, [pc, #48]	; (80029ec <MX_QUADSPI_Init+0x50>)
 80029ba:	2217      	movs	r2, #23
 80029bc:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80029be:	4b0b      	ldr	r3, [pc, #44]	; (80029ec <MX_QUADSPI_Init+0x50>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80029c4:	4b09      	ldr	r3, [pc, #36]	; (80029ec <MX_QUADSPI_Init+0x50>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_2;
 80029ca:	4b08      	ldr	r3, [pc, #32]	; (80029ec <MX_QUADSPI_Init+0x50>)
 80029cc:	2280      	movs	r2, #128	; 0x80
 80029ce:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80029d0:	4b06      	ldr	r3, [pc, #24]	; (80029ec <MX_QUADSPI_Init+0x50>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80029d6:	4805      	ldr	r0, [pc, #20]	; (80029ec <MX_QUADSPI_Init+0x50>)
 80029d8:	f004 f86a 	bl	8006ab0 <HAL_QSPI_Init>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 80029e2:	f000 fc47 	bl	8003274 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80029e6:	bf00      	nop
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	20004948 	.word	0x20004948
 80029f0:	a0001000 	.word	0xa0001000

080029f4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b088      	sub	sp, #32
 80029f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80029fa:	f107 0308 	add.w	r3, r7, #8
 80029fe:	2200      	movs	r2, #0
 8002a00:	601a      	str	r2, [r3, #0]
 8002a02:	605a      	str	r2, [r3, #4]
 8002a04:	609a      	str	r2, [r3, #8]
 8002a06:	60da      	str	r2, [r3, #12]
 8002a08:	611a      	str	r2, [r3, #16]
 8002a0a:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8002a10:	4b25      	ldr	r3, [pc, #148]	; (8002aa8 <MX_RTC_Init+0xb4>)
 8002a12:	4a26      	ldr	r2, [pc, #152]	; (8002aac <MX_RTC_Init+0xb8>)
 8002a14:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002a16:	4b24      	ldr	r3, [pc, #144]	; (8002aa8 <MX_RTC_Init+0xb4>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 99;
 8002a1c:	4b22      	ldr	r3, [pc, #136]	; (8002aa8 <MX_RTC_Init+0xb4>)
 8002a1e:	2263      	movs	r2, #99	; 0x63
 8002a20:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 9999;
 8002a22:	4b21      	ldr	r3, [pc, #132]	; (8002aa8 <MX_RTC_Init+0xb4>)
 8002a24:	f242 720f 	movw	r2, #9999	; 0x270f
 8002a28:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002a2a:	4b1f      	ldr	r3, [pc, #124]	; (8002aa8 <MX_RTC_Init+0xb4>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002a30:	4b1d      	ldr	r3, [pc, #116]	; (8002aa8 <MX_RTC_Init+0xb4>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002a36:	4b1c      	ldr	r3, [pc, #112]	; (8002aa8 <MX_RTC_Init+0xb4>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002a3c:	481a      	ldr	r0, [pc, #104]	; (8002aa8 <MX_RTC_Init+0xb4>)
 8002a3e:	f005 ff91 	bl	8008964 <HAL_RTC_Init>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d001      	beq.n	8002a4c <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8002a48:	f000 fc14 	bl	8003274 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0;
 8002a50:	2300      	movs	r3, #0
 8002a52:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0;
 8002a54:	2300      	movs	r3, #0
 8002a56:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	61bb      	str	r3, [r7, #24]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	61fb      	str	r3, [r7, #28]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002a60:	f107 0308 	add.w	r3, r7, #8
 8002a64:	2200      	movs	r2, #0
 8002a66:	4619      	mov	r1, r3
 8002a68:	480f      	ldr	r0, [pc, #60]	; (8002aa8 <MX_RTC_Init+0xb4>)
 8002a6a:	f005 fff7 	bl	8008a5c <HAL_RTC_SetTime>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d001      	beq.n	8002a78 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8002a74:	f000 fbfe 	bl	8003274 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_JANUARY;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	717b      	strb	r3, [r7, #5]
  sDate.Date = 1;
 8002a80:	2301      	movs	r3, #1
 8002a82:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 20;
 8002a84:	2314      	movs	r3, #20
 8002a86:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8002a88:	1d3b      	adds	r3, r7, #4
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	4806      	ldr	r0, [pc, #24]	; (8002aa8 <MX_RTC_Init+0xb4>)
 8002a90:	f006 f8a2 	bl	8008bd8 <HAL_RTC_SetDate>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 8002a9a:	f000 fbeb 	bl	8003274 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002a9e:	bf00      	nop
 8002aa0:	3720      	adds	r7, #32
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	200046b0 	.word	0x200046b0
 8002aac:	40002800 	.word	0x40002800

08002ab0 <MX_SDMMC1_MMC_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_MMC_Init(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hmmc1.Instance = SDMMC1;
 8002ab4:	4b0f      	ldr	r3, [pc, #60]	; (8002af4 <MX_SDMMC1_MMC_Init+0x44>)
 8002ab6:	4a10      	ldr	r2, [pc, #64]	; (8002af8 <MX_SDMMC1_MMC_Init+0x48>)
 8002ab8:	601a      	str	r2, [r3, #0]
  hmmc1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8002aba:	4b0e      	ldr	r3, [pc, #56]	; (8002af4 <MX_SDMMC1_MMC_Init+0x44>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	605a      	str	r2, [r3, #4]
  hmmc1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8002ac0:	4b0c      	ldr	r3, [pc, #48]	; (8002af4 <MX_SDMMC1_MMC_Init+0x44>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	609a      	str	r2, [r3, #8]
  hmmc1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002ac6:	4b0b      	ldr	r3, [pc, #44]	; (8002af4 <MX_SDMMC1_MMC_Init+0x44>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	60da      	str	r2, [r3, #12]
  hmmc1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8002acc:	4b09      	ldr	r3, [pc, #36]	; (8002af4 <MX_SDMMC1_MMC_Init+0x44>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	611a      	str	r2, [r3, #16]
  hmmc1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002ad2:	4b08      	ldr	r3, [pc, #32]	; (8002af4 <MX_SDMMC1_MMC_Init+0x44>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	615a      	str	r2, [r3, #20]
  hmmc1.Init.ClockDiv = 0;
 8002ad8:	4b06      	ldr	r3, [pc, #24]	; (8002af4 <MX_SDMMC1_MMC_Init+0x44>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	619a      	str	r2, [r3, #24]
  if (HAL_MMC_Init(&hmmc1) != HAL_OK)
 8002ade:	4805      	ldr	r0, [pc, #20]	; (8002af4 <MX_SDMMC1_MMC_Init+0x44>)
 8002ae0:	f003 fc51 	bl	8006386 <HAL_MMC_Init>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <MX_SDMMC1_MMC_Init+0x3e>
  {
    Error_Handler();
 8002aea:	f000 fbc3 	bl	8003274 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8002aee:	bf00      	nop
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	200044bc 	.word	0x200044bc
 8002af8:	40012c00 	.word	0x40012c00

08002afc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002b00:	4b1b      	ldr	r3, [pc, #108]	; (8002b70 <MX_SPI1_Init+0x74>)
 8002b02:	4a1c      	ldr	r2, [pc, #112]	; (8002b74 <MX_SPI1_Init+0x78>)
 8002b04:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002b06:	4b1a      	ldr	r3, [pc, #104]	; (8002b70 <MX_SPI1_Init+0x74>)
 8002b08:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002b0c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002b0e:	4b18      	ldr	r3, [pc, #96]	; (8002b70 <MX_SPI1_Init+0x74>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b14:	4b16      	ldr	r3, [pc, #88]	; (8002b70 <MX_SPI1_Init+0x74>)
 8002b16:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002b1a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b1c:	4b14      	ldr	r3, [pc, #80]	; (8002b70 <MX_SPI1_Init+0x74>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b22:	4b13      	ldr	r3, [pc, #76]	; (8002b70 <MX_SPI1_Init+0x74>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002b28:	4b11      	ldr	r3, [pc, #68]	; (8002b70 <MX_SPI1_Init+0x74>)
 8002b2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b2e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002b30:	4b0f      	ldr	r3, [pc, #60]	; (8002b70 <MX_SPI1_Init+0x74>)
 8002b32:	2220      	movs	r2, #32
 8002b34:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b36:	4b0e      	ldr	r3, [pc, #56]	; (8002b70 <MX_SPI1_Init+0x74>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b3c:	4b0c      	ldr	r3, [pc, #48]	; (8002b70 <MX_SPI1_Init+0x74>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b42:	4b0b      	ldr	r3, [pc, #44]	; (8002b70 <MX_SPI1_Init+0x74>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002b48:	4b09      	ldr	r3, [pc, #36]	; (8002b70 <MX_SPI1_Init+0x74>)
 8002b4a:	2207      	movs	r2, #7
 8002b4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002b4e:	4b08      	ldr	r3, [pc, #32]	; (8002b70 <MX_SPI1_Init+0x74>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002b54:	4b06      	ldr	r3, [pc, #24]	; (8002b70 <MX_SPI1_Init+0x74>)
 8002b56:	2208      	movs	r2, #8
 8002b58:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002b5a:	4805      	ldr	r0, [pc, #20]	; (8002b70 <MX_SPI1_Init+0x74>)
 8002b5c:	f006 f956 	bl	8008e0c <HAL_SPI_Init>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002b66:	f000 fb85 	bl	8003274 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002b6a:	bf00      	nop
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	200047ac 	.word	0x200047ac
 8002b74:	40013000 	.word	0x40013000

08002b78 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b09a      	sub	sp, #104	; 0x68
 8002b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b7e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002b82:	2200      	movs	r2, #0
 8002b84:	601a      	str	r2, [r3, #0]
 8002b86:	605a      	str	r2, [r3, #4]
 8002b88:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002b8a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002b8e:	2200      	movs	r2, #0
 8002b90:	601a      	str	r2, [r3, #0]
 8002b92:	605a      	str	r2, [r3, #4]
 8002b94:	609a      	str	r2, [r3, #8]
 8002b96:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b98:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	601a      	str	r2, [r3, #0]
 8002ba0:	605a      	str	r2, [r3, #4]
 8002ba2:	609a      	str	r2, [r3, #8]
 8002ba4:	60da      	str	r2, [r3, #12]
 8002ba6:	611a      	str	r2, [r3, #16]
 8002ba8:	615a      	str	r2, [r3, #20]
 8002baa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002bac:	1d3b      	adds	r3, r7, #4
 8002bae:	222c      	movs	r2, #44	; 0x2c
 8002bb0:	2100      	movs	r1, #0
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f00c fd35 	bl	800f622 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002bb8:	4b4d      	ldr	r3, [pc, #308]	; (8002cf0 <MX_TIM1_Init+0x178>)
 8002bba:	4a4e      	ldr	r2, [pc, #312]	; (8002cf4 <MX_TIM1_Init+0x17c>)
 8002bbc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 539;
 8002bbe:	4b4c      	ldr	r3, [pc, #304]	; (8002cf0 <MX_TIM1_Init+0x178>)
 8002bc0:	f240 221b 	movw	r2, #539	; 0x21b
 8002bc4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bc6:	4b4a      	ldr	r3, [pc, #296]	; (8002cf0 <MX_TIM1_Init+0x178>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8000;
 8002bcc:	4b48      	ldr	r3, [pc, #288]	; (8002cf0 <MX_TIM1_Init+0x178>)
 8002bce:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002bd2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bd4:	4b46      	ldr	r3, [pc, #280]	; (8002cf0 <MX_TIM1_Init+0x178>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002bda:	4b45      	ldr	r3, [pc, #276]	; (8002cf0 <MX_TIM1_Init+0x178>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002be0:	4b43      	ldr	r3, [pc, #268]	; (8002cf0 <MX_TIM1_Init+0x178>)
 8002be2:	2280      	movs	r2, #128	; 0x80
 8002be4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8002be6:	4842      	ldr	r0, [pc, #264]	; (8002cf0 <MX_TIM1_Init+0x178>)
 8002be8:	f007 f836 	bl	8009c58 <HAL_TIM_IC_Init>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8002bf2:	f000 fb3f 	bl	8003274 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002bf6:	483e      	ldr	r0, [pc, #248]	; (8002cf0 <MX_TIM1_Init+0x178>)
 8002bf8:	f006 ffbe 	bl	8009b78 <HAL_TIM_PWM_Init>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8002c02:	f000 fb37 	bl	8003274 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002c06:	2320      	movs	r3, #32
 8002c08:	65fb      	str	r3, [r7, #92]	; 0x5c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 8002c0a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002c0e:	663b      	str	r3, [r7, #96]	; 0x60
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c10:	2300      	movs	r3, #0
 8002c12:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002c14:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002c18:	4619      	mov	r1, r3
 8002c1a:	4835      	ldr	r0, [pc, #212]	; (8002cf0 <MX_TIM1_Init+0x178>)
 8002c1c:	f007 fe4a 	bl	800a8b4 <HAL_TIMEx_MasterConfigSynchronization>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <MX_TIM1_Init+0xb2>
  {
    Error_Handler();
 8002c26:	f000 fb25 	bl	8003274 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	653b      	str	r3, [r7, #80]	; 0x50
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002c32:	2300      	movs	r3, #0
 8002c34:	657b      	str	r3, [r7, #84]	; 0x54
  sConfigIC.ICFilter = 0;
 8002c36:	2300      	movs	r3, #0
 8002c38:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002c3a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002c3e:	2200      	movs	r2, #0
 8002c40:	4619      	mov	r1, r3
 8002c42:	482b      	ldr	r0, [pc, #172]	; (8002cf0 <MX_TIM1_Init+0x178>)
 8002c44:	f007 f833 	bl	8009cae <HAL_TIM_IC_ConfigChannel>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 8002c4e:	f000 fb11 	bl	8003274 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002c52:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002c56:	2208      	movs	r2, #8
 8002c58:	4619      	mov	r1, r3
 8002c5a:	4825      	ldr	r0, [pc, #148]	; (8002cf0 <MX_TIM1_Init+0x178>)
 8002c5c:	f007 f827 	bl	8009cae <HAL_TIM_IC_ConfigChannel>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 8002c66:	f000 fb05 	bl	8003274 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c6a:	2360      	movs	r3, #96	; 0x60
 8002c6c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 600;
 8002c6e:	f44f 7316 	mov.w	r3, #600	; 0x258
 8002c72:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c74:	2300      	movs	r3, #0
 8002c76:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002c80:	2300      	movs	r3, #0
 8002c82:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002c84:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c88:	220c      	movs	r2, #12
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	4818      	ldr	r0, [pc, #96]	; (8002cf0 <MX_TIM1_Init+0x178>)
 8002c8e:	f007 f8ab 	bl	8009de8 <HAL_TIM_PWM_ConfigChannel>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d001      	beq.n	8002c9c <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 8002c98:	f000 faec 	bl	8003274 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002cac:	2300      	movs	r3, #0
 8002cae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002cb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002cb4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002cbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cc2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002ccc:	1d3b      	adds	r3, r7, #4
 8002cce:	4619      	mov	r1, r3
 8002cd0:	4807      	ldr	r0, [pc, #28]	; (8002cf0 <MX_TIM1_Init+0x178>)
 8002cd2:	f007 fe7d 	bl	800a9d0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d001      	beq.n	8002ce0 <MX_TIM1_Init+0x168>
  {
    Error_Handler();
 8002cdc:	f000 faca 	bl	8003274 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002ce0:	4803      	ldr	r0, [pc, #12]	; (8002cf0 <MX_TIM1_Init+0x178>)
 8002ce2:	f000 fd4d 	bl	8003780 <HAL_TIM_MspPostInit>

}
 8002ce6:	bf00      	nop
 8002ce8:	3768      	adds	r7, #104	; 0x68
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	200046e8 	.word	0x200046e8
 8002cf4:	40010000 	.word	0x40010000

08002cf8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b08a      	sub	sp, #40	; 0x28
 8002cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cfe:	f107 031c 	add.w	r3, r7, #28
 8002d02:	2200      	movs	r2, #0
 8002d04:	601a      	str	r2, [r3, #0]
 8002d06:	605a      	str	r2, [r3, #4]
 8002d08:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d0a:	463b      	mov	r3, r7
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	601a      	str	r2, [r3, #0]
 8002d10:	605a      	str	r2, [r3, #4]
 8002d12:	609a      	str	r2, [r3, #8]
 8002d14:	60da      	str	r2, [r3, #12]
 8002d16:	611a      	str	r2, [r3, #16]
 8002d18:	615a      	str	r2, [r3, #20]
 8002d1a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002d1c:	4b23      	ldr	r3, [pc, #140]	; (8002dac <MX_TIM2_Init+0xb4>)
 8002d1e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002d22:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 539;
 8002d24:	4b21      	ldr	r3, [pc, #132]	; (8002dac <MX_TIM2_Init+0xb4>)
 8002d26:	f240 221b 	movw	r2, #539	; 0x21b
 8002d2a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d2c:	4b1f      	ldr	r3, [pc, #124]	; (8002dac <MX_TIM2_Init+0xb4>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8000;
 8002d32:	4b1e      	ldr	r3, [pc, #120]	; (8002dac <MX_TIM2_Init+0xb4>)
 8002d34:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002d38:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d3a:	4b1c      	ldr	r3, [pc, #112]	; (8002dac <MX_TIM2_Init+0xb4>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002d40:	4b1a      	ldr	r3, [pc, #104]	; (8002dac <MX_TIM2_Init+0xb4>)
 8002d42:	2280      	movs	r2, #128	; 0x80
 8002d44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002d46:	4819      	ldr	r0, [pc, #100]	; (8002dac <MX_TIM2_Init+0xb4>)
 8002d48:	f006 ff16 	bl	8009b78 <HAL_TIM_PWM_Init>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 8002d52:	f000 fa8f 	bl	8003274 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d56:	2300      	movs	r3, #0
 8002d58:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002d5e:	f107 031c 	add.w	r3, r7, #28
 8002d62:	4619      	mov	r1, r3
 8002d64:	4811      	ldr	r0, [pc, #68]	; (8002dac <MX_TIM2_Init+0xb4>)
 8002d66:	f007 fda5 	bl	800a8b4 <HAL_TIMEx_MasterConfigSynchronization>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d001      	beq.n	8002d74 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8002d70:	f000 fa80 	bl	8003274 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d74:	2360      	movs	r3, #96	; 0x60
 8002d76:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 600;
 8002d78:	f44f 7316 	mov.w	r3, #600	; 0x258
 8002d7c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d82:	2300      	movs	r3, #0
 8002d84:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d86:	463b      	mov	r3, r7
 8002d88:	2200      	movs	r2, #0
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	4807      	ldr	r0, [pc, #28]	; (8002dac <MX_TIM2_Init+0xb4>)
 8002d8e:	f007 f82b 	bl	8009de8 <HAL_TIM_PWM_ConfigChannel>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d001      	beq.n	8002d9c <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8002d98:	f000 fa6c 	bl	8003274 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002d9c:	4803      	ldr	r0, [pc, #12]	; (8002dac <MX_TIM2_Init+0xb4>)
 8002d9e:	f000 fcef 	bl	8003780 <HAL_TIM_MspPostInit>

}
 8002da2:	bf00      	nop
 8002da4:	3728      	adds	r7, #40	; 0x28
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	20004810 	.word	0x20004810

08002db0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b08a      	sub	sp, #40	; 0x28
 8002db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002db6:	f107 031c 	add.w	r3, r7, #28
 8002dba:	2200      	movs	r2, #0
 8002dbc:	601a      	str	r2, [r3, #0]
 8002dbe:	605a      	str	r2, [r3, #4]
 8002dc0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002dc2:	463b      	mov	r3, r7
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	601a      	str	r2, [r3, #0]
 8002dc8:	605a      	str	r2, [r3, #4]
 8002dca:	609a      	str	r2, [r3, #8]
 8002dcc:	60da      	str	r2, [r3, #12]
 8002dce:	611a      	str	r2, [r3, #16]
 8002dd0:	615a      	str	r2, [r3, #20]
 8002dd2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002dd4:	4b2d      	ldr	r3, [pc, #180]	; (8002e8c <MX_TIM4_Init+0xdc>)
 8002dd6:	4a2e      	ldr	r2, [pc, #184]	; (8002e90 <MX_TIM4_Init+0xe0>)
 8002dd8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 539;
 8002dda:	4b2c      	ldr	r3, [pc, #176]	; (8002e8c <MX_TIM4_Init+0xdc>)
 8002ddc:	f240 221b 	movw	r2, #539	; 0x21b
 8002de0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002de2:	4b2a      	ldr	r3, [pc, #168]	; (8002e8c <MX_TIM4_Init+0xdc>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 8000;
 8002de8:	4b28      	ldr	r3, [pc, #160]	; (8002e8c <MX_TIM4_Init+0xdc>)
 8002dea:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002dee:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002df0:	4b26      	ldr	r3, [pc, #152]	; (8002e8c <MX_TIM4_Init+0xdc>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002df6:	4b25      	ldr	r3, [pc, #148]	; (8002e8c <MX_TIM4_Init+0xdc>)
 8002df8:	2280      	movs	r2, #128	; 0x80
 8002dfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002dfc:	4823      	ldr	r0, [pc, #140]	; (8002e8c <MX_TIM4_Init+0xdc>)
 8002dfe:	f006 febb 	bl	8009b78 <HAL_TIM_PWM_Init>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d001      	beq.n	8002e0c <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 8002e08:	f000 fa34 	bl	8003274 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e10:	2300      	movs	r3, #0
 8002e12:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002e14:	f107 031c 	add.w	r3, r7, #28
 8002e18:	4619      	mov	r1, r3
 8002e1a:	481c      	ldr	r0, [pc, #112]	; (8002e8c <MX_TIM4_Init+0xdc>)
 8002e1c:	f007 fd4a 	bl	800a8b4 <HAL_TIMEx_MasterConfigSynchronization>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d001      	beq.n	8002e2a <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 8002e26:	f000 fa25 	bl	8003274 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e2a:	2360      	movs	r3, #96	; 0x60
 8002e2c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e32:	2300      	movs	r3, #0
 8002e34:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e36:	2300      	movs	r3, #0
 8002e38:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e3a:	463b      	mov	r3, r7
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	4619      	mov	r1, r3
 8002e40:	4812      	ldr	r0, [pc, #72]	; (8002e8c <MX_TIM4_Init+0xdc>)
 8002e42:	f006 ffd1 	bl	8009de8 <HAL_TIM_PWM_ConfigChannel>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8002e4c:	f000 fa12 	bl	8003274 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002e50:	463b      	mov	r3, r7
 8002e52:	2204      	movs	r2, #4
 8002e54:	4619      	mov	r1, r3
 8002e56:	480d      	ldr	r0, [pc, #52]	; (8002e8c <MX_TIM4_Init+0xdc>)
 8002e58:	f006 ffc6 	bl	8009de8 <HAL_TIM_PWM_ConfigChannel>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 8002e62:	f000 fa07 	bl	8003274 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002e66:	463b      	mov	r3, r7
 8002e68:	220c      	movs	r2, #12
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	4807      	ldr	r0, [pc, #28]	; (8002e8c <MX_TIM4_Init+0xdc>)
 8002e6e:	f006 ffbb 	bl	8009de8 <HAL_TIM_PWM_ConfigChannel>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d001      	beq.n	8002e7c <MX_TIM4_Init+0xcc>
  {
    Error_Handler();
 8002e78:	f000 f9fc 	bl	8003274 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002e7c:	4803      	ldr	r0, [pc, #12]	; (8002e8c <MX_TIM4_Init+0xdc>)
 8002e7e:	f000 fc7f 	bl	8003780 <HAL_TIM_MspPostInit>

}
 8002e82:	bf00      	nop
 8002e84:	3728      	adds	r7, #40	; 0x28
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	20004430 	.word	0x20004430
 8002e90:	40000800 	.word	0x40000800

08002e94 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002e98:	4b14      	ldr	r3, [pc, #80]	; (8002eec <MX_UART4_Init+0x58>)
 8002e9a:	4a15      	ldr	r2, [pc, #84]	; (8002ef0 <MX_UART4_Init+0x5c>)
 8002e9c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8002e9e:	4b13      	ldr	r3, [pc, #76]	; (8002eec <MX_UART4_Init+0x58>)
 8002ea0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002ea4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002ea6:	4b11      	ldr	r3, [pc, #68]	; (8002eec <MX_UART4_Init+0x58>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_2;
 8002eac:	4b0f      	ldr	r3, [pc, #60]	; (8002eec <MX_UART4_Init+0x58>)
 8002eae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002eb2:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002eb4:	4b0d      	ldr	r3, [pc, #52]	; (8002eec <MX_UART4_Init+0x58>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002eba:	4b0c      	ldr	r3, [pc, #48]	; (8002eec <MX_UART4_Init+0x58>)
 8002ebc:	220c      	movs	r2, #12
 8002ebe:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ec0:	4b0a      	ldr	r3, [pc, #40]	; (8002eec <MX_UART4_Init+0x58>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ec6:	4b09      	ldr	r3, [pc, #36]	; (8002eec <MX_UART4_Init+0x58>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ecc:	4b07      	ldr	r3, [pc, #28]	; (8002eec <MX_UART4_Init+0x58>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ed2:	4b06      	ldr	r3, [pc, #24]	; (8002eec <MX_UART4_Init+0x58>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002ed8:	4804      	ldr	r0, [pc, #16]	; (8002eec <MX_UART4_Init+0x58>)
 8002eda:	f007 fdf7 	bl	800aacc <HAL_UART_Init>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d001      	beq.n	8002ee8 <MX_UART4_Init+0x54>
  {
    Error_Handler();
 8002ee4:	f000 f9c6 	bl	8003274 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002ee8:	bf00      	nop
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	2000472c 	.word	0x2000472c
 8002ef0:	40004c00 	.word	0x40004c00

08002ef4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002ef8:	4b16      	ldr	r3, [pc, #88]	; (8002f54 <MX_UART5_Init+0x60>)
 8002efa:	4a17      	ldr	r2, [pc, #92]	; (8002f58 <MX_UART5_Init+0x64>)
 8002efc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002efe:	4b15      	ldr	r3, [pc, #84]	; (8002f54 <MX_UART5_Init+0x60>)
 8002f00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f04:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002f06:	4b13      	ldr	r3, [pc, #76]	; (8002f54 <MX_UART5_Init+0x60>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002f0c:	4b11      	ldr	r3, [pc, #68]	; (8002f54 <MX_UART5_Init+0x60>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002f12:	4b10      	ldr	r3, [pc, #64]	; (8002f54 <MX_UART5_Init+0x60>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002f18:	4b0e      	ldr	r3, [pc, #56]	; (8002f54 <MX_UART5_Init+0x60>)
 8002f1a:	220c      	movs	r2, #12
 8002f1c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f1e:	4b0d      	ldr	r3, [pc, #52]	; (8002f54 <MX_UART5_Init+0x60>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_8;
 8002f24:	4b0b      	ldr	r3, [pc, #44]	; (8002f54 <MX_UART5_Init+0x60>)
 8002f26:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002f2a:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f2c:	4b09      	ldr	r3, [pc, #36]	; (8002f54 <MX_UART5_Init+0x60>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8002f32:	4b08      	ldr	r3, [pc, #32]	; (8002f54 <MX_UART5_Init+0x60>)
 8002f34:	2210      	movs	r2, #16
 8002f36:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8002f38:	4b06      	ldr	r3, [pc, #24]	; (8002f54 <MX_UART5_Init+0x60>)
 8002f3a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f3e:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002f40:	4804      	ldr	r0, [pc, #16]	; (8002f54 <MX_UART5_Init+0x60>)
 8002f42:	f007 fdc3 	bl	800aacc <HAL_UART_Init>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d001      	beq.n	8002f50 <MX_UART5_Init+0x5c>
  {
    Error_Handler();
 8002f4c:	f000 f992 	bl	8003274 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002f50:	bf00      	nop
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	20004580 	.word	0x20004580
 8002f58:	40005000 	.word	0x40005000

08002f5c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002f60:	4b16      	ldr	r3, [pc, #88]	; (8002fbc <MX_USART2_UART_Init+0x60>)
 8002f62:	4a17      	ldr	r2, [pc, #92]	; (8002fc0 <MX_USART2_UART_Init+0x64>)
 8002f64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 8002f66:	4b15      	ldr	r3, [pc, #84]	; (8002fbc <MX_USART2_UART_Init+0x60>)
 8002f68:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8002f6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f6e:	4b13      	ldr	r3, [pc, #76]	; (8002fbc <MX_USART2_UART_Init+0x60>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f74:	4b11      	ldr	r3, [pc, #68]	; (8002fbc <MX_USART2_UART_Init+0x60>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f7a:	4b10      	ldr	r3, [pc, #64]	; (8002fbc <MX_USART2_UART_Init+0x60>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f80:	4b0e      	ldr	r3, [pc, #56]	; (8002fbc <MX_USART2_UART_Init+0x60>)
 8002f82:	220c      	movs	r2, #12
 8002f84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f86:	4b0d      	ldr	r3, [pc, #52]	; (8002fbc <MX_USART2_UART_Init+0x60>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f8c:	4b0b      	ldr	r3, [pc, #44]	; (8002fbc <MX_USART2_UART_Init+0x60>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f92:	4b0a      	ldr	r3, [pc, #40]	; (8002fbc <MX_USART2_UART_Init+0x60>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8002f98:	4b08      	ldr	r3, [pc, #32]	; (8002fbc <MX_USART2_UART_Init+0x60>)
 8002f9a:	2210      	movs	r2, #16
 8002f9c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8002f9e:	4b07      	ldr	r3, [pc, #28]	; (8002fbc <MX_USART2_UART_Init+0x60>)
 8002fa0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002fa4:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002fa6:	4805      	ldr	r0, [pc, #20]	; (8002fbc <MX_USART2_UART_Init+0x60>)
 8002fa8:	f007 fd90 	bl	800aacc <HAL_UART_Init>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8002fb2:	f000 f95f 	bl	8003274 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002fb6:	bf00      	nop
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	20004850 	.word	0x20004850
 8002fc0:	40004400 	.word	0x40004400

08002fc4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002fca:	4b14      	ldr	r3, [pc, #80]	; (800301c <MX_DMA_Init+0x58>)
 8002fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fce:	4a13      	ldr	r2, [pc, #76]	; (800301c <MX_DMA_Init+0x58>)
 8002fd0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fd6:	4b11      	ldr	r3, [pc, #68]	; (800301c <MX_DMA_Init+0x58>)
 8002fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fde:	607b      	str	r3, [r7, #4]
 8002fe0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	2100      	movs	r1, #0
 8002fe6:	200b      	movs	r0, #11
 8002fe8:	f001 fdb9 	bl	8004b5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002fec:	200b      	movs	r0, #11
 8002fee:	f001 fdd2 	bl	8004b96 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	2100      	movs	r1, #0
 8002ff6:	2010      	movs	r0, #16
 8002ff8:	f001 fdb1 	bl	8004b5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002ffc:	2010      	movs	r0, #16
 8002ffe:	f001 fdca 	bl	8004b96 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8003002:	2200      	movs	r2, #0
 8003004:	2100      	movs	r1, #0
 8003006:	2011      	movs	r0, #17
 8003008:	f001 fda9 	bl	8004b5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800300c:	2011      	movs	r0, #17
 800300e:	f001 fdc2 	bl	8004b96 <HAL_NVIC_EnableIRQ>

}
 8003012:	bf00      	nop
 8003014:	3708      	adds	r7, #8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	40023800 	.word	0x40023800

08003020 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b08c      	sub	sp, #48	; 0x30
 8003024:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003026:	f107 031c 	add.w	r3, r7, #28
 800302a:	2200      	movs	r2, #0
 800302c:	601a      	str	r2, [r3, #0]
 800302e:	605a      	str	r2, [r3, #4]
 8003030:	609a      	str	r2, [r3, #8]
 8003032:	60da      	str	r2, [r3, #12]
 8003034:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003036:	4b69      	ldr	r3, [pc, #420]	; (80031dc <MX_GPIO_Init+0x1bc>)
 8003038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303a:	4a68      	ldr	r2, [pc, #416]	; (80031dc <MX_GPIO_Init+0x1bc>)
 800303c:	f043 0310 	orr.w	r3, r3, #16
 8003040:	6313      	str	r3, [r2, #48]	; 0x30
 8003042:	4b66      	ldr	r3, [pc, #408]	; (80031dc <MX_GPIO_Init+0x1bc>)
 8003044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003046:	f003 0310 	and.w	r3, r3, #16
 800304a:	61bb      	str	r3, [r7, #24]
 800304c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800304e:	4b63      	ldr	r3, [pc, #396]	; (80031dc <MX_GPIO_Init+0x1bc>)
 8003050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003052:	4a62      	ldr	r2, [pc, #392]	; (80031dc <MX_GPIO_Init+0x1bc>)
 8003054:	f043 0304 	orr.w	r3, r3, #4
 8003058:	6313      	str	r3, [r2, #48]	; 0x30
 800305a:	4b60      	ldr	r3, [pc, #384]	; (80031dc <MX_GPIO_Init+0x1bc>)
 800305c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305e:	f003 0304 	and.w	r3, r3, #4
 8003062:	617b      	str	r3, [r7, #20]
 8003064:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003066:	4b5d      	ldr	r3, [pc, #372]	; (80031dc <MX_GPIO_Init+0x1bc>)
 8003068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306a:	4a5c      	ldr	r2, [pc, #368]	; (80031dc <MX_GPIO_Init+0x1bc>)
 800306c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003070:	6313      	str	r3, [r2, #48]	; 0x30
 8003072:	4b5a      	ldr	r3, [pc, #360]	; (80031dc <MX_GPIO_Init+0x1bc>)
 8003074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800307a:	613b      	str	r3, [r7, #16]
 800307c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800307e:	4b57      	ldr	r3, [pc, #348]	; (80031dc <MX_GPIO_Init+0x1bc>)
 8003080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003082:	4a56      	ldr	r2, [pc, #344]	; (80031dc <MX_GPIO_Init+0x1bc>)
 8003084:	f043 0301 	orr.w	r3, r3, #1
 8003088:	6313      	str	r3, [r2, #48]	; 0x30
 800308a:	4b54      	ldr	r3, [pc, #336]	; (80031dc <MX_GPIO_Init+0x1bc>)
 800308c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	60fb      	str	r3, [r7, #12]
 8003094:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003096:	4b51      	ldr	r3, [pc, #324]	; (80031dc <MX_GPIO_Init+0x1bc>)
 8003098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309a:	4a50      	ldr	r2, [pc, #320]	; (80031dc <MX_GPIO_Init+0x1bc>)
 800309c:	f043 0302 	orr.w	r3, r3, #2
 80030a0:	6313      	str	r3, [r2, #48]	; 0x30
 80030a2:	4b4e      	ldr	r3, [pc, #312]	; (80031dc <MX_GPIO_Init+0x1bc>)
 80030a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	60bb      	str	r3, [r7, #8]
 80030ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80030ae:	4b4b      	ldr	r3, [pc, #300]	; (80031dc <MX_GPIO_Init+0x1bc>)
 80030b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b2:	4a4a      	ldr	r2, [pc, #296]	; (80031dc <MX_GPIO_Init+0x1bc>)
 80030b4:	f043 0308 	orr.w	r3, r3, #8
 80030b8:	6313      	str	r3, [r2, #48]	; 0x30
 80030ba:	4b48      	ldr	r3, [pc, #288]	; (80031dc <MX_GPIO_Init+0x1bc>)
 80030bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030be:	f003 0308 	and.w	r3, r3, #8
 80030c2:	607b      	str	r3, [r7, #4]
 80030c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Flash_WP_GPIO_Port, Flash_WP_Pin, GPIO_PIN_SET);
 80030c6:	2201      	movs	r2, #1
 80030c8:	2104      	movs	r1, #4
 80030ca:	4845      	ldr	r0, [pc, #276]	; (80031e0 <MX_GPIO_Init+0x1c0>)
 80030cc:	f002 fc36 	bl	800593c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Flash_Reset_GPIO_Port, Flash_Reset_Pin, GPIO_PIN_SET);
 80030d0:	2201      	movs	r2, #1
 80030d2:	2102      	movs	r1, #2
 80030d4:	4843      	ldr	r0, [pc, #268]	; (80031e4 <MX_GPIO_Init+0x1c4>)
 80030d6:	f002 fc31 	bl	800593c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MS5611_CS_GPIO_Port, MS5611_CS_Pin, GPIO_PIN_RESET);
 80030da:	2200      	movs	r2, #0
 80030dc:	2110      	movs	r1, #16
 80030de:	4841      	ldr	r0, [pc, #260]	; (80031e4 <MX_GPIO_Init+0x1c4>)
 80030e0:	f002 fc2c 	bl	800593c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Flash_WP_Pin */
  GPIO_InitStruct.Pin = Flash_WP_Pin;
 80030e4:	2304      	movs	r3, #4
 80030e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030e8:	2301      	movs	r3, #1
 80030ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030ec:	2301      	movs	r3, #1
 80030ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030f0:	2300      	movs	r3, #0
 80030f2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Flash_WP_GPIO_Port, &GPIO_InitStruct);
 80030f4:	f107 031c 	add.w	r3, r7, #28
 80030f8:	4619      	mov	r1, r3
 80030fa:	4839      	ldr	r0, [pc, #228]	; (80031e0 <MX_GPIO_Init+0x1c0>)
 80030fc:	f002 fa5c 	bl	80055b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE3 PE4 PE5 PE6 
                           PE9 PE10 PE11 PE12 
                           PE13 PE14 PE15 PE0 
                           PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
 8003100:	f64f 637b 	movw	r3, #65147	; 0xfe7b
 8003104:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12 
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0 
                          |GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003106:	2303      	movs	r3, #3
 8003108:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800310a:	2300      	movs	r3, #0
 800310c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800310e:	f107 031c 	add.w	r3, r7, #28
 8003112:	4619      	mov	r1, r3
 8003114:	4832      	ldr	r0, [pc, #200]	; (80031e0 <MX_GPIO_Init+0x1c0>)
 8003116:	f002 fa4f 	bl	80055b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC4 
                           PC5 PC6 PC7 PC9 
                           PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4 
 800311a:	f240 63f7 	movw	r3, #1783	; 0x6f7
 800311e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9 
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003120:	2303      	movs	r3, #3
 8003122:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003124:	2300      	movs	r3, #0
 8003126:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003128:	f107 031c 	add.w	r3, r7, #28
 800312c:	4619      	mov	r1, r3
 800312e:	482e      	ldr	r0, [pc, #184]	; (80031e8 <MX_GPIO_Init+0x1c8>)
 8003130:	f002 fa42 	bl	80055b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003134:	2301      	movs	r3, #1
 8003136:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003138:	2300      	movs	r3, #0
 800313a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800313c:	2301      	movs	r3, #1
 800313e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003140:	f107 031c 	add.w	r3, r7, #28
 8003144:	4619      	mov	r1, r3
 8003146:	4827      	ldr	r0, [pc, #156]	; (80031e4 <MX_GPIO_Init+0x1c4>)
 8003148:	f002 fa36 	bl	80055b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Flash_Reset_Pin */
  GPIO_InitStruct.Pin = Flash_Reset_Pin;
 800314c:	2302      	movs	r3, #2
 800314e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003150:	2301      	movs	r3, #1
 8003152:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003154:	2301      	movs	r3, #1
 8003156:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003158:	2300      	movs	r3, #0
 800315a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Flash_Reset_GPIO_Port, &GPIO_InitStruct);
 800315c:	f107 031c 	add.w	r3, r7, #28
 8003160:	4619      	mov	r1, r3
 8003162:	4820      	ldr	r0, [pc, #128]	; (80031e4 <MX_GPIO_Init+0x1c4>)
 8003164:	f002 fa28 	bl	80055b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MS5611_CS_Pin */
  GPIO_InitStruct.Pin = MS5611_CS_Pin;
 8003168:	2310      	movs	r3, #16
 800316a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800316c:	2301      	movs	r3, #1
 800316e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003170:	2300      	movs	r3, #0
 8003172:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003174:	2300      	movs	r3, #0
 8003176:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(MS5611_CS_GPIO_Port, &GPIO_InitStruct);
 8003178:	f107 031c 	add.w	r3, r7, #28
 800317c:	4619      	mov	r1, r3
 800317e:	4819      	ldr	r0, [pc, #100]	; (80031e4 <MX_GPIO_Init+0x1c4>)
 8003180:	f002 fa1a 	bl	80055b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 PA9 PA12 
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_12 
 8003184:	f249 23c0 	movw	r3, #37568	; 0x92c0
 8003188:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800318a:	2303      	movs	r3, #3
 800318c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800318e:	2300      	movs	r3, #0
 8003190:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003192:	f107 031c 	add.w	r3, r7, #28
 8003196:	4619      	mov	r1, r3
 8003198:	4812      	ldr	r0, [pc, #72]	; (80031e4 <MX_GPIO_Init+0x1c4>)
 800319a:	f002 fa0d 	bl	80055b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11 
                           PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11 
 800319e:	f64f 4303 	movw	r3, #64515	; 0xfc03
 80031a2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031a4:	2303      	movs	r3, #3
 80031a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a8:	2300      	movs	r3, #0
 80031aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031ac:	f107 031c 	add.w	r3, r7, #28
 80031b0:	4619      	mov	r1, r3
 80031b2:	480e      	ldr	r0, [pc, #56]	; (80031ec <MX_GPIO_Init+0x1cc>)
 80031b4:	f002 fa00 	bl	80055b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11 
                           PD14 PD3 PD4 PD5 
                           PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 80031b8:	f644 73f8 	movw	r3, #20472	; 0x4ff8
 80031bc:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_14|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031be:	2303      	movs	r3, #3
 80031c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c2:	2300      	movs	r3, #0
 80031c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031c6:	f107 031c 	add.w	r3, r7, #28
 80031ca:	4619      	mov	r1, r3
 80031cc:	4808      	ldr	r0, [pc, #32]	; (80031f0 <MX_GPIO_Init+0x1d0>)
 80031ce:	f002 f9f3 	bl	80055b8 <HAL_GPIO_Init>

}
 80031d2:	bf00      	nop
 80031d4:	3730      	adds	r7, #48	; 0x30
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	40023800 	.word	0x40023800
 80031e0:	40021000 	.word	0x40021000
 80031e4:	40020000 	.word	0x40020000
 80031e8:	40020800 	.word	0x40020800
 80031ec:	40020400 	.word	0x40020400
 80031f0:	40020c00 	.word	0x40020c00
 80031f4:	00000000 	.word	0x00000000

080031f8 <CurrentTime>:

/* USER CODE BEGIN 4 */
double CurrentTime(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
  return HAL_GetTick() / 1000.0;
 80031fc:	f000 fee8 	bl	8003fd0 <HAL_GetTick>
 8003200:	ee07 0a90 	vmov	s15, r0
 8003204:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8003208:	ed9f 6b05 	vldr	d6, [pc, #20]	; 8003220 <CurrentTime+0x28>
 800320c:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8003210:	eeb0 7b45 	vmov.f64	d7, d5
}
 8003214:	eeb0 0b47 	vmov.f64	d0, d7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	f3af 8000 	nop.w
 8003220:	00000000 	.word	0x00000000
 8003224:	408f4000 	.word	0x408f4000

08003228 <measureBattery>:

double measureBattery()
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
  uint32_t D = HAL_ADC_GetValue(&hadc1);
 800322e:	4810      	ldr	r0, [pc, #64]	; (8003270 <measureBattery+0x48>)
 8003230:	f001 f941 	bl	80044b6 <HAL_ADC_GetValue>
 8003234:	6078      	str	r0, [r7, #4]
  return 2 * 3.3 * D / 4096.0;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	ee07 3a90 	vmov	s15, r3
 800323c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8003240:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8003260 <measureBattery+0x38>
 8003244:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003248:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8003268 <measureBattery+0x40>
 800324c:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8003250:	eeb0 7b45 	vmov.f64	d7, d5
}
 8003254:	eeb0 0b47 	vmov.f64	d0, d7
 8003258:	3708      	adds	r7, #8
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	66666666 	.word	0x66666666
 8003264:	401a6666 	.word	0x401a6666
 8003268:	00000000 	.word	0x00000000
 800326c:	40b00000 	.word	0x40b00000
 8003270:	20004608 	.word	0x20004608

08003274 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003274:	b480      	push	{r7}
 8003276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003278:	bf00      	nop
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
	...

08003284 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800328a:	4b12      	ldr	r3, [pc, #72]	; (80032d4 <HAL_MspInit+0x50>)
 800328c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328e:	4a11      	ldr	r2, [pc, #68]	; (80032d4 <HAL_MspInit+0x50>)
 8003290:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003294:	6413      	str	r3, [r2, #64]	; 0x40
 8003296:	4b0f      	ldr	r3, [pc, #60]	; (80032d4 <HAL_MspInit+0x50>)
 8003298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800329e:	607b      	str	r3, [r7, #4]
 80032a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032a2:	4b0c      	ldr	r3, [pc, #48]	; (80032d4 <HAL_MspInit+0x50>)
 80032a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a6:	4a0b      	ldr	r2, [pc, #44]	; (80032d4 <HAL_MspInit+0x50>)
 80032a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032ac:	6453      	str	r3, [r2, #68]	; 0x44
 80032ae:	4b09      	ldr	r3, [pc, #36]	; (80032d4 <HAL_MspInit+0x50>)
 80032b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032b6:	603b      	str	r3, [r7, #0]
 80032b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 80032ba:	2200      	movs	r2, #0
 80032bc:	2100      	movs	r1, #0
 80032be:	2004      	movs	r0, #4
 80032c0:	f001 fc4d 	bl	8004b5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 80032c4:	2004      	movs	r0, #4
 80032c6:	f001 fc66 	bl	8004b96 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032ca:	bf00      	nop
 80032cc:	3708      	adds	r7, #8
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	40023800 	.word	0x40023800

080032d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b08a      	sub	sp, #40	; 0x28
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032e0:	f107 0314 	add.w	r3, r7, #20
 80032e4:	2200      	movs	r2, #0
 80032e6:	601a      	str	r2, [r3, #0]
 80032e8:	605a      	str	r2, [r3, #4]
 80032ea:	609a      	str	r2, [r3, #8]
 80032ec:	60da      	str	r2, [r3, #12]
 80032ee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a19      	ldr	r2, [pc, #100]	; (800335c <HAL_ADC_MspInit+0x84>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d12b      	bne.n	8003352 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80032fa:	4b19      	ldr	r3, [pc, #100]	; (8003360 <HAL_ADC_MspInit+0x88>)
 80032fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032fe:	4a18      	ldr	r2, [pc, #96]	; (8003360 <HAL_ADC_MspInit+0x88>)
 8003300:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003304:	6453      	str	r3, [r2, #68]	; 0x44
 8003306:	4b16      	ldr	r3, [pc, #88]	; (8003360 <HAL_ADC_MspInit+0x88>)
 8003308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800330a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800330e:	613b      	str	r3, [r7, #16]
 8003310:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003312:	4b13      	ldr	r3, [pc, #76]	; (8003360 <HAL_ADC_MspInit+0x88>)
 8003314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003316:	4a12      	ldr	r2, [pc, #72]	; (8003360 <HAL_ADC_MspInit+0x88>)
 8003318:	f043 0304 	orr.w	r3, r3, #4
 800331c:	6313      	str	r3, [r2, #48]	; 0x30
 800331e:	4b10      	ldr	r3, [pc, #64]	; (8003360 <HAL_ADC_MspInit+0x88>)
 8003320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003322:	f003 0304 	and.w	r3, r3, #4
 8003326:	60fb      	str	r3, [r7, #12]
 8003328:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PC3     ------> ADC1_IN13 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800332a:	2308      	movs	r3, #8
 800332c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800332e:	2303      	movs	r3, #3
 8003330:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003332:	2300      	movs	r3, #0
 8003334:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003336:	f107 0314 	add.w	r3, r7, #20
 800333a:	4619      	mov	r1, r3
 800333c:	4809      	ldr	r0, [pc, #36]	; (8003364 <HAL_ADC_MspInit+0x8c>)
 800333e:	f002 f93b 	bl	80055b8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003342:	2200      	movs	r2, #0
 8003344:	2100      	movs	r1, #0
 8003346:	2012      	movs	r0, #18
 8003348:	f001 fc09 	bl	8004b5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800334c:	2012      	movs	r0, #18
 800334e:	f001 fc22 	bl	8004b96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003352:	bf00      	nop
 8003354:	3728      	adds	r7, #40	; 0x28
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	40012000 	.word	0x40012000
 8003360:	40023800 	.word	0x40023800
 8003364:	40020800 	.word	0x40020800

08003368 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b08a      	sub	sp, #40	; 0x28
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003370:	f107 0314 	add.w	r3, r7, #20
 8003374:	2200      	movs	r2, #0
 8003376:	601a      	str	r2, [r3, #0]
 8003378:	605a      	str	r2, [r3, #4]
 800337a:	609a      	str	r2, [r3, #8]
 800337c:	60da      	str	r2, [r3, #12]
 800337e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a1b      	ldr	r2, [pc, #108]	; (80033f4 <HAL_I2C_MspInit+0x8c>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d12f      	bne.n	80033ea <HAL_I2C_MspInit+0x82>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800338a:	4b1b      	ldr	r3, [pc, #108]	; (80033f8 <HAL_I2C_MspInit+0x90>)
 800338c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338e:	4a1a      	ldr	r2, [pc, #104]	; (80033f8 <HAL_I2C_MspInit+0x90>)
 8003390:	f043 0302 	orr.w	r3, r3, #2
 8003394:	6313      	str	r3, [r2, #48]	; 0x30
 8003396:	4b18      	ldr	r3, [pc, #96]	; (80033f8 <HAL_I2C_MspInit+0x90>)
 8003398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	613b      	str	r3, [r7, #16]
 80033a0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = BNO_SCL_Pin|BNO_SDA_Pin;
 80033a2:	23c0      	movs	r3, #192	; 0xc0
 80033a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80033a6:	2312      	movs	r3, #18
 80033a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033aa:	2301      	movs	r3, #1
 80033ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033ae:	2303      	movs	r3, #3
 80033b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80033b2:	2304      	movs	r3, #4
 80033b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033b6:	f107 0314 	add.w	r3, r7, #20
 80033ba:	4619      	mov	r1, r3
 80033bc:	480f      	ldr	r0, [pc, #60]	; (80033fc <HAL_I2C_MspInit+0x94>)
 80033be:	f002 f8fb 	bl	80055b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80033c2:	4b0d      	ldr	r3, [pc, #52]	; (80033f8 <HAL_I2C_MspInit+0x90>)
 80033c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c6:	4a0c      	ldr	r2, [pc, #48]	; (80033f8 <HAL_I2C_MspInit+0x90>)
 80033c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80033cc:	6413      	str	r3, [r2, #64]	; 0x40
 80033ce:	4b0a      	ldr	r3, [pc, #40]	; (80033f8 <HAL_I2C_MspInit+0x90>)
 80033d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033d6:	60fb      	str	r3, [r7, #12]
 80033d8:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80033da:	2200      	movs	r2, #0
 80033dc:	2100      	movs	r1, #0
 80033de:	201f      	movs	r0, #31
 80033e0:	f001 fbbd 	bl	8004b5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80033e4:	201f      	movs	r0, #31
 80033e6:	f001 fbd6 	bl	8004b96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80033ea:	bf00      	nop
 80033ec:	3728      	adds	r7, #40	; 0x28
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	40005400 	.word	0x40005400
 80033f8:	40023800 	.word	0x40023800
 80033fc:	40020400 	.word	0x40020400

08003400 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b08c      	sub	sp, #48	; 0x30
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003408:	f107 031c 	add.w	r3, r7, #28
 800340c:	2200      	movs	r2, #0
 800340e:	601a      	str	r2, [r3, #0]
 8003410:	605a      	str	r2, [r3, #4]
 8003412:	609a      	str	r2, [r3, #8]
 8003414:	60da      	str	r2, [r3, #12]
 8003416:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a38      	ldr	r2, [pc, #224]	; (8003500 <HAL_QSPI_MspInit+0x100>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d169      	bne.n	80034f6 <HAL_QSPI_MspInit+0xf6>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8003422:	4b38      	ldr	r3, [pc, #224]	; (8003504 <HAL_QSPI_MspInit+0x104>)
 8003424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003426:	4a37      	ldr	r2, [pc, #220]	; (8003504 <HAL_QSPI_MspInit+0x104>)
 8003428:	f043 0302 	orr.w	r3, r3, #2
 800342c:	6393      	str	r3, [r2, #56]	; 0x38
 800342e:	4b35      	ldr	r3, [pc, #212]	; (8003504 <HAL_QSPI_MspInit+0x104>)
 8003430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	61bb      	str	r3, [r7, #24]
 8003438:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800343a:	4b32      	ldr	r3, [pc, #200]	; (8003504 <HAL_QSPI_MspInit+0x104>)
 800343c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343e:	4a31      	ldr	r2, [pc, #196]	; (8003504 <HAL_QSPI_MspInit+0x104>)
 8003440:	f043 0302 	orr.w	r3, r3, #2
 8003444:	6313      	str	r3, [r2, #48]	; 0x30
 8003446:	4b2f      	ldr	r3, [pc, #188]	; (8003504 <HAL_QSPI_MspInit+0x104>)
 8003448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	617b      	str	r3, [r7, #20]
 8003450:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003452:	4b2c      	ldr	r3, [pc, #176]	; (8003504 <HAL_QSPI_MspInit+0x104>)
 8003454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003456:	4a2b      	ldr	r2, [pc, #172]	; (8003504 <HAL_QSPI_MspInit+0x104>)
 8003458:	f043 0310 	orr.w	r3, r3, #16
 800345c:	6313      	str	r3, [r2, #48]	; 0x30
 800345e:	4b29      	ldr	r3, [pc, #164]	; (8003504 <HAL_QSPI_MspInit+0x104>)
 8003460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003462:	f003 0310 	and.w	r3, r3, #16
 8003466:	613b      	str	r3, [r7, #16]
 8003468:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800346a:	4b26      	ldr	r3, [pc, #152]	; (8003504 <HAL_QSPI_MspInit+0x104>)
 800346c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346e:	4a25      	ldr	r2, [pc, #148]	; (8003504 <HAL_QSPI_MspInit+0x104>)
 8003470:	f043 0304 	orr.w	r3, r3, #4
 8003474:	6313      	str	r3, [r2, #48]	; 0x30
 8003476:	4b23      	ldr	r3, [pc, #140]	; (8003504 <HAL_QSPI_MspInit+0x104>)
 8003478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347a:	f003 0304 	and.w	r3, r3, #4
 800347e:	60fb      	str	r3, [r7, #12]
 8003480:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PE7     ------> QUADSPI_BK2_IO0
    PE8     ------> QUADSPI_BK2_IO1
    PC11     ------> QUADSPI_BK2_NCS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003482:	2304      	movs	r3, #4
 8003484:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003486:	2302      	movs	r3, #2
 8003488:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800348a:	2300      	movs	r3, #0
 800348c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800348e:	2303      	movs	r3, #3
 8003490:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003492:	2309      	movs	r3, #9
 8003494:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003496:	f107 031c 	add.w	r3, r7, #28
 800349a:	4619      	mov	r1, r3
 800349c:	481a      	ldr	r0, [pc, #104]	; (8003508 <HAL_QSPI_MspInit+0x108>)
 800349e:	f002 f88b 	bl	80055b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80034a2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80034a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a8:	2302      	movs	r3, #2
 80034aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ac:	2300      	movs	r3, #0
 80034ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034b0:	2303      	movs	r3, #3
 80034b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80034b4:	230a      	movs	r3, #10
 80034b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80034b8:	f107 031c 	add.w	r3, r7, #28
 80034bc:	4619      	mov	r1, r3
 80034be:	4813      	ldr	r0, [pc, #76]	; (800350c <HAL_QSPI_MspInit+0x10c>)
 80034c0:	f002 f87a 	bl	80055b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80034c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80034c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ca:	2302      	movs	r3, #2
 80034cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ce:	2300      	movs	r3, #0
 80034d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034d2:	2303      	movs	r3, #3
 80034d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80034d6:	2309      	movs	r3, #9
 80034d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034da:	f107 031c 	add.w	r3, r7, #28
 80034de:	4619      	mov	r1, r3
 80034e0:	480b      	ldr	r0, [pc, #44]	; (8003510 <HAL_QSPI_MspInit+0x110>)
 80034e2:	f002 f869 	bl	80055b8 <HAL_GPIO_Init>

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 0, 0);
 80034e6:	2200      	movs	r2, #0
 80034e8:	2100      	movs	r1, #0
 80034ea:	205c      	movs	r0, #92	; 0x5c
 80034ec:	f001 fb37 	bl	8004b5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 80034f0:	205c      	movs	r0, #92	; 0x5c
 80034f2:	f001 fb50 	bl	8004b96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80034f6:	bf00      	nop
 80034f8:	3730      	adds	r7, #48	; 0x30
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	a0001000 	.word	0xa0001000
 8003504:	40023800 	.word	0x40023800
 8003508:	40020400 	.word	0x40020400
 800350c:	40021000 	.word	0x40021000
 8003510:	40020800 	.word	0x40020800

08003514 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a07      	ldr	r2, [pc, #28]	; (8003540 <HAL_RTC_MspInit+0x2c>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d105      	bne.n	8003532 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003526:	4b07      	ldr	r3, [pc, #28]	; (8003544 <HAL_RTC_MspInit+0x30>)
 8003528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800352a:	4a06      	ldr	r2, [pc, #24]	; (8003544 <HAL_RTC_MspInit+0x30>)
 800352c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003530:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003532:	bf00      	nop
 8003534:	370c      	adds	r7, #12
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	40002800 	.word	0x40002800
 8003544:	40023800 	.word	0x40023800

08003548 <HAL_MMC_MspInit>:
* This function configures the hardware resources used in this example
* @param hmmc: MMC handle pointer
* @retval None
*/
void HAL_MMC_MspInit(MMC_HandleTypeDef* hmmc)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b08a      	sub	sp, #40	; 0x28
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003550:	f107 0314 	add.w	r3, r7, #20
 8003554:	2200      	movs	r2, #0
 8003556:	601a      	str	r2, [r3, #0]
 8003558:	605a      	str	r2, [r3, #4]
 800355a:	609a      	str	r2, [r3, #8]
 800355c:	60da      	str	r2, [r3, #12]
 800355e:	611a      	str	r2, [r3, #16]
  if(hmmc->Instance==SDMMC1)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a25      	ldr	r2, [pc, #148]	; (80035fc <HAL_MMC_MspInit+0xb4>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d144      	bne.n	80035f4 <HAL_MMC_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800356a:	4b25      	ldr	r3, [pc, #148]	; (8003600 <HAL_MMC_MspInit+0xb8>)
 800356c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356e:	4a24      	ldr	r2, [pc, #144]	; (8003600 <HAL_MMC_MspInit+0xb8>)
 8003570:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003574:	6453      	str	r3, [r2, #68]	; 0x44
 8003576:	4b22      	ldr	r3, [pc, #136]	; (8003600 <HAL_MMC_MspInit+0xb8>)
 8003578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800357a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800357e:	613b      	str	r3, [r7, #16]
 8003580:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003582:	4b1f      	ldr	r3, [pc, #124]	; (8003600 <HAL_MMC_MspInit+0xb8>)
 8003584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003586:	4a1e      	ldr	r2, [pc, #120]	; (8003600 <HAL_MMC_MspInit+0xb8>)
 8003588:	f043 0304 	orr.w	r3, r3, #4
 800358c:	6313      	str	r3, [r2, #48]	; 0x30
 800358e:	4b1c      	ldr	r3, [pc, #112]	; (8003600 <HAL_MMC_MspInit+0xb8>)
 8003590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003592:	f003 0304 	and.w	r3, r3, #4
 8003596:	60fb      	str	r3, [r7, #12]
 8003598:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800359a:	4b19      	ldr	r3, [pc, #100]	; (8003600 <HAL_MMC_MspInit+0xb8>)
 800359c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359e:	4a18      	ldr	r2, [pc, #96]	; (8003600 <HAL_MMC_MspInit+0xb8>)
 80035a0:	f043 0308 	orr.w	r3, r3, #8
 80035a4:	6313      	str	r3, [r2, #48]	; 0x30
 80035a6:	4b16      	ldr	r3, [pc, #88]	; (8003600 <HAL_MMC_MspInit+0xb8>)
 80035a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035aa:	f003 0308 	and.w	r3, r3, #8
 80035ae:	60bb      	str	r3, [r7, #8]
 80035b0:	68bb      	ldr	r3, [r7, #8]
    /**SDMMC1 GPIO Configuration    
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 80035b2:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 80035b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035b8:	2302      	movs	r3, #2
 80035ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035bc:	2300      	movs	r3, #0
 80035be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035c0:	2303      	movs	r3, #3
 80035c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80035c4:	230c      	movs	r3, #12
 80035c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035c8:	f107 0314 	add.w	r3, r7, #20
 80035cc:	4619      	mov	r1, r3
 80035ce:	480d      	ldr	r0, [pc, #52]	; (8003604 <HAL_MMC_MspInit+0xbc>)
 80035d0:	f001 fff2 	bl	80055b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80035d4:	2304      	movs	r3, #4
 80035d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035d8:	2302      	movs	r3, #2
 80035da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035dc:	2300      	movs	r3, #0
 80035de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035e0:	2303      	movs	r3, #3
 80035e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80035e4:	230c      	movs	r3, #12
 80035e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80035e8:	f107 0314 	add.w	r3, r7, #20
 80035ec:	4619      	mov	r1, r3
 80035ee:	4806      	ldr	r0, [pc, #24]	; (8003608 <HAL_MMC_MspInit+0xc0>)
 80035f0:	f001 ffe2 	bl	80055b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80035f4:	bf00      	nop
 80035f6:	3728      	adds	r7, #40	; 0x28
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	40012c00 	.word	0x40012c00
 8003600:	40023800 	.word	0x40023800
 8003604:	40020800 	.word	0x40020800
 8003608:	40020c00 	.word	0x40020c00

0800360c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b08a      	sub	sp, #40	; 0x28
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003614:	f107 0314 	add.w	r3, r7, #20
 8003618:	2200      	movs	r2, #0
 800361a:	601a      	str	r2, [r3, #0]
 800361c:	605a      	str	r2, [r3, #4]
 800361e:	609a      	str	r2, [r3, #8]
 8003620:	60da      	str	r2, [r3, #12]
 8003622:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a17      	ldr	r2, [pc, #92]	; (8003688 <HAL_SPI_MspInit+0x7c>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d127      	bne.n	800367e <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800362e:	4b17      	ldr	r3, [pc, #92]	; (800368c <HAL_SPI_MspInit+0x80>)
 8003630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003632:	4a16      	ldr	r2, [pc, #88]	; (800368c <HAL_SPI_MspInit+0x80>)
 8003634:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003638:	6453      	str	r3, [r2, #68]	; 0x44
 800363a:	4b14      	ldr	r3, [pc, #80]	; (800368c <HAL_SPI_MspInit+0x80>)
 800363c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800363e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003642:	613b      	str	r3, [r7, #16]
 8003644:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003646:	4b11      	ldr	r3, [pc, #68]	; (800368c <HAL_SPI_MspInit+0x80>)
 8003648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364a:	4a10      	ldr	r2, [pc, #64]	; (800368c <HAL_SPI_MspInit+0x80>)
 800364c:	f043 0302 	orr.w	r3, r3, #2
 8003650:	6313      	str	r3, [r2, #48]	; 0x30
 8003652:	4b0e      	ldr	r3, [pc, #56]	; (800368c <HAL_SPI_MspInit+0x80>)
 8003654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	60fb      	str	r3, [r7, #12]
 800365c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800365e:	2338      	movs	r3, #56	; 0x38
 8003660:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003662:	2302      	movs	r3, #2
 8003664:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003666:	2300      	movs	r3, #0
 8003668:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800366a:	2303      	movs	r3, #3
 800366c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800366e:	2305      	movs	r3, #5
 8003670:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003672:	f107 0314 	add.w	r3, r7, #20
 8003676:	4619      	mov	r1, r3
 8003678:	4805      	ldr	r0, [pc, #20]	; (8003690 <HAL_SPI_MspInit+0x84>)
 800367a:	f001 ff9d 	bl	80055b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800367e:	bf00      	nop
 8003680:	3728      	adds	r7, #40	; 0x28
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	40013000 	.word	0x40013000
 800368c:	40023800 	.word	0x40023800
 8003690:	40020400 	.word	0x40020400

08003694 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b08a      	sub	sp, #40	; 0x28
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800369c:	f107 0314 	add.w	r3, r7, #20
 80036a0:	2200      	movs	r2, #0
 80036a2:	601a      	str	r2, [r3, #0]
 80036a4:	605a      	str	r2, [r3, #4]
 80036a6:	609a      	str	r2, [r3, #8]
 80036a8:	60da      	str	r2, [r3, #12]
 80036aa:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a17      	ldr	r2, [pc, #92]	; (8003710 <HAL_TIM_IC_MspInit+0x7c>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d128      	bne.n	8003708 <HAL_TIM_IC_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80036b6:	4b17      	ldr	r3, [pc, #92]	; (8003714 <HAL_TIM_IC_MspInit+0x80>)
 80036b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ba:	4a16      	ldr	r2, [pc, #88]	; (8003714 <HAL_TIM_IC_MspInit+0x80>)
 80036bc:	f043 0301 	orr.w	r3, r3, #1
 80036c0:	6453      	str	r3, [r2, #68]	; 0x44
 80036c2:	4b14      	ldr	r3, [pc, #80]	; (8003714 <HAL_TIM_IC_MspInit+0x80>)
 80036c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	613b      	str	r3, [r7, #16]
 80036cc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036ce:	4b11      	ldr	r3, [pc, #68]	; (8003714 <HAL_TIM_IC_MspInit+0x80>)
 80036d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d2:	4a10      	ldr	r2, [pc, #64]	; (8003714 <HAL_TIM_IC_MspInit+0x80>)
 80036d4:	f043 0301 	orr.w	r3, r3, #1
 80036d8:	6313      	str	r3, [r2, #48]	; 0x30
 80036da:	4b0e      	ldr	r3, [pc, #56]	; (8003714 <HAL_TIM_IC_MspInit+0x80>)
 80036dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	60fb      	str	r3, [r7, #12]
 80036e4:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = PWM3_J5_P1_Pin|PWM4_J5_P4_Pin;
 80036e6:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80036ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ec:	2302      	movs	r3, #2
 80036ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036f0:	2300      	movs	r3, #0
 80036f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036f4:	2300      	movs	r3, #0
 80036f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80036f8:	2301      	movs	r3, #1
 80036fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036fc:	f107 0314 	add.w	r3, r7, #20
 8003700:	4619      	mov	r1, r3
 8003702:	4805      	ldr	r0, [pc, #20]	; (8003718 <HAL_TIM_IC_MspInit+0x84>)
 8003704:	f001 ff58 	bl	80055b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003708:	bf00      	nop
 800370a:	3728      	adds	r7, #40	; 0x28
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	40010000 	.word	0x40010000
 8003714:	40023800 	.word	0x40023800
 8003718:	40020000 	.word	0x40020000

0800371c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800371c:	b480      	push	{r7}
 800371e:	b085      	sub	sp, #20
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800372c:	d10c      	bne.n	8003748 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800372e:	4b12      	ldr	r3, [pc, #72]	; (8003778 <HAL_TIM_PWM_MspInit+0x5c>)
 8003730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003732:	4a11      	ldr	r2, [pc, #68]	; (8003778 <HAL_TIM_PWM_MspInit+0x5c>)
 8003734:	f043 0301 	orr.w	r3, r3, #1
 8003738:	6413      	str	r3, [r2, #64]	; 0x40
 800373a:	4b0f      	ldr	r3, [pc, #60]	; (8003778 <HAL_TIM_PWM_MspInit+0x5c>)
 800373c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373e:	f003 0301 	and.w	r3, r3, #1
 8003742:	60fb      	str	r3, [r7, #12]
 8003744:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003746:	e010      	b.n	800376a <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM4)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a0b      	ldr	r2, [pc, #44]	; (800377c <HAL_TIM_PWM_MspInit+0x60>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d10b      	bne.n	800376a <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003752:	4b09      	ldr	r3, [pc, #36]	; (8003778 <HAL_TIM_PWM_MspInit+0x5c>)
 8003754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003756:	4a08      	ldr	r2, [pc, #32]	; (8003778 <HAL_TIM_PWM_MspInit+0x5c>)
 8003758:	f043 0304 	orr.w	r3, r3, #4
 800375c:	6413      	str	r3, [r2, #64]	; 0x40
 800375e:	4b06      	ldr	r3, [pc, #24]	; (8003778 <HAL_TIM_PWM_MspInit+0x5c>)
 8003760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003762:	f003 0304 	and.w	r3, r3, #4
 8003766:	60bb      	str	r3, [r7, #8]
 8003768:	68bb      	ldr	r3, [r7, #8]
}
 800376a:	bf00      	nop
 800376c:	3714      	adds	r7, #20
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	40023800 	.word	0x40023800
 800377c:	40000800 	.word	0x40000800

08003780 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b08a      	sub	sp, #40	; 0x28
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003788:	f107 0314 	add.w	r3, r7, #20
 800378c:	2200      	movs	r2, #0
 800378e:	601a      	str	r2, [r3, #0]
 8003790:	605a      	str	r2, [r3, #4]
 8003792:	609a      	str	r2, [r3, #8]
 8003794:	60da      	str	r2, [r3, #12]
 8003796:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a34      	ldr	r2, [pc, #208]	; (8003870 <HAL_TIM_MspPostInit+0xf0>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d11d      	bne.n	80037de <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037a2:	4b34      	ldr	r3, [pc, #208]	; (8003874 <HAL_TIM_MspPostInit+0xf4>)
 80037a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a6:	4a33      	ldr	r2, [pc, #204]	; (8003874 <HAL_TIM_MspPostInit+0xf4>)
 80037a8:	f043 0301 	orr.w	r3, r3, #1
 80037ac:	6313      	str	r3, [r2, #48]	; 0x30
 80037ae:	4b31      	ldr	r3, [pc, #196]	; (8003874 <HAL_TIM_MspPostInit+0xf4>)
 80037b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b2:	f003 0301 	and.w	r3, r3, #1
 80037b6:	613b      	str	r3, [r7, #16]
 80037b8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = PWM2_J1_P4_Pin;
 80037ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80037be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037c0:	2302      	movs	r3, #2
 80037c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037c4:	2300      	movs	r3, #0
 80037c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037c8:	2300      	movs	r3, #0
 80037ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80037cc:	2301      	movs	r3, #1
 80037ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM2_J1_P4_GPIO_Port, &GPIO_InitStruct);
 80037d0:	f107 0314 	add.w	r3, r7, #20
 80037d4:	4619      	mov	r1, r3
 80037d6:	4828      	ldr	r0, [pc, #160]	; (8003878 <HAL_TIM_MspPostInit+0xf8>)
 80037d8:	f001 feee 	bl	80055b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80037dc:	e043      	b.n	8003866 <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM2)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037e6:	d11c      	bne.n	8003822 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037e8:	4b22      	ldr	r3, [pc, #136]	; (8003874 <HAL_TIM_MspPostInit+0xf4>)
 80037ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ec:	4a21      	ldr	r2, [pc, #132]	; (8003874 <HAL_TIM_MspPostInit+0xf4>)
 80037ee:	f043 0301 	orr.w	r3, r3, #1
 80037f2:	6313      	str	r3, [r2, #48]	; 0x30
 80037f4:	4b1f      	ldr	r3, [pc, #124]	; (8003874 <HAL_TIM_MspPostInit+0xf4>)
 80037f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f8:	f003 0301 	and.w	r3, r3, #1
 80037fc:	60fb      	str	r3, [r7, #12]
 80037fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM1_J1_P1_Pin;
 8003800:	2320      	movs	r3, #32
 8003802:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003804:	2302      	movs	r3, #2
 8003806:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003808:	2300      	movs	r3, #0
 800380a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800380c:	2300      	movs	r3, #0
 800380e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003810:	2301      	movs	r3, #1
 8003812:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM1_J1_P1_GPIO_Port, &GPIO_InitStruct);
 8003814:	f107 0314 	add.w	r3, r7, #20
 8003818:	4619      	mov	r1, r3
 800381a:	4817      	ldr	r0, [pc, #92]	; (8003878 <HAL_TIM_MspPostInit+0xf8>)
 800381c:	f001 fecc 	bl	80055b8 <HAL_GPIO_Init>
}
 8003820:	e021      	b.n	8003866 <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM4)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a15      	ldr	r2, [pc, #84]	; (800387c <HAL_TIM_MspPostInit+0xfc>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d11c      	bne.n	8003866 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800382c:	4b11      	ldr	r3, [pc, #68]	; (8003874 <HAL_TIM_MspPostInit+0xf4>)
 800382e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003830:	4a10      	ldr	r2, [pc, #64]	; (8003874 <HAL_TIM_MspPostInit+0xf4>)
 8003832:	f043 0308 	orr.w	r3, r3, #8
 8003836:	6313      	str	r3, [r2, #48]	; 0x30
 8003838:	4b0e      	ldr	r3, [pc, #56]	; (8003874 <HAL_TIM_MspPostInit+0xf4>)
 800383a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383c:	f003 0308 	and.w	r3, r3, #8
 8003840:	60bb      	str	r3, [r7, #8]
 8003842:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Green_LED_Pin|Red_LED_Pin|Blue_LED_Pin;
 8003844:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8003848:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800384a:	2302      	movs	r3, #2
 800384c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800384e:	2300      	movs	r3, #0
 8003850:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003852:	2300      	movs	r3, #0
 8003854:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003856:	2302      	movs	r3, #2
 8003858:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800385a:	f107 0314 	add.w	r3, r7, #20
 800385e:	4619      	mov	r1, r3
 8003860:	4807      	ldr	r0, [pc, #28]	; (8003880 <HAL_TIM_MspPostInit+0x100>)
 8003862:	f001 fea9 	bl	80055b8 <HAL_GPIO_Init>
}
 8003866:	bf00      	nop
 8003868:	3728      	adds	r7, #40	; 0x28
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	40010000 	.word	0x40010000
 8003874:	40023800 	.word	0x40023800
 8003878:	40020000 	.word	0x40020000
 800387c:	40000800 	.word	0x40000800
 8003880:	40020c00 	.word	0x40020c00

08003884 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b08e      	sub	sp, #56	; 0x38
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800388c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003890:	2200      	movs	r2, #0
 8003892:	601a      	str	r2, [r3, #0]
 8003894:	605a      	str	r2, [r3, #4]
 8003896:	609a      	str	r2, [r3, #8]
 8003898:	60da      	str	r2, [r3, #12]
 800389a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a9c      	ldr	r2, [pc, #624]	; (8003b14 <HAL_UART_MspInit+0x290>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d130      	bne.n	8003908 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80038a6:	4b9c      	ldr	r3, [pc, #624]	; (8003b18 <HAL_UART_MspInit+0x294>)
 80038a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038aa:	4a9b      	ldr	r2, [pc, #620]	; (8003b18 <HAL_UART_MspInit+0x294>)
 80038ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80038b0:	6413      	str	r3, [r2, #64]	; 0x40
 80038b2:	4b99      	ldr	r3, [pc, #612]	; (8003b18 <HAL_UART_MspInit+0x294>)
 80038b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038ba:	623b      	str	r3, [r7, #32]
 80038bc:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80038be:	4b96      	ldr	r3, [pc, #600]	; (8003b18 <HAL_UART_MspInit+0x294>)
 80038c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c2:	4a95      	ldr	r2, [pc, #596]	; (8003b18 <HAL_UART_MspInit+0x294>)
 80038c4:	f043 0308 	orr.w	r3, r3, #8
 80038c8:	6313      	str	r3, [r2, #48]	; 0x30
 80038ca:	4b93      	ldr	r3, [pc, #588]	; (8003b18 <HAL_UART_MspInit+0x294>)
 80038cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ce:	f003 0308 	and.w	r3, r3, #8
 80038d2:	61fb      	str	r3, [r7, #28]
 80038d4:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration    
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX 
    */
    GPIO_InitStruct.Pin = UART4_RX_J9_P3_Pin|UART4_TX_J9_P1_Pin;
 80038d6:	2303      	movs	r3, #3
 80038d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038da:	2302      	movs	r3, #2
 80038dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038de:	2300      	movs	r3, #0
 80038e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038e2:	2303      	movs	r3, #3
 80038e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80038e6:	2308      	movs	r3, #8
 80038e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80038ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038ee:	4619      	mov	r1, r3
 80038f0:	488a      	ldr	r0, [pc, #552]	; (8003b1c <HAL_UART_MspInit+0x298>)
 80038f2:	f001 fe61 	bl	80055b8 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80038f6:	2200      	movs	r2, #0
 80038f8:	2100      	movs	r1, #0
 80038fa:	2034      	movs	r0, #52	; 0x34
 80038fc:	f001 f92f 	bl	8004b5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003900:	2034      	movs	r0, #52	; 0x34
 8003902:	f001 f948 	bl	8004b96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003906:	e100      	b.n	8003b0a <HAL_UART_MspInit+0x286>
  else if(huart->Instance==UART5)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a84      	ldr	r2, [pc, #528]	; (8003b20 <HAL_UART_MspInit+0x29c>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d15f      	bne.n	80039d2 <HAL_UART_MspInit+0x14e>
    __HAL_RCC_UART5_CLK_ENABLE();
 8003912:	4b81      	ldr	r3, [pc, #516]	; (8003b18 <HAL_UART_MspInit+0x294>)
 8003914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003916:	4a80      	ldr	r2, [pc, #512]	; (8003b18 <HAL_UART_MspInit+0x294>)
 8003918:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800391c:	6413      	str	r3, [r2, #64]	; 0x40
 800391e:	4b7e      	ldr	r3, [pc, #504]	; (8003b18 <HAL_UART_MspInit+0x294>)
 8003920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003922:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003926:	61bb      	str	r3, [r7, #24]
 8003928:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800392a:	4b7b      	ldr	r3, [pc, #492]	; (8003b18 <HAL_UART_MspInit+0x294>)
 800392c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392e:	4a7a      	ldr	r2, [pc, #488]	; (8003b18 <HAL_UART_MspInit+0x294>)
 8003930:	f043 0302 	orr.w	r3, r3, #2
 8003934:	6313      	str	r3, [r2, #48]	; 0x30
 8003936:	4b78      	ldr	r3, [pc, #480]	; (8003b18 <HAL_UART_MspInit+0x294>)
 8003938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393a:	f003 0302 	and.w	r3, r3, #2
 800393e:	617b      	str	r3, [r7, #20]
 8003940:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003942:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003946:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003948:	2302      	movs	r3, #2
 800394a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800394c:	2300      	movs	r3, #0
 800394e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003950:	2303      	movs	r3, #3
 8003952:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_UART5;
 8003954:	2307      	movs	r3, #7
 8003956:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003958:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800395c:	4619      	mov	r1, r3
 800395e:	4871      	ldr	r0, [pc, #452]	; (8003b24 <HAL_UART_MspInit+0x2a0>)
 8003960:	f001 fe2a 	bl	80055b8 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8003964:	4b70      	ldr	r3, [pc, #448]	; (8003b28 <HAL_UART_MspInit+0x2a4>)
 8003966:	4a71      	ldr	r2, [pc, #452]	; (8003b2c <HAL_UART_MspInit+0x2a8>)
 8003968:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 800396a:	4b6f      	ldr	r3, [pc, #444]	; (8003b28 <HAL_UART_MspInit+0x2a4>)
 800396c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003970:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003972:	4b6d      	ldr	r3, [pc, #436]	; (8003b28 <HAL_UART_MspInit+0x2a4>)
 8003974:	2200      	movs	r2, #0
 8003976:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003978:	4b6b      	ldr	r3, [pc, #428]	; (8003b28 <HAL_UART_MspInit+0x2a4>)
 800397a:	2200      	movs	r2, #0
 800397c:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 800397e:	4b6a      	ldr	r3, [pc, #424]	; (8003b28 <HAL_UART_MspInit+0x2a4>)
 8003980:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003984:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003986:	4b68      	ldr	r3, [pc, #416]	; (8003b28 <HAL_UART_MspInit+0x2a4>)
 8003988:	2200      	movs	r2, #0
 800398a:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800398c:	4b66      	ldr	r3, [pc, #408]	; (8003b28 <HAL_UART_MspInit+0x2a4>)
 800398e:	2200      	movs	r2, #0
 8003990:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8003992:	4b65      	ldr	r3, [pc, #404]	; (8003b28 <HAL_UART_MspInit+0x2a4>)
 8003994:	2200      	movs	r2, #0
 8003996:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003998:	4b63      	ldr	r3, [pc, #396]	; (8003b28 <HAL_UART_MspInit+0x2a4>)
 800399a:	2200      	movs	r2, #0
 800399c:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800399e:	4b62      	ldr	r3, [pc, #392]	; (8003b28 <HAL_UART_MspInit+0x2a4>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 80039a4:	4860      	ldr	r0, [pc, #384]	; (8003b28 <HAL_UART_MspInit+0x2a4>)
 80039a6:	f001 f911 	bl	8004bcc <HAL_DMA_Init>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d001      	beq.n	80039b4 <HAL_UART_MspInit+0x130>
      Error_Handler();
 80039b0:	f7ff fc60 	bl	8003274 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a5c      	ldr	r2, [pc, #368]	; (8003b28 <HAL_UART_MspInit+0x2a4>)
 80039b8:	66da      	str	r2, [r3, #108]	; 0x6c
 80039ba:	4a5b      	ldr	r2, [pc, #364]	; (8003b28 <HAL_UART_MspInit+0x2a4>)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80039c0:	2200      	movs	r2, #0
 80039c2:	2100      	movs	r1, #0
 80039c4:	2035      	movs	r0, #53	; 0x35
 80039c6:	f001 f8ca 	bl	8004b5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80039ca:	2035      	movs	r0, #53	; 0x35
 80039cc:	f001 f8e3 	bl	8004b96 <HAL_NVIC_EnableIRQ>
}
 80039d0:	e09b      	b.n	8003b0a <HAL_UART_MspInit+0x286>
  else if(huart->Instance==USART2)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a56      	ldr	r2, [pc, #344]	; (8003b30 <HAL_UART_MspInit+0x2ac>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	f040 8096 	bne.w	8003b0a <HAL_UART_MspInit+0x286>
    __HAL_RCC_USART2_CLK_ENABLE();
 80039de:	4b4e      	ldr	r3, [pc, #312]	; (8003b18 <HAL_UART_MspInit+0x294>)
 80039e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e2:	4a4d      	ldr	r2, [pc, #308]	; (8003b18 <HAL_UART_MspInit+0x294>)
 80039e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039e8:	6413      	str	r3, [r2, #64]	; 0x40
 80039ea:	4b4b      	ldr	r3, [pc, #300]	; (8003b18 <HAL_UART_MspInit+0x294>)
 80039ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039f2:	613b      	str	r3, [r7, #16]
 80039f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039f6:	4b48      	ldr	r3, [pc, #288]	; (8003b18 <HAL_UART_MspInit+0x294>)
 80039f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fa:	4a47      	ldr	r2, [pc, #284]	; (8003b18 <HAL_UART_MspInit+0x294>)
 80039fc:	f043 0301 	orr.w	r3, r3, #1
 8003a00:	6313      	str	r3, [r2, #48]	; 0x30
 8003a02:	4b45      	ldr	r3, [pc, #276]	; (8003b18 <HAL_UART_MspInit+0x294>)
 8003a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a06:	f003 0301 	and.w	r3, r3, #1
 8003a0a:	60fb      	str	r3, [r7, #12]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USB_TX_Pin|USB_RX_Pin;
 8003a0e:	230c      	movs	r3, #12
 8003a10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a12:	2302      	movs	r3, #2
 8003a14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a16:	2300      	movs	r3, #0
 8003a18:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003a1e:	2307      	movs	r3, #7
 8003a20:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a26:	4619      	mov	r1, r3
 8003a28:	4842      	ldr	r0, [pc, #264]	; (8003b34 <HAL_UART_MspInit+0x2b0>)
 8003a2a:	f001 fdc5 	bl	80055b8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003a2e:	4b42      	ldr	r3, [pc, #264]	; (8003b38 <HAL_UART_MspInit+0x2b4>)
 8003a30:	4a42      	ldr	r2, [pc, #264]	; (8003b3c <HAL_UART_MspInit+0x2b8>)
 8003a32:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003a34:	4b40      	ldr	r3, [pc, #256]	; (8003b38 <HAL_UART_MspInit+0x2b4>)
 8003a36:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003a3a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a3c:	4b3e      	ldr	r3, [pc, #248]	; (8003b38 <HAL_UART_MspInit+0x2b4>)
 8003a3e:	2200      	movs	r2, #0
 8003a40:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a42:	4b3d      	ldr	r3, [pc, #244]	; (8003b38 <HAL_UART_MspInit+0x2b4>)
 8003a44:	2200      	movs	r2, #0
 8003a46:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003a48:	4b3b      	ldr	r3, [pc, #236]	; (8003b38 <HAL_UART_MspInit+0x2b4>)
 8003a4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a4e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a50:	4b39      	ldr	r3, [pc, #228]	; (8003b38 <HAL_UART_MspInit+0x2b4>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a56:	4b38      	ldr	r3, [pc, #224]	; (8003b38 <HAL_UART_MspInit+0x2b4>)
 8003a58:	2200      	movs	r2, #0
 8003a5a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003a5c:	4b36      	ldr	r3, [pc, #216]	; (8003b38 <HAL_UART_MspInit+0x2b4>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003a62:	4b35      	ldr	r3, [pc, #212]	; (8003b38 <HAL_UART_MspInit+0x2b4>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a68:	4b33      	ldr	r3, [pc, #204]	; (8003b38 <HAL_UART_MspInit+0x2b4>)
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003a6e:	4832      	ldr	r0, [pc, #200]	; (8003b38 <HAL_UART_MspInit+0x2b4>)
 8003a70:	f001 f8ac 	bl	8004bcc <HAL_DMA_Init>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d001      	beq.n	8003a7e <HAL_UART_MspInit+0x1fa>
      Error_Handler();
 8003a7a:	f7ff fbfb 	bl	8003274 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a2d      	ldr	r2, [pc, #180]	; (8003b38 <HAL_UART_MspInit+0x2b4>)
 8003a82:	66da      	str	r2, [r3, #108]	; 0x6c
 8003a84:	4a2c      	ldr	r2, [pc, #176]	; (8003b38 <HAL_UART_MspInit+0x2b4>)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003a8a:	4b2d      	ldr	r3, [pc, #180]	; (8003b40 <HAL_UART_MspInit+0x2bc>)
 8003a8c:	4a2d      	ldr	r2, [pc, #180]	; (8003b44 <HAL_UART_MspInit+0x2c0>)
 8003a8e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003a90:	4b2b      	ldr	r3, [pc, #172]	; (8003b40 <HAL_UART_MspInit+0x2bc>)
 8003a92:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003a96:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003a98:	4b29      	ldr	r3, [pc, #164]	; (8003b40 <HAL_UART_MspInit+0x2bc>)
 8003a9a:	2240      	movs	r2, #64	; 0x40
 8003a9c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a9e:	4b28      	ldr	r3, [pc, #160]	; (8003b40 <HAL_UART_MspInit+0x2bc>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003aa4:	4b26      	ldr	r3, [pc, #152]	; (8003b40 <HAL_UART_MspInit+0x2bc>)
 8003aa6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003aaa:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003aac:	4b24      	ldr	r3, [pc, #144]	; (8003b40 <HAL_UART_MspInit+0x2bc>)
 8003aae:	2200      	movs	r2, #0
 8003ab0:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003ab2:	4b23      	ldr	r3, [pc, #140]	; (8003b40 <HAL_UART_MspInit+0x2bc>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003ab8:	4b21      	ldr	r3, [pc, #132]	; (8003b40 <HAL_UART_MspInit+0x2bc>)
 8003aba:	2200      	movs	r2, #0
 8003abc:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003abe:	4b20      	ldr	r3, [pc, #128]	; (8003b40 <HAL_UART_MspInit+0x2bc>)
 8003ac0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003ac4:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003ac6:	4b1e      	ldr	r3, [pc, #120]	; (8003b40 <HAL_UART_MspInit+0x2bc>)
 8003ac8:	2204      	movs	r2, #4
 8003aca:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8003acc:	4b1c      	ldr	r3, [pc, #112]	; (8003b40 <HAL_UART_MspInit+0x2bc>)
 8003ace:	2201      	movs	r2, #1
 8003ad0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8003ad2:	4b1b      	ldr	r3, [pc, #108]	; (8003b40 <HAL_UART_MspInit+0x2bc>)
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003ad8:	4b19      	ldr	r3, [pc, #100]	; (8003b40 <HAL_UART_MspInit+0x2bc>)
 8003ada:	2200      	movs	r2, #0
 8003adc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003ade:	4818      	ldr	r0, [pc, #96]	; (8003b40 <HAL_UART_MspInit+0x2bc>)
 8003ae0:	f001 f874 	bl	8004bcc <HAL_DMA_Init>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d001      	beq.n	8003aee <HAL_UART_MspInit+0x26a>
      Error_Handler();
 8003aea:	f7ff fbc3 	bl	8003274 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a13      	ldr	r2, [pc, #76]	; (8003b40 <HAL_UART_MspInit+0x2bc>)
 8003af2:	669a      	str	r2, [r3, #104]	; 0x68
 8003af4:	4a12      	ldr	r2, [pc, #72]	; (8003b40 <HAL_UART_MspInit+0x2bc>)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003afa:	2200      	movs	r2, #0
 8003afc:	2100      	movs	r1, #0
 8003afe:	2026      	movs	r0, #38	; 0x26
 8003b00:	f001 f82d 	bl	8004b5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003b04:	2026      	movs	r0, #38	; 0x26
 8003b06:	f001 f846 	bl	8004b96 <HAL_NVIC_EnableIRQ>
}
 8003b0a:	bf00      	nop
 8003b0c:	3738      	adds	r7, #56	; 0x38
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	40004c00 	.word	0x40004c00
 8003b18:	40023800 	.word	0x40023800
 8003b1c:	40020c00 	.word	0x40020c00
 8003b20:	40005000 	.word	0x40005000
 8003b24:	40020400 	.word	0x40020400
 8003b28:	200048d0 	.word	0x200048d0
 8003b2c:	40026010 	.word	0x40026010
 8003b30:	40004400 	.word	0x40004400
 8003b34:	40020000 	.word	0x40020000
 8003b38:	200043d0 	.word	0x200043d0
 8003b3c:	40026088 	.word	0x40026088
 8003b40:	20004650 	.word	0x20004650
 8003b44:	400260a0 	.word	0x400260a0

08003b48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8003b4c:	f004 fac8 	bl	80080e0 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003b50:	bf00      	nop
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	SetRGB(250, 250, 250);
 8003b58:	22fa      	movs	r2, #250	; 0xfa
 8003b5a:	21fa      	movs	r1, #250	; 0xfa
 8003b5c:	20fa      	movs	r0, #250	; 0xfa
 8003b5e:	f7fd faa7 	bl	80010b0 <SetRGB>
	HAL_Delay(5000);
 8003b62:	f241 3088 	movw	r0, #5000	; 0x1388
 8003b66:	f000 fa3f 	bl	8003fe8 <HAL_Delay>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b6a:	e7fe      	b.n	8003b6a <HardFault_Handler+0x16>

08003b6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	SetRGB(250, 250, 0);
 8003b70:	2200      	movs	r2, #0
 8003b72:	21fa      	movs	r1, #250	; 0xfa
 8003b74:	20fa      	movs	r0, #250	; 0xfa
 8003b76:	f7fd fa9b 	bl	80010b0 <SetRGB>
	HAL_Delay(5000);
 8003b7a:	f241 3088 	movw	r0, #5000	; 0x1388
 8003b7e:	f000 fa33 	bl	8003fe8 <HAL_Delay>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b82:	e7fe      	b.n	8003b82 <MemManage_Handler+0x16>

08003b84 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	SetRGB(250, 250, 0);
 8003b88:	2200      	movs	r2, #0
 8003b8a:	21fa      	movs	r1, #250	; 0xfa
 8003b8c:	20fa      	movs	r0, #250	; 0xfa
 8003b8e:	f7fd fa8f 	bl	80010b0 <SetRGB>
	HAL_Delay(5000);
 8003b92:	f241 3088 	movw	r0, #5000	; 0x1388
 8003b96:	f000 fa27 	bl	8003fe8 <HAL_Delay>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b9a:	e7fe      	b.n	8003b9a <BusFault_Handler+0x16>

08003b9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	SetRGB(250, 250, 0);
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	21fa      	movs	r1, #250	; 0xfa
 8003ba4:	20fa      	movs	r0, #250	; 0xfa
 8003ba6:	f7fd fa83 	bl	80010b0 <SetRGB>
	HAL_Delay(5000);
 8003baa:	f241 3088 	movw	r0, #5000	; 0x1388
 8003bae:	f000 fa1b 	bl	8003fe8 <HAL_Delay>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003bb2:	e7fe      	b.n	8003bb2 <UsageFault_Handler+0x16>

08003bb4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003bb8:	bf00      	nop
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr

08003bc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003bc2:	b480      	push	{r7}
 8003bc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003bc6:	bf00      	nop
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003bd4:	bf00      	nop
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr

08003bde <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003bde:	b580      	push	{r7, lr}
 8003be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003be2:	f000 f9e1 	bl	8003fa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003be6:	bf00      	nop
 8003be8:	bd80      	pop	{r7, pc}

08003bea <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8003bea:	b580      	push	{r7, lr}
 8003bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8003bee:	f001 fb85 	bl	80052fc <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8003bf2:	bf00      	nop
 8003bf4:	bd80      	pop	{r7, pc}
	...

08003bf8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8003bfc:	4802      	ldr	r0, [pc, #8]	; (8003c08 <DMA1_Stream0_IRQHandler+0x10>)
 8003bfe:	f001 f915 	bl	8004e2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003c02:	bf00      	nop
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	200048d0 	.word	0x200048d0

08003c0c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003c10:	4802      	ldr	r0, [pc, #8]	; (8003c1c <DMA1_Stream5_IRQHandler+0x10>)
 8003c12:	f001 f90b 	bl	8004e2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003c16:	bf00      	nop
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	200043d0 	.word	0x200043d0

08003c20 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003c24:	4802      	ldr	r0, [pc, #8]	; (8003c30 <DMA1_Stream6_IRQHandler+0x10>)
 8003c26:	f001 f901 	bl	8004e2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003c2a:	bf00      	nop
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	20004650 	.word	0x20004650

08003c34 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003c38:	4802      	ldr	r0, [pc, #8]	; (8003c44 <ADC_IRQHandler+0x10>)
 8003c3a:	f000 fafb 	bl	8004234 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003c3e:	bf00      	nop
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	20004608 	.word	0x20004608

08003c48 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003c4c:	4802      	ldr	r0, [pc, #8]	; (8003c58 <I2C1_EV_IRQHandler+0x10>)
 8003c4e:	f002 f909 	bl	8005e64 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003c52:	bf00      	nop
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	20004470 	.word	0x20004470

08003c5c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003c60:	4802      	ldr	r0, [pc, #8]	; (8003c6c <USART2_IRQHandler+0x10>)
 8003c62:	f007 f931 	bl	800aec8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003c66:	bf00      	nop
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	20004850 	.word	0x20004850

08003c70 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003c74:	4802      	ldr	r0, [pc, #8]	; (8003c80 <UART4_IRQHandler+0x10>)
 8003c76:	f007 f927 	bl	800aec8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003c7a:	bf00      	nop
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	2000472c 	.word	0x2000472c

08003c84 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8003c88:	4802      	ldr	r0, [pc, #8]	; (8003c94 <UART5_IRQHandler+0x10>)
 8003c8a:	f007 f91d 	bl	800aec8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8003c8e:	bf00      	nop
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	20004580 	.word	0x20004580

08003c98 <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 8003c9c:	4802      	ldr	r0, [pc, #8]	; (8003ca8 <QUADSPI_IRQHandler+0x10>)
 8003c9e:	f002 ff83 	bl	8006ba8 <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 8003ca2:	bf00      	nop
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	20004948 	.word	0x20004948

08003cac <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003cb4:	4b11      	ldr	r3, [pc, #68]	; (8003cfc <_sbrk+0x50>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d102      	bne.n	8003cc2 <_sbrk+0x16>
		heap_end = &end;
 8003cbc:	4b0f      	ldr	r3, [pc, #60]	; (8003cfc <_sbrk+0x50>)
 8003cbe:	4a10      	ldr	r2, [pc, #64]	; (8003d00 <_sbrk+0x54>)
 8003cc0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003cc2:	4b0e      	ldr	r3, [pc, #56]	; (8003cfc <_sbrk+0x50>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003cc8:	4b0c      	ldr	r3, [pc, #48]	; (8003cfc <_sbrk+0x50>)
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4413      	add	r3, r2
 8003cd0:	466a      	mov	r2, sp
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d907      	bls.n	8003ce6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003cd6:	f00b fc6f 	bl	800f5b8 <__errno>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	230c      	movs	r3, #12
 8003cde:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003ce0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ce4:	e006      	b.n	8003cf4 <_sbrk+0x48>
	}

	heap_end += incr;
 8003ce6:	4b05      	ldr	r3, [pc, #20]	; (8003cfc <_sbrk+0x50>)
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4413      	add	r3, r2
 8003cee:	4a03      	ldr	r2, [pc, #12]	; (8003cfc <_sbrk+0x50>)
 8003cf0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3710      	adds	r7, #16
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	200010d4 	.word	0x200010d4
 8003d00:	200049c8 	.word	0x200049c8

08003d04 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003d04:	b480      	push	{r7}
 8003d06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003d08:	4b08      	ldr	r3, [pc, #32]	; (8003d2c <SystemInit+0x28>)
 8003d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d0e:	4a07      	ldr	r2, [pc, #28]	; (8003d2c <SystemInit+0x28>)
 8003d10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003d18:	4b04      	ldr	r3, [pc, #16]	; (8003d2c <SystemInit+0x28>)
 8003d1a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003d1e:	609a      	str	r2, [r3, #8]
#endif
}
 8003d20:	bf00      	nop
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop
 8003d2c:	e000ed00 	.word	0xe000ed00

08003d30 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	4603      	mov	r3, r0
 8003d38:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = 0; //STA_NOINIT;
 8003d3a:	4b06      	ldr	r3, [pc, #24]	; (8003d54 <USER_initialize+0x24>)
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	701a      	strb	r2, [r3, #0]
//	{       Stat &= ~STA_NOINIT;
//	}
//	else
//	{      // printf("DISK IO INIT ERROR \n");
//	}
    return Stat;
 8003d40:	4b04      	ldr	r3, [pc, #16]	; (8003d54 <USER_initialize+0x24>)
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	370c      	adds	r7, #12
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	20000024 	.word	0x20000024

08003d58 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	4603      	mov	r3, r0
 8003d60:	71fb      	strb	r3, [r7, #7]
//      {
//        return HAL_ERROR;
//      }
//  }

  Stat = STA_NOINIT;
 8003d62:	4b0a      	ldr	r3, [pc, #40]	; (8003d8c <USER_status+0x34>)
 8003d64:	2201      	movs	r2, #1
 8003d66:	701a      	strb	r2, [r3, #0]
  Stat &= ~STA_NOINIT;
 8003d68:	4b08      	ldr	r3, [pc, #32]	; (8003d8c <USER_status+0x34>)
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	f023 0301 	bic.w	r3, r3, #1
 8003d72:	b2da      	uxtb	r2, r3
 8003d74:	4b05      	ldr	r3, [pc, #20]	; (8003d8c <USER_status+0x34>)
 8003d76:	701a      	strb	r2, [r3, #0]
  	return Stat;
 8003d78:	4b04      	ldr	r3, [pc, #16]	; (8003d8c <USER_status+0x34>)
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	370c      	adds	r7, #12
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	20000024 	.word	0x20000024

08003d90 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b086      	sub	sp, #24
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60b9      	str	r1, [r7, #8]
 8003d98:	607a      	str	r2, [r7, #4]
 8003d9a:	603b      	str	r3, [r7, #0]
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    	uint32_t SecAdd = sector * SECTOR_SIZE;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	031b      	lsls	r3, r3, #12
 8003da4:	617b      	str	r3, [r7, #20]
	uint32_t Size = count * SECTOR_SIZE;
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	031b      	lsls	r3, r3, #12
 8003daa:	613b      	str	r3, [r7, #16]
//uint8_t QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)        
	if(QSPI_Read((uint8_t*)buff, (uint32_t)SecAdd, (uint32_t) Size ) ==  HAL_OK)
 8003dac:	693a      	ldr	r2, [r7, #16]
 8003dae:	6979      	ldr	r1, [r7, #20]
 8003db0:	68b8      	ldr	r0, [r7, #8]
 8003db2:	f7fc fe67 	bl	8000a84 <QSPI_Read>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d101      	bne.n	8003dc0 <USER_read+0x30>
	{       return RES_OK;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	e000      	b.n	8003dc2 <USER_read+0x32>
	}
	else
	{       //printf("DISK Read Error \n");
		return RES_ERROR;
 8003dc0:	2301      	movs	r3, #1
	}
  /* USER CODE END READ */
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3718      	adds	r7, #24
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
	...

08003dcc <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b086      	sub	sp, #24
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60b9      	str	r1, [r7, #8]
 8003dd4:	607a      	str	r2, [r7, #4]
 8003dd6:	603b      	str	r3, [r7, #0]
 8003dd8:	4603      	mov	r3, r0
 8003dda:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
	DSector = sector;
 8003ddc:	4a1a      	ldr	r2, [pc, #104]	; (8003e48 <USER_write+0x7c>)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6013      	str	r3, [r2, #0]
	SecAdd = sector * SECTOR_SIZE;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	031b      	lsls	r3, r3, #12
 8003de6:	4a19      	ldr	r2, [pc, #100]	; (8003e4c <USER_write+0x80>)
 8003de8:	6013      	str	r3, [r2, #0]
	Size = count * SECTOR_SIZE;
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	031b      	lsls	r3, r3, #12
 8003dee:	4a18      	ldr	r2, [pc, #96]	; (8003e50 <USER_write+0x84>)
 8003df0:	6013      	str	r3, [r2, #0]
	for(uint16_t i = 0; i< count; i++)
 8003df2:	2300      	movs	r3, #0
 8003df4:	82fb      	strh	r3, [r7, #22]
 8003df6:	e010      	b.n	8003e1a <USER_write+0x4e>
	{       if(QSPI_Erase_Sector4K(SecAdd + (i * SECTOR_SIZE)) != HAL_OK)
 8003df8:	8afb      	ldrh	r3, [r7, #22]
 8003dfa:	031b      	lsls	r3, r3, #12
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	4b13      	ldr	r3, [pc, #76]	; (8003e4c <USER_write+0x80>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4413      	add	r3, r2
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7fc fd6b 	bl	80008e0 <QSPI_Erase_Sector4K>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d001      	beq.n	8003e14 <USER_write+0x48>
		{	// printf("DISK IO ERASE FAIL \n");
			return RES_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e014      	b.n	8003e3e <USER_write+0x72>
	for(uint16_t i = 0; i< count; i++)
 8003e14:	8afb      	ldrh	r3, [r7, #22]
 8003e16:	3301      	adds	r3, #1
 8003e18:	82fb      	strh	r3, [r7, #22]
 8003e1a:	8afb      	ldrh	r3, [r7, #22]
 8003e1c:	683a      	ldr	r2, [r7, #0]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d8ea      	bhi.n	8003df8 <USER_write+0x2c>
		}
	}
     
	if(QSPI_Write((uint8_t *)buff, SecAdd, Size) != HAL_OK)
 8003e22:	4b0a      	ldr	r3, [pc, #40]	; (8003e4c <USER_write+0x80>)
 8003e24:	6819      	ldr	r1, [r3, #0]
 8003e26:	4b0a      	ldr	r3, [pc, #40]	; (8003e50 <USER_write+0x84>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	68b8      	ldr	r0, [r7, #8]
 8003e2e:	f7fc fd99 	bl	8000964 <QSPI_Write>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d001      	beq.n	8003e3c <USER_write+0x70>
	{       // printf("DISK IO WRITE FAIL \n");
		return RES_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e000      	b.n	8003e3e <USER_write+0x72>
	}
  /* USER CODE HERE */
    return RES_OK;
 8003e3c:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3718      	adds	r7, #24
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	2000499c 	.word	0x2000499c
 8003e4c:	20004994 	.word	0x20004994
 8003e50:	20004998 	.word	0x20004998

08003e54 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b085      	sub	sp, #20
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	603a      	str	r2, [r7, #0]
 8003e5e:	71fb      	strb	r3, [r7, #7]
 8003e60:	460b      	mov	r3, r1
 8003e62:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	73fb      	strb	r3, [r7, #15]
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003e68:	4b1b      	ldr	r3, [pc, #108]	; (8003ed8 <USER_ioctl+0x84>)
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	f003 0301 	and.w	r3, r3, #1
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d001      	beq.n	8003e7a <USER_ioctl+0x26>
 8003e76:	2303      	movs	r3, #3
 8003e78:	e027      	b.n	8003eca <USER_ioctl+0x76>
  
  switch (cmd)
 8003e7a:	79bb      	ldrb	r3, [r7, #6]
 8003e7c:	2b03      	cmp	r3, #3
 8003e7e:	d821      	bhi.n	8003ec4 <USER_ioctl+0x70>
 8003e80:	a201      	add	r2, pc, #4	; (adr r2, 8003e88 <USER_ioctl+0x34>)
 8003e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e86:	bf00      	nop
 8003e88:	08003e99 	.word	0x08003e99
 8003e8c:	08003e9f 	.word	0x08003e9f
 8003e90:	08003ead 	.word	0x08003ead
 8003e94:	08003ebb 	.word	0x08003ebb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	73fb      	strb	r3, [r7, #15]
    break;
 8003e9c:	e014      	b.n	8003ec8 <USER_ioctl+0x74>
  
  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    *(DWORD*)buff = 4096; //SDRAM_DEVICE_SIZE / BLOCK_SIZE;
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003ea4:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	73fb      	strb	r3, [r7, #15]
    break;
 8003eaa:	e00d      	b.n	8003ec8 <USER_ioctl+0x74>
  
  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    *(WORD*)buff = SECTOR_SIZE;
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003eb2:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	73fb      	strb	r3, [r7, #15]
    break;
 8003eb8:	e006      	b.n	8003ec8 <USER_ioctl+0x74>
  
  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    *(DWORD*)buff = SECTOR_SIZE;
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003ec0:	601a      	str	r2, [r3, #0]
    break;
 8003ec2:	e001      	b.n	8003ec8 <USER_ioctl+0x74>
  
  default:
    res = RES_PARERR;
 8003ec4:	2304      	movs	r3, #4
 8003ec6:	73fb      	strb	r3, [r7, #15]
  }
	return res;
 8003ec8:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3714      	adds	r7, #20
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr
 8003ed6:	bf00      	nop
 8003ed8:	20000024 	.word	0x20000024

08003edc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003edc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f14 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003ee0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003ee2:	e003      	b.n	8003eec <LoopCopyDataInit>

08003ee4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003ee4:	4b0c      	ldr	r3, [pc, #48]	; (8003f18 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003ee6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003ee8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003eea:	3104      	adds	r1, #4

08003eec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003eec:	480b      	ldr	r0, [pc, #44]	; (8003f1c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003eee:	4b0c      	ldr	r3, [pc, #48]	; (8003f20 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003ef0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003ef2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003ef4:	d3f6      	bcc.n	8003ee4 <CopyDataInit>
  ldr  r2, =_sbss
 8003ef6:	4a0b      	ldr	r2, [pc, #44]	; (8003f24 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003ef8:	e002      	b.n	8003f00 <LoopFillZerobss>

08003efa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003efa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003efc:	f842 3b04 	str.w	r3, [r2], #4

08003f00 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003f00:	4b09      	ldr	r3, [pc, #36]	; (8003f28 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003f02:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003f04:	d3f9      	bcc.n	8003efa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003f06:	f7ff fefd 	bl	8003d04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003f0a:	f00b fb5b 	bl	800f5c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f0e:	f7fe fa37 	bl	8002380 <main>
  bx  lr    
 8003f12:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003f14:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8003f18:	08013828 	.word	0x08013828
  ldr  r0, =_sdata
 8003f1c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003f20:	20000214 	.word	0x20000214
  ldr  r2, =_sbss
 8003f24:	20000218 	.word	0x20000218
  ldr  r3, = _ebss
 8003f28:	200049c4 	.word	0x200049c4

08003f2c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f2c:	e7fe      	b.n	8003f2c <CAN1_RX0_IRQHandler>

08003f2e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f2e:	b580      	push	{r7, lr}
 8003f30:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f32:	2003      	movs	r0, #3
 8003f34:	f000 fe08 	bl	8004b48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003f38:	2000      	movs	r0, #0
 8003f3a:	f000 f805 	bl	8003f48 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003f3e:	f7ff f9a1 	bl	8003284 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003f42:	2300      	movs	r3, #0
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b082      	sub	sp, #8
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003f50:	4b12      	ldr	r3, [pc, #72]	; (8003f9c <HAL_InitTick+0x54>)
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	4b12      	ldr	r3, [pc, #72]	; (8003fa0 <HAL_InitTick+0x58>)
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	4619      	mov	r1, r3
 8003f5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f66:	4618      	mov	r0, r3
 8003f68:	f000 fe23 	bl	8004bb2 <HAL_SYSTICK_Config>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d001      	beq.n	8003f76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e00e      	b.n	8003f94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2b0f      	cmp	r3, #15
 8003f7a:	d80a      	bhi.n	8003f92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	6879      	ldr	r1, [r7, #4]
 8003f80:	f04f 30ff 	mov.w	r0, #4294967295
 8003f84:	f000 fdeb 	bl	8004b5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003f88:	4a06      	ldr	r2, [pc, #24]	; (8003fa4 <HAL_InitTick+0x5c>)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	e000      	b.n	8003f94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3708      	adds	r7, #8
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	20000020 	.word	0x20000020
 8003fa0:	20000040 	.word	0x20000040
 8003fa4:	2000003c 	.word	0x2000003c

08003fa8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003fac:	4b06      	ldr	r3, [pc, #24]	; (8003fc8 <HAL_IncTick+0x20>)
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	4b06      	ldr	r3, [pc, #24]	; (8003fcc <HAL_IncTick+0x24>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4413      	add	r3, r2
 8003fb8:	4a04      	ldr	r2, [pc, #16]	; (8003fcc <HAL_IncTick+0x24>)
 8003fba:	6013      	str	r3, [r2, #0]
}
 8003fbc:	bf00      	nop
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop
 8003fc8:	20000040 	.word	0x20000040
 8003fcc:	200049a0 	.word	0x200049a0

08003fd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	af00      	add	r7, sp, #0
  return uwTick;
 8003fd4:	4b03      	ldr	r3, [pc, #12]	; (8003fe4 <HAL_GetTick+0x14>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr
 8003fe2:	bf00      	nop
 8003fe4:	200049a0 	.word	0x200049a0

08003fe8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ff0:	f7ff ffee 	bl	8003fd0 <HAL_GetTick>
 8003ff4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004000:	d005      	beq.n	800400e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004002:	4b09      	ldr	r3, [pc, #36]	; (8004028 <HAL_Delay+0x40>)
 8004004:	781b      	ldrb	r3, [r3, #0]
 8004006:	461a      	mov	r2, r3
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	4413      	add	r3, r2
 800400c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800400e:	bf00      	nop
 8004010:	f7ff ffde 	bl	8003fd0 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	429a      	cmp	r2, r3
 800401e:	d8f7      	bhi.n	8004010 <HAL_Delay+0x28>
  {
  }
}
 8004020:	bf00      	nop
 8004022:	3710      	adds	r7, #16
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}
 8004028:	20000040 	.word	0x20000040

0800402c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004034:	2300      	movs	r3, #0
 8004036:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d101      	bne.n	8004042 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e031      	b.n	80040a6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004046:	2b00      	cmp	r3, #0
 8004048:	d109      	bne.n	800405e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f7ff f944 	bl	80032d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004062:	f003 0310 	and.w	r3, r3, #16
 8004066:	2b00      	cmp	r3, #0
 8004068:	d116      	bne.n	8004098 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800406e:	4b10      	ldr	r3, [pc, #64]	; (80040b0 <HAL_ADC_Init+0x84>)
 8004070:	4013      	ands	r3, r2
 8004072:	f043 0202 	orr.w	r2, r3, #2
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 fb90 	bl	80047a0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408a:	f023 0303 	bic.w	r3, r3, #3
 800408e:	f043 0201 	orr.w	r2, r3, #1
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	641a      	str	r2, [r3, #64]	; 0x40
 8004096:	e001      	b.n	800409c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80040a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3710      	adds	r7, #16
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	ffffeefd 	.word	0xffffeefd

080040b4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b085      	sub	sp, #20
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80040bc:	2300      	movs	r3, #0
 80040be:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d101      	bne.n	80040ce <HAL_ADC_Start+0x1a>
 80040ca:	2302      	movs	r3, #2
 80040cc:	e0a0      	b.n	8004210 <HAL_ADC_Start+0x15c>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2201      	movs	r2, #1
 80040d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	f003 0301 	and.w	r3, r3, #1
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d018      	beq.n	8004116 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	689a      	ldr	r2, [r3, #8]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f042 0201 	orr.w	r2, r2, #1
 80040f2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80040f4:	4b49      	ldr	r3, [pc, #292]	; (800421c <HAL_ADC_Start+0x168>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a49      	ldr	r2, [pc, #292]	; (8004220 <HAL_ADC_Start+0x16c>)
 80040fa:	fba2 2303 	umull	r2, r3, r2, r3
 80040fe:	0c9a      	lsrs	r2, r3, #18
 8004100:	4613      	mov	r3, r2
 8004102:	005b      	lsls	r3, r3, #1
 8004104:	4413      	add	r3, r2
 8004106:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8004108:	e002      	b.n	8004110 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	3b01      	subs	r3, #1
 800410e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d1f9      	bne.n	800410a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	f003 0301 	and.w	r3, r3, #1
 8004120:	2b01      	cmp	r3, #1
 8004122:	d174      	bne.n	800420e <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004128:	4b3e      	ldr	r3, [pc, #248]	; (8004224 <HAL_ADC_Start+0x170>)
 800412a:	4013      	ands	r3, r2
 800412c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800413e:	2b00      	cmp	r3, #0
 8004140:	d007      	beq.n	8004152 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004146:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800414a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004156:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800415a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800415e:	d106      	bne.n	800416e <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004164:	f023 0206 	bic.w	r2, r3, #6
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	645a      	str	r2, [r3, #68]	; 0x44
 800416c:	e002      	b.n	8004174 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004184:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8004186:	4b28      	ldr	r3, [pc, #160]	; (8004228 <HAL_ADC_Start+0x174>)
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f003 031f 	and.w	r3, r3, #31
 800418e:	2b00      	cmp	r3, #0
 8004190:	d10f      	bne.n	80041b2 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d136      	bne.n	800420e <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	689a      	ldr	r2, [r3, #8]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80041ae:	609a      	str	r2, [r3, #8]
 80041b0:	e02d      	b.n	800420e <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a1d      	ldr	r2, [pc, #116]	; (800422c <HAL_ADC_Start+0x178>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d10e      	bne.n	80041da <HAL_ADC_Start+0x126>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d107      	bne.n	80041da <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	689a      	ldr	r2, [r3, #8]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80041d8:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80041da:	4b13      	ldr	r3, [pc, #76]	; (8004228 <HAL_ADC_Start+0x174>)
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f003 0310 	and.w	r3, r3, #16
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d113      	bne.n	800420e <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a11      	ldr	r2, [pc, #68]	; (8004230 <HAL_ADC_Start+0x17c>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d10e      	bne.n	800420e <HAL_ADC_Start+0x15a>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d107      	bne.n	800420e <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	689a      	ldr	r2, [r3, #8]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800420c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800420e:	2300      	movs	r3, #0
}
 8004210:	4618      	mov	r0, r3
 8004212:	3714      	adds	r7, #20
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr
 800421c:	20000020 	.word	0x20000020
 8004220:	431bde83 	.word	0x431bde83
 8004224:	fffff8fe 	.word	0xfffff8fe
 8004228:	40012300 	.word	0x40012300
 800422c:	40012000 	.word	0x40012000
 8004230:	40012200 	.word	0x40012200

08004234 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 800423c:	2300      	movs	r3, #0
 800423e:	60fb      	str	r3, [r7, #12]
 8004240:	2300      	movs	r3, #0
 8004242:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0302 	and.w	r3, r3, #2
 800424e:	2b02      	cmp	r3, #2
 8004250:	bf0c      	ite	eq
 8004252:	2301      	moveq	r3, #1
 8004254:	2300      	movne	r3, #0
 8004256:	b2db      	uxtb	r3, r3
 8004258:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f003 0320 	and.w	r3, r3, #32
 8004264:	2b20      	cmp	r3, #32
 8004266:	bf0c      	ite	eq
 8004268:	2301      	moveq	r3, #1
 800426a:	2300      	movne	r3, #0
 800426c:	b2db      	uxtb	r3, r3
 800426e:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d049      	beq.n	800430a <HAL_ADC_IRQHandler+0xd6>
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d046      	beq.n	800430a <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004280:	f003 0310 	and.w	r3, r3, #16
 8004284:	2b00      	cmp	r3, #0
 8004286:	d105      	bne.n	8004294 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d12b      	bne.n	80042fa <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d127      	bne.n	80042fa <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d006      	beq.n	80042c6 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d119      	bne.n	80042fa <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	685a      	ldr	r2, [r3, #4]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f022 0220 	bic.w	r2, r2, #32
 80042d4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d105      	bne.n	80042fa <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f2:	f043 0201 	orr.w	r2, r3, #1
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 f8e8 	bl	80044d0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f06f 0212 	mvn.w	r2, #18
 8004308:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0304 	and.w	r3, r3, #4
 8004314:	2b04      	cmp	r3, #4
 8004316:	bf0c      	ite	eq
 8004318:	2301      	moveq	r3, #1
 800431a:	2300      	movne	r3, #0
 800431c:	b2db      	uxtb	r3, r3
 800431e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800432a:	2b80      	cmp	r3, #128	; 0x80
 800432c:	bf0c      	ite	eq
 800432e:	2301      	moveq	r3, #1
 8004330:	2300      	movne	r3, #0
 8004332:	b2db      	uxtb	r3, r3
 8004334:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d057      	beq.n	80043ec <HAL_ADC_IRQHandler+0x1b8>
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d054      	beq.n	80043ec <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004346:	f003 0310 	and.w	r3, r3, #16
 800434a:	2b00      	cmp	r3, #0
 800434c:	d105      	bne.n	800435a <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004352:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d139      	bne.n	80043dc <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800436e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004372:	2b00      	cmp	r3, #0
 8004374:	d006      	beq.n	8004384 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8004380:	2b00      	cmp	r3, #0
 8004382:	d12b      	bne.n	80043dc <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800438e:	2b00      	cmp	r3, #0
 8004390:	d124      	bne.n	80043dc <HAL_ADC_IRQHandler+0x1a8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800439c:	2b00      	cmp	r3, #0
 800439e:	d11d      	bne.n	80043dc <HAL_ADC_IRQHandler+0x1a8>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d119      	bne.n	80043dc <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	685a      	ldr	r2, [r3, #4]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043b6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043bc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d105      	bne.n	80043dc <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d4:	f043 0201 	orr.w	r2, r3, #1
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f000 fad9 	bl	8004994 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f06f 020c 	mvn.w	r2, #12
 80043ea:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0301 	and.w	r3, r3, #1
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	bf0c      	ite	eq
 80043fa:	2301      	moveq	r3, #1
 80043fc:	2300      	movne	r3, #0
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800440c:	2b40      	cmp	r3, #64	; 0x40
 800440e:	bf0c      	ite	eq
 8004410:	2301      	moveq	r3, #1
 8004412:	2300      	movne	r3, #0
 8004414:	b2db      	uxtb	r3, r3
 8004416:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d017      	beq.n	800444e <HAL_ADC_IRQHandler+0x21a>
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d014      	beq.n	800444e <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0301 	and.w	r3, r3, #1
 800442e:	2b01      	cmp	r3, #1
 8004430:	d10d      	bne.n	800444e <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004436:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 f850 	bl	80044e4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f06f 0201 	mvn.w	r2, #1
 800444c:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0320 	and.w	r3, r3, #32
 8004458:	2b20      	cmp	r3, #32
 800445a:	bf0c      	ite	eq
 800445c:	2301      	moveq	r3, #1
 800445e:	2300      	movne	r3, #0
 8004460:	b2db      	uxtb	r3, r3
 8004462:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800446e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004472:	bf0c      	ite	eq
 8004474:	2301      	moveq	r3, #1
 8004476:	2300      	movne	r3, #0
 8004478:	b2db      	uxtb	r3, r3
 800447a:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d015      	beq.n	80044ae <HAL_ADC_IRQHandler+0x27a>
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d012      	beq.n	80044ae <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800448c:	f043 0202 	orr.w	r2, r3, #2
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f06f 0220 	mvn.w	r2, #32
 800449c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 f82a 	bl	80044f8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f06f 0220 	mvn.w	r2, #32
 80044ac:	601a      	str	r2, [r3, #0]
  }
}
 80044ae:	bf00      	nop
 80044b0:	3710      	adds	r7, #16
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}

080044b6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80044b6:	b480      	push	{r7}
 80044b8:	b083      	sub	sp, #12
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	370c      	adds	r7, #12
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr

080044d0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80044d8:	bf00      	nop
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80044ec:	bf00      	nop
 80044ee:	370c      	adds	r7, #12
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004500:	bf00      	nop
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800450c:	b480      	push	{r7}
 800450e:	b085      	sub	sp, #20
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8004516:	2300      	movs	r3, #0
 8004518:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004520:	2b01      	cmp	r3, #1
 8004522:	d101      	bne.n	8004528 <HAL_ADC_ConfigChannel+0x1c>
 8004524:	2302      	movs	r3, #2
 8004526:	e12a      	b.n	800477e <HAL_ADC_ConfigChannel+0x272>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2b09      	cmp	r3, #9
 8004536:	d93a      	bls.n	80045ae <HAL_ADC_ConfigChannel+0xa2>
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004540:	d035      	beq.n	80045ae <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	68d9      	ldr	r1, [r3, #12]
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	b29b      	uxth	r3, r3
 800454e:	461a      	mov	r2, r3
 8004550:	4613      	mov	r3, r2
 8004552:	005b      	lsls	r3, r3, #1
 8004554:	4413      	add	r3, r2
 8004556:	3b1e      	subs	r3, #30
 8004558:	2207      	movs	r2, #7
 800455a:	fa02 f303 	lsl.w	r3, r2, r3
 800455e:	43da      	mvns	r2, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	400a      	ands	r2, r1
 8004566:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a87      	ldr	r2, [pc, #540]	; (800478c <HAL_ADC_ConfigChannel+0x280>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d10a      	bne.n	8004588 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	68d9      	ldr	r1, [r3, #12]
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	061a      	lsls	r2, r3, #24
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	430a      	orrs	r2, r1
 8004584:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004586:	e035      	b.n	80045f4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	68d9      	ldr	r1, [r3, #12]
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	689a      	ldr	r2, [r3, #8]
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	b29b      	uxth	r3, r3
 8004598:	4618      	mov	r0, r3
 800459a:	4603      	mov	r3, r0
 800459c:	005b      	lsls	r3, r3, #1
 800459e:	4403      	add	r3, r0
 80045a0:	3b1e      	subs	r3, #30
 80045a2:	409a      	lsls	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	430a      	orrs	r2, r1
 80045aa:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80045ac:	e022      	b.n	80045f4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	6919      	ldr	r1, [r3, #16]
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	461a      	mov	r2, r3
 80045bc:	4613      	mov	r3, r2
 80045be:	005b      	lsls	r3, r3, #1
 80045c0:	4413      	add	r3, r2
 80045c2:	2207      	movs	r2, #7
 80045c4:	fa02 f303 	lsl.w	r3, r2, r3
 80045c8:	43da      	mvns	r2, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	400a      	ands	r2, r1
 80045d0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	6919      	ldr	r1, [r3, #16]
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	689a      	ldr	r2, [r3, #8]
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	4618      	mov	r0, r3
 80045e4:	4603      	mov	r3, r0
 80045e6:	005b      	lsls	r3, r3, #1
 80045e8:	4403      	add	r3, r0
 80045ea:	409a      	lsls	r2, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	430a      	orrs	r2, r1
 80045f2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	2b06      	cmp	r3, #6
 80045fa:	d824      	bhi.n	8004646 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	685a      	ldr	r2, [r3, #4]
 8004606:	4613      	mov	r3, r2
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	4413      	add	r3, r2
 800460c:	3b05      	subs	r3, #5
 800460e:	221f      	movs	r2, #31
 8004610:	fa02 f303 	lsl.w	r3, r2, r3
 8004614:	43da      	mvns	r2, r3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	400a      	ands	r2, r1
 800461c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	b29b      	uxth	r3, r3
 800462a:	4618      	mov	r0, r3
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	685a      	ldr	r2, [r3, #4]
 8004630:	4613      	mov	r3, r2
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	4413      	add	r3, r2
 8004636:	3b05      	subs	r3, #5
 8004638:	fa00 f203 	lsl.w	r2, r0, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	430a      	orrs	r2, r1
 8004642:	635a      	str	r2, [r3, #52]	; 0x34
 8004644:	e04c      	b.n	80046e0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	2b0c      	cmp	r3, #12
 800464c:	d824      	bhi.n	8004698 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	685a      	ldr	r2, [r3, #4]
 8004658:	4613      	mov	r3, r2
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	4413      	add	r3, r2
 800465e:	3b23      	subs	r3, #35	; 0x23
 8004660:	221f      	movs	r2, #31
 8004662:	fa02 f303 	lsl.w	r3, r2, r3
 8004666:	43da      	mvns	r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	400a      	ands	r2, r1
 800466e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	b29b      	uxth	r3, r3
 800467c:	4618      	mov	r0, r3
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	685a      	ldr	r2, [r3, #4]
 8004682:	4613      	mov	r3, r2
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	4413      	add	r3, r2
 8004688:	3b23      	subs	r3, #35	; 0x23
 800468a:	fa00 f203 	lsl.w	r2, r0, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	430a      	orrs	r2, r1
 8004694:	631a      	str	r2, [r3, #48]	; 0x30
 8004696:	e023      	b.n	80046e0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	685a      	ldr	r2, [r3, #4]
 80046a2:	4613      	mov	r3, r2
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	4413      	add	r3, r2
 80046a8:	3b41      	subs	r3, #65	; 0x41
 80046aa:	221f      	movs	r2, #31
 80046ac:	fa02 f303 	lsl.w	r3, r2, r3
 80046b0:	43da      	mvns	r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	400a      	ands	r2, r1
 80046b8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	4618      	mov	r0, r3
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	685a      	ldr	r2, [r3, #4]
 80046cc:	4613      	mov	r3, r2
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	4413      	add	r3, r2
 80046d2:	3b41      	subs	r3, #65	; 0x41
 80046d4:	fa00 f203 	lsl.w	r2, r0, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	430a      	orrs	r2, r1
 80046de:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a2a      	ldr	r2, [pc, #168]	; (8004790 <HAL_ADC_ConfigChannel+0x284>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d10a      	bne.n	8004700 <HAL_ADC_ConfigChannel+0x1f4>
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046f2:	d105      	bne.n	8004700 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80046f4:	4b27      	ldr	r3, [pc, #156]	; (8004794 <HAL_ADC_ConfigChannel+0x288>)
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	4a26      	ldr	r2, [pc, #152]	; (8004794 <HAL_ADC_ConfigChannel+0x288>)
 80046fa:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80046fe:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a22      	ldr	r2, [pc, #136]	; (8004790 <HAL_ADC_ConfigChannel+0x284>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d109      	bne.n	800471e <HAL_ADC_ConfigChannel+0x212>
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2b12      	cmp	r3, #18
 8004710:	d105      	bne.n	800471e <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8004712:	4b20      	ldr	r3, [pc, #128]	; (8004794 <HAL_ADC_ConfigChannel+0x288>)
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	4a1f      	ldr	r2, [pc, #124]	; (8004794 <HAL_ADC_ConfigChannel+0x288>)
 8004718:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800471c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a1b      	ldr	r2, [pc, #108]	; (8004790 <HAL_ADC_ConfigChannel+0x284>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d125      	bne.n	8004774 <HAL_ADC_ConfigChannel+0x268>
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a17      	ldr	r2, [pc, #92]	; (800478c <HAL_ADC_ConfigChannel+0x280>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d003      	beq.n	800473a <HAL_ADC_ConfigChannel+0x22e>
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	2b11      	cmp	r3, #17
 8004738:	d11c      	bne.n	8004774 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800473a:	4b16      	ldr	r3, [pc, #88]	; (8004794 <HAL_ADC_ConfigChannel+0x288>)
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	4a15      	ldr	r2, [pc, #84]	; (8004794 <HAL_ADC_ConfigChannel+0x288>)
 8004740:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004744:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a10      	ldr	r2, [pc, #64]	; (800478c <HAL_ADC_ConfigChannel+0x280>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d111      	bne.n	8004774 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8004750:	4b11      	ldr	r3, [pc, #68]	; (8004798 <HAL_ADC_ConfigChannel+0x28c>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a11      	ldr	r2, [pc, #68]	; (800479c <HAL_ADC_ConfigChannel+0x290>)
 8004756:	fba2 2303 	umull	r2, r3, r2, r3
 800475a:	0c9a      	lsrs	r2, r3, #18
 800475c:	4613      	mov	r3, r2
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	4413      	add	r3, r2
 8004762:	005b      	lsls	r3, r3, #1
 8004764:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004766:	e002      	b.n	800476e <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	3b01      	subs	r3, #1
 800476c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d1f9      	bne.n	8004768 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800477c:	2300      	movs	r3, #0
}
 800477e:	4618      	mov	r0, r3
 8004780:	3714      	adds	r7, #20
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr
 800478a:	bf00      	nop
 800478c:	10000012 	.word	0x10000012
 8004790:	40012000 	.word	0x40012000
 8004794:	40012300 	.word	0x40012300
 8004798:	20000020 	.word	0x20000020
 800479c:	431bde83 	.word	0x431bde83

080047a0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80047a8:	4b78      	ldr	r3, [pc, #480]	; (800498c <ADC_Init+0x1ec>)
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	4a77      	ldr	r2, [pc, #476]	; (800498c <ADC_Init+0x1ec>)
 80047ae:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80047b2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80047b4:	4b75      	ldr	r3, [pc, #468]	; (800498c <ADC_Init+0x1ec>)
 80047b6:	685a      	ldr	r2, [r3, #4]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	4973      	ldr	r1, [pc, #460]	; (800498c <ADC_Init+0x1ec>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	685a      	ldr	r2, [r3, #4]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	6859      	ldr	r1, [r3, #4]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	691b      	ldr	r3, [r3, #16]
 80047dc:	021a      	lsls	r2, r3, #8
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	430a      	orrs	r2, r1
 80047e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	685a      	ldr	r2, [r3, #4]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80047f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	6859      	ldr	r1, [r3, #4]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	689a      	ldr	r2, [r3, #8]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	430a      	orrs	r2, r1
 8004806:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	689a      	ldr	r2, [r3, #8]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004816:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	6899      	ldr	r1, [r3, #8]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	68da      	ldr	r2, [r3, #12]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	430a      	orrs	r2, r1
 8004828:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800482e:	4a58      	ldr	r2, [pc, #352]	; (8004990 <ADC_Init+0x1f0>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d022      	beq.n	800487a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	689a      	ldr	r2, [r3, #8]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004842:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	6899      	ldr	r1, [r3, #8]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	430a      	orrs	r2, r1
 8004854:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	689a      	ldr	r2, [r3, #8]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004864:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	6899      	ldr	r1, [r3, #8]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	430a      	orrs	r2, r1
 8004876:	609a      	str	r2, [r3, #8]
 8004878:	e00f      	b.n	800489a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	689a      	ldr	r2, [r3, #8]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004888:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	689a      	ldr	r2, [r3, #8]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004898:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	689a      	ldr	r2, [r3, #8]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f022 0202 	bic.w	r2, r2, #2
 80048a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	6899      	ldr	r1, [r3, #8]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	699b      	ldr	r3, [r3, #24]
 80048b4:	005a      	lsls	r2, r3, #1
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	430a      	orrs	r2, r1
 80048bc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d01b      	beq.n	8004900 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	685a      	ldr	r2, [r3, #4]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048d6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	685a      	ldr	r2, [r3, #4]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80048e6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	6859      	ldr	r1, [r3, #4]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f2:	3b01      	subs	r3, #1
 80048f4:	035a      	lsls	r2, r3, #13
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	430a      	orrs	r2, r1
 80048fc:	605a      	str	r2, [r3, #4]
 80048fe:	e007      	b.n	8004910 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	685a      	ldr	r2, [r3, #4]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800490e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800491e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	69db      	ldr	r3, [r3, #28]
 800492a:	3b01      	subs	r3, #1
 800492c:	051a      	lsls	r2, r3, #20
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	430a      	orrs	r2, r1
 8004934:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	689a      	ldr	r2, [r3, #8]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004944:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	6899      	ldr	r1, [r3, #8]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004952:	025a      	lsls	r2, r3, #9
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	430a      	orrs	r2, r1
 800495a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	689a      	ldr	r2, [r3, #8]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800496a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	6899      	ldr	r1, [r3, #8]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	695b      	ldr	r3, [r3, #20]
 8004976:	029a      	lsls	r2, r3, #10
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	430a      	orrs	r2, r1
 800497e:	609a      	str	r2, [r3, #8]
}
 8004980:	bf00      	nop
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr
 800498c:	40012300 	.word	0x40012300
 8004990:	0f000001 	.word	0x0f000001

08004994 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800499c:	bf00      	nop
 800499e:	370c      	adds	r7, #12
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b085      	sub	sp, #20
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f003 0307 	and.w	r3, r3, #7
 80049b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80049b8:	4b0b      	ldr	r3, [pc, #44]	; (80049e8 <__NVIC_SetPriorityGrouping+0x40>)
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80049be:	68ba      	ldr	r2, [r7, #8]
 80049c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80049c4:	4013      	ands	r3, r2
 80049c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80049d0:	4b06      	ldr	r3, [pc, #24]	; (80049ec <__NVIC_SetPriorityGrouping+0x44>)
 80049d2:	4313      	orrs	r3, r2
 80049d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80049d6:	4a04      	ldr	r2, [pc, #16]	; (80049e8 <__NVIC_SetPriorityGrouping+0x40>)
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	60d3      	str	r3, [r2, #12]
}
 80049dc:	bf00      	nop
 80049de:	3714      	adds	r7, #20
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr
 80049e8:	e000ed00 	.word	0xe000ed00
 80049ec:	05fa0000 	.word	0x05fa0000

080049f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80049f0:	b480      	push	{r7}
 80049f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049f4:	4b04      	ldr	r3, [pc, #16]	; (8004a08 <__NVIC_GetPriorityGrouping+0x18>)
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	0a1b      	lsrs	r3, r3, #8
 80049fa:	f003 0307 	and.w	r3, r3, #7
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr
 8004a08:	e000ed00 	.word	0xe000ed00

08004a0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	4603      	mov	r3, r0
 8004a14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	db0b      	blt.n	8004a36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a1e:	79fb      	ldrb	r3, [r7, #7]
 8004a20:	f003 021f 	and.w	r2, r3, #31
 8004a24:	4907      	ldr	r1, [pc, #28]	; (8004a44 <__NVIC_EnableIRQ+0x38>)
 8004a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a2a:	095b      	lsrs	r3, r3, #5
 8004a2c:	2001      	movs	r0, #1
 8004a2e:	fa00 f202 	lsl.w	r2, r0, r2
 8004a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004a36:	bf00      	nop
 8004a38:	370c      	adds	r7, #12
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr
 8004a42:	bf00      	nop
 8004a44:	e000e100 	.word	0xe000e100

08004a48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	4603      	mov	r3, r0
 8004a50:	6039      	str	r1, [r7, #0]
 8004a52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	db0a      	blt.n	8004a72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	b2da      	uxtb	r2, r3
 8004a60:	490c      	ldr	r1, [pc, #48]	; (8004a94 <__NVIC_SetPriority+0x4c>)
 8004a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a66:	0112      	lsls	r2, r2, #4
 8004a68:	b2d2      	uxtb	r2, r2
 8004a6a:	440b      	add	r3, r1
 8004a6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a70:	e00a      	b.n	8004a88 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	b2da      	uxtb	r2, r3
 8004a76:	4908      	ldr	r1, [pc, #32]	; (8004a98 <__NVIC_SetPriority+0x50>)
 8004a78:	79fb      	ldrb	r3, [r7, #7]
 8004a7a:	f003 030f 	and.w	r3, r3, #15
 8004a7e:	3b04      	subs	r3, #4
 8004a80:	0112      	lsls	r2, r2, #4
 8004a82:	b2d2      	uxtb	r2, r2
 8004a84:	440b      	add	r3, r1
 8004a86:	761a      	strb	r2, [r3, #24]
}
 8004a88:	bf00      	nop
 8004a8a:	370c      	adds	r7, #12
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr
 8004a94:	e000e100 	.word	0xe000e100
 8004a98:	e000ed00 	.word	0xe000ed00

08004a9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b089      	sub	sp, #36	; 0x24
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	60f8      	str	r0, [r7, #12]
 8004aa4:	60b9      	str	r1, [r7, #8]
 8004aa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f003 0307 	and.w	r3, r3, #7
 8004aae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ab0:	69fb      	ldr	r3, [r7, #28]
 8004ab2:	f1c3 0307 	rsb	r3, r3, #7
 8004ab6:	2b04      	cmp	r3, #4
 8004ab8:	bf28      	it	cs
 8004aba:	2304      	movcs	r3, #4
 8004abc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	3304      	adds	r3, #4
 8004ac2:	2b06      	cmp	r3, #6
 8004ac4:	d902      	bls.n	8004acc <NVIC_EncodePriority+0x30>
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	3b03      	subs	r3, #3
 8004aca:	e000      	b.n	8004ace <NVIC_EncodePriority+0x32>
 8004acc:	2300      	movs	r3, #0
 8004ace:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8004ad4:	69bb      	ldr	r3, [r7, #24]
 8004ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8004ada:	43da      	mvns	r2, r3
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	401a      	ands	r2, r3
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ae4:	f04f 31ff 	mov.w	r1, #4294967295
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	fa01 f303 	lsl.w	r3, r1, r3
 8004aee:	43d9      	mvns	r1, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004af4:	4313      	orrs	r3, r2
         );
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3724      	adds	r7, #36	; 0x24
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr
	...

08004b04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b082      	sub	sp, #8
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	3b01      	subs	r3, #1
 8004b10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b14:	d301      	bcc.n	8004b1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b16:	2301      	movs	r3, #1
 8004b18:	e00f      	b.n	8004b3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b1a:	4a0a      	ldr	r2, [pc, #40]	; (8004b44 <SysTick_Config+0x40>)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	3b01      	subs	r3, #1
 8004b20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b22:	210f      	movs	r1, #15
 8004b24:	f04f 30ff 	mov.w	r0, #4294967295
 8004b28:	f7ff ff8e 	bl	8004a48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b2c:	4b05      	ldr	r3, [pc, #20]	; (8004b44 <SysTick_Config+0x40>)
 8004b2e:	2200      	movs	r2, #0
 8004b30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b32:	4b04      	ldr	r3, [pc, #16]	; (8004b44 <SysTick_Config+0x40>)
 8004b34:	2207      	movs	r2, #7
 8004b36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3708      	adds	r7, #8
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	bf00      	nop
 8004b44:	e000e010 	.word	0xe000e010

08004b48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f7ff ff29 	bl	80049a8 <__NVIC_SetPriorityGrouping>
}
 8004b56:	bf00      	nop
 8004b58:	3708      	adds	r7, #8
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}

08004b5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004b5e:	b580      	push	{r7, lr}
 8004b60:	b086      	sub	sp, #24
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	4603      	mov	r3, r0
 8004b66:	60b9      	str	r1, [r7, #8]
 8004b68:	607a      	str	r2, [r7, #4]
 8004b6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004b70:	f7ff ff3e 	bl	80049f0 <__NVIC_GetPriorityGrouping>
 8004b74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	68b9      	ldr	r1, [r7, #8]
 8004b7a:	6978      	ldr	r0, [r7, #20]
 8004b7c:	f7ff ff8e 	bl	8004a9c <NVIC_EncodePriority>
 8004b80:	4602      	mov	r2, r0
 8004b82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b86:	4611      	mov	r1, r2
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f7ff ff5d 	bl	8004a48 <__NVIC_SetPriority>
}
 8004b8e:	bf00      	nop
 8004b90:	3718      	adds	r7, #24
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}

08004b96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b96:	b580      	push	{r7, lr}
 8004b98:	b082      	sub	sp, #8
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f7ff ff31 	bl	8004a0c <__NVIC_EnableIRQ>
}
 8004baa:	bf00      	nop
 8004bac:	3708      	adds	r7, #8
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}

08004bb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004bb2:	b580      	push	{r7, lr}
 8004bb4:	b082      	sub	sp, #8
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f7ff ffa2 	bl	8004b04 <SysTick_Config>
 8004bc0:	4603      	mov	r3, r0
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3708      	adds	r7, #8
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
	...

08004bcc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b086      	sub	sp, #24
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004bd8:	f7ff f9fa 	bl	8003fd0 <HAL_GetTick>
 8004bdc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d101      	bne.n	8004be8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e099      	b.n	8004d1c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2202      	movs	r2, #2
 8004bf4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f022 0201 	bic.w	r2, r2, #1
 8004c06:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c08:	e00f      	b.n	8004c2a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004c0a:	f7ff f9e1 	bl	8003fd0 <HAL_GetTick>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	2b05      	cmp	r3, #5
 8004c16:	d908      	bls.n	8004c2a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2220      	movs	r2, #32
 8004c1c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2203      	movs	r2, #3
 8004c22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e078      	b.n	8004d1c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0301 	and.w	r3, r3, #1
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d1e8      	bne.n	8004c0a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004c40:	697a      	ldr	r2, [r7, #20]
 8004c42:	4b38      	ldr	r3, [pc, #224]	; (8004d24 <HAL_DMA_Init+0x158>)
 8004c44:	4013      	ands	r3, r2
 8004c46:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	685a      	ldr	r2, [r3, #4]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c56:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	691b      	ldr	r3, [r3, #16]
 8004c5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c62:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	699b      	ldr	r3, [r3, #24]
 8004c68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c6e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6a1b      	ldr	r3, [r3, #32]
 8004c74:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c76:	697a      	ldr	r2, [r7, #20]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c80:	2b04      	cmp	r3, #4
 8004c82:	d107      	bne.n	8004c94 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	697a      	ldr	r2, [r7, #20]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	697a      	ldr	r2, [r7, #20]
 8004c9a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	695b      	ldr	r3, [r3, #20]
 8004ca2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	f023 0307 	bic.w	r3, r3, #7
 8004caa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb0:	697a      	ldr	r2, [r7, #20]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cba:	2b04      	cmp	r3, #4
 8004cbc:	d117      	bne.n	8004cee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc2:	697a      	ldr	r2, [r7, #20]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d00e      	beq.n	8004cee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f000 fa99 	bl	8005208 <DMA_CheckFifoParam>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d008      	beq.n	8004cee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2240      	movs	r2, #64	; 0x40
 8004ce0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004cea:	2301      	movs	r3, #1
 8004cec:	e016      	b.n	8004d1c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	697a      	ldr	r2, [r7, #20]
 8004cf4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f000 fa50 	bl	800519c <DMA_CalcBaseAndBitshift>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d04:	223f      	movs	r2, #63	; 0x3f
 8004d06:	409a      	lsls	r2, r3
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2201      	movs	r2, #1
 8004d16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004d1a:	2300      	movs	r3, #0
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3718      	adds	r7, #24
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	e010803f 	.word	0xe010803f

08004d28 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b086      	sub	sp, #24
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	60f8      	str	r0, [r7, #12]
 8004d30:	60b9      	str	r1, [r7, #8]
 8004d32:	607a      	str	r2, [r7, #4]
 8004d34:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d36:	2300      	movs	r3, #0
 8004d38:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d3e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d101      	bne.n	8004d4e <HAL_DMA_Start_IT+0x26>
 8004d4a:	2302      	movs	r3, #2
 8004d4c:	e048      	b.n	8004de0 <HAL_DMA_Start_IT+0xb8>
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2201      	movs	r2, #1
 8004d52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d137      	bne.n	8004dd2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2202      	movs	r2, #2
 8004d66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	68b9      	ldr	r1, [r7, #8]
 8004d76:	68f8      	ldr	r0, [r7, #12]
 8004d78:	f000 f9e2 	bl	8005140 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d80:	223f      	movs	r2, #63	; 0x3f
 8004d82:	409a      	lsls	r2, r3
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f042 0216 	orr.w	r2, r2, #22
 8004d96:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	695a      	ldr	r2, [r3, #20]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004da6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d007      	beq.n	8004dc0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f042 0208 	orr.w	r2, r2, #8
 8004dbe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f042 0201 	orr.w	r2, r2, #1
 8004dce:	601a      	str	r2, [r3, #0]
 8004dd0:	e005      	b.n	8004dde <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004dda:	2302      	movs	r3, #2
 8004ddc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004dde:	7dfb      	ldrb	r3, [r7, #23]
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3718      	adds	r7, #24
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d004      	beq.n	8004e06 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2280      	movs	r2, #128	; 0x80
 8004e00:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e00c      	b.n	8004e20 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2205      	movs	r2, #5
 8004e0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f022 0201 	bic.w	r2, r2, #1
 8004e1c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004e1e:	2300      	movs	r3, #0
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	370c      	adds	r7, #12
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr

08004e2c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b086      	sub	sp, #24
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004e34:	2300      	movs	r3, #0
 8004e36:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8004e38:	4b92      	ldr	r3, [pc, #584]	; (8005084 <HAL_DMA_IRQHandler+0x258>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a92      	ldr	r2, [pc, #584]	; (8005088 <HAL_DMA_IRQHandler+0x25c>)
 8004e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e42:	0a9b      	lsrs	r3, r3, #10
 8004e44:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e4a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e56:	2208      	movs	r2, #8
 8004e58:	409a      	lsls	r2, r3
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d01a      	beq.n	8004e98 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 0304 	and.w	r3, r3, #4
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d013      	beq.n	8004e98 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f022 0204 	bic.w	r2, r2, #4
 8004e7e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e84:	2208      	movs	r2, #8
 8004e86:	409a      	lsls	r2, r3
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e90:	f043 0201 	orr.w	r2, r3, #1
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	409a      	lsls	r2, r3
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d012      	beq.n	8004ece <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00b      	beq.n	8004ece <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eba:	2201      	movs	r2, #1
 8004ebc:	409a      	lsls	r2, r3
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ec6:	f043 0202 	orr.w	r2, r3, #2
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ed2:	2204      	movs	r2, #4
 8004ed4:	409a      	lsls	r2, r3
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	4013      	ands	r3, r2
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d012      	beq.n	8004f04 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0302 	and.w	r3, r3, #2
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d00b      	beq.n	8004f04 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ef0:	2204      	movs	r2, #4
 8004ef2:	409a      	lsls	r2, r3
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004efc:	f043 0204 	orr.w	r2, r3, #4
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f08:	2210      	movs	r2, #16
 8004f0a:	409a      	lsls	r2, r3
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	4013      	ands	r3, r2
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d043      	beq.n	8004f9c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 0308 	and.w	r3, r3, #8
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d03c      	beq.n	8004f9c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f26:	2210      	movs	r2, #16
 8004f28:	409a      	lsls	r2, r3
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d018      	beq.n	8004f6e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d108      	bne.n	8004f5c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d024      	beq.n	8004f9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	4798      	blx	r3
 8004f5a:	e01f      	b.n	8004f9c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d01b      	beq.n	8004f9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	4798      	blx	r3
 8004f6c:	e016      	b.n	8004f9c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d107      	bne.n	8004f8c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f022 0208 	bic.w	r2, r2, #8
 8004f8a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d003      	beq.n	8004f9c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fa0:	2220      	movs	r2, #32
 8004fa2:	409a      	lsls	r2, r3
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	f000 808e 	beq.w	80050ca <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0310 	and.w	r3, r3, #16
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	f000 8086 	beq.w	80050ca <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fc2:	2220      	movs	r2, #32
 8004fc4:	409a      	lsls	r2, r3
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	2b05      	cmp	r3, #5
 8004fd4:	d136      	bne.n	8005044 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f022 0216 	bic.w	r2, r2, #22
 8004fe4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	695a      	ldr	r2, [r3, #20]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ff4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d103      	bne.n	8005006 <HAL_DMA_IRQHandler+0x1da>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005002:	2b00      	cmp	r3, #0
 8005004:	d007      	beq.n	8005016 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f022 0208 	bic.w	r2, r2, #8
 8005014:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800501a:	223f      	movs	r2, #63	; 0x3f
 800501c:	409a      	lsls	r2, r3
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2201      	movs	r2, #1
 800502e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005036:	2b00      	cmp	r3, #0
 8005038:	d07d      	beq.n	8005136 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	4798      	blx	r3
        }
        return;
 8005042:	e078      	b.n	8005136 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800504e:	2b00      	cmp	r3, #0
 8005050:	d01c      	beq.n	800508c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800505c:	2b00      	cmp	r3, #0
 800505e:	d108      	bne.n	8005072 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005064:	2b00      	cmp	r3, #0
 8005066:	d030      	beq.n	80050ca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	4798      	blx	r3
 8005070:	e02b      	b.n	80050ca <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005076:	2b00      	cmp	r3, #0
 8005078:	d027      	beq.n	80050ca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	4798      	blx	r3
 8005082:	e022      	b.n	80050ca <HAL_DMA_IRQHandler+0x29e>
 8005084:	20000020 	.word	0x20000020
 8005088:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005096:	2b00      	cmp	r3, #0
 8005098:	d10f      	bne.n	80050ba <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f022 0210 	bic.w	r2, r2, #16
 80050a8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2201      	movs	r2, #1
 80050b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d003      	beq.n	80050ca <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d032      	beq.n	8005138 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050d6:	f003 0301 	and.w	r3, r3, #1
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d022      	beq.n	8005124 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2205      	movs	r2, #5
 80050e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f022 0201 	bic.w	r2, r2, #1
 80050f4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	3301      	adds	r3, #1
 80050fa:	60bb      	str	r3, [r7, #8]
 80050fc:	697a      	ldr	r2, [r7, #20]
 80050fe:	429a      	cmp	r2, r3
 8005100:	d307      	bcc.n	8005112 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f003 0301 	and.w	r3, r3, #1
 800510c:	2b00      	cmp	r3, #0
 800510e:	d1f2      	bne.n	80050f6 <HAL_DMA_IRQHandler+0x2ca>
 8005110:	e000      	b.n	8005114 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005112:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005128:	2b00      	cmp	r3, #0
 800512a:	d005      	beq.n	8005138 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	4798      	blx	r3
 8005134:	e000      	b.n	8005138 <HAL_DMA_IRQHandler+0x30c>
        return;
 8005136:	bf00      	nop
    }
  }
}
 8005138:	3718      	adds	r7, #24
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop

08005140 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005140:	b480      	push	{r7}
 8005142:	b085      	sub	sp, #20
 8005144:	af00      	add	r7, sp, #0
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	607a      	str	r2, [r7, #4]
 800514c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800515c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	683a      	ldr	r2, [r7, #0]
 8005164:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	2b40      	cmp	r3, #64	; 0x40
 800516c:	d108      	bne.n	8005180 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	68ba      	ldr	r2, [r7, #8]
 800517c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800517e:	e007      	b.n	8005190 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	68ba      	ldr	r2, [r7, #8]
 8005186:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	60da      	str	r2, [r3, #12]
}
 8005190:	bf00      	nop
 8005192:	3714      	adds	r7, #20
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr

0800519c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800519c:	b480      	push	{r7}
 800519e:	b085      	sub	sp, #20
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	3b10      	subs	r3, #16
 80051ac:	4a13      	ldr	r2, [pc, #76]	; (80051fc <DMA_CalcBaseAndBitshift+0x60>)
 80051ae:	fba2 2303 	umull	r2, r3, r2, r3
 80051b2:	091b      	lsrs	r3, r3, #4
 80051b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80051b6:	4a12      	ldr	r2, [pc, #72]	; (8005200 <DMA_CalcBaseAndBitshift+0x64>)
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	4413      	add	r3, r2
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	461a      	mov	r2, r3
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2b03      	cmp	r3, #3
 80051c8:	d908      	bls.n	80051dc <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	461a      	mov	r2, r3
 80051d0:	4b0c      	ldr	r3, [pc, #48]	; (8005204 <DMA_CalcBaseAndBitshift+0x68>)
 80051d2:	4013      	ands	r3, r2
 80051d4:	1d1a      	adds	r2, r3, #4
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	659a      	str	r2, [r3, #88]	; 0x58
 80051da:	e006      	b.n	80051ea <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	461a      	mov	r2, r3
 80051e2:	4b08      	ldr	r3, [pc, #32]	; (8005204 <DMA_CalcBaseAndBitshift+0x68>)
 80051e4:	4013      	ands	r3, r2
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3714      	adds	r7, #20
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	aaaaaaab 	.word	0xaaaaaaab
 8005200:	080130fc 	.word	0x080130fc
 8005204:	fffffc00 	.word	0xfffffc00

08005208 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005208:	b480      	push	{r7}
 800520a:	b085      	sub	sp, #20
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005210:	2300      	movs	r3, #0
 8005212:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005218:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	699b      	ldr	r3, [r3, #24]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d11f      	bne.n	8005262 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	2b03      	cmp	r3, #3
 8005226:	d855      	bhi.n	80052d4 <DMA_CheckFifoParam+0xcc>
 8005228:	a201      	add	r2, pc, #4	; (adr r2, 8005230 <DMA_CheckFifoParam+0x28>)
 800522a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800522e:	bf00      	nop
 8005230:	08005241 	.word	0x08005241
 8005234:	08005253 	.word	0x08005253
 8005238:	08005241 	.word	0x08005241
 800523c:	080052d5 	.word	0x080052d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005244:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005248:	2b00      	cmp	r3, #0
 800524a:	d045      	beq.n	80052d8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005250:	e042      	b.n	80052d8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005256:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800525a:	d13f      	bne.n	80052dc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005260:	e03c      	b.n	80052dc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800526a:	d121      	bne.n	80052b0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	2b03      	cmp	r3, #3
 8005270:	d836      	bhi.n	80052e0 <DMA_CheckFifoParam+0xd8>
 8005272:	a201      	add	r2, pc, #4	; (adr r2, 8005278 <DMA_CheckFifoParam+0x70>)
 8005274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005278:	08005289 	.word	0x08005289
 800527c:	0800528f 	.word	0x0800528f
 8005280:	08005289 	.word	0x08005289
 8005284:	080052a1 	.word	0x080052a1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	73fb      	strb	r3, [r7, #15]
      break;
 800528c:	e02f      	b.n	80052ee <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005292:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005296:	2b00      	cmp	r3, #0
 8005298:	d024      	beq.n	80052e4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800529e:	e021      	b.n	80052e4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80052a8:	d11e      	bne.n	80052e8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80052ae:	e01b      	b.n	80052e8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	d902      	bls.n	80052bc <DMA_CheckFifoParam+0xb4>
 80052b6:	2b03      	cmp	r3, #3
 80052b8:	d003      	beq.n	80052c2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80052ba:	e018      	b.n	80052ee <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	73fb      	strb	r3, [r7, #15]
      break;
 80052c0:	e015      	b.n	80052ee <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d00e      	beq.n	80052ec <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	73fb      	strb	r3, [r7, #15]
      break;
 80052d2:	e00b      	b.n	80052ec <DMA_CheckFifoParam+0xe4>
      break;
 80052d4:	bf00      	nop
 80052d6:	e00a      	b.n	80052ee <DMA_CheckFifoParam+0xe6>
      break;
 80052d8:	bf00      	nop
 80052da:	e008      	b.n	80052ee <DMA_CheckFifoParam+0xe6>
      break;
 80052dc:	bf00      	nop
 80052de:	e006      	b.n	80052ee <DMA_CheckFifoParam+0xe6>
      break;
 80052e0:	bf00      	nop
 80052e2:	e004      	b.n	80052ee <DMA_CheckFifoParam+0xe6>
      break;
 80052e4:	bf00      	nop
 80052e6:	e002      	b.n	80052ee <DMA_CheckFifoParam+0xe6>
      break;   
 80052e8:	bf00      	nop
 80052ea:	e000      	b.n	80052ee <DMA_CheckFifoParam+0xe6>
      break;
 80052ec:	bf00      	nop
    }
  } 
  
  return status; 
 80052ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3714      	adds	r7, #20
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr

080052fc <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b082      	sub	sp, #8
 8005300:	af00      	add	r7, sp, #0
  uint32_t temp = 0;
 8005302:	2300      	movs	r3, #0
 8005304:	607b      	str	r3, [r7, #4]
  
  /* If the program operation is completed, disable the PG Bit */
  FLASH->CR &= (~FLASH_CR_PG);
 8005306:	4b52      	ldr	r3, [pc, #328]	; (8005450 <HAL_FLASH_IRQHandler+0x154>)
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	4a51      	ldr	r2, [pc, #324]	; (8005450 <HAL_FLASH_IRQHandler+0x154>)
 800530c:	f023 0301 	bic.w	r3, r3, #1
 8005310:	6113      	str	r3, [r2, #16]

  /* If the erase operation is completed, disable the SER Bit */
  FLASH->CR &= (~FLASH_CR_SER);
 8005312:	4b4f      	ldr	r3, [pc, #316]	; (8005450 <HAL_FLASH_IRQHandler+0x154>)
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	4a4e      	ldr	r2, [pc, #312]	; (8005450 <HAL_FLASH_IRQHandler+0x154>)
 8005318:	f023 0302 	bic.w	r3, r3, #2
 800531c:	6113      	str	r3, [r2, #16]
  FLASH->CR &= SECTOR_MASK; 
 800531e:	4b4c      	ldr	r3, [pc, #304]	; (8005450 <HAL_FLASH_IRQHandler+0x154>)
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	4a4b      	ldr	r2, [pc, #300]	; (8005450 <HAL_FLASH_IRQHandler+0x154>)
 8005324:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005328:	6113      	str	r3, [r2, #16]

  /* if the erase operation is completed, disable the MER Bit */
  FLASH->CR &= (~FLASH_MER_BIT);
 800532a:	4b49      	ldr	r3, [pc, #292]	; (8005450 <HAL_FLASH_IRQHandler+0x154>)
 800532c:	691a      	ldr	r2, [r3, #16]
 800532e:	4948      	ldr	r1, [pc, #288]	; (8005450 <HAL_FLASH_IRQHandler+0x154>)
 8005330:	4b48      	ldr	r3, [pc, #288]	; (8005454 <HAL_FLASH_IRQHandler+0x158>)
 8005332:	4013      	ands	r3, r2
 8005334:	610b      	str	r3, [r1, #16]

  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8005336:	4b46      	ldr	r3, [pc, #280]	; (8005450 <HAL_FLASH_IRQHandler+0x154>)
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	f003 0301 	and.w	r3, r3, #1
 800533e:	2b00      	cmp	r3, #0
 8005340:	d046      	beq.n	80053d0 <HAL_FLASH_IRQHandler+0xd4>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005342:	4b43      	ldr	r3, [pc, #268]	; (8005450 <HAL_FLASH_IRQHandler+0x154>)
 8005344:	2201      	movs	r2, #1
 8005346:	60da      	str	r2, [r3, #12]
    
    switch (pFlash.ProcedureOnGoing)
 8005348:	4b43      	ldr	r3, [pc, #268]	; (8005458 <HAL_FLASH_IRQHandler+0x15c>)
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	b2db      	uxtb	r3, r3
 800534e:	2b02      	cmp	r3, #2
 8005350:	d02e      	beq.n	80053b0 <HAL_FLASH_IRQHandler+0xb4>
 8005352:	2b03      	cmp	r3, #3
 8005354:	d033      	beq.n	80053be <HAL_FLASH_IRQHandler+0xc2>
 8005356:	2b01      	cmp	r3, #1
 8005358:	d000      	beq.n	800535c <HAL_FLASH_IRQHandler+0x60>
        /* Programming procedure is completed */
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
        break;
      }
      default :
        break;
 800535a:	e03a      	b.n	80053d2 <HAL_FLASH_IRQHandler+0xd6>
        pFlash.NbSectorsToErase--;
 800535c:	4b3e      	ldr	r3, [pc, #248]	; (8005458 <HAL_FLASH_IRQHandler+0x15c>)
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	3b01      	subs	r3, #1
 8005362:	4a3d      	ldr	r2, [pc, #244]	; (8005458 <HAL_FLASH_IRQHandler+0x15c>)
 8005364:	6053      	str	r3, [r2, #4]
        if(pFlash.NbSectorsToErase != 0)
 8005366:	4b3c      	ldr	r3, [pc, #240]	; (8005458 <HAL_FLASH_IRQHandler+0x15c>)
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d013      	beq.n	8005396 <HAL_FLASH_IRQHandler+0x9a>
          temp = pFlash.Sector;
 800536e:	4b3a      	ldr	r3, [pc, #232]	; (8005458 <HAL_FLASH_IRQHandler+0x15c>)
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	607b      	str	r3, [r7, #4]
          HAL_FLASH_EndOfOperationCallback(temp);
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f000 f871 	bl	800545c <HAL_FLASH_EndOfOperationCallback>
          temp = ++pFlash.Sector;
 800537a:	4b37      	ldr	r3, [pc, #220]	; (8005458 <HAL_FLASH_IRQHandler+0x15c>)
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	3301      	adds	r3, #1
 8005380:	4a35      	ldr	r2, [pc, #212]	; (8005458 <HAL_FLASH_IRQHandler+0x15c>)
 8005382:	60d3      	str	r3, [r2, #12]
 8005384:	607b      	str	r3, [r7, #4]
          FLASH_Erase_Sector(temp, pFlash.VoltageForErase);
 8005386:	4b34      	ldr	r3, [pc, #208]	; (8005458 <HAL_FLASH_IRQHandler+0x15c>)
 8005388:	7a1b      	ldrb	r3, [r3, #8]
 800538a:	b2db      	uxtb	r3, r3
 800538c:	4619      	mov	r1, r3
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f000 f8c2 	bl	8005518 <FLASH_Erase_Sector>
        break;
 8005394:	e01d      	b.n	80053d2 <HAL_FLASH_IRQHandler+0xd6>
          pFlash.Sector = temp = 0xFFFFFFFFU;
 8005396:	f04f 33ff 	mov.w	r3, #4294967295
 800539a:	607b      	str	r3, [r7, #4]
 800539c:	4a2e      	ldr	r2, [pc, #184]	; (8005458 <HAL_FLASH_IRQHandler+0x15c>)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	60d3      	str	r3, [r2, #12]
          HAL_FLASH_EndOfOperationCallback(temp);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 f85a 	bl	800545c <HAL_FLASH_EndOfOperationCallback>
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80053a8:	4b2b      	ldr	r3, [pc, #172]	; (8005458 <HAL_FLASH_IRQHandler+0x15c>)
 80053aa:	2200      	movs	r2, #0
 80053ac:	701a      	strb	r2, [r3, #0]
        break;
 80053ae:	e010      	b.n	80053d2 <HAL_FLASH_IRQHandler+0xd6>
        HAL_FLASH_EndOfOperationCallback(0);
 80053b0:	2000      	movs	r0, #0
 80053b2:	f000 f853 	bl	800545c <HAL_FLASH_EndOfOperationCallback>
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80053b6:	4b28      	ldr	r3, [pc, #160]	; (8005458 <HAL_FLASH_IRQHandler+0x15c>)
 80053b8:	2200      	movs	r2, #0
 80053ba:	701a      	strb	r2, [r3, #0]
        break;
 80053bc:	e009      	b.n	80053d2 <HAL_FLASH_IRQHandler+0xd6>
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 80053be:	4b26      	ldr	r3, [pc, #152]	; (8005458 <HAL_FLASH_IRQHandler+0x15c>)
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	4618      	mov	r0, r3
 80053c4:	f000 f84a 	bl	800545c <HAL_FLASH_EndOfOperationCallback>
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80053c8:	4b23      	ldr	r3, [pc, #140]	; (8005458 <HAL_FLASH_IRQHandler+0x15c>)
 80053ca:	2200      	movs	r2, #0
 80053cc:	701a      	strb	r2, [r3, #0]
        break;
 80053ce:	e000      	b.n	80053d2 <HAL_FLASH_IRQHandler+0xd6>
    }
  }
 80053d0:	bf00      	nop
  
  /* Check FLASH operation error flags */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 80053d2:	4b1f      	ldr	r3, [pc, #124]	; (8005450 <HAL_FLASH_IRQHandler+0x154>)
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d020      	beq.n	8005420 <HAL_FLASH_IRQHandler+0x124>
  {
    switch (pFlash.ProcedureOnGoing)
 80053de:	4b1e      	ldr	r3, [pc, #120]	; (8005458 <HAL_FLASH_IRQHandler+0x15c>)
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	2b02      	cmp	r3, #2
 80053e6:	d00c      	beq.n	8005402 <HAL_FLASH_IRQHandler+0x106>
 80053e8:	2b03      	cmp	r3, #3
 80053ea:	d00d      	beq.n	8005408 <HAL_FLASH_IRQHandler+0x10c>
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d000      	beq.n	80053f2 <HAL_FLASH_IRQHandler+0xf6>
        /*return the faulty address*/
        temp = pFlash.Address;
        break;
      }
    default :
      break;
 80053f0:	e00e      	b.n	8005410 <HAL_FLASH_IRQHandler+0x114>
        temp = pFlash.Sector;
 80053f2:	4b19      	ldr	r3, [pc, #100]	; (8005458 <HAL_FLASH_IRQHandler+0x15c>)
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	607b      	str	r3, [r7, #4]
        pFlash.Sector = 0xFFFFFFFFU;
 80053f8:	4b17      	ldr	r3, [pc, #92]	; (8005458 <HAL_FLASH_IRQHandler+0x15c>)
 80053fa:	f04f 32ff 	mov.w	r2, #4294967295
 80053fe:	60da      	str	r2, [r3, #12]
        break;
 8005400:	e006      	b.n	8005410 <HAL_FLASH_IRQHandler+0x114>
        temp = 0;
 8005402:	2300      	movs	r3, #0
 8005404:	607b      	str	r3, [r7, #4]
        break;
 8005406:	e003      	b.n	8005410 <HAL_FLASH_IRQHandler+0x114>
        temp = pFlash.Address;
 8005408:	4b13      	ldr	r3, [pc, #76]	; (8005458 <HAL_FLASH_IRQHandler+0x15c>)
 800540a:	691b      	ldr	r3, [r3, #16]
 800540c:	607b      	str	r3, [r7, #4]
        break;
 800540e:	bf00      	nop
    }
    /*Save the Error code*/
    FLASH_SetErrorCode();
 8005410:	f000 f838 	bl	8005484 <FLASH_SetErrorCode>

    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(temp);
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f000 f82b 	bl	8005470 <HAL_FLASH_OperationErrorCallback>

    /*Stop the procedure ongoing */
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800541a:	4b0f      	ldr	r3, [pc, #60]	; (8005458 <HAL_FLASH_IRQHandler+0x15c>)
 800541c:	2200      	movs	r2, #0
 800541e:	701a      	strb	r2, [r3, #0]
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8005420:	4b0d      	ldr	r3, [pc, #52]	; (8005458 <HAL_FLASH_IRQHandler+0x15c>)
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	b2db      	uxtb	r3, r3
 8005426:	2b00      	cmp	r3, #0
 8005428:	d10e      	bne.n	8005448 <HAL_FLASH_IRQHandler+0x14c>
  {
    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 800542a:	4b09      	ldr	r3, [pc, #36]	; (8005450 <HAL_FLASH_IRQHandler+0x154>)
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	4a08      	ldr	r2, [pc, #32]	; (8005450 <HAL_FLASH_IRQHandler+0x154>)
 8005430:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005434:	6113      	str	r3, [r2, #16]

    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 8005436:	4b06      	ldr	r3, [pc, #24]	; (8005450 <HAL_FLASH_IRQHandler+0x154>)
 8005438:	691b      	ldr	r3, [r3, #16]
 800543a:	4a05      	ldr	r2, [pc, #20]	; (8005450 <HAL_FLASH_IRQHandler+0x154>)
 800543c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005440:	6113      	str	r3, [r2, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8005442:	4b05      	ldr	r3, [pc, #20]	; (8005458 <HAL_FLASH_IRQHandler+0x15c>)
 8005444:	2200      	movs	r2, #0
 8005446:	751a      	strb	r2, [r3, #20]
  }
  
}
 8005448:	bf00      	nop
 800544a:	3708      	adds	r7, #8
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}
 8005450:	40023c00 	.word	0x40023c00
 8005454:	ffff7ffb 	.word	0xffff7ffb
 8005458:	200049a4 	.word	0x200049a4

0800545c <HAL_FLASH_EndOfOperationCallback>:
  *                 - Program      : Address which was selected for data program
  *                 - Mass Erase   : No return value expected
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 800545c:	b480      	push	{r7}
 800545e:	b083      	sub	sp, #12
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
  */ 
}
 8005464:	bf00      	nop
 8005466:	370c      	adds	r7, #12
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr

08005470 <HAL_FLASH_OperationErrorCallback>:
  *                 - Program      : Address which was selected for data program
  *                 - Mass Erase   : No return value expected
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8005470:	b480      	push	{r7}
 8005472:	b083      	sub	sp, #12
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8005478:	bf00      	nop
 800547a:	370c      	adds	r7, #12
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr

08005484 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8005484:	b480      	push	{r7}
 8005486:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8005488:	4b21      	ldr	r3, [pc, #132]	; (8005510 <FLASH_SetErrorCode+0x8c>)
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	f003 0302 	and.w	r3, r3, #2
 8005490:	2b00      	cmp	r3, #0
 8005492:	d005      	beq.n	80054a0 <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8005494:	4b1f      	ldr	r3, [pc, #124]	; (8005514 <FLASH_SetErrorCode+0x90>)
 8005496:	699b      	ldr	r3, [r3, #24]
 8005498:	f043 0320 	orr.w	r3, r3, #32
 800549c:	4a1d      	ldr	r2, [pc, #116]	; (8005514 <FLASH_SetErrorCode+0x90>)
 800549e:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80054a0:	4b1b      	ldr	r3, [pc, #108]	; (8005510 <FLASH_SetErrorCode+0x8c>)
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	f003 0310 	and.w	r3, r3, #16
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d005      	beq.n	80054b8 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80054ac:	4b19      	ldr	r3, [pc, #100]	; (8005514 <FLASH_SetErrorCode+0x90>)
 80054ae:	699b      	ldr	r3, [r3, #24]
 80054b0:	f043 0310 	orr.w	r3, r3, #16
 80054b4:	4a17      	ldr	r2, [pc, #92]	; (8005514 <FLASH_SetErrorCode+0x90>)
 80054b6:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80054b8:	4b15      	ldr	r3, [pc, #84]	; (8005510 <FLASH_SetErrorCode+0x8c>)
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	f003 0320 	and.w	r3, r3, #32
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d005      	beq.n	80054d0 <FLASH_SetErrorCode+0x4c>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80054c4:	4b13      	ldr	r3, [pc, #76]	; (8005514 <FLASH_SetErrorCode+0x90>)
 80054c6:	699b      	ldr	r3, [r3, #24]
 80054c8:	f043 0308 	orr.w	r3, r3, #8
 80054cc:	4a11      	ldr	r2, [pc, #68]	; (8005514 <FLASH_SetErrorCode+0x90>)
 80054ce:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80054d0:	4b0f      	ldr	r3, [pc, #60]	; (8005510 <FLASH_SetErrorCode+0x8c>)
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d005      	beq.n	80054e8 <FLASH_SetErrorCode+0x64>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80054dc:	4b0d      	ldr	r3, [pc, #52]	; (8005514 <FLASH_SetErrorCode+0x90>)
 80054de:	699b      	ldr	r3, [r3, #24]
 80054e0:	f043 0304 	orr.w	r3, r3, #4
 80054e4:	4a0b      	ldr	r2, [pc, #44]	; (8005514 <FLASH_SetErrorCode+0x90>)
 80054e6:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 80054e8:	4b09      	ldr	r3, [pc, #36]	; (8005510 <FLASH_SetErrorCode+0x8c>)
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d005      	beq.n	8005500 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 80054f4:	4b07      	ldr	r3, [pc, #28]	; (8005514 <FLASH_SetErrorCode+0x90>)
 80054f6:	699b      	ldr	r3, [r3, #24]
 80054f8:	f043 0302 	orr.w	r3, r3, #2
 80054fc:	4a05      	ldr	r2, [pc, #20]	; (8005514 <FLASH_SetErrorCode+0x90>)
 80054fe:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8005500:	4b03      	ldr	r3, [pc, #12]	; (8005510 <FLASH_SetErrorCode+0x8c>)
 8005502:	22f2      	movs	r2, #242	; 0xf2
 8005504:	60da      	str	r2, [r3, #12]
}
 8005506:	bf00      	nop
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr
 8005510:	40023c00 	.word	0x40023c00
 8005514:	200049a4 	.word	0x200049a4

08005518 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8005518:	b480      	push	{r7}
 800551a:	b085      	sub	sp, #20
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	460b      	mov	r3, r1
 8005522:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0;
 8005524:	2300      	movs	r3, #0
 8005526:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8005528:	78fb      	ldrb	r3, [r7, #3]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d102      	bne.n	8005534 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800552e:	2300      	movs	r3, #0
 8005530:	60fb      	str	r3, [r7, #12]
 8005532:	e010      	b.n	8005556 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8005534:	78fb      	ldrb	r3, [r7, #3]
 8005536:	2b01      	cmp	r3, #1
 8005538:	d103      	bne.n	8005542 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800553a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800553e:	60fb      	str	r3, [r7, #12]
 8005540:	e009      	b.n	8005556 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8005542:	78fb      	ldrb	r3, [r7, #3]
 8005544:	2b02      	cmp	r3, #2
 8005546:	d103      	bne.n	8005550 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8005548:	f44f 7300 	mov.w	r3, #512	; 0x200
 800554c:	60fb      	str	r3, [r7, #12]
 800554e:	e002      	b.n	8005556 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8005550:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005554:	60fb      	str	r3, [r7, #12]
  }
  
  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if(Sector > FLASH_SECTOR_11) 
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2b0b      	cmp	r3, #11
 800555a:	d902      	bls.n	8005562 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	3304      	adds	r3, #4
 8005560:	607b      	str	r3, [r7, #4]
  }  

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
 8005562:	4b14      	ldr	r3, [pc, #80]	; (80055b4 <FLASH_Erase_Sector+0x9c>)
 8005564:	691b      	ldr	r3, [r3, #16]
 8005566:	4a13      	ldr	r2, [pc, #76]	; (80055b4 <FLASH_Erase_Sector+0x9c>)
 8005568:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800556c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800556e:	4b11      	ldr	r3, [pc, #68]	; (80055b4 <FLASH_Erase_Sector+0x9c>)
 8005570:	691a      	ldr	r2, [r3, #16]
 8005572:	4910      	ldr	r1, [pc, #64]	; (80055b4 <FLASH_Erase_Sector+0x9c>)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	4313      	orrs	r3, r2
 8005578:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800557a:	4b0e      	ldr	r3, [pc, #56]	; (80055b4 <FLASH_Erase_Sector+0x9c>)
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	4a0d      	ldr	r2, [pc, #52]	; (80055b4 <FLASH_Erase_Sector+0x9c>)
 8005580:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005584:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8005586:	4b0b      	ldr	r3, [pc, #44]	; (80055b4 <FLASH_Erase_Sector+0x9c>)
 8005588:	691a      	ldr	r2, [r3, #16]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	00db      	lsls	r3, r3, #3
 800558e:	4313      	orrs	r3, r2
 8005590:	4a08      	ldr	r2, [pc, #32]	; (80055b4 <FLASH_Erase_Sector+0x9c>)
 8005592:	f043 0302 	orr.w	r3, r3, #2
 8005596:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8005598:	4b06      	ldr	r3, [pc, #24]	; (80055b4 <FLASH_Erase_Sector+0x9c>)
 800559a:	691b      	ldr	r3, [r3, #16]
 800559c:	4a05      	ldr	r2, [pc, #20]	; (80055b4 <FLASH_Erase_Sector+0x9c>)
 800559e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055a2:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 80055a4:	f3bf 8f4f 	dsb	sy
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80055a8:	bf00      	nop
 80055aa:	3714      	adds	r7, #20
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr
 80055b4:	40023c00 	.word	0x40023c00

080055b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b089      	sub	sp, #36	; 0x24
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80055c2:	2300      	movs	r3, #0
 80055c4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80055c6:	2300      	movs	r3, #0
 80055c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80055ca:	2300      	movs	r3, #0
 80055cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80055ce:	2300      	movs	r3, #0
 80055d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80055d2:	2300      	movs	r3, #0
 80055d4:	61fb      	str	r3, [r7, #28]
 80055d6:	e175      	b.n	80058c4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80055d8:	2201      	movs	r2, #1
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	fa02 f303 	lsl.w	r3, r2, r3
 80055e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	697a      	ldr	r2, [r7, #20]
 80055e8:	4013      	ands	r3, r2
 80055ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80055ec:	693a      	ldr	r2, [r7, #16]
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	429a      	cmp	r2, r3
 80055f2:	f040 8164 	bne.w	80058be <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d00b      	beq.n	8005616 <HAL_GPIO_Init+0x5e>
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	2b02      	cmp	r3, #2
 8005604:	d007      	beq.n	8005616 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800560a:	2b11      	cmp	r3, #17
 800560c:	d003      	beq.n	8005616 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	2b12      	cmp	r3, #18
 8005614:	d130      	bne.n	8005678 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800561c:	69fb      	ldr	r3, [r7, #28]
 800561e:	005b      	lsls	r3, r3, #1
 8005620:	2203      	movs	r2, #3
 8005622:	fa02 f303 	lsl.w	r3, r2, r3
 8005626:	43db      	mvns	r3, r3
 8005628:	69ba      	ldr	r2, [r7, #24]
 800562a:	4013      	ands	r3, r2
 800562c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	68da      	ldr	r2, [r3, #12]
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	005b      	lsls	r3, r3, #1
 8005636:	fa02 f303 	lsl.w	r3, r2, r3
 800563a:	69ba      	ldr	r2, [r7, #24]
 800563c:	4313      	orrs	r3, r2
 800563e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	69ba      	ldr	r2, [r7, #24]
 8005644:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800564c:	2201      	movs	r2, #1
 800564e:	69fb      	ldr	r3, [r7, #28]
 8005650:	fa02 f303 	lsl.w	r3, r2, r3
 8005654:	43db      	mvns	r3, r3
 8005656:	69ba      	ldr	r2, [r7, #24]
 8005658:	4013      	ands	r3, r2
 800565a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	091b      	lsrs	r3, r3, #4
 8005662:	f003 0201 	and.w	r2, r3, #1
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	fa02 f303 	lsl.w	r3, r2, r3
 800566c:	69ba      	ldr	r2, [r7, #24]
 800566e:	4313      	orrs	r3, r2
 8005670:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	69ba      	ldr	r2, [r7, #24]
 8005676:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	005b      	lsls	r3, r3, #1
 8005682:	2203      	movs	r2, #3
 8005684:	fa02 f303 	lsl.w	r3, r2, r3
 8005688:	43db      	mvns	r3, r3
 800568a:	69ba      	ldr	r2, [r7, #24]
 800568c:	4013      	ands	r3, r2
 800568e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	689a      	ldr	r2, [r3, #8]
 8005694:	69fb      	ldr	r3, [r7, #28]
 8005696:	005b      	lsls	r3, r3, #1
 8005698:	fa02 f303 	lsl.w	r3, r2, r3
 800569c:	69ba      	ldr	r2, [r7, #24]
 800569e:	4313      	orrs	r3, r2
 80056a0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	69ba      	ldr	r2, [r7, #24]
 80056a6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	2b02      	cmp	r3, #2
 80056ae:	d003      	beq.n	80056b8 <HAL_GPIO_Init+0x100>
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	2b12      	cmp	r3, #18
 80056b6:	d123      	bne.n	8005700 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	08da      	lsrs	r2, r3, #3
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	3208      	adds	r2, #8
 80056c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	f003 0307 	and.w	r3, r3, #7
 80056cc:	009b      	lsls	r3, r3, #2
 80056ce:	220f      	movs	r2, #15
 80056d0:	fa02 f303 	lsl.w	r3, r2, r3
 80056d4:	43db      	mvns	r3, r3
 80056d6:	69ba      	ldr	r2, [r7, #24]
 80056d8:	4013      	ands	r3, r2
 80056da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	691a      	ldr	r2, [r3, #16]
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	f003 0307 	and.w	r3, r3, #7
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	fa02 f303 	lsl.w	r3, r2, r3
 80056ec:	69ba      	ldr	r2, [r7, #24]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	08da      	lsrs	r2, r3, #3
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	3208      	adds	r2, #8
 80056fa:	69b9      	ldr	r1, [r7, #24]
 80056fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	005b      	lsls	r3, r3, #1
 800570a:	2203      	movs	r2, #3
 800570c:	fa02 f303 	lsl.w	r3, r2, r3
 8005710:	43db      	mvns	r3, r3
 8005712:	69ba      	ldr	r2, [r7, #24]
 8005714:	4013      	ands	r3, r2
 8005716:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	f003 0203 	and.w	r2, r3, #3
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	005b      	lsls	r3, r3, #1
 8005724:	fa02 f303 	lsl.w	r3, r2, r3
 8005728:	69ba      	ldr	r2, [r7, #24]
 800572a:	4313      	orrs	r3, r2
 800572c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	69ba      	ldr	r2, [r7, #24]
 8005732:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800573c:	2b00      	cmp	r3, #0
 800573e:	f000 80be 	beq.w	80058be <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005742:	4b65      	ldr	r3, [pc, #404]	; (80058d8 <HAL_GPIO_Init+0x320>)
 8005744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005746:	4a64      	ldr	r2, [pc, #400]	; (80058d8 <HAL_GPIO_Init+0x320>)
 8005748:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800574c:	6453      	str	r3, [r2, #68]	; 0x44
 800574e:	4b62      	ldr	r3, [pc, #392]	; (80058d8 <HAL_GPIO_Init+0x320>)
 8005750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005752:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005756:	60fb      	str	r3, [r7, #12]
 8005758:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800575a:	4a60      	ldr	r2, [pc, #384]	; (80058dc <HAL_GPIO_Init+0x324>)
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	089b      	lsrs	r3, r3, #2
 8005760:	3302      	adds	r3, #2
 8005762:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005766:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	f003 0303 	and.w	r3, r3, #3
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	220f      	movs	r2, #15
 8005772:	fa02 f303 	lsl.w	r3, r2, r3
 8005776:	43db      	mvns	r3, r3
 8005778:	69ba      	ldr	r2, [r7, #24]
 800577a:	4013      	ands	r3, r2
 800577c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a57      	ldr	r2, [pc, #348]	; (80058e0 <HAL_GPIO_Init+0x328>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d037      	beq.n	80057f6 <HAL_GPIO_Init+0x23e>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a56      	ldr	r2, [pc, #344]	; (80058e4 <HAL_GPIO_Init+0x32c>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d031      	beq.n	80057f2 <HAL_GPIO_Init+0x23a>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4a55      	ldr	r2, [pc, #340]	; (80058e8 <HAL_GPIO_Init+0x330>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d02b      	beq.n	80057ee <HAL_GPIO_Init+0x236>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a54      	ldr	r2, [pc, #336]	; (80058ec <HAL_GPIO_Init+0x334>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d025      	beq.n	80057ea <HAL_GPIO_Init+0x232>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a53      	ldr	r2, [pc, #332]	; (80058f0 <HAL_GPIO_Init+0x338>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d01f      	beq.n	80057e6 <HAL_GPIO_Init+0x22e>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a52      	ldr	r2, [pc, #328]	; (80058f4 <HAL_GPIO_Init+0x33c>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d019      	beq.n	80057e2 <HAL_GPIO_Init+0x22a>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a51      	ldr	r2, [pc, #324]	; (80058f8 <HAL_GPIO_Init+0x340>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d013      	beq.n	80057de <HAL_GPIO_Init+0x226>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4a50      	ldr	r2, [pc, #320]	; (80058fc <HAL_GPIO_Init+0x344>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d00d      	beq.n	80057da <HAL_GPIO_Init+0x222>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a4f      	ldr	r2, [pc, #316]	; (8005900 <HAL_GPIO_Init+0x348>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d007      	beq.n	80057d6 <HAL_GPIO_Init+0x21e>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a4e      	ldr	r2, [pc, #312]	; (8005904 <HAL_GPIO_Init+0x34c>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d101      	bne.n	80057d2 <HAL_GPIO_Init+0x21a>
 80057ce:	2309      	movs	r3, #9
 80057d0:	e012      	b.n	80057f8 <HAL_GPIO_Init+0x240>
 80057d2:	230a      	movs	r3, #10
 80057d4:	e010      	b.n	80057f8 <HAL_GPIO_Init+0x240>
 80057d6:	2308      	movs	r3, #8
 80057d8:	e00e      	b.n	80057f8 <HAL_GPIO_Init+0x240>
 80057da:	2307      	movs	r3, #7
 80057dc:	e00c      	b.n	80057f8 <HAL_GPIO_Init+0x240>
 80057de:	2306      	movs	r3, #6
 80057e0:	e00a      	b.n	80057f8 <HAL_GPIO_Init+0x240>
 80057e2:	2305      	movs	r3, #5
 80057e4:	e008      	b.n	80057f8 <HAL_GPIO_Init+0x240>
 80057e6:	2304      	movs	r3, #4
 80057e8:	e006      	b.n	80057f8 <HAL_GPIO_Init+0x240>
 80057ea:	2303      	movs	r3, #3
 80057ec:	e004      	b.n	80057f8 <HAL_GPIO_Init+0x240>
 80057ee:	2302      	movs	r3, #2
 80057f0:	e002      	b.n	80057f8 <HAL_GPIO_Init+0x240>
 80057f2:	2301      	movs	r3, #1
 80057f4:	e000      	b.n	80057f8 <HAL_GPIO_Init+0x240>
 80057f6:	2300      	movs	r3, #0
 80057f8:	69fa      	ldr	r2, [r7, #28]
 80057fa:	f002 0203 	and.w	r2, r2, #3
 80057fe:	0092      	lsls	r2, r2, #2
 8005800:	4093      	lsls	r3, r2
 8005802:	69ba      	ldr	r2, [r7, #24]
 8005804:	4313      	orrs	r3, r2
 8005806:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005808:	4934      	ldr	r1, [pc, #208]	; (80058dc <HAL_GPIO_Init+0x324>)
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	089b      	lsrs	r3, r3, #2
 800580e:	3302      	adds	r3, #2
 8005810:	69ba      	ldr	r2, [r7, #24]
 8005812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005816:	4b3c      	ldr	r3, [pc, #240]	; (8005908 <HAL_GPIO_Init+0x350>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	43db      	mvns	r3, r3
 8005820:	69ba      	ldr	r2, [r7, #24]
 8005822:	4013      	ands	r3, r2
 8005824:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800582e:	2b00      	cmp	r3, #0
 8005830:	d003      	beq.n	800583a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005832:	69ba      	ldr	r2, [r7, #24]
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	4313      	orrs	r3, r2
 8005838:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800583a:	4a33      	ldr	r2, [pc, #204]	; (8005908 <HAL_GPIO_Init+0x350>)
 800583c:	69bb      	ldr	r3, [r7, #24]
 800583e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005840:	4b31      	ldr	r3, [pc, #196]	; (8005908 <HAL_GPIO_Init+0x350>)
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	43db      	mvns	r3, r3
 800584a:	69ba      	ldr	r2, [r7, #24]
 800584c:	4013      	ands	r3, r2
 800584e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005858:	2b00      	cmp	r3, #0
 800585a:	d003      	beq.n	8005864 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800585c:	69ba      	ldr	r2, [r7, #24]
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	4313      	orrs	r3, r2
 8005862:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005864:	4a28      	ldr	r2, [pc, #160]	; (8005908 <HAL_GPIO_Init+0x350>)
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800586a:	4b27      	ldr	r3, [pc, #156]	; (8005908 <HAL_GPIO_Init+0x350>)
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	43db      	mvns	r3, r3
 8005874:	69ba      	ldr	r2, [r7, #24]
 8005876:	4013      	ands	r3, r2
 8005878:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005882:	2b00      	cmp	r3, #0
 8005884:	d003      	beq.n	800588e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005886:	69ba      	ldr	r2, [r7, #24]
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	4313      	orrs	r3, r2
 800588c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800588e:	4a1e      	ldr	r2, [pc, #120]	; (8005908 <HAL_GPIO_Init+0x350>)
 8005890:	69bb      	ldr	r3, [r7, #24]
 8005892:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005894:	4b1c      	ldr	r3, [pc, #112]	; (8005908 <HAL_GPIO_Init+0x350>)
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	43db      	mvns	r3, r3
 800589e:	69ba      	ldr	r2, [r7, #24]
 80058a0:	4013      	ands	r3, r2
 80058a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d003      	beq.n	80058b8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80058b0:	69ba      	ldr	r2, [r7, #24]
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80058b8:	4a13      	ldr	r2, [pc, #76]	; (8005908 <HAL_GPIO_Init+0x350>)
 80058ba:	69bb      	ldr	r3, [r7, #24]
 80058bc:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	3301      	adds	r3, #1
 80058c2:	61fb      	str	r3, [r7, #28]
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	2b0f      	cmp	r3, #15
 80058c8:	f67f ae86 	bls.w	80055d8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80058cc:	bf00      	nop
 80058ce:	3724      	adds	r7, #36	; 0x24
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr
 80058d8:	40023800 	.word	0x40023800
 80058dc:	40013800 	.word	0x40013800
 80058e0:	40020000 	.word	0x40020000
 80058e4:	40020400 	.word	0x40020400
 80058e8:	40020800 	.word	0x40020800
 80058ec:	40020c00 	.word	0x40020c00
 80058f0:	40021000 	.word	0x40021000
 80058f4:	40021400 	.word	0x40021400
 80058f8:	40021800 	.word	0x40021800
 80058fc:	40021c00 	.word	0x40021c00
 8005900:	40022000 	.word	0x40022000
 8005904:	40022400 	.word	0x40022400
 8005908:	40013c00 	.word	0x40013c00

0800590c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800590c:	b480      	push	{r7}
 800590e:	b085      	sub	sp, #20
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	460b      	mov	r3, r1
 8005916:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	691a      	ldr	r2, [r3, #16]
 800591c:	887b      	ldrh	r3, [r7, #2]
 800591e:	4013      	ands	r3, r2
 8005920:	2b00      	cmp	r3, #0
 8005922:	d002      	beq.n	800592a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005924:	2301      	movs	r3, #1
 8005926:	73fb      	strb	r3, [r7, #15]
 8005928:	e001      	b.n	800592e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800592a:	2300      	movs	r3, #0
 800592c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800592e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005930:	4618      	mov	r0, r3
 8005932:	3714      	adds	r7, #20
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	460b      	mov	r3, r1
 8005946:	807b      	strh	r3, [r7, #2]
 8005948:	4613      	mov	r3, r2
 800594a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800594c:	787b      	ldrb	r3, [r7, #1]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d003      	beq.n	800595a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005952:	887a      	ldrh	r2, [r7, #2]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005958:	e003      	b.n	8005962 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800595a:	887b      	ldrh	r3, [r7, #2]
 800595c:	041a      	lsls	r2, r3, #16
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	619a      	str	r2, [r3, #24]
}
 8005962:	bf00      	nop
 8005964:	370c      	adds	r7, #12
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr
	...

08005970 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b082      	sub	sp, #8
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d101      	bne.n	8005982 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	e07f      	b.n	8005a82 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005988:	b2db      	uxtb	r3, r3
 800598a:	2b00      	cmp	r3, #0
 800598c:	d106      	bne.n	800599c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f7fd fce6 	bl	8003368 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2224      	movs	r2, #36	; 0x24
 80059a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f022 0201 	bic.w	r2, r2, #1
 80059b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	685a      	ldr	r2, [r3, #4]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80059c0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	689a      	ldr	r2, [r3, #8]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80059d0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d107      	bne.n	80059ea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	689a      	ldr	r2, [r3, #8]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80059e6:	609a      	str	r2, [r3, #8]
 80059e8:	e006      	b.n	80059f8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	689a      	ldr	r2, [r3, #8]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80059f6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	2b02      	cmp	r3, #2
 80059fe:	d104      	bne.n	8005a0a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a08:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	6859      	ldr	r1, [r3, #4]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	4b1d      	ldr	r3, [pc, #116]	; (8005a8c <HAL_I2C_Init+0x11c>)
 8005a16:	430b      	orrs	r3, r1
 8005a18:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	68da      	ldr	r2, [r3, #12]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005a28:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	691a      	ldr	r2, [r3, #16]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	695b      	ldr	r3, [r3, #20]
 8005a32:	ea42 0103 	orr.w	r1, r2, r3
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	699b      	ldr	r3, [r3, #24]
 8005a3a:	021a      	lsls	r2, r3, #8
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	430a      	orrs	r2, r1
 8005a42:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	69d9      	ldr	r1, [r3, #28]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6a1a      	ldr	r2, [r3, #32]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	430a      	orrs	r2, r1
 8005a52:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f042 0201 	orr.w	r2, r2, #1
 8005a62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2220      	movs	r2, #32
 8005a6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005a80:	2300      	movs	r3, #0
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3708      	adds	r7, #8
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop
 8005a8c:	02008000 	.word	0x02008000

08005a90 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b088      	sub	sp, #32
 8005a94:	af02      	add	r7, sp, #8
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	607a      	str	r2, [r7, #4]
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	460b      	mov	r3, r1
 8005a9e:	817b      	strh	r3, [r7, #10]
 8005aa0:	4613      	mov	r3, r2
 8005aa2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	2b20      	cmp	r3, #32
 8005aae:	f040 80da 	bne.w	8005c66 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d101      	bne.n	8005ac0 <HAL_I2C_Master_Transmit+0x30>
 8005abc:	2302      	movs	r3, #2
 8005abe:	e0d3      	b.n	8005c68 <HAL_I2C_Master_Transmit+0x1d8>
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005ac8:	f7fe fa82 	bl	8003fd0 <HAL_GetTick>
 8005acc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	9300      	str	r3, [sp, #0]
 8005ad2:	2319      	movs	r3, #25
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005ada:	68f8      	ldr	r0, [r7, #12]
 8005adc:	f000 fa00 	bl	8005ee0 <I2C_WaitOnFlagUntilTimeout>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d001      	beq.n	8005aea <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e0be      	b.n	8005c68 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2221      	movs	r2, #33	; 0x21
 8005aee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2210      	movs	r2, #16
 8005af6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2200      	movs	r2, #0
 8005afe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	893a      	ldrh	r2, [r7, #8]
 8005b0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	2bff      	cmp	r3, #255	; 0xff
 8005b1a:	d90e      	bls.n	8005b3a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	22ff      	movs	r2, #255	; 0xff
 8005b20:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b26:	b2da      	uxtb	r2, r3
 8005b28:	8979      	ldrh	r1, [r7, #10]
 8005b2a:	4b51      	ldr	r3, [pc, #324]	; (8005c70 <HAL_I2C_Master_Transmit+0x1e0>)
 8005b2c:	9300      	str	r3, [sp, #0]
 8005b2e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b32:	68f8      	ldr	r0, [r7, #12]
 8005b34:	f000 fb62 	bl	80061fc <I2C_TransferConfig>
 8005b38:	e06c      	b.n	8005c14 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b3e:	b29a      	uxth	r2, r3
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b48:	b2da      	uxtb	r2, r3
 8005b4a:	8979      	ldrh	r1, [r7, #10]
 8005b4c:	4b48      	ldr	r3, [pc, #288]	; (8005c70 <HAL_I2C_Master_Transmit+0x1e0>)
 8005b4e:	9300      	str	r3, [sp, #0]
 8005b50:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b54:	68f8      	ldr	r0, [r7, #12]
 8005b56:	f000 fb51 	bl	80061fc <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8005b5a:	e05b      	b.n	8005c14 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b5c:	697a      	ldr	r2, [r7, #20]
 8005b5e:	6a39      	ldr	r1, [r7, #32]
 8005b60:	68f8      	ldr	r0, [r7, #12]
 8005b62:	f000 f9fd 	bl	8005f60 <I2C_WaitOnTXISFlagUntilTimeout>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d001      	beq.n	8005b70 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e07b      	b.n	8005c68 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b74:	781a      	ldrb	r2, [r3, #0]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b80:	1c5a      	adds	r2, r3, #1
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	3b01      	subs	r3, #1
 8005b8e:	b29a      	uxth	r2, r3
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b98:	3b01      	subs	r3, #1
 8005b9a:	b29a      	uxth	r2, r3
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d034      	beq.n	8005c14 <HAL_I2C_Master_Transmit+0x184>
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d130      	bne.n	8005c14 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	9300      	str	r3, [sp, #0]
 8005bb6:	6a3b      	ldr	r3, [r7, #32]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	2180      	movs	r1, #128	; 0x80
 8005bbc:	68f8      	ldr	r0, [r7, #12]
 8005bbe:	f000 f98f 	bl	8005ee0 <I2C_WaitOnFlagUntilTimeout>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d001      	beq.n	8005bcc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e04d      	b.n	8005c68 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	2bff      	cmp	r3, #255	; 0xff
 8005bd4:	d90e      	bls.n	8005bf4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	22ff      	movs	r2, #255	; 0xff
 8005bda:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005be0:	b2da      	uxtb	r2, r3
 8005be2:	8979      	ldrh	r1, [r7, #10]
 8005be4:	2300      	movs	r3, #0
 8005be6:	9300      	str	r3, [sp, #0]
 8005be8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005bec:	68f8      	ldr	r0, [r7, #12]
 8005bee:	f000 fb05 	bl	80061fc <I2C_TransferConfig>
 8005bf2:	e00f      	b.n	8005c14 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bf8:	b29a      	uxth	r2, r3
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c02:	b2da      	uxtb	r2, r3
 8005c04:	8979      	ldrh	r1, [r7, #10]
 8005c06:	2300      	movs	r3, #0
 8005c08:	9300      	str	r3, [sp, #0]
 8005c0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005c0e:	68f8      	ldr	r0, [r7, #12]
 8005c10:	f000 faf4 	bl	80061fc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d19e      	bne.n	8005b5c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c1e:	697a      	ldr	r2, [r7, #20]
 8005c20:	6a39      	ldr	r1, [r7, #32]
 8005c22:	68f8      	ldr	r0, [r7, #12]
 8005c24:	f000 f9dc 	bl	8005fe0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d001      	beq.n	8005c32 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e01a      	b.n	8005c68 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	2220      	movs	r2, #32
 8005c38:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	6859      	ldr	r1, [r3, #4]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	4b0b      	ldr	r3, [pc, #44]	; (8005c74 <HAL_I2C_Master_Transmit+0x1e4>)
 8005c46:	400b      	ands	r3, r1
 8005c48:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2220      	movs	r2, #32
 8005c4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2200      	movs	r2, #0
 8005c56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005c62:	2300      	movs	r3, #0
 8005c64:	e000      	b.n	8005c68 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8005c66:	2302      	movs	r3, #2
  }
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3718      	adds	r7, #24
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}
 8005c70:	80002000 	.word	0x80002000
 8005c74:	fe00e800 	.word	0xfe00e800

08005c78 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b088      	sub	sp, #32
 8005c7c:	af02      	add	r7, sp, #8
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	607a      	str	r2, [r7, #4]
 8005c82:	461a      	mov	r2, r3
 8005c84:	460b      	mov	r3, r1
 8005c86:	817b      	strh	r3, [r7, #10]
 8005c88:	4613      	mov	r3, r2
 8005c8a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	2b20      	cmp	r3, #32
 8005c96:	f040 80db 	bne.w	8005e50 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d101      	bne.n	8005ca8 <HAL_I2C_Master_Receive+0x30>
 8005ca4:	2302      	movs	r3, #2
 8005ca6:	e0d4      	b.n	8005e52 <HAL_I2C_Master_Receive+0x1da>
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2201      	movs	r2, #1
 8005cac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005cb0:	f7fe f98e 	bl	8003fd0 <HAL_GetTick>
 8005cb4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	9300      	str	r3, [sp, #0]
 8005cba:	2319      	movs	r3, #25
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005cc2:	68f8      	ldr	r0, [r7, #12]
 8005cc4:	f000 f90c 	bl	8005ee0 <I2C_WaitOnFlagUntilTimeout>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d001      	beq.n	8005cd2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e0bf      	b.n	8005e52 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2222      	movs	r2, #34	; 0x22
 8005cd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2210      	movs	r2, #16
 8005cde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	893a      	ldrh	r2, [r7, #8]
 8005cf2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	2bff      	cmp	r3, #255	; 0xff
 8005d02:	d90e      	bls.n	8005d22 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	22ff      	movs	r2, #255	; 0xff
 8005d08:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d0e:	b2da      	uxtb	r2, r3
 8005d10:	8979      	ldrh	r1, [r7, #10]
 8005d12:	4b52      	ldr	r3, [pc, #328]	; (8005e5c <HAL_I2C_Master_Receive+0x1e4>)
 8005d14:	9300      	str	r3, [sp, #0]
 8005d16:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005d1a:	68f8      	ldr	r0, [r7, #12]
 8005d1c:	f000 fa6e 	bl	80061fc <I2C_TransferConfig>
 8005d20:	e06d      	b.n	8005dfe <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d26:	b29a      	uxth	r2, r3
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d30:	b2da      	uxtb	r2, r3
 8005d32:	8979      	ldrh	r1, [r7, #10]
 8005d34:	4b49      	ldr	r3, [pc, #292]	; (8005e5c <HAL_I2C_Master_Receive+0x1e4>)
 8005d36:	9300      	str	r3, [sp, #0]
 8005d38:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d3c:	68f8      	ldr	r0, [r7, #12]
 8005d3e:	f000 fa5d 	bl	80061fc <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8005d42:	e05c      	b.n	8005dfe <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d44:	697a      	ldr	r2, [r7, #20]
 8005d46:	6a39      	ldr	r1, [r7, #32]
 8005d48:	68f8      	ldr	r0, [r7, #12]
 8005d4a:	f000 f985 	bl	8006058 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d001      	beq.n	8005d58 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	e07c      	b.n	8005e52 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d62:	b2d2      	uxtb	r2, r2
 8005d64:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6a:	1c5a      	adds	r2, r3, #1
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d74:	3b01      	subs	r3, #1
 8005d76:	b29a      	uxth	r2, r3
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	3b01      	subs	r3, #1
 8005d84:	b29a      	uxth	r2, r3
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d034      	beq.n	8005dfe <HAL_I2C_Master_Receive+0x186>
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d130      	bne.n	8005dfe <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	9300      	str	r3, [sp, #0]
 8005da0:	6a3b      	ldr	r3, [r7, #32]
 8005da2:	2200      	movs	r2, #0
 8005da4:	2180      	movs	r1, #128	; 0x80
 8005da6:	68f8      	ldr	r0, [r7, #12]
 8005da8:	f000 f89a 	bl	8005ee0 <I2C_WaitOnFlagUntilTimeout>
 8005dac:	4603      	mov	r3, r0
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d001      	beq.n	8005db6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	e04d      	b.n	8005e52 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	2bff      	cmp	r3, #255	; 0xff
 8005dbe:	d90e      	bls.n	8005dde <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	22ff      	movs	r2, #255	; 0xff
 8005dc4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dca:	b2da      	uxtb	r2, r3
 8005dcc:	8979      	ldrh	r1, [r7, #10]
 8005dce:	2300      	movs	r3, #0
 8005dd0:	9300      	str	r3, [sp, #0]
 8005dd2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005dd6:	68f8      	ldr	r0, [r7, #12]
 8005dd8:	f000 fa10 	bl	80061fc <I2C_TransferConfig>
 8005ddc:	e00f      	b.n	8005dfe <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005de2:	b29a      	uxth	r2, r3
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dec:	b2da      	uxtb	r2, r3
 8005dee:	8979      	ldrh	r1, [r7, #10]
 8005df0:	2300      	movs	r3, #0
 8005df2:	9300      	str	r3, [sp, #0]
 8005df4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005df8:	68f8      	ldr	r0, [r7, #12]
 8005dfa:	f000 f9ff 	bl	80061fc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d19d      	bne.n	8005d44 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e08:	697a      	ldr	r2, [r7, #20]
 8005e0a:	6a39      	ldr	r1, [r7, #32]
 8005e0c:	68f8      	ldr	r0, [r7, #12]
 8005e0e:	f000 f8e7 	bl	8005fe0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d001      	beq.n	8005e1c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e01a      	b.n	8005e52 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	2220      	movs	r2, #32
 8005e22:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	6859      	ldr	r1, [r3, #4]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	4b0c      	ldr	r3, [pc, #48]	; (8005e60 <HAL_I2C_Master_Receive+0x1e8>)
 8005e30:	400b      	ands	r3, r1
 8005e32:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2220      	movs	r2, #32
 8005e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2200      	movs	r2, #0
 8005e48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	e000      	b.n	8005e52 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005e50:	2302      	movs	r3, #2
  }
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3718      	adds	r7, #24
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	80002400 	.word	0x80002400
 8005e60:	fe00e800 	.word	0xfe00e800

08005e64 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b084      	sub	sp, #16
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	699b      	ldr	r3, [r3, #24]
 8005e72:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d005      	beq.n	8005e90 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e88:	68ba      	ldr	r2, [r7, #8]
 8005e8a:	68f9      	ldr	r1, [r7, #12]
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	4798      	blx	r3
  }
}
 8005e90:	bf00      	nop
 8005e92:	3710      	adds	r7, #16
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}

08005e98 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b083      	sub	sp, #12
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	699b      	ldr	r3, [r3, #24]
 8005ea6:	f003 0302 	and.w	r3, r3, #2
 8005eaa:	2b02      	cmp	r3, #2
 8005eac:	d103      	bne.n	8005eb6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	699b      	ldr	r3, [r3, #24]
 8005ebc:	f003 0301 	and.w	r3, r3, #1
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d007      	beq.n	8005ed4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	699a      	ldr	r2, [r3, #24]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f042 0201 	orr.w	r2, r2, #1
 8005ed2:	619a      	str	r2, [r3, #24]
  }
}
 8005ed4:	bf00      	nop
 8005ed6:	370c      	adds	r7, #12
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b084      	sub	sp, #16
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	60b9      	str	r1, [r7, #8]
 8005eea:	603b      	str	r3, [r7, #0]
 8005eec:	4613      	mov	r3, r2
 8005eee:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ef0:	e022      	b.n	8005f38 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ef8:	d01e      	beq.n	8005f38 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005efa:	f7fe f869 	bl	8003fd0 <HAL_GetTick>
 8005efe:	4602      	mov	r2, r0
 8005f00:	69bb      	ldr	r3, [r7, #24]
 8005f02:	1ad3      	subs	r3, r2, r3
 8005f04:	683a      	ldr	r2, [r7, #0]
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d302      	bcc.n	8005f10 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d113      	bne.n	8005f38 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f14:	f043 0220 	orr.w	r2, r3, #32
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2220      	movs	r2, #32
 8005f20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2200      	movs	r2, #0
 8005f28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	e00f      	b.n	8005f58 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	699a      	ldr	r2, [r3, #24]
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	4013      	ands	r3, r2
 8005f42:	68ba      	ldr	r2, [r7, #8]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	bf0c      	ite	eq
 8005f48:	2301      	moveq	r3, #1
 8005f4a:	2300      	movne	r3, #0
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	461a      	mov	r2, r3
 8005f50:	79fb      	ldrb	r3, [r7, #7]
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d0cd      	beq.n	8005ef2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005f56:	2300      	movs	r3, #0
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3710      	adds	r7, #16
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b084      	sub	sp, #16
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	60f8      	str	r0, [r7, #12]
 8005f68:	60b9      	str	r1, [r7, #8]
 8005f6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005f6c:	e02c      	b.n	8005fc8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	68b9      	ldr	r1, [r7, #8]
 8005f72:	68f8      	ldr	r0, [r7, #12]
 8005f74:	f000 f8dc 	bl	8006130 <I2C_IsAcknowledgeFailed>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d001      	beq.n	8005f82 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e02a      	b.n	8005fd8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f88:	d01e      	beq.n	8005fc8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f8a:	f7fe f821 	bl	8003fd0 <HAL_GetTick>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	1ad3      	subs	r3, r2, r3
 8005f94:	68ba      	ldr	r2, [r7, #8]
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d302      	bcc.n	8005fa0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d113      	bne.n	8005fc8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fa4:	f043 0220 	orr.w	r2, r3, #32
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2220      	movs	r2, #32
 8005fb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e007      	b.n	8005fd8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	699b      	ldr	r3, [r3, #24]
 8005fce:	f003 0302 	and.w	r3, r3, #2
 8005fd2:	2b02      	cmp	r3, #2
 8005fd4:	d1cb      	bne.n	8005f6e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005fd6:	2300      	movs	r3, #0
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3710      	adds	r7, #16
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b084      	sub	sp, #16
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	60f8      	str	r0, [r7, #12]
 8005fe8:	60b9      	str	r1, [r7, #8]
 8005fea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005fec:	e028      	b.n	8006040 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fee:	687a      	ldr	r2, [r7, #4]
 8005ff0:	68b9      	ldr	r1, [r7, #8]
 8005ff2:	68f8      	ldr	r0, [r7, #12]
 8005ff4:	f000 f89c 	bl	8006130 <I2C_IsAcknowledgeFailed>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d001      	beq.n	8006002 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	e026      	b.n	8006050 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006002:	f7fd ffe5 	bl	8003fd0 <HAL_GetTick>
 8006006:	4602      	mov	r2, r0
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	1ad3      	subs	r3, r2, r3
 800600c:	68ba      	ldr	r2, [r7, #8]
 800600e:	429a      	cmp	r2, r3
 8006010:	d302      	bcc.n	8006018 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d113      	bne.n	8006040 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800601c:	f043 0220 	orr.w	r2, r3, #32
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2220      	movs	r2, #32
 8006028:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2200      	movs	r2, #0
 8006030:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2200      	movs	r2, #0
 8006038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	e007      	b.n	8006050 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	699b      	ldr	r3, [r3, #24]
 8006046:	f003 0320 	and.w	r3, r3, #32
 800604a:	2b20      	cmp	r3, #32
 800604c:	d1cf      	bne.n	8005fee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800604e:	2300      	movs	r3, #0
}
 8006050:	4618      	mov	r0, r3
 8006052:	3710      	adds	r7, #16
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b084      	sub	sp, #16
 800605c:	af00      	add	r7, sp, #0
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	60b9      	str	r1, [r7, #8]
 8006062:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006064:	e055      	b.n	8006112 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	68b9      	ldr	r1, [r7, #8]
 800606a:	68f8      	ldr	r0, [r7, #12]
 800606c:	f000 f860 	bl	8006130 <I2C_IsAcknowledgeFailed>
 8006070:	4603      	mov	r3, r0
 8006072:	2b00      	cmp	r3, #0
 8006074:	d001      	beq.n	800607a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	e053      	b.n	8006122 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	699b      	ldr	r3, [r3, #24]
 8006080:	f003 0320 	and.w	r3, r3, #32
 8006084:	2b20      	cmp	r3, #32
 8006086:	d129      	bne.n	80060dc <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	699b      	ldr	r3, [r3, #24]
 800608e:	f003 0304 	and.w	r3, r3, #4
 8006092:	2b04      	cmp	r3, #4
 8006094:	d105      	bne.n	80060a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800609a:	2b00      	cmp	r3, #0
 800609c:	d001      	beq.n	80060a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800609e:	2300      	movs	r3, #0
 80060a0:	e03f      	b.n	8006122 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2220      	movs	r2, #32
 80060a8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	6859      	ldr	r1, [r3, #4]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	4b1d      	ldr	r3, [pc, #116]	; (800612c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80060b6:	400b      	ands	r3, r1
 80060b8:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2200      	movs	r2, #0
 80060be:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2220      	movs	r2, #32
 80060c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2200      	movs	r2, #0
 80060cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2200      	movs	r2, #0
 80060d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80060d8:	2301      	movs	r3, #1
 80060da:	e022      	b.n	8006122 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060dc:	f7fd ff78 	bl	8003fd0 <HAL_GetTick>
 80060e0:	4602      	mov	r2, r0
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	1ad3      	subs	r3, r2, r3
 80060e6:	68ba      	ldr	r2, [r7, #8]
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d302      	bcc.n	80060f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d10f      	bne.n	8006112 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060f6:	f043 0220 	orr.w	r2, r3, #32
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2220      	movs	r2, #32
 8006102:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2200      	movs	r2, #0
 800610a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	e007      	b.n	8006122 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	699b      	ldr	r3, [r3, #24]
 8006118:	f003 0304 	and.w	r3, r3, #4
 800611c:	2b04      	cmp	r3, #4
 800611e:	d1a2      	bne.n	8006066 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006120:	2300      	movs	r3, #0
}
 8006122:	4618      	mov	r0, r3
 8006124:	3710      	adds	r7, #16
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
 800612a:	bf00      	nop
 800612c:	fe00e800 	.word	0xfe00e800

08006130 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b084      	sub	sp, #16
 8006134:	af00      	add	r7, sp, #0
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	60b9      	str	r1, [r7, #8]
 800613a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	699b      	ldr	r3, [r3, #24]
 8006142:	f003 0310 	and.w	r3, r3, #16
 8006146:	2b10      	cmp	r3, #16
 8006148:	d151      	bne.n	80061ee <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800614a:	e022      	b.n	8006192 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006152:	d01e      	beq.n	8006192 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006154:	f7fd ff3c 	bl	8003fd0 <HAL_GetTick>
 8006158:	4602      	mov	r2, r0
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	1ad3      	subs	r3, r2, r3
 800615e:	68ba      	ldr	r2, [r7, #8]
 8006160:	429a      	cmp	r2, r3
 8006162:	d302      	bcc.n	800616a <I2C_IsAcknowledgeFailed+0x3a>
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d113      	bne.n	8006192 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800616e:	f043 0220 	orr.w	r2, r3, #32
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2220      	movs	r2, #32
 800617a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2200      	movs	r2, #0
 8006182:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2200      	movs	r2, #0
 800618a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	e02e      	b.n	80061f0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	699b      	ldr	r3, [r3, #24]
 8006198:	f003 0320 	and.w	r3, r3, #32
 800619c:	2b20      	cmp	r3, #32
 800619e:	d1d5      	bne.n	800614c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	2210      	movs	r2, #16
 80061a6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	2220      	movs	r2, #32
 80061ae:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80061b0:	68f8      	ldr	r0, [r7, #12]
 80061b2:	f7ff fe71 	bl	8005e98 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	6859      	ldr	r1, [r3, #4]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	4b0d      	ldr	r3, [pc, #52]	; (80061f8 <I2C_IsAcknowledgeFailed+0xc8>)
 80061c2:	400b      	ands	r3, r1
 80061c4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ca:	f043 0204 	orr.w	r2, r3, #4
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2220      	movs	r2, #32
 80061d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2200      	movs	r2, #0
 80061de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2200      	movs	r2, #0
 80061e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	e000      	b.n	80061f0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80061ee:	2300      	movs	r3, #0
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3710      	adds	r7, #16
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}
 80061f8:	fe00e800 	.word	0xfe00e800

080061fc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b085      	sub	sp, #20
 8006200:	af00      	add	r7, sp, #0
 8006202:	60f8      	str	r0, [r7, #12]
 8006204:	607b      	str	r3, [r7, #4]
 8006206:	460b      	mov	r3, r1
 8006208:	817b      	strh	r3, [r7, #10]
 800620a:	4613      	mov	r3, r2
 800620c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	685a      	ldr	r2, [r3, #4]
 8006214:	69bb      	ldr	r3, [r7, #24]
 8006216:	0d5b      	lsrs	r3, r3, #21
 8006218:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800621c:	4b0d      	ldr	r3, [pc, #52]	; (8006254 <I2C_TransferConfig+0x58>)
 800621e:	430b      	orrs	r3, r1
 8006220:	43db      	mvns	r3, r3
 8006222:	ea02 0103 	and.w	r1, r2, r3
 8006226:	897b      	ldrh	r3, [r7, #10]
 8006228:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800622c:	7a7b      	ldrb	r3, [r7, #9]
 800622e:	041b      	lsls	r3, r3, #16
 8006230:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006234:	431a      	orrs	r2, r3
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	431a      	orrs	r2, r3
 800623a:	69bb      	ldr	r3, [r7, #24]
 800623c:	431a      	orrs	r2, r3
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	430a      	orrs	r2, r1
 8006244:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8006246:	bf00      	nop
 8006248:	3714      	adds	r7, #20
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr
 8006252:	bf00      	nop
 8006254:	03ff63ff 	.word	0x03ff63ff

08006258 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006258:	b480      	push	{r7}
 800625a:	b083      	sub	sp, #12
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006268:	b2db      	uxtb	r3, r3
 800626a:	2b20      	cmp	r3, #32
 800626c:	d138      	bne.n	80062e0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006274:	2b01      	cmp	r3, #1
 8006276:	d101      	bne.n	800627c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006278:	2302      	movs	r3, #2
 800627a:	e032      	b.n	80062e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2201      	movs	r2, #1
 8006280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2224      	movs	r2, #36	; 0x24
 8006288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f022 0201 	bic.w	r2, r2, #1
 800629a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80062aa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	6819      	ldr	r1, [r3, #0]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	683a      	ldr	r2, [r7, #0]
 80062b8:	430a      	orrs	r2, r1
 80062ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f042 0201 	orr.w	r2, r2, #1
 80062ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2220      	movs	r2, #32
 80062d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2200      	movs	r2, #0
 80062d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80062dc:	2300      	movs	r3, #0
 80062de:	e000      	b.n	80062e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80062e0:	2302      	movs	r3, #2
  }
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	370c      	adds	r7, #12
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr

080062ee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80062ee:	b480      	push	{r7}
 80062f0:	b085      	sub	sp, #20
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]
 80062f6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	2b20      	cmp	r3, #32
 8006302:	d139      	bne.n	8006378 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800630a:	2b01      	cmp	r3, #1
 800630c:	d101      	bne.n	8006312 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800630e:	2302      	movs	r3, #2
 8006310:	e033      	b.n	800637a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2201      	movs	r2, #1
 8006316:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2224      	movs	r2, #36	; 0x24
 800631e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f022 0201 	bic.w	r2, r2, #1
 8006330:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006340:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	021b      	lsls	r3, r3, #8
 8006346:	68fa      	ldr	r2, [r7, #12]
 8006348:	4313      	orrs	r3, r2
 800634a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	68fa      	ldr	r2, [r7, #12]
 8006352:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f042 0201 	orr.w	r2, r2, #1
 8006362:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2220      	movs	r2, #32
 8006368:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006374:	2300      	movs	r3, #0
 8006376:	e000      	b.n	800637a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006378:	2302      	movs	r3, #2
  }
}
 800637a:	4618      	mov	r0, r3
 800637c:	3714      	adds	r7, #20
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr

08006386 <HAL_MMC_Init>:
            MMC_HandleTypeDef and create the associated handle.
  * @param  hmmc: Pointer to the MMC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_Init(MMC_HandleTypeDef *hmmc)
{
 8006386:	b580      	push	{r7, lr}
 8006388:	b082      	sub	sp, #8
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
  /* Check the MMC handle allocation */
  if(hmmc == NULL)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d101      	bne.n	8006398 <HAL_MMC_Init+0x12>
  {
    return HAL_ERROR;
 8006394:	2301      	movs	r3, #1
 8006396:	e022      	b.n	80063de <HAL_MMC_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hmmc->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hmmc->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hmmc->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hmmc->Init.ClockDiv));

  if(hmmc->State == HAL_MMC_STATE_RESET)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d105      	bne.n	80063b0 <HAL_MMC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hmmc->Lock = HAL_UNLOCKED;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2200      	movs	r2, #0
 80063a8:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hmmc->MspInitCallback(hmmc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_MMC_MspInit(hmmc);
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f7fd f8cc 	bl	8003548 <HAL_MMC_MspInit>
#endif
  }

  hmmc->State = HAL_MMC_STATE_BUSY;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2203      	movs	r2, #3
 80063b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if(HAL_MMC_InitCard(hmmc) == HAL_ERROR)
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f000 f814 	bl	80063e6 <HAL_MMC_InitCard>
 80063be:	4603      	mov	r3, r0
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d101      	bne.n	80063c8 <HAL_MMC_Init+0x42>
  {
    return HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	e00a      	b.n	80063de <HAL_MMC_Init+0x58>
  }

  /* Initialize the error code */
  hmmc->ErrorCode = HAL_DMA_ERROR_NONE;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the MMC operation */
  hmmc->Context = MMC_CONTEXT_NONE;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2200      	movs	r2, #0
 80063d2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the MMC state */
  hmmc->State = HAL_MMC_STATE_READY;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80063dc:	2300      	movs	r3, #0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3708      	adds	r7, #8
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}

080063e6 <HAL_MMC_InitCard>:
  * @note   This function initializes the MMC card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 80063e6:	b5b0      	push	{r4, r5, r7, lr}
 80063e8:	b08e      	sub	sp, #56	; 0x38
 80063ea:	af04      	add	r7, sp, #16
 80063ec:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  MMC_InitTypeDef Init;
  HAL_StatusTypeDef status;
  
  /* Default SDMMC peripheral configuration for MMC card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80063ee:	2300      	movs	r3, #0
 80063f0:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80063f2:	2300      	movs	r3, #0
 80063f4:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80063f6:	2300      	movs	r3, #0
 80063f8:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80063fa:	2300      	movs	r3, #0
 80063fc:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80063fe:	2300      	movs	r3, #0
 8006400:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8006402:	2376      	movs	r3, #118	; 0x76
 8006404:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hmmc->Instance, Init);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681d      	ldr	r5, [r3, #0]
 800640a:	466c      	mov	r4, sp
 800640c:	f107 0314 	add.w	r3, r7, #20
 8006410:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006414:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006418:	f107 0308 	add.w	r3, r7, #8
 800641c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800641e:	4628      	mov	r0, r5
 8006420:	f005 fbb6 	bl	800bb90 <SDMMC_Init>
 8006424:	4603      	mov	r3, r0
 8006426:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status == HAL_ERROR)
 800642a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800642e:	2b01      	cmp	r3, #1
 8006430:	d101      	bne.n	8006436 <HAL_MMC_InitCard+0x50>
  {
    return HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	e044      	b.n	80064c0 <HAL_MMC_InitCard+0xda>
  }

  /* Disable SDMMC Clock */
  __HAL_MMC_DISABLE(hmmc); 
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	685a      	ldr	r2, [r3, #4]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006444:	605a      	str	r2, [r3, #4]
  
  /* Set Power State to ON */
  status = SDMMC_PowerState_ON(hmmc->Instance);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4618      	mov	r0, r3
 800644c:	f005 fbcc 	bl	800bbe8 <SDMMC_PowerState_ON>
 8006450:	4603      	mov	r3, r0
 8006452:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status == HAL_ERROR)
 8006456:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800645a:	2b01      	cmp	r3, #1
 800645c:	d101      	bne.n	8006462 <HAL_MMC_InitCard+0x7c>
  {
    return HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	e02e      	b.n	80064c0 <HAL_MMC_InitCard+0xda>
  }

  /* Enable MMC Clock */
  __HAL_MMC_ENABLE(hmmc);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	685a      	ldr	r2, [r3, #4]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006470:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = MMC_PowerON(hmmc);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 fa54 	bl	8006920 <MMC_PowerON>
 8006478:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_MMC_ERROR_NONE)
 800647a:	6a3b      	ldr	r3, [r7, #32]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d00b      	beq.n	8006498 <HAL_MMC_InitCard+0xb2>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2201      	movs	r2, #1
 8006484:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hmmc->ErrorCode |= errorstate;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800648c:	6a3b      	ldr	r3, [r7, #32]
 800648e:	431a      	orrs	r2, r3
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	e013      	b.n	80064c0 <HAL_MMC_InitCard+0xda>
  }

  /* Card initialization */
  errorstate = MMC_InitCard(hmmc);
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f000 f980 	bl	800679e <MMC_InitCard>
 800649e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_MMC_ERROR_NONE)
 80064a0:	6a3b      	ldr	r3, [r7, #32]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d00b      	beq.n	80064be <HAL_MMC_InitCard+0xd8>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2201      	movs	r2, #1
 80064aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hmmc->ErrorCode |= errorstate;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064b2:	6a3b      	ldr	r3, [r7, #32]
 80064b4:	431a      	orrs	r2, r3
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	e000      	b.n	80064c0 <HAL_MMC_InitCard+0xda>
  }

  return HAL_OK;
 80064be:	2300      	movs	r3, #0
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3728      	adds	r7, #40	; 0x28
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bdb0      	pop	{r4, r5, r7, pc}

080064c8 <HAL_MMC_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_MMC_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_GetCardCSD(MMC_HandleTypeDef *hmmc, HAL_MMC_CardCSDTypeDef *pCSD)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b083      	sub	sp, #12
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hmmc->CSD[0] & 0xC0000000U) >> 30U);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064d6:	0f9b      	lsrs	r3, r3, #30
 80064d8:	b2da      	uxtb	r2, r3
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hmmc->CSD[0] & 0x3C000000U) >> 26U);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064e2:	0e9b      	lsrs	r3, r3, #26
 80064e4:	b2db      	uxtb	r3, r3
 80064e6:	f003 030f 	and.w	r3, r3, #15
 80064ea:	b2da      	uxtb	r2, r3
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hmmc->CSD[0] & 0x03000000U) >> 24U);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064f4:	0e1b      	lsrs	r3, r3, #24
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	f003 0303 	and.w	r3, r3, #3
 80064fc:	b2da      	uxtb	r2, r3
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hmmc->CSD[0] & 0x00FF0000U) >> 16U);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006506:	0c1b      	lsrs	r3, r3, #16
 8006508:	b2da      	uxtb	r2, r3
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hmmc->CSD[0] & 0x0000FF00U) >> 8U);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006512:	0a1b      	lsrs	r3, r3, #8
 8006514:	b2da      	uxtb	r2, r3
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hmmc->CSD[0] & 0x000000FFU);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800651e:	b2da      	uxtb	r2, r3
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hmmc->CSD[1] & 0xFFF00000U) >> 20U);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006528:	0d1b      	lsrs	r3, r3, #20
 800652a:	b29a      	uxth	r2, r3
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hmmc->CSD[1] & 0x000F0000U) >> 16U);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006534:	0c1b      	lsrs	r3, r3, #16
 8006536:	b2db      	uxtb	r3, r3
 8006538:	f003 030f 	and.w	r3, r3, #15
 800653c:	b2da      	uxtb	r2, r3
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hmmc->CSD[1] & 0x00008000U) >> 15U);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006546:	0bdb      	lsrs	r3, r3, #15
 8006548:	b2db      	uxtb	r3, r3
 800654a:	f003 0301 	and.w	r3, r3, #1
 800654e:	b2da      	uxtb	r2, r3
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00004000U) >> 14U);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006558:	0b9b      	lsrs	r3, r3, #14
 800655a:	b2db      	uxtb	r3, r3
 800655c:	f003 0301 	and.w	r3, r3, #1
 8006560:	b2da      	uxtb	r2, r3
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00002000U) >> 13U);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800656a:	0b5b      	lsrs	r3, r3, #13
 800656c:	b2db      	uxtb	r3, r3
 800656e:	f003 0301 	and.w	r3, r3, #1
 8006572:	b2da      	uxtb	r2, r3
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hmmc->CSD[1] & 0x00001000U) >> 12U);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800657c:	0b1b      	lsrs	r3, r3, #12
 800657e:	b2db      	uxtb	r3, r3
 8006580:	f003 0301 	and.w	r3, r3, #1
 8006584:	b2da      	uxtb	r2, r3
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	2200      	movs	r2, #0
 800658e:	735a      	strb	r2, [r3, #13]

  pCSD->DeviceSize = (((hmmc->CSD[1] & 0x000003FFU) << 2U) | ((hmmc->CSD[2] & 0xC0000000U) >> 30U));
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006594:	009a      	lsls	r2, r3, #2
 8006596:	f640 73fc 	movw	r3, #4092	; 0xffc
 800659a:	4013      	ands	r3, r2
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80065a0:	0f92      	lsrs	r2, r2, #30
 80065a2:	431a      	orrs	r2, r3
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	611a      	str	r2, [r3, #16]

  pCSD->MaxRdCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x38000000U) >> 27U);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065ac:	0edb      	lsrs	r3, r3, #27
 80065ae:	b2db      	uxtb	r3, r3
 80065b0:	f003 0307 	and.w	r3, r3, #7
 80065b4:	b2da      	uxtb	r2, r3
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	751a      	strb	r2, [r3, #20]

  pCSD->MaxRdCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x07000000U) >> 24U);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065be:	0e1b      	lsrs	r3, r3, #24
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	f003 0307 	and.w	r3, r3, #7
 80065c6:	b2da      	uxtb	r2, r3
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	755a      	strb	r2, [r3, #21]

  pCSD->MaxWrCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x00E00000U) >> 21U);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065d0:	0d5b      	lsrs	r3, r3, #21
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	f003 0307 	and.w	r3, r3, #7
 80065d8:	b2da      	uxtb	r2, r3
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	759a      	strb	r2, [r3, #22]

  pCSD->MaxWrCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x001C0000U) >> 18U);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065e2:	0c9b      	lsrs	r3, r3, #18
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	f003 0307 	and.w	r3, r3, #7
 80065ea:	b2da      	uxtb	r2, r3
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	75da      	strb	r2, [r3, #23]

  pCSD->DeviceSizeMul = (uint8_t)((hmmc->CSD[2] & 0x00038000U) >> 15U);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065f4:	0bdb      	lsrs	r3, r3, #15
 80065f6:	b2db      	uxtb	r3, r3
 80065f8:	f003 0307 	and.w	r3, r3, #7
 80065fc:	b2da      	uxtb	r2, r3
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	761a      	strb	r2, [r3, #24]

  hmmc->MmcCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	691b      	ldr	r3, [r3, #16]
 8006606:	1c5a      	adds	r2, r3, #1
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	651a      	str	r2, [r3, #80]	; 0x50
  hmmc->MmcCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	7e1b      	ldrb	r3, [r3, #24]
 8006610:	b2db      	uxtb	r3, r3
 8006612:	f003 0307 	and.w	r3, r3, #7
 8006616:	3302      	adds	r3, #2
 8006618:	2201      	movs	r2, #1
 800661a:	fa02 f303 	lsl.w	r3, r2, r3
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006622:	fb02 f203 	mul.w	r2, r2, r3
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	651a      	str	r2, [r3, #80]	; 0x50
  hmmc->MmcCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	7a1b      	ldrb	r3, [r3, #8]
 800662e:	b2db      	uxtb	r3, r3
 8006630:	f003 030f 	and.w	r3, r3, #15
 8006634:	2201      	movs	r2, #1
 8006636:	409a      	lsls	r2, r3
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	655a      	str	r2, [r3, #84]	; 0x54

  hmmc->MmcCard.LogBlockNbr =  (hmmc->MmcCard.BlockNbr) * ((hmmc->MmcCard.BlockSize) / 512U);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006644:	0a52      	lsrs	r2, r2, #9
 8006646:	fb02 f203 	mul.w	r2, r2, r3
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	659a      	str	r2, [r3, #88]	; 0x58
  hmmc->MmcCard.LogBlockSize = 512U;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006654:	65da      	str	r2, [r3, #92]	; 0x5c
  
  pCSD->EraseGrSize = (uint8_t)((hmmc->CSD[2] & 0x00004000U) >> 14U);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800665a:	0b9b      	lsrs	r3, r3, #14
 800665c:	b2db      	uxtb	r3, r3
 800665e:	f003 0301 	and.w	r3, r3, #1
 8006662:	b2da      	uxtb	r2, r3
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hmmc->CSD[2] & 0x00003F80U) >> 7U);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800666c:	09db      	lsrs	r3, r3, #7
 800666e:	b2db      	uxtb	r3, r3
 8006670:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006674:	b2da      	uxtb	r2, r3
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hmmc->CSD[2] & 0x0000007FU);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800667e:	b2db      	uxtb	r3, r3
 8006680:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006684:	b2da      	uxtb	r2, r3
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hmmc->CSD[3] & 0x80000000U) >> 31U);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800668e:	0fdb      	lsrs	r3, r3, #31
 8006690:	b2da      	uxtb	r2, r3
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hmmc->CSD[3] & 0x60000000U) >> 29U);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800669a:	0f5b      	lsrs	r3, r3, #29
 800669c:	b2db      	uxtb	r3, r3
 800669e:	f003 0303 	and.w	r3, r3, #3
 80066a2:	b2da      	uxtb	r2, r3
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hmmc->CSD[3] & 0x1C000000U) >> 26U);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066ac:	0e9b      	lsrs	r3, r3, #26
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	f003 0307 	and.w	r3, r3, #7
 80066b4:	b2da      	uxtb	r2, r3
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hmmc->CSD[3] & 0x03C00000U) >> 22U);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066be:	0d9b      	lsrs	r3, r3, #22
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	f003 030f 	and.w	r3, r3, #15
 80066c6:	b2da      	uxtb	r2, r3
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hmmc->CSD[3] & 0x00200000U) >> 21U);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066d0:	0d5b      	lsrs	r3, r3, #21
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	f003 0301 	and.w	r3, r3, #1
 80066d8:	b2da      	uxtb	r2, r3
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hmmc->CSD[3] & 0x00010000U) >> 16U);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066ec:	0c1b      	lsrs	r3, r3, #16
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	f003 0301 	and.w	r3, r3, #1
 80066f4:	b2da      	uxtb	r2, r3
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hmmc->CSD[3] & 0x00008000U) >> 15U);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006700:	0bdb      	lsrs	r3, r3, #15
 8006702:	b2db      	uxtb	r3, r3
 8006704:	f003 0301 	and.w	r3, r3, #1
 8006708:	b2da      	uxtb	r2, r3
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hmmc->CSD[3] & 0x00004000U) >> 14U);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006714:	0b9b      	lsrs	r3, r3, #14
 8006716:	b2db      	uxtb	r3, r3
 8006718:	f003 0301 	and.w	r3, r3, #1
 800671c:	b2da      	uxtb	r2, r3
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00002000U) >> 13U);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006728:	0b5b      	lsrs	r3, r3, #13
 800672a:	b2db      	uxtb	r3, r3
 800672c:	f003 0301 	and.w	r3, r3, #1
 8006730:	b2da      	uxtb	r2, r3
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00001000U) >> 12U);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800673c:	0b1b      	lsrs	r3, r3, #12
 800673e:	b2db      	uxtb	r3, r3
 8006740:	f003 0301 	and.w	r3, r3, #1
 8006744:	b2da      	uxtb	r2, r3
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hmmc->CSD[3] & 0x00000C00U) >> 10U);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006750:	0a9b      	lsrs	r3, r3, #10
 8006752:	b2db      	uxtb	r3, r3
 8006754:	f003 0303 	and.w	r3, r3, #3
 8006758:	b2da      	uxtb	r2, r3
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hmmc->CSD[3] & 0x00000300U) >> 8U);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006764:	0a1b      	lsrs	r3, r3, #8
 8006766:	b2db      	uxtb	r3, r3
 8006768:	f003 0303 	and.w	r3, r3, #3
 800676c:	b2da      	uxtb	r2, r3
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hmmc->CSD[3] & 0x000000FEU) >> 1U);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006778:	085b      	lsrs	r3, r3, #1
 800677a:	b2db      	uxtb	r3, r3
 800677c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006780:	b2da      	uxtb	r2, r3
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006790:	2300      	movs	r3, #0
}
 8006792:	4618      	mov	r0, r3
 8006794:	370c      	adds	r7, #12
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr

0800679e <MMC_InitCard>:
  * @brief  Initializes the mmc card.
  * @param  hmmc: Pointer to MMC handle
  * @retval MMC Card error state
  */
static uint32_t MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 800679e:	b5b0      	push	{r4, r5, r7, lr}
 80067a0:	b094      	sub	sp, #80	; 0x50
 80067a2:	af04      	add	r7, sp, #16
 80067a4:	6078      	str	r0, [r7, #4]
  HAL_MMC_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t mmc_rca = 1U;
 80067a6:	2301      	movs	r3, #1
 80067a8:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hmmc->Instance) == 0U)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4618      	mov	r0, r3
 80067b0:	f005 fa29 	bl	800bc06 <SDMMC_GetPowerState>
 80067b4:	4603      	mov	r3, r0
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d102      	bne.n	80067c0 <MMC_InitCard+0x22>
  {
    /* Power off */
    return HAL_MMC_ERROR_REQUEST_NOT_APPLICABLE;
 80067ba:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80067be:	e0aa      	b.n	8006916 <MMC_InitCard+0x178>
  }

  /* Send CMD2 ALL_SEND_CID */
  errorstate = SDMMC_CmdSendCID(hmmc->Instance);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4618      	mov	r0, r3
 80067c6:	f005 fab8 	bl	800bd3a <SDMMC_CmdSendCID>
 80067ca:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_MMC_ERROR_NONE)
 80067cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d001      	beq.n	80067d6 <MMC_InitCard+0x38>
  {
    return errorstate;
 80067d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067d4:	e09f      	b.n	8006916 <MMC_InitCard+0x178>
  }
  else
  {
    /* Get Card identification number data */
    hmmc->CID[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	2100      	movs	r1, #0
 80067dc:	4618      	mov	r0, r3
 80067de:	f005 fa58 	bl	800bc92 <SDMMC_GetResponse>
 80067e2:	4602      	mov	r2, r0
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	671a      	str	r2, [r3, #112]	; 0x70
    hmmc->CID[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	2104      	movs	r1, #4
 80067ee:	4618      	mov	r0, r3
 80067f0:	f005 fa4f 	bl	800bc92 <SDMMC_GetResponse>
 80067f4:	4602      	mov	r2, r0
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	675a      	str	r2, [r3, #116]	; 0x74
    hmmc->CID[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	2108      	movs	r1, #8
 8006800:	4618      	mov	r0, r3
 8006802:	f005 fa46 	bl	800bc92 <SDMMC_GetResponse>
 8006806:	4602      	mov	r2, r0
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	679a      	str	r2, [r3, #120]	; 0x78
    hmmc->CID[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	210c      	movs	r1, #12
 8006812:	4618      	mov	r0, r3
 8006814:	f005 fa3d 	bl	800bc92 <SDMMC_GetResponse>
 8006818:	4602      	mov	r2, r0
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	67da      	str	r2, [r3, #124]	; 0x7c
  }

  /* Send CMD3 SET_REL_ADDR with argument 0 */
  /* MMC Card publishes its RCA. */
  errorstate = SDMMC_CmdSetRelAdd(hmmc->Instance, &mmc_rca);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f107 020e 	add.w	r2, r7, #14
 8006826:	4611      	mov	r1, r2
 8006828:	4618      	mov	r0, r3
 800682a:	f005 fac3 	bl	800bdb4 <SDMMC_CmdSetRelAdd>
 800682e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_MMC_ERROR_NONE)
 8006830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006832:	2b00      	cmp	r3, #0
 8006834:	d001      	beq.n	800683a <MMC_InitCard+0x9c>
  {
    return errorstate;
 8006836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006838:	e06d      	b.n	8006916 <MMC_InitCard+0x178>
  }

  /* Get the MMC card RCA */
  hmmc->MmcCard.RelCardAdd = mmc_rca;
 800683a:	89fb      	ldrh	r3, [r7, #14]
 800683c:	461a      	mov	r2, r3
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Send CMD9 SEND_CSD with argument as card's RCA */
  errorstate = SDMMC_CmdSendCSD(hmmc->Instance, (uint32_t)(hmmc->MmcCard.RelCardAdd << 16U));
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800684a:	041b      	lsls	r3, r3, #16
 800684c:	4619      	mov	r1, r3
 800684e:	4610      	mov	r0, r2
 8006850:	f005 fa91 	bl	800bd76 <SDMMC_CmdSendCSD>
 8006854:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_MMC_ERROR_NONE)
 8006856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006858:	2b00      	cmp	r3, #0
 800685a:	d001      	beq.n	8006860 <MMC_InitCard+0xc2>
  {
    return errorstate;
 800685c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800685e:	e05a      	b.n	8006916 <MMC_InitCard+0x178>
  }
  else
  {
    /* Get Card Specific Data */
    hmmc->CSD[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	2100      	movs	r1, #0
 8006866:	4618      	mov	r0, r3
 8006868:	f005 fa13 	bl	800bc92 <SDMMC_GetResponse>
 800686c:	4602      	mov	r2, r0
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	661a      	str	r2, [r3, #96]	; 0x60
    hmmc->CSD[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	2104      	movs	r1, #4
 8006878:	4618      	mov	r0, r3
 800687a:	f005 fa0a 	bl	800bc92 <SDMMC_GetResponse>
 800687e:	4602      	mov	r2, r0
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	665a      	str	r2, [r3, #100]	; 0x64
    hmmc->CSD[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	2108      	movs	r1, #8
 800688a:	4618      	mov	r0, r3
 800688c:	f005 fa01 	bl	800bc92 <SDMMC_GetResponse>
 8006890:	4602      	mov	r2, r0
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	669a      	str	r2, [r3, #104]	; 0x68
    hmmc->CSD[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	210c      	movs	r1, #12
 800689c:	4618      	mov	r0, r3
 800689e:	f005 f9f8 	bl	800bc92 <SDMMC_GetResponse>
 80068a2:	4602      	mov	r2, r0
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	66da      	str	r2, [r3, #108]	; 0x6c
  }

  /* Get the Card Class */
  hmmc->MmcCard.Class = (SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2) >> 20U);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	2104      	movs	r1, #4
 80068ae:	4618      	mov	r0, r3
 80068b0:	f005 f9ef 	bl	800bc92 <SDMMC_GetResponse>
 80068b4:	4603      	mov	r3, r0
 80068b6:	0d1a      	lsrs	r2, r3, #20
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	649a      	str	r2, [r3, #72]	; 0x48

  /* Get CSD parameters */
  if (HAL_MMC_GetCardCSD(hmmc, &CSD) != HAL_OK)
 80068bc:	f107 0310 	add.w	r3, r7, #16
 80068c0:	4619      	mov	r1, r3
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f7ff fe00 	bl	80064c8 <HAL_MMC_GetCardCSD>
 80068c8:	4603      	mov	r3, r0
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d002      	beq.n	80068d4 <MMC_InitCard+0x136>
  {
    return hmmc->ErrorCode;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d2:	e020      	b.n	8006916 <MMC_InitCard+0x178>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6819      	ldr	r1, [r3, #0]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068dc:	041b      	lsls	r3, r3, #16
 80068de:	f04f 0400 	mov.w	r4, #0
 80068e2:	461a      	mov	r2, r3
 80068e4:	4623      	mov	r3, r4
 80068e6:	4608      	mov	r0, r1
 80068e8:	f005 f9e6 	bl	800bcb8 <SDMMC_CmdSelDesel>
 80068ec:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_MMC_ERROR_NONE)
 80068ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d001      	beq.n	80068f8 <MMC_InitCard+0x15a>
  {
    return errorstate;
 80068f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068f6:	e00e      	b.n	8006916 <MMC_InitCard+0x178>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hmmc->Instance, hmmc->Init);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681d      	ldr	r5, [r3, #0]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	466c      	mov	r4, sp
 8006900:	f103 0210 	add.w	r2, r3, #16
 8006904:	ca07      	ldmia	r2, {r0, r1, r2}
 8006906:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800690a:	3304      	adds	r3, #4
 800690c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800690e:	4628      	mov	r0, r5
 8006910:	f005 f93e 	bl	800bb90 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_MMC_ERROR_NONE;
 8006914:	2300      	movs	r3, #0
}
 8006916:	4618      	mov	r0, r3
 8006918:	3740      	adds	r7, #64	; 0x40
 800691a:	46bd      	mov	sp, r7
 800691c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006920 <MMC_PowerON>:
  *         in the MMC handle.
  * @param  hmmc: Pointer to MMC handle
  * @retval error state
  */
static uint32_t MMC_PowerON(MMC_HandleTypeDef *hmmc)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b086      	sub	sp, #24
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006928:	2300      	movs	r3, #0
 800692a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800692c:	2300      	movs	r3, #0
 800692e:	617b      	str	r3, [r7, #20]
 8006930:	2300      	movs	r3, #0
 8006932:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hmmc->Instance);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4618      	mov	r0, r3
 800693a:	f005 f9e0 	bl	800bcfe <SDMMC_CmdGoIdleState>
 800693e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_MMC_ERROR_NONE)
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d027      	beq.n	8006996 <MMC_PowerON+0x76>
  {
    return errorstate;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	e034      	b.n	80069b4 <MMC_PowerON+0x94>
  }

  while(validvoltage == 0U)
  {
    if(count++ == SDMMC_MAX_VOLT_TRIAL)
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	1c5a      	adds	r2, r3, #1
 800694e:	60ba      	str	r2, [r7, #8]
 8006950:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006954:	4293      	cmp	r3, r2
 8006956:	d102      	bne.n	800695e <MMC_PowerON+0x3e>
    {
      return HAL_MMC_ERROR_INVALID_VOLTRANGE;
 8006958:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800695c:	e02a      	b.n	80069b4 <MMC_PowerON+0x94>
    }

    /* SEND CMD1 APP_CMD with MMC_HIGH_VOLTAGE_RANGE(0xC0FF8000) as argument */
    errorstate = SDMMC_CmdOpCondition(hmmc->Instance, eMMC_HIGH_VOLTAGE_RANGE);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4916      	ldr	r1, [pc, #88]	; (80069bc <MMC_PowerON+0x9c>)
 8006964:	4618      	mov	r0, r3
 8006966:	f005 fa46 	bl	800bdf6 <SDMMC_CmdOpCondition>
 800696a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_MMC_ERROR_NONE)
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d002      	beq.n	8006978 <MMC_PowerON+0x58>
    {
      return HAL_MMC_ERROR_UNSUPPORTED_FEATURE;
 8006972:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006976:	e01d      	b.n	80069b4 <MMC_PowerON+0x94>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	2100      	movs	r1, #0
 800697e:	4618      	mov	r0, r3
 8006980:	f005 f987 	bl	800bc92 <SDMMC_GetResponse>
 8006984:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	0fdb      	lsrs	r3, r3, #31
 800698a:	2b01      	cmp	r3, #1
 800698c:	d101      	bne.n	8006992 <MMC_PowerON+0x72>
 800698e:	2301      	movs	r3, #1
 8006990:	e000      	b.n	8006994 <MMC_PowerON+0x74>
 8006992:	2300      	movs	r3, #0
 8006994:	613b      	str	r3, [r7, #16]
  while(validvoltage == 0U)
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d0d6      	beq.n	800694a <MMC_PowerON+0x2a>
  }

  /* When power routine is finished and command returns valid voltage */
  if (((response & (0xFF000000U)) >> 24U) == 0xC0U)
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	0e1b      	lsrs	r3, r3, #24
 80069a0:	2bc0      	cmp	r3, #192	; 0xc0
 80069a2:	d103      	bne.n	80069ac <MMC_PowerON+0x8c>
  {
    hmmc->MmcCard.CardType = MMC_HIGH_CAPACITY_CARD;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	645a      	str	r2, [r3, #68]	; 0x44
 80069aa:	e002      	b.n	80069b2 <MMC_PowerON+0x92>
  }
  else
  {
    hmmc->MmcCard.CardType = MMC_LOW_CAPACITY_CARD;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2200      	movs	r2, #0
 80069b0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  return HAL_MMC_ERROR_NONE;
 80069b2:	2300      	movs	r3, #0
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3718      	adds	r7, #24
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}
 80069bc:	c0ff8000 	.word	0xc0ff8000

080069c0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80069c0:	b480      	push	{r7}
 80069c2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80069c4:	4b05      	ldr	r3, [pc, #20]	; (80069dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a04      	ldr	r2, [pc, #16]	; (80069dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80069ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069ce:	6013      	str	r3, [r2, #0]
}
 80069d0:	bf00      	nop
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr
 80069da:	bf00      	nop
 80069dc:	40007000 	.word	0x40007000

080069e0 <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pins if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 80069e0:	b480      	push	{r7}
 80069e2:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  PWR->CR1 |= PWR_CR1_PDDS;
 80069e4:	4b08      	ldr	r3, [pc, #32]	; (8006a08 <HAL_PWR_EnterSTANDBYMode+0x28>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a07      	ldr	r2, [pc, #28]	; (8006a08 <HAL_PWR_EnterSTANDBYMode+0x28>)
 80069ea:	f043 0302 	orr.w	r3, r3, #2
 80069ee:	6013      	str	r3, [r2, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 80069f0:	4b06      	ldr	r3, [pc, #24]	; (8006a0c <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80069f2:	691b      	ldr	r3, [r3, #16]
 80069f4:	4a05      	ldr	r2, [pc, #20]	; (8006a0c <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80069f6:	f043 0304 	orr.w	r3, r3, #4
 80069fa:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 80069fc:	bf30      	wfi
}
 80069fe:	bf00      	nop
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr
 8006a08:	40007000 	.word	0x40007000
 8006a0c:	e000ed00 	.word	0xe000ed00

08006a10 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b082      	sub	sp, #8
 8006a14:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006a16:	2300      	movs	r3, #0
 8006a18:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006a1a:	4b23      	ldr	r3, [pc, #140]	; (8006aa8 <HAL_PWREx_EnableOverDrive+0x98>)
 8006a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a1e:	4a22      	ldr	r2, [pc, #136]	; (8006aa8 <HAL_PWREx_EnableOverDrive+0x98>)
 8006a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a24:	6413      	str	r3, [r2, #64]	; 0x40
 8006a26:	4b20      	ldr	r3, [pc, #128]	; (8006aa8 <HAL_PWREx_EnableOverDrive+0x98>)
 8006a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a2e:	603b      	str	r3, [r7, #0]
 8006a30:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006a32:	4b1e      	ldr	r3, [pc, #120]	; (8006aac <HAL_PWREx_EnableOverDrive+0x9c>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a1d      	ldr	r2, [pc, #116]	; (8006aac <HAL_PWREx_EnableOverDrive+0x9c>)
 8006a38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a3c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006a3e:	f7fd fac7 	bl	8003fd0 <HAL_GetTick>
 8006a42:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006a44:	e009      	b.n	8006a5a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006a46:	f7fd fac3 	bl	8003fd0 <HAL_GetTick>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	1ad3      	subs	r3, r2, r3
 8006a50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a54:	d901      	bls.n	8006a5a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006a56:	2303      	movs	r3, #3
 8006a58:	e022      	b.n	8006aa0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006a5a:	4b14      	ldr	r3, [pc, #80]	; (8006aac <HAL_PWREx_EnableOverDrive+0x9c>)
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a66:	d1ee      	bne.n	8006a46 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006a68:	4b10      	ldr	r3, [pc, #64]	; (8006aac <HAL_PWREx_EnableOverDrive+0x9c>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a0f      	ldr	r2, [pc, #60]	; (8006aac <HAL_PWREx_EnableOverDrive+0x9c>)
 8006a6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a72:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006a74:	f7fd faac 	bl	8003fd0 <HAL_GetTick>
 8006a78:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006a7a:	e009      	b.n	8006a90 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006a7c:	f7fd faa8 	bl	8003fd0 <HAL_GetTick>
 8006a80:	4602      	mov	r2, r0
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	1ad3      	subs	r3, r2, r3
 8006a86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a8a:	d901      	bls.n	8006a90 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006a8c:	2303      	movs	r3, #3
 8006a8e:	e007      	b.n	8006aa0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006a90:	4b06      	ldr	r3, [pc, #24]	; (8006aac <HAL_PWREx_EnableOverDrive+0x9c>)
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a9c:	d1ee      	bne.n	8006a7c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006a9e:	2300      	movs	r3, #0
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3708      	adds	r7, #8
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}
 8006aa8:	40023800 	.word	0x40023800
 8006aac:	40007000 	.word	0x40007000

08006ab0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b086      	sub	sp, #24
 8006ab4:	af02      	add	r7, sp, #8
 8006ab6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006ab8:	f7fd fa8a 	bl	8003fd0 <HAL_GetTick>
 8006abc:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d101      	bne.n	8006ac8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	e067      	b.n	8006b98 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ace:	b2db      	uxtb	r3, r3
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d10b      	bne.n	8006aec <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f7fc fc8f 	bl	8003400 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8006ae2:	f241 3188 	movw	r1, #5000	; 0x1388
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 fc6c 	bl	80073c4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	3b01      	subs	r3, #1
 8006afc:	021a      	lsls	r2, r3, #8
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	430a      	orrs	r2, r1
 8006b04:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b0a:	9300      	str	r3, [sp, #0]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	2120      	movs	r1, #32
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f000 fc97 	bl	8007446 <QSPI_WaitFlagStateUntilTimeout>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006b1c:	7afb      	ldrb	r3, [r7, #11]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d135      	bne.n	8006b8e <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	4b1d      	ldr	r3, [pc, #116]	; (8006ba0 <HAL_QSPI_Init+0xf0>)
 8006b2a:	4013      	ands	r3, r2
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	6852      	ldr	r2, [r2, #4]
 8006b30:	0611      	lsls	r1, r2, #24
 8006b32:	687a      	ldr	r2, [r7, #4]
 8006b34:	68d2      	ldr	r2, [r2, #12]
 8006b36:	4311      	orrs	r1, r2
 8006b38:	687a      	ldr	r2, [r7, #4]
 8006b3a:	69d2      	ldr	r2, [r2, #28]
 8006b3c:	4311      	orrs	r1, r2
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	6a12      	ldr	r2, [r2, #32]
 8006b42:	4311      	orrs	r1, r2
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	6812      	ldr	r2, [r2, #0]
 8006b48:	430b      	orrs	r3, r1
 8006b4a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	685a      	ldr	r2, [r3, #4]
 8006b52:	4b14      	ldr	r3, [pc, #80]	; (8006ba4 <HAL_QSPI_Init+0xf4>)
 8006b54:	4013      	ands	r3, r2
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	6912      	ldr	r2, [r2, #16]
 8006b5a:	0411      	lsls	r1, r2, #16
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	6952      	ldr	r2, [r2, #20]
 8006b60:	4311      	orrs	r1, r2
 8006b62:	687a      	ldr	r2, [r7, #4]
 8006b64:	6992      	ldr	r2, [r2, #24]
 8006b66:	4311      	orrs	r1, r2
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	6812      	ldr	r2, [r2, #0]
 8006b6c:	430b      	orrs	r3, r1
 8006b6e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	681a      	ldr	r2, [r3, #0]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f042 0201 	orr.w	r2, r2, #1
 8006b7e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2200      	movs	r2, #0
 8006b84:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2201      	movs	r2, #1
 8006b8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2200      	movs	r2, #0
 8006b92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8006b96:	7afb      	ldrb	r3, [r7, #11]
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3710      	adds	r7, #16
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}
 8006ba0:	00ffff2f 	.word	0x00ffff2f
 8006ba4:	ffe0f8fe 	.word	0xffe0f8fe

08006ba8 <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi : QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b086      	sub	sp, #24
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	f003 0304 	and.w	r3, r3, #4
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d064      	beq.n	8006c94 <HAL_QSPI_IRQHandler+0xec>
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d05f      	beq.n	8006c94 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	3320      	adds	r3, #32
 8006bda:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006be2:	b2db      	uxtb	r3, r3
 8006be4:	2b12      	cmp	r3, #18
 8006be6:	d125      	bne.n	8006c34 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8006be8:	e01c      	b.n	8006c24 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d00f      	beq.n	8006c12 <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf6:	781a      	ldrb	r2, [r3, #0]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c00:	1c5a      	adds	r2, r3, #1
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c0a:	1e5a      	subs	r2, r3, #1
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	62da      	str	r2, [r3, #44]	; 0x2c
 8006c10:	e008      	b.n	8006c24 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006c20:	601a      	str	r2, [r3, #0]
          break;
 8006c22:	e033      	b.n	8006c8c <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	f003 0304 	and.w	r3, r3, #4
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d1db      	bne.n	8006bea <HAL_QSPI_IRQHandler+0x42>
 8006c32:	e02b      	b.n	8006c8c <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c3a:	b2db      	uxtb	r3, r3
 8006c3c:	2b22      	cmp	r3, #34	; 0x22
 8006c3e:	d125      	bne.n	8006c8c <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8006c40:	e01d      	b.n	8006c7e <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d010      	beq.n	8006c6c <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c4e:	68fa      	ldr	r2, [r7, #12]
 8006c50:	7812      	ldrb	r2, [r2, #0]
 8006c52:	b2d2      	uxtb	r2, r2
 8006c54:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c5a:	1c5a      	adds	r2, r3, #1
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c64:	1e5a      	subs	r2, r3, #1
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	639a      	str	r2, [r3, #56]	; 0x38
 8006c6a:	e008      	b.n	8006c7e <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	681a      	ldr	r2, [r3, #0]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006c7a:	601a      	str	r2, [r3, #0]
          break;
 8006c7c:	e006      	b.n	8006c8c <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	f003 0304 	and.w	r3, r3, #4
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d1da      	bne.n	8006c42 <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 fb7b 	bl	8007388 <HAL_QSPI_FifoThresholdCallback>
 8006c92:	e13c      	b.n	8006f0e <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	f003 0302 	and.w	r3, r3, #2
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	f000 80b0 	beq.w	8006e00 <HAL_QSPI_IRQHandler+0x258>
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	f000 80aa 	beq.w	8006e00 <HAL_QSPI_IRQHandler+0x258>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	2202      	movs	r2, #2
 8006cb2:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	681a      	ldr	r2, [r3, #0]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8006cc2:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cca:	b2db      	uxtb	r3, r3
 8006ccc:	2b12      	cmp	r3, #18
 8006cce:	d120      	bne.n	8006d12 <HAL_QSPI_IRQHandler+0x16a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f003 0304 	and.w	r3, r3, #4
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d011      	beq.n	8006d02 <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f022 0204 	bic.w	r2, r2, #4
 8006cec:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	681a      	ldr	r2, [r3, #0]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f022 0201 	bic.w	r2, r2, #1
 8006d00:	601a      	str	r2, [r3, #0]
      /* Clear Busy bit */
      HAL_QSPI_Abort_IT(hqspi);
#endif

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2201      	movs	r2, #1
 8006d06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f000 fb32 	bl	8007374 <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8006d10:	e0fa      	b.n	8006f08 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d18:	b2db      	uxtb	r3, r3
 8006d1a:	2b22      	cmp	r3, #34	; 0x22
 8006d1c:	d143      	bne.n	8006da6 <HAL_QSPI_IRQHandler+0x1fe>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f003 0304 	and.w	r3, r3, #4
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d012      	beq.n	8006d52 <HAL_QSPI_IRQHandler+0x1aa>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f022 0204 	bic.w	r2, r2, #4
 8006d3a:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f022 0201 	bic.w	r2, r2, #1
 8006d4e:	601a      	str	r2, [r3, #0]
 8006d50:	e021      	b.n	8006d96 <HAL_QSPI_IRQHandler+0x1ee>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	3320      	adds	r3, #32
 8006d58:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 8006d5a:	e013      	b.n	8006d84 <HAL_QSPI_IRQHandler+0x1dc>
        {
          if (hqspi->RxXferCount > 0U)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d017      	beq.n	8006d94 <HAL_QSPI_IRQHandler+0x1ec>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d68:	68fa      	ldr	r2, [r7, #12]
 8006d6a:	7812      	ldrb	r2, [r2, #0]
 8006d6c:	b2d2      	uxtb	r2, r2
 8006d6e:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d74:	1c5a      	adds	r2, r3, #1
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d7e:	1e5a      	subs	r2, r3, #1
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d1e4      	bne.n	8006d5c <HAL_QSPI_IRQHandler+0x1b4>
 8006d92:	e000      	b.n	8006d96 <HAL_QSPI_IRQHandler+0x1ee>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 8006d94:	bf00      	nop
      /* Workaround - Extra data written in the FIFO at the end of a read transfer */
      HAL_QSPI_Abort_IT(hqspi);
#endif

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2201      	movs	r2, #1
 8006d9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 fade 	bl	8007360 <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8006da4:	e0b0      	b.n	8006f08 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	2b02      	cmp	r3, #2
 8006db0:	d107      	bne.n	8006dc2 <HAL_QSPI_IRQHandler+0x21a>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2201      	movs	r2, #1
 8006db6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f000 fac6 	bl	800734c <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8006dc0:	e0a2      	b.n	8006f08 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006dc8:	b2db      	uxtb	r3, r3
 8006dca:	2b08      	cmp	r3, #8
 8006dcc:	f040 809c 	bne.w	8006f08 <HAL_QSPI_IRQHandler+0x360>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	695a      	ldr	r2, [r3, #20]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8006dde:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2201      	movs	r2, #1
 8006de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d103      	bne.n	8006df8 <HAL_QSPI_IRQHandler+0x250>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f000 faa1 	bl	8007338 <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8006df6:	e087      	b.n	8006f08 <HAL_QSPI_IRQHandler+0x360>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f000 fa93 	bl	8007324 <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8006dfe:	e083      	b.n	8006f08 <HAL_QSPI_IRQHandler+0x360>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	f003 0308 	and.w	r3, r3, #8
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d01f      	beq.n	8006e4a <HAL_QSPI_IRQHandler+0x2a2>
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d01a      	beq.n	8006e4a <HAL_QSPI_IRQHandler+0x2a2>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	2208      	movs	r2, #8
 8006e1a:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d00b      	beq.n	8006e42 <HAL_QSPI_IRQHandler+0x29a>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	681a      	ldr	r2, [r3, #0]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8006e38:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2201      	movs	r2, #1
 8006e3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f000 faaa 	bl	800739c <HAL_QSPI_StatusMatchCallback>
 8006e48:	e061      	b.n	8006f0e <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	f003 0301 	and.w	r3, r3, #1
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d047      	beq.n	8006ee4 <HAL_QSPI_IRQHandler+0x33c>
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d042      	beq.n	8006ee4 <HAL_QSPI_IRQHandler+0x33c>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	2201      	movs	r2, #1
 8006e64:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	681a      	ldr	r2, [r3, #0]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8006e74:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e7a:	f043 0202 	orr.w	r2, r3, #2
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f003 0304 	and.w	r3, r3, #4
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d021      	beq.n	8006ed4 <HAL_QSPI_IRQHandler+0x32c>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f022 0204 	bic.w	r2, r2, #4
 8006e9e:	601a      	str	r2, [r3, #0]

      /* Disable the DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ea4:	4a1c      	ldr	r2, [pc, #112]	; (8006f18 <HAL_QSPI_IRQHandler+0x370>)
 8006ea6:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eac:	4618      	mov	r0, r3
 8006eae:	f7fd ff9b 	bl	8004de8 <HAL_DMA_Abort_IT>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d029      	beq.n	8006f0c <HAL_QSPI_IRQHandler+0x364>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ebc:	f043 0204 	orr.w	r2, r3, #4
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        
        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f000 fa29 	bl	8007324 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8006ed2:	e01b      	b.n	8006f0c <HAL_QSPI_IRQHandler+0x364>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f000 fa21 	bl	8007324 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8006ee2:	e013      	b.n	8006f0c <HAL_QSPI_IRQHandler+0x364>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	f003 0310 	and.w	r3, r3, #16
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d00f      	beq.n	8006f0e <HAL_QSPI_IRQHandler+0x366>
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d00a      	beq.n	8006f0e <HAL_QSPI_IRQHandler+0x366>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	2210      	movs	r2, #16
 8006efe:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f000 fa55 	bl	80073b0 <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 8006f06:	e002      	b.n	8006f0e <HAL_QSPI_IRQHandler+0x366>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8006f08:	bf00      	nop
 8006f0a:	e000      	b.n	8006f0e <HAL_QSPI_IRQHandler+0x366>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8006f0c:	bf00      	nop
}
 8006f0e:	bf00      	nop
 8006f10:	3718      	adds	r7, #24
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}
 8006f16:	bf00      	nop
 8006f18:	080073e1 	.word	0x080073e1

08006f1c <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b088      	sub	sp, #32
 8006f20:	af02      	add	r7, sp, #8
 8006f22:	60f8      	str	r0, [r7, #12]
 8006f24:	60b9      	str	r1, [r7, #8]
 8006f26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006f28:	f7fd f852 	bl	8003fd0 <HAL_GetTick>
 8006f2c:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006f34:	b2db      	uxtb	r3, r3
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	d101      	bne.n	8006f3e <HAL_QSPI_Command+0x22>
 8006f3a:	2302      	movs	r3, #2
 8006f3c:	e048      	b.n	8006fd0 <HAL_QSPI_Command+0xb4>
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2201      	movs	r2, #1
 8006f42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f4c:	b2db      	uxtb	r3, r3
 8006f4e:	2b01      	cmp	r3, #1
 8006f50:	d137      	bne.n	8006fc2 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2200      	movs	r2, #0
 8006f56:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2202      	movs	r2, #2
 8006f5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	9300      	str	r3, [sp, #0]
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	2200      	movs	r2, #0
 8006f68:	2120      	movs	r1, #32
 8006f6a:	68f8      	ldr	r0, [r7, #12]
 8006f6c:	f000 fa6b 	bl	8007446 <QSPI_WaitFlagStateUntilTimeout>
 8006f70:	4603      	mov	r3, r0
 8006f72:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8006f74:	7dfb      	ldrb	r3, [r7, #23]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d125      	bne.n	8006fc6 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	68b9      	ldr	r1, [r7, #8]
 8006f7e:	68f8      	ldr	r0, [r7, #12]
 8006f80:	f000 fa98 	bl	80074b4 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d115      	bne.n	8006fb8 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	9300      	str	r3, [sp, #0]
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	2201      	movs	r2, #1
 8006f94:	2102      	movs	r1, #2
 8006f96:	68f8      	ldr	r0, [r7, #12]
 8006f98:	f000 fa55 	bl	8007446 <QSPI_WaitFlagStateUntilTimeout>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8006fa0:	7dfb      	ldrb	r3, [r7, #23]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d10f      	bne.n	8006fc6 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	2202      	movs	r2, #2
 8006fac:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006fb6:	e006      	b.n	8006fc6 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006fc0:	e001      	b.n	8006fc6 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8006fc2:	2302      	movs	r3, #2
 8006fc4:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8006fce:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3718      	adds	r7, #24
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}

08006fd8 <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b08a      	sub	sp, #40	; 0x28
 8006fdc:	af02      	add	r7, sp, #8
 8006fde:	60f8      	str	r0, [r7, #12]
 8006fe0:	60b9      	str	r1, [r7, #8]
 8006fe2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8006fe8:	f7fc fff2 	bl	8003fd0 <HAL_GetTick>
 8006fec:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	3320      	adds	r3, #32
 8006ff4:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006ffc:	b2db      	uxtb	r3, r3
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d101      	bne.n	8007006 <HAL_QSPI_Transmit+0x2e>
 8007002:	2302      	movs	r3, #2
 8007004:	e076      	b.n	80070f4 <HAL_QSPI_Transmit+0x11c>
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2201      	movs	r2, #1
 800700a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007014:	b2db      	uxtb	r3, r3
 8007016:	2b01      	cmp	r3, #1
 8007018:	d165      	bne.n	80070e6 <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2200      	movs	r2, #0
 800701e:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d056      	beq.n	80070d4 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2212      	movs	r2, #18
 800702a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	691b      	ldr	r3, [r3, #16]
 8007034:	1c5a      	adds	r2, r3, #1
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	691b      	ldr	r3, [r3, #16]
 8007040:	1c5a      	adds	r2, r3, #1
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	68ba      	ldr	r2, [r7, #8]
 800704a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	695a      	ldr	r2, [r3, #20]
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800705a:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800705c:	e01b      	b.n	8007096 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	9300      	str	r3, [sp, #0]
 8007062:	69bb      	ldr	r3, [r7, #24]
 8007064:	2201      	movs	r2, #1
 8007066:	2104      	movs	r1, #4
 8007068:	68f8      	ldr	r0, [r7, #12]
 800706a:	f000 f9ec 	bl	8007446 <QSPI_WaitFlagStateUntilTimeout>
 800706e:	4603      	mov	r3, r0
 8007070:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8007072:	7ffb      	ldrb	r3, [r7, #31]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d113      	bne.n	80070a0 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800707c:	781a      	ldrb	r2, [r3, #0]
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007086:	1c5a      	adds	r2, r3, #1
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007090:	1e5a      	subs	r2, r3, #1
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800709a:	2b00      	cmp	r3, #0
 800709c:	d1df      	bne.n	800705e <HAL_QSPI_Transmit+0x86>
 800709e:	e000      	b.n	80070a2 <HAL_QSPI_Transmit+0xca>
          break;
 80070a0:	bf00      	nop
      }

      if (status == HAL_OK)
 80070a2:	7ffb      	ldrb	r3, [r7, #31]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d110      	bne.n	80070ca <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	9300      	str	r3, [sp, #0]
 80070ac:	69bb      	ldr	r3, [r7, #24]
 80070ae:	2201      	movs	r2, #1
 80070b0:	2102      	movs	r1, #2
 80070b2:	68f8      	ldr	r0, [r7, #12]
 80070b4:	f000 f9c7 	bl	8007446 <QSPI_WaitFlagStateUntilTimeout>
 80070b8:	4603      	mov	r3, r0
 80070ba:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 80070bc:	7ffb      	ldrb	r3, [r7, #31]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d103      	bne.n	80070ca <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	2202      	movs	r2, #2
 80070c8:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2201      	movs	r2, #1
 80070ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80070d2:	e00a      	b.n	80070ea <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070d8:	f043 0208 	orr.w	r2, r3, #8
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 80070e0:	2301      	movs	r3, #1
 80070e2:	77fb      	strb	r3, [r7, #31]
 80070e4:	e001      	b.n	80070ea <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 80070e6:	2302      	movs	r3, #2
 80070e8:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2200      	movs	r2, #0
 80070ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 80070f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3720      	adds	r7, #32
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b08a      	sub	sp, #40	; 0x28
 8007100:	af02      	add	r7, sp, #8
 8007102:	60f8      	str	r0, [r7, #12]
 8007104:	60b9      	str	r1, [r7, #8]
 8007106:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007108:	2300      	movs	r3, #0
 800710a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800710c:	f7fc ff60 	bl	8003fd0 <HAL_GetTick>
 8007110:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	699b      	ldr	r3, [r3, #24]
 8007118:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	3320      	adds	r3, #32
 8007120:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007128:	b2db      	uxtb	r3, r3
 800712a:	2b01      	cmp	r3, #1
 800712c:	d101      	bne.n	8007132 <HAL_QSPI_Receive+0x36>
 800712e:	2302      	movs	r3, #2
 8007130:	e07d      	b.n	800722e <HAL_QSPI_Receive+0x132>
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2201      	movs	r2, #1
 8007136:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007140:	b2db      	uxtb	r3, r3
 8007142:	2b01      	cmp	r3, #1
 8007144:	d16c      	bne.n	8007220 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2200      	movs	r2, #0
 800714a:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d05d      	beq.n	800720e <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2222      	movs	r2, #34	; 0x22
 8007156:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	691b      	ldr	r3, [r3, #16]
 8007160:	1c5a      	adds	r2, r3, #1
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	691b      	ldr	r3, [r3, #16]
 800716c:	1c5a      	adds	r2, r3, #1
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	68ba      	ldr	r2, [r7, #8]
 8007176:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	695b      	ldr	r3, [r3, #20]
 800717e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800718a:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	697a      	ldr	r2, [r7, #20]
 8007192:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8007194:	e01c      	b.n	80071d0 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	9300      	str	r3, [sp, #0]
 800719a:	69bb      	ldr	r3, [r7, #24]
 800719c:	2201      	movs	r2, #1
 800719e:	2106      	movs	r1, #6
 80071a0:	68f8      	ldr	r0, [r7, #12]
 80071a2:	f000 f950 	bl	8007446 <QSPI_WaitFlagStateUntilTimeout>
 80071a6:	4603      	mov	r3, r0
 80071a8:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 80071aa:	7ffb      	ldrb	r3, [r7, #31]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d114      	bne.n	80071da <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071b4:	693a      	ldr	r2, [r7, #16]
 80071b6:	7812      	ldrb	r2, [r2, #0]
 80071b8:	b2d2      	uxtb	r2, r2
 80071ba:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071c0:	1c5a      	adds	r2, r3, #1
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ca:	1e5a      	subs	r2, r3, #1
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d1de      	bne.n	8007196 <HAL_QSPI_Receive+0x9a>
 80071d8:	e000      	b.n	80071dc <HAL_QSPI_Receive+0xe0>
          break;
 80071da:	bf00      	nop
      }

      if (status == HAL_OK)
 80071dc:	7ffb      	ldrb	r3, [r7, #31]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d110      	bne.n	8007204 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	9300      	str	r3, [sp, #0]
 80071e6:	69bb      	ldr	r3, [r7, #24]
 80071e8:	2201      	movs	r2, #1
 80071ea:	2102      	movs	r1, #2
 80071ec:	68f8      	ldr	r0, [r7, #12]
 80071ee:	f000 f92a 	bl	8007446 <QSPI_WaitFlagStateUntilTimeout>
 80071f2:	4603      	mov	r3, r0
 80071f4:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 80071f6:	7ffb      	ldrb	r3, [r7, #31]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d103      	bne.n	8007204 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	2202      	movs	r2, #2
 8007202:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2201      	movs	r2, #1
 8007208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800720c:	e00a      	b.n	8007224 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007212:	f043 0208 	orr.w	r2, r3, #8
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800721a:	2301      	movs	r3, #1
 800721c:	77fb      	strb	r3, [r7, #31]
 800721e:	e001      	b.n	8007224 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 8007220:	2302      	movs	r3, #2
 8007222:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2200      	movs	r2, #0
 8007228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800722c:	7ffb      	ldrb	r3, [r7, #31]
}
 800722e:	4618      	mov	r0, r3
 8007230:	3720      	adds	r7, #32
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}

08007236 <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8007236:	b580      	push	{r7, lr}
 8007238:	b088      	sub	sp, #32
 800723a:	af02      	add	r7, sp, #8
 800723c:	60f8      	str	r0, [r7, #12]
 800723e:	60b9      	str	r1, [r7, #8]
 8007240:	607a      	str	r2, [r7, #4]
 8007242:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8007244:	f7fc fec4 	bl	8003fd0 <HAL_GetTick>
 8007248:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007250:	b2db      	uxtb	r3, r3
 8007252:	2b01      	cmp	r3, #1
 8007254:	d101      	bne.n	800725a <HAL_QSPI_AutoPolling+0x24>
 8007256:	2302      	movs	r3, #2
 8007258:	e060      	b.n	800731c <HAL_QSPI_AutoPolling+0xe6>
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2201      	movs	r2, #1
 800725e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007268:	b2db      	uxtb	r3, r3
 800726a:	2b01      	cmp	r3, #1
 800726c:	d14f      	bne.n	800730e <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2200      	movs	r2, #0
 8007272:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2242      	movs	r2, #66	; 0x42
 8007278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	9300      	str	r3, [sp, #0]
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	2200      	movs	r2, #0
 8007284:	2120      	movs	r1, #32
 8007286:	68f8      	ldr	r0, [r7, #12]
 8007288:	f000 f8dd 	bl	8007446 <QSPI_WaitFlagStateUntilTimeout>
 800728c:	4603      	mov	r3, r0
 800728e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8007290:	7dfb      	ldrb	r3, [r7, #23]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d13d      	bne.n	8007312 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	687a      	ldr	r2, [r7, #4]
 800729c:	6812      	ldr	r2, [r2, #0]
 800729e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	6852      	ldr	r2, [r2, #4]
 80072a8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	687a      	ldr	r2, [r7, #4]
 80072b0:	6892      	ldr	r2, [r2, #8]
 80072b2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	691b      	ldr	r3, [r3, #16]
 80072c2:	431a      	orrs	r2, r3
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80072cc:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	68da      	ldr	r2, [r3, #12]
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 80072d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80072da:	68b9      	ldr	r1, [r7, #8]
 80072dc:	68f8      	ldr	r0, [r7, #12]
 80072de:	f000 f8e9 	bl	80074b4 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	9300      	str	r3, [sp, #0]
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	2201      	movs	r2, #1
 80072ea:	2108      	movs	r1, #8
 80072ec:	68f8      	ldr	r0, [r7, #12]
 80072ee:	f000 f8aa 	bl	8007446 <QSPI_WaitFlagStateUntilTimeout>
 80072f2:	4603      	mov	r3, r0
 80072f4:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 80072f6:	7dfb      	ldrb	r3, [r7, #23]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d10a      	bne.n	8007312 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	2208      	movs	r2, #8
 8007302:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2201      	movs	r2, #1
 8007308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800730c:	e001      	b.n	8007312 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800730e:	2302      	movs	r3, #2
 8007310:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2200      	movs	r2, #0
 8007316:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800731a:	7dfb      	ldrb	r3, [r7, #23]
}
 800731c:	4618      	mov	r0, r3
 800731e:	3718      	adds	r7, #24
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}

08007324 <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 8007324:	b480      	push	{r7}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 800732c:	bf00      	nop
 800732e:	370c      	adds	r7, #12
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr

08007338 <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8007338:	b480      	push	{r7}
 800733a:	b083      	sub	sp, #12
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 8007340:	bf00      	nop
 8007342:	370c      	adds	r7, #12
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr

0800734c <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800734c:	b480      	push	{r7}
 800734e:	b083      	sub	sp, #12
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 8007354:	bf00      	nop
 8007356:	370c      	adds	r7, #12
 8007358:	46bd      	mov	sp, r7
 800735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735e:	4770      	bx	lr

08007360 <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8007360:	b480      	push	{r7}
 8007362:	b083      	sub	sp, #12
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 8007368:	bf00      	nop
 800736a:	370c      	adds	r7, #12
 800736c:	46bd      	mov	sp, r7
 800736e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007372:	4770      	bx	lr

08007374 <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8007374:	b480      	push	{r7}
 8007376:	b083      	sub	sp, #12
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
 800737c:	bf00      	nop
 800737e:	370c      	adds	r7, #12
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr

08007388 <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 8007388:	b480      	push	{r7}
 800738a:	b083      	sub	sp, #12
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 8007390:	bf00      	nop
 8007392:	370c      	adds	r7, #12
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr

0800739c <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 800739c:	b480      	push	{r7}
 800739e:	b083      	sub	sp, #12
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 80073a4:	bf00      	nop
 80073a6:	370c      	adds	r7, #12
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr

080073b0 <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b083      	sub	sp, #12
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 80073b8:	bf00      	nop
 80073ba:	370c      	adds	r7, #12
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr

080073c4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b083      	sub	sp, #12
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	683a      	ldr	r2, [r7, #0]
 80073d2:	649a      	str	r2, [r3, #72]	; 0x48
}
 80073d4:	bf00      	nop
 80073d6:	370c      	adds	r7, #12
 80073d8:	46bd      	mov	sp, r7
 80073da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073de:	4770      	bx	lr

080073e0 <QSPI_DMAAbortCplt>:
  * @brief  DMA QSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(DMA_HandleTypeDef *hdma)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b084      	sub	sp, #16
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hdma->Parent);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ec:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2200      	movs	r2, #0
 80073f2:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2200      	movs	r2, #0
 80073f8:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007400:	b2db      	uxtb	r3, r3
 8007402:	2b08      	cmp	r3, #8
 8007404:	d114      	bne.n	8007430 <QSPI_DMAAbortCplt+0x50>
  {
    /* DMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	2202      	movs	r2, #2
 800740c:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800741c:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	681a      	ldr	r2, [r3, #0]
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f042 0202 	orr.w	r2, r2, #2
 800742c:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 800742e:	e006      	b.n	800743e <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2201      	movs	r2, #1
 8007434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 8007438:	68f8      	ldr	r0, [r7, #12]
 800743a:	f7ff ff73 	bl	8007324 <HAL_QSPI_ErrorCallback>
}
 800743e:	bf00      	nop
 8007440:	3710      	adds	r7, #16
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}

08007446 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8007446:	b580      	push	{r7, lr}
 8007448:	b084      	sub	sp, #16
 800744a:	af00      	add	r7, sp, #0
 800744c:	60f8      	str	r0, [r7, #12]
 800744e:	60b9      	str	r1, [r7, #8]
 8007450:	603b      	str	r3, [r7, #0]
 8007452:	4613      	mov	r3, r2
 8007454:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007456:	e01a      	b.n	800748e <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007458:	69bb      	ldr	r3, [r7, #24]
 800745a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800745e:	d016      	beq.n	800748e <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007460:	f7fc fdb6 	bl	8003fd0 <HAL_GetTick>
 8007464:	4602      	mov	r2, r0
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	1ad3      	subs	r3, r2, r3
 800746a:	69ba      	ldr	r2, [r7, #24]
 800746c:	429a      	cmp	r2, r3
 800746e:	d302      	bcc.n	8007476 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8007470:	69bb      	ldr	r3, [r7, #24]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d10b      	bne.n	800748e <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2204      	movs	r2, #4
 800747a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007482:	f043 0201 	orr.w	r2, r3, #1
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800748a:	2301      	movs	r3, #1
 800748c:	e00e      	b.n	80074ac <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	689a      	ldr	r2, [r3, #8]
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	4013      	ands	r3, r2
 8007498:	2b00      	cmp	r3, #0
 800749a:	bf14      	ite	ne
 800749c:	2301      	movne	r3, #1
 800749e:	2300      	moveq	r3, #0
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	461a      	mov	r2, r3
 80074a4:	79fb      	ldrb	r3, [r7, #7]
 80074a6:	429a      	cmp	r2, r3
 80074a8:	d1d6      	bne.n	8007458 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80074aa:	2300      	movs	r3, #0
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3710      	adds	r7, #16
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}

080074b4 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b085      	sub	sp, #20
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	60f8      	str	r0, [r7, #12]
 80074bc:	60b9      	str	r1, [r7, #8]
 80074be:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d009      	beq.n	80074dc <QSPI_Config+0x28>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80074ce:	d005      	beq.n	80074dc <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	3a01      	subs	r2, #1
 80074da:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	699b      	ldr	r3, [r3, #24]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	f000 80b9 	beq.w	8007658 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	6a1b      	ldr	r3, [r3, #32]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d05f      	beq.n	80075ae <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	68ba      	ldr	r2, [r7, #8]
 80074f4:	6892      	ldr	r2, [r2, #8]
 80074f6:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	69db      	ldr	r3, [r3, #28]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d031      	beq.n	8007564 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007508:	431a      	orrs	r2, r3
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800750e:	431a      	orrs	r2, r3
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007514:	431a      	orrs	r2, r3
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	695b      	ldr	r3, [r3, #20]
 800751a:	049b      	lsls	r3, r3, #18
 800751c:	431a      	orrs	r2, r3
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	691b      	ldr	r3, [r3, #16]
 8007522:	431a      	orrs	r2, r3
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	6a1b      	ldr	r3, [r3, #32]
 8007528:	431a      	orrs	r2, r3
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	68db      	ldr	r3, [r3, #12]
 800752e:	431a      	orrs	r2, r3
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	69db      	ldr	r3, [r3, #28]
 8007534:	431a      	orrs	r2, r3
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	699b      	ldr	r3, [r3, #24]
 800753a:	431a      	orrs	r2, r3
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	ea42 0103 	orr.w	r1, r2, r3
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	687a      	ldr	r2, [r7, #4]
 800754a:	430a      	orrs	r2, r1
 800754c:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007554:	f000 812e 	beq.w	80077b4 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	68ba      	ldr	r2, [r7, #8]
 800755e:	6852      	ldr	r2, [r2, #4]
 8007560:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8007562:	e127      	b.n	80077b4 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800756c:	431a      	orrs	r2, r3
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007572:	431a      	orrs	r2, r3
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007578:	431a      	orrs	r2, r3
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	695b      	ldr	r3, [r3, #20]
 800757e:	049b      	lsls	r3, r3, #18
 8007580:	431a      	orrs	r2, r3
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	691b      	ldr	r3, [r3, #16]
 8007586:	431a      	orrs	r2, r3
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	6a1b      	ldr	r3, [r3, #32]
 800758c:	431a      	orrs	r2, r3
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	69db      	ldr	r3, [r3, #28]
 8007592:	431a      	orrs	r2, r3
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	699b      	ldr	r3, [r3, #24]
 8007598:	431a      	orrs	r2, r3
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	ea42 0103 	orr.w	r1, r2, r3
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	687a      	ldr	r2, [r7, #4]
 80075a8:	430a      	orrs	r2, r1
 80075aa:	615a      	str	r2, [r3, #20]
}
 80075ac:	e102      	b.n	80077b4 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	69db      	ldr	r3, [r3, #28]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d02e      	beq.n	8007614 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075be:	431a      	orrs	r2, r3
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075c4:	431a      	orrs	r2, r3
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ca:	431a      	orrs	r2, r3
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	695b      	ldr	r3, [r3, #20]
 80075d0:	049b      	lsls	r3, r3, #18
 80075d2:	431a      	orrs	r2, r3
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	6a1b      	ldr	r3, [r3, #32]
 80075d8:	431a      	orrs	r2, r3
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	68db      	ldr	r3, [r3, #12]
 80075de:	431a      	orrs	r2, r3
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	69db      	ldr	r3, [r3, #28]
 80075e4:	431a      	orrs	r2, r3
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	699b      	ldr	r3, [r3, #24]
 80075ea:	431a      	orrs	r2, r3
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	ea42 0103 	orr.w	r1, r2, r3
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	687a      	ldr	r2, [r7, #4]
 80075fa:	430a      	orrs	r2, r1
 80075fc:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007604:	f000 80d6 	beq.w	80077b4 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	68ba      	ldr	r2, [r7, #8]
 800760e:	6852      	ldr	r2, [r2, #4]
 8007610:	619a      	str	r2, [r3, #24]
}
 8007612:	e0cf      	b.n	80077b4 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800761c:	431a      	orrs	r2, r3
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007622:	431a      	orrs	r2, r3
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007628:	431a      	orrs	r2, r3
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	695b      	ldr	r3, [r3, #20]
 800762e:	049b      	lsls	r3, r3, #18
 8007630:	431a      	orrs	r2, r3
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	6a1b      	ldr	r3, [r3, #32]
 8007636:	431a      	orrs	r2, r3
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	69db      	ldr	r3, [r3, #28]
 800763c:	431a      	orrs	r2, r3
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	699b      	ldr	r3, [r3, #24]
 8007642:	431a      	orrs	r2, r3
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	ea42 0103 	orr.w	r1, r2, r3
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	430a      	orrs	r2, r1
 8007654:	615a      	str	r2, [r3, #20]
}
 8007656:	e0ad      	b.n	80077b4 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	6a1b      	ldr	r3, [r3, #32]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d058      	beq.n	8007712 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	68ba      	ldr	r2, [r7, #8]
 8007666:	6892      	ldr	r2, [r2, #8]
 8007668:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	69db      	ldr	r3, [r3, #28]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d02d      	beq.n	80076ce <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800767a:	431a      	orrs	r2, r3
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007680:	431a      	orrs	r2, r3
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007686:	431a      	orrs	r2, r3
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	695b      	ldr	r3, [r3, #20]
 800768c:	049b      	lsls	r3, r3, #18
 800768e:	431a      	orrs	r2, r3
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	691b      	ldr	r3, [r3, #16]
 8007694:	431a      	orrs	r2, r3
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	6a1b      	ldr	r3, [r3, #32]
 800769a:	431a      	orrs	r2, r3
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	68db      	ldr	r3, [r3, #12]
 80076a0:	431a      	orrs	r2, r3
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	69db      	ldr	r3, [r3, #28]
 80076a6:	431a      	orrs	r2, r3
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	699b      	ldr	r3, [r3, #24]
 80076ac:	ea42 0103 	orr.w	r1, r2, r3
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	687a      	ldr	r2, [r7, #4]
 80076b6:	430a      	orrs	r2, r1
 80076b8:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80076c0:	d078      	beq.n	80077b4 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	68ba      	ldr	r2, [r7, #8]
 80076c8:	6852      	ldr	r2, [r2, #4]
 80076ca:	619a      	str	r2, [r3, #24]
}
 80076cc:	e072      	b.n	80077b4 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076d6:	431a      	orrs	r2, r3
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076dc:	431a      	orrs	r2, r3
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e2:	431a      	orrs	r2, r3
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	695b      	ldr	r3, [r3, #20]
 80076e8:	049b      	lsls	r3, r3, #18
 80076ea:	431a      	orrs	r2, r3
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	691b      	ldr	r3, [r3, #16]
 80076f0:	431a      	orrs	r2, r3
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	6a1b      	ldr	r3, [r3, #32]
 80076f6:	431a      	orrs	r2, r3
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	69db      	ldr	r3, [r3, #28]
 80076fc:	431a      	orrs	r2, r3
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	699b      	ldr	r3, [r3, #24]
 8007702:	ea42 0103 	orr.w	r1, r2, r3
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	687a      	ldr	r2, [r7, #4]
 800770c:	430a      	orrs	r2, r1
 800770e:	615a      	str	r2, [r3, #20]
}
 8007710:	e050      	b.n	80077b4 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	69db      	ldr	r3, [r3, #28]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d02a      	beq.n	8007770 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007722:	431a      	orrs	r2, r3
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007728:	431a      	orrs	r2, r3
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800772e:	431a      	orrs	r2, r3
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	695b      	ldr	r3, [r3, #20]
 8007734:	049b      	lsls	r3, r3, #18
 8007736:	431a      	orrs	r2, r3
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	6a1b      	ldr	r3, [r3, #32]
 800773c:	431a      	orrs	r2, r3
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	68db      	ldr	r3, [r3, #12]
 8007742:	431a      	orrs	r2, r3
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	69db      	ldr	r3, [r3, #28]
 8007748:	431a      	orrs	r2, r3
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	699b      	ldr	r3, [r3, #24]
 800774e:	ea42 0103 	orr.w	r1, r2, r3
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	687a      	ldr	r2, [r7, #4]
 8007758:	430a      	orrs	r2, r1
 800775a:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007762:	d027      	beq.n	80077b4 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	68ba      	ldr	r2, [r7, #8]
 800776a:	6852      	ldr	r2, [r2, #4]
 800776c:	619a      	str	r2, [r3, #24]
}
 800776e:	e021      	b.n	80077b4 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007774:	2b00      	cmp	r3, #0
 8007776:	d01d      	beq.n	80077b4 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007780:	431a      	orrs	r2, r3
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007786:	431a      	orrs	r2, r3
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800778c:	431a      	orrs	r2, r3
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	695b      	ldr	r3, [r3, #20]
 8007792:	049b      	lsls	r3, r3, #18
 8007794:	431a      	orrs	r2, r3
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	6a1b      	ldr	r3, [r3, #32]
 800779a:	431a      	orrs	r2, r3
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	69db      	ldr	r3, [r3, #28]
 80077a0:	431a      	orrs	r2, r3
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	699b      	ldr	r3, [r3, #24]
 80077a6:	ea42 0103 	orr.w	r1, r2, r3
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	687a      	ldr	r2, [r7, #4]
 80077b0:	430a      	orrs	r2, r1
 80077b2:	615a      	str	r2, [r3, #20]
}
 80077b4:	bf00      	nop
 80077b6:	3714      	adds	r7, #20
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr

080077c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b086      	sub	sp, #24
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80077c8:	2300      	movs	r3, #0
 80077ca:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d101      	bne.n	80077d6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80077d2:	2301      	movs	r3, #1
 80077d4:	e29b      	b.n	8007d0e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f003 0301 	and.w	r3, r3, #1
 80077de:	2b00      	cmp	r3, #0
 80077e0:	f000 8087 	beq.w	80078f2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80077e4:	4b96      	ldr	r3, [pc, #600]	; (8007a40 <HAL_RCC_OscConfig+0x280>)
 80077e6:	689b      	ldr	r3, [r3, #8]
 80077e8:	f003 030c 	and.w	r3, r3, #12
 80077ec:	2b04      	cmp	r3, #4
 80077ee:	d00c      	beq.n	800780a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80077f0:	4b93      	ldr	r3, [pc, #588]	; (8007a40 <HAL_RCC_OscConfig+0x280>)
 80077f2:	689b      	ldr	r3, [r3, #8]
 80077f4:	f003 030c 	and.w	r3, r3, #12
 80077f8:	2b08      	cmp	r3, #8
 80077fa:	d112      	bne.n	8007822 <HAL_RCC_OscConfig+0x62>
 80077fc:	4b90      	ldr	r3, [pc, #576]	; (8007a40 <HAL_RCC_OscConfig+0x280>)
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007804:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007808:	d10b      	bne.n	8007822 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800780a:	4b8d      	ldr	r3, [pc, #564]	; (8007a40 <HAL_RCC_OscConfig+0x280>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007812:	2b00      	cmp	r3, #0
 8007814:	d06c      	beq.n	80078f0 <HAL_RCC_OscConfig+0x130>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d168      	bne.n	80078f0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800781e:	2301      	movs	r3, #1
 8007820:	e275      	b.n	8007d0e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800782a:	d106      	bne.n	800783a <HAL_RCC_OscConfig+0x7a>
 800782c:	4b84      	ldr	r3, [pc, #528]	; (8007a40 <HAL_RCC_OscConfig+0x280>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a83      	ldr	r2, [pc, #524]	; (8007a40 <HAL_RCC_OscConfig+0x280>)
 8007832:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007836:	6013      	str	r3, [r2, #0]
 8007838:	e02e      	b.n	8007898 <HAL_RCC_OscConfig+0xd8>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d10c      	bne.n	800785c <HAL_RCC_OscConfig+0x9c>
 8007842:	4b7f      	ldr	r3, [pc, #508]	; (8007a40 <HAL_RCC_OscConfig+0x280>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a7e      	ldr	r2, [pc, #504]	; (8007a40 <HAL_RCC_OscConfig+0x280>)
 8007848:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800784c:	6013      	str	r3, [r2, #0]
 800784e:	4b7c      	ldr	r3, [pc, #496]	; (8007a40 <HAL_RCC_OscConfig+0x280>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a7b      	ldr	r2, [pc, #492]	; (8007a40 <HAL_RCC_OscConfig+0x280>)
 8007854:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007858:	6013      	str	r3, [r2, #0]
 800785a:	e01d      	b.n	8007898 <HAL_RCC_OscConfig+0xd8>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	685b      	ldr	r3, [r3, #4]
 8007860:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007864:	d10c      	bne.n	8007880 <HAL_RCC_OscConfig+0xc0>
 8007866:	4b76      	ldr	r3, [pc, #472]	; (8007a40 <HAL_RCC_OscConfig+0x280>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a75      	ldr	r2, [pc, #468]	; (8007a40 <HAL_RCC_OscConfig+0x280>)
 800786c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007870:	6013      	str	r3, [r2, #0]
 8007872:	4b73      	ldr	r3, [pc, #460]	; (8007a40 <HAL_RCC_OscConfig+0x280>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a72      	ldr	r2, [pc, #456]	; (8007a40 <HAL_RCC_OscConfig+0x280>)
 8007878:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800787c:	6013      	str	r3, [r2, #0]
 800787e:	e00b      	b.n	8007898 <HAL_RCC_OscConfig+0xd8>
 8007880:	4b6f      	ldr	r3, [pc, #444]	; (8007a40 <HAL_RCC_OscConfig+0x280>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a6e      	ldr	r2, [pc, #440]	; (8007a40 <HAL_RCC_OscConfig+0x280>)
 8007886:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800788a:	6013      	str	r3, [r2, #0]
 800788c:	4b6c      	ldr	r3, [pc, #432]	; (8007a40 <HAL_RCC_OscConfig+0x280>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a6b      	ldr	r2, [pc, #428]	; (8007a40 <HAL_RCC_OscConfig+0x280>)
 8007892:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007896:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d013      	beq.n	80078c8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078a0:	f7fc fb96 	bl	8003fd0 <HAL_GetTick>
 80078a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078a6:	e008      	b.n	80078ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80078a8:	f7fc fb92 	bl	8003fd0 <HAL_GetTick>
 80078ac:	4602      	mov	r2, r0
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	1ad3      	subs	r3, r2, r3
 80078b2:	2b64      	cmp	r3, #100	; 0x64
 80078b4:	d901      	bls.n	80078ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80078b6:	2303      	movs	r3, #3
 80078b8:	e229      	b.n	8007d0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078ba:	4b61      	ldr	r3, [pc, #388]	; (8007a40 <HAL_RCC_OscConfig+0x280>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d0f0      	beq.n	80078a8 <HAL_RCC_OscConfig+0xe8>
 80078c6:	e014      	b.n	80078f2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078c8:	f7fc fb82 	bl	8003fd0 <HAL_GetTick>
 80078cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80078ce:	e008      	b.n	80078e2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80078d0:	f7fc fb7e 	bl	8003fd0 <HAL_GetTick>
 80078d4:	4602      	mov	r2, r0
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	1ad3      	subs	r3, r2, r3
 80078da:	2b64      	cmp	r3, #100	; 0x64
 80078dc:	d901      	bls.n	80078e2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80078de:	2303      	movs	r3, #3
 80078e0:	e215      	b.n	8007d0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80078e2:	4b57      	ldr	r3, [pc, #348]	; (8007a40 <HAL_RCC_OscConfig+0x280>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d1f0      	bne.n	80078d0 <HAL_RCC_OscConfig+0x110>
 80078ee:	e000      	b.n	80078f2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80078f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f003 0302 	and.w	r3, r3, #2
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d069      	beq.n	80079d2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80078fe:	4b50      	ldr	r3, [pc, #320]	; (8007a40 <HAL_RCC_OscConfig+0x280>)
 8007900:	689b      	ldr	r3, [r3, #8]
 8007902:	f003 030c 	and.w	r3, r3, #12
 8007906:	2b00      	cmp	r3, #0
 8007908:	d00b      	beq.n	8007922 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800790a:	4b4d      	ldr	r3, [pc, #308]	; (8007a40 <HAL_RCC_OscConfig+0x280>)
 800790c:	689b      	ldr	r3, [r3, #8]
 800790e:	f003 030c 	and.w	r3, r3, #12
 8007912:	2b08      	cmp	r3, #8
 8007914:	d11c      	bne.n	8007950 <HAL_RCC_OscConfig+0x190>
 8007916:	4b4a      	ldr	r3, [pc, #296]	; (8007a40 <HAL_RCC_OscConfig+0x280>)
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800791e:	2b00      	cmp	r3, #0
 8007920:	d116      	bne.n	8007950 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007922:	4b47      	ldr	r3, [pc, #284]	; (8007a40 <HAL_RCC_OscConfig+0x280>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f003 0302 	and.w	r3, r3, #2
 800792a:	2b00      	cmp	r3, #0
 800792c:	d005      	beq.n	800793a <HAL_RCC_OscConfig+0x17a>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	68db      	ldr	r3, [r3, #12]
 8007932:	2b01      	cmp	r3, #1
 8007934:	d001      	beq.n	800793a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007936:	2301      	movs	r3, #1
 8007938:	e1e9      	b.n	8007d0e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800793a:	4b41      	ldr	r3, [pc, #260]	; (8007a40 <HAL_RCC_OscConfig+0x280>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	691b      	ldr	r3, [r3, #16]
 8007946:	00db      	lsls	r3, r3, #3
 8007948:	493d      	ldr	r1, [pc, #244]	; (8007a40 <HAL_RCC_OscConfig+0x280>)
 800794a:	4313      	orrs	r3, r2
 800794c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800794e:	e040      	b.n	80079d2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	68db      	ldr	r3, [r3, #12]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d023      	beq.n	80079a0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007958:	4b39      	ldr	r3, [pc, #228]	; (8007a40 <HAL_RCC_OscConfig+0x280>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a38      	ldr	r2, [pc, #224]	; (8007a40 <HAL_RCC_OscConfig+0x280>)
 800795e:	f043 0301 	orr.w	r3, r3, #1
 8007962:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007964:	f7fc fb34 	bl	8003fd0 <HAL_GetTick>
 8007968:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800796a:	e008      	b.n	800797e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800796c:	f7fc fb30 	bl	8003fd0 <HAL_GetTick>
 8007970:	4602      	mov	r2, r0
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	1ad3      	subs	r3, r2, r3
 8007976:	2b02      	cmp	r3, #2
 8007978:	d901      	bls.n	800797e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800797a:	2303      	movs	r3, #3
 800797c:	e1c7      	b.n	8007d0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800797e:	4b30      	ldr	r3, [pc, #192]	; (8007a40 <HAL_RCC_OscConfig+0x280>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f003 0302 	and.w	r3, r3, #2
 8007986:	2b00      	cmp	r3, #0
 8007988:	d0f0      	beq.n	800796c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800798a:	4b2d      	ldr	r3, [pc, #180]	; (8007a40 <HAL_RCC_OscConfig+0x280>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	691b      	ldr	r3, [r3, #16]
 8007996:	00db      	lsls	r3, r3, #3
 8007998:	4929      	ldr	r1, [pc, #164]	; (8007a40 <HAL_RCC_OscConfig+0x280>)
 800799a:	4313      	orrs	r3, r2
 800799c:	600b      	str	r3, [r1, #0]
 800799e:	e018      	b.n	80079d2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80079a0:	4b27      	ldr	r3, [pc, #156]	; (8007a40 <HAL_RCC_OscConfig+0x280>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a26      	ldr	r2, [pc, #152]	; (8007a40 <HAL_RCC_OscConfig+0x280>)
 80079a6:	f023 0301 	bic.w	r3, r3, #1
 80079aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079ac:	f7fc fb10 	bl	8003fd0 <HAL_GetTick>
 80079b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80079b2:	e008      	b.n	80079c6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80079b4:	f7fc fb0c 	bl	8003fd0 <HAL_GetTick>
 80079b8:	4602      	mov	r2, r0
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	1ad3      	subs	r3, r2, r3
 80079be:	2b02      	cmp	r3, #2
 80079c0:	d901      	bls.n	80079c6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80079c2:	2303      	movs	r3, #3
 80079c4:	e1a3      	b.n	8007d0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80079c6:	4b1e      	ldr	r3, [pc, #120]	; (8007a40 <HAL_RCC_OscConfig+0x280>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f003 0302 	and.w	r3, r3, #2
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d1f0      	bne.n	80079b4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f003 0308 	and.w	r3, r3, #8
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d038      	beq.n	8007a50 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	695b      	ldr	r3, [r3, #20]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d019      	beq.n	8007a1a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80079e6:	4b16      	ldr	r3, [pc, #88]	; (8007a40 <HAL_RCC_OscConfig+0x280>)
 80079e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079ea:	4a15      	ldr	r2, [pc, #84]	; (8007a40 <HAL_RCC_OscConfig+0x280>)
 80079ec:	f043 0301 	orr.w	r3, r3, #1
 80079f0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079f2:	f7fc faed 	bl	8003fd0 <HAL_GetTick>
 80079f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80079f8:	e008      	b.n	8007a0c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80079fa:	f7fc fae9 	bl	8003fd0 <HAL_GetTick>
 80079fe:	4602      	mov	r2, r0
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	1ad3      	subs	r3, r2, r3
 8007a04:	2b02      	cmp	r3, #2
 8007a06:	d901      	bls.n	8007a0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007a08:	2303      	movs	r3, #3
 8007a0a:	e180      	b.n	8007d0e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007a0c:	4b0c      	ldr	r3, [pc, #48]	; (8007a40 <HAL_RCC_OscConfig+0x280>)
 8007a0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a10:	f003 0302 	and.w	r3, r3, #2
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d0f0      	beq.n	80079fa <HAL_RCC_OscConfig+0x23a>
 8007a18:	e01a      	b.n	8007a50 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007a1a:	4b09      	ldr	r3, [pc, #36]	; (8007a40 <HAL_RCC_OscConfig+0x280>)
 8007a1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a1e:	4a08      	ldr	r2, [pc, #32]	; (8007a40 <HAL_RCC_OscConfig+0x280>)
 8007a20:	f023 0301 	bic.w	r3, r3, #1
 8007a24:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a26:	f7fc fad3 	bl	8003fd0 <HAL_GetTick>
 8007a2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a2c:	e00a      	b.n	8007a44 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007a2e:	f7fc facf 	bl	8003fd0 <HAL_GetTick>
 8007a32:	4602      	mov	r2, r0
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	1ad3      	subs	r3, r2, r3
 8007a38:	2b02      	cmp	r3, #2
 8007a3a:	d903      	bls.n	8007a44 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007a3c:	2303      	movs	r3, #3
 8007a3e:	e166      	b.n	8007d0e <HAL_RCC_OscConfig+0x54e>
 8007a40:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a44:	4b92      	ldr	r3, [pc, #584]	; (8007c90 <HAL_RCC_OscConfig+0x4d0>)
 8007a46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a48:	f003 0302 	and.w	r3, r3, #2
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d1ee      	bne.n	8007a2e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f003 0304 	and.w	r3, r3, #4
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	f000 80a4 	beq.w	8007ba6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007a5e:	4b8c      	ldr	r3, [pc, #560]	; (8007c90 <HAL_RCC_OscConfig+0x4d0>)
 8007a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d10d      	bne.n	8007a86 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a6a:	4b89      	ldr	r3, [pc, #548]	; (8007c90 <HAL_RCC_OscConfig+0x4d0>)
 8007a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a6e:	4a88      	ldr	r2, [pc, #544]	; (8007c90 <HAL_RCC_OscConfig+0x4d0>)
 8007a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a74:	6413      	str	r3, [r2, #64]	; 0x40
 8007a76:	4b86      	ldr	r3, [pc, #536]	; (8007c90 <HAL_RCC_OscConfig+0x4d0>)
 8007a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a7e:	60bb      	str	r3, [r7, #8]
 8007a80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007a82:	2301      	movs	r3, #1
 8007a84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007a86:	4b83      	ldr	r3, [pc, #524]	; (8007c94 <HAL_RCC_OscConfig+0x4d4>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d118      	bne.n	8007ac4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007a92:	4b80      	ldr	r3, [pc, #512]	; (8007c94 <HAL_RCC_OscConfig+0x4d4>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a7f      	ldr	r2, [pc, #508]	; (8007c94 <HAL_RCC_OscConfig+0x4d4>)
 8007a98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007a9e:	f7fc fa97 	bl	8003fd0 <HAL_GetTick>
 8007aa2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007aa4:	e008      	b.n	8007ab8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007aa6:	f7fc fa93 	bl	8003fd0 <HAL_GetTick>
 8007aaa:	4602      	mov	r2, r0
 8007aac:	693b      	ldr	r3, [r7, #16]
 8007aae:	1ad3      	subs	r3, r2, r3
 8007ab0:	2b64      	cmp	r3, #100	; 0x64
 8007ab2:	d901      	bls.n	8007ab8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007ab4:	2303      	movs	r3, #3
 8007ab6:	e12a      	b.n	8007d0e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007ab8:	4b76      	ldr	r3, [pc, #472]	; (8007c94 <HAL_RCC_OscConfig+0x4d4>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d0f0      	beq.n	8007aa6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	689b      	ldr	r3, [r3, #8]
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	d106      	bne.n	8007ada <HAL_RCC_OscConfig+0x31a>
 8007acc:	4b70      	ldr	r3, [pc, #448]	; (8007c90 <HAL_RCC_OscConfig+0x4d0>)
 8007ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ad0:	4a6f      	ldr	r2, [pc, #444]	; (8007c90 <HAL_RCC_OscConfig+0x4d0>)
 8007ad2:	f043 0301 	orr.w	r3, r3, #1
 8007ad6:	6713      	str	r3, [r2, #112]	; 0x70
 8007ad8:	e02d      	b.n	8007b36 <HAL_RCC_OscConfig+0x376>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	689b      	ldr	r3, [r3, #8]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d10c      	bne.n	8007afc <HAL_RCC_OscConfig+0x33c>
 8007ae2:	4b6b      	ldr	r3, [pc, #428]	; (8007c90 <HAL_RCC_OscConfig+0x4d0>)
 8007ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ae6:	4a6a      	ldr	r2, [pc, #424]	; (8007c90 <HAL_RCC_OscConfig+0x4d0>)
 8007ae8:	f023 0301 	bic.w	r3, r3, #1
 8007aec:	6713      	str	r3, [r2, #112]	; 0x70
 8007aee:	4b68      	ldr	r3, [pc, #416]	; (8007c90 <HAL_RCC_OscConfig+0x4d0>)
 8007af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007af2:	4a67      	ldr	r2, [pc, #412]	; (8007c90 <HAL_RCC_OscConfig+0x4d0>)
 8007af4:	f023 0304 	bic.w	r3, r3, #4
 8007af8:	6713      	str	r3, [r2, #112]	; 0x70
 8007afa:	e01c      	b.n	8007b36 <HAL_RCC_OscConfig+0x376>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	689b      	ldr	r3, [r3, #8]
 8007b00:	2b05      	cmp	r3, #5
 8007b02:	d10c      	bne.n	8007b1e <HAL_RCC_OscConfig+0x35e>
 8007b04:	4b62      	ldr	r3, [pc, #392]	; (8007c90 <HAL_RCC_OscConfig+0x4d0>)
 8007b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b08:	4a61      	ldr	r2, [pc, #388]	; (8007c90 <HAL_RCC_OscConfig+0x4d0>)
 8007b0a:	f043 0304 	orr.w	r3, r3, #4
 8007b0e:	6713      	str	r3, [r2, #112]	; 0x70
 8007b10:	4b5f      	ldr	r3, [pc, #380]	; (8007c90 <HAL_RCC_OscConfig+0x4d0>)
 8007b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b14:	4a5e      	ldr	r2, [pc, #376]	; (8007c90 <HAL_RCC_OscConfig+0x4d0>)
 8007b16:	f043 0301 	orr.w	r3, r3, #1
 8007b1a:	6713      	str	r3, [r2, #112]	; 0x70
 8007b1c:	e00b      	b.n	8007b36 <HAL_RCC_OscConfig+0x376>
 8007b1e:	4b5c      	ldr	r3, [pc, #368]	; (8007c90 <HAL_RCC_OscConfig+0x4d0>)
 8007b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b22:	4a5b      	ldr	r2, [pc, #364]	; (8007c90 <HAL_RCC_OscConfig+0x4d0>)
 8007b24:	f023 0301 	bic.w	r3, r3, #1
 8007b28:	6713      	str	r3, [r2, #112]	; 0x70
 8007b2a:	4b59      	ldr	r3, [pc, #356]	; (8007c90 <HAL_RCC_OscConfig+0x4d0>)
 8007b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b2e:	4a58      	ldr	r2, [pc, #352]	; (8007c90 <HAL_RCC_OscConfig+0x4d0>)
 8007b30:	f023 0304 	bic.w	r3, r3, #4
 8007b34:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	689b      	ldr	r3, [r3, #8]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d015      	beq.n	8007b6a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b3e:	f7fc fa47 	bl	8003fd0 <HAL_GetTick>
 8007b42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b44:	e00a      	b.n	8007b5c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b46:	f7fc fa43 	bl	8003fd0 <HAL_GetTick>
 8007b4a:	4602      	mov	r2, r0
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	1ad3      	subs	r3, r2, r3
 8007b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d901      	bls.n	8007b5c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007b58:	2303      	movs	r3, #3
 8007b5a:	e0d8      	b.n	8007d0e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b5c:	4b4c      	ldr	r3, [pc, #304]	; (8007c90 <HAL_RCC_OscConfig+0x4d0>)
 8007b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b60:	f003 0302 	and.w	r3, r3, #2
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d0ee      	beq.n	8007b46 <HAL_RCC_OscConfig+0x386>
 8007b68:	e014      	b.n	8007b94 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b6a:	f7fc fa31 	bl	8003fd0 <HAL_GetTick>
 8007b6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b70:	e00a      	b.n	8007b88 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b72:	f7fc fa2d 	bl	8003fd0 <HAL_GetTick>
 8007b76:	4602      	mov	r2, r0
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	1ad3      	subs	r3, r2, r3
 8007b7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d901      	bls.n	8007b88 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007b84:	2303      	movs	r3, #3
 8007b86:	e0c2      	b.n	8007d0e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b88:	4b41      	ldr	r3, [pc, #260]	; (8007c90 <HAL_RCC_OscConfig+0x4d0>)
 8007b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b8c:	f003 0302 	and.w	r3, r3, #2
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d1ee      	bne.n	8007b72 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007b94:	7dfb      	ldrb	r3, [r7, #23]
 8007b96:	2b01      	cmp	r3, #1
 8007b98:	d105      	bne.n	8007ba6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b9a:	4b3d      	ldr	r3, [pc, #244]	; (8007c90 <HAL_RCC_OscConfig+0x4d0>)
 8007b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b9e:	4a3c      	ldr	r2, [pc, #240]	; (8007c90 <HAL_RCC_OscConfig+0x4d0>)
 8007ba0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ba4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	699b      	ldr	r3, [r3, #24]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	f000 80ae 	beq.w	8007d0c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007bb0:	4b37      	ldr	r3, [pc, #220]	; (8007c90 <HAL_RCC_OscConfig+0x4d0>)
 8007bb2:	689b      	ldr	r3, [r3, #8]
 8007bb4:	f003 030c 	and.w	r3, r3, #12
 8007bb8:	2b08      	cmp	r3, #8
 8007bba:	d06d      	beq.n	8007c98 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	699b      	ldr	r3, [r3, #24]
 8007bc0:	2b02      	cmp	r3, #2
 8007bc2:	d14b      	bne.n	8007c5c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007bc4:	4b32      	ldr	r3, [pc, #200]	; (8007c90 <HAL_RCC_OscConfig+0x4d0>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a31      	ldr	r2, [pc, #196]	; (8007c90 <HAL_RCC_OscConfig+0x4d0>)
 8007bca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007bce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bd0:	f7fc f9fe 	bl	8003fd0 <HAL_GetTick>
 8007bd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007bd6:	e008      	b.n	8007bea <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007bd8:	f7fc f9fa 	bl	8003fd0 <HAL_GetTick>
 8007bdc:	4602      	mov	r2, r0
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	1ad3      	subs	r3, r2, r3
 8007be2:	2b02      	cmp	r3, #2
 8007be4:	d901      	bls.n	8007bea <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007be6:	2303      	movs	r3, #3
 8007be8:	e091      	b.n	8007d0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007bea:	4b29      	ldr	r3, [pc, #164]	; (8007c90 <HAL_RCC_OscConfig+0x4d0>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d1f0      	bne.n	8007bd8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	69da      	ldr	r2, [r3, #28]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6a1b      	ldr	r3, [r3, #32]
 8007bfe:	431a      	orrs	r2, r3
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c04:	019b      	lsls	r3, r3, #6
 8007c06:	431a      	orrs	r2, r3
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c0c:	085b      	lsrs	r3, r3, #1
 8007c0e:	3b01      	subs	r3, #1
 8007c10:	041b      	lsls	r3, r3, #16
 8007c12:	431a      	orrs	r2, r3
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c18:	061b      	lsls	r3, r3, #24
 8007c1a:	431a      	orrs	r2, r3
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c20:	071b      	lsls	r3, r3, #28
 8007c22:	491b      	ldr	r1, [pc, #108]	; (8007c90 <HAL_RCC_OscConfig+0x4d0>)
 8007c24:	4313      	orrs	r3, r2
 8007c26:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007c28:	4b19      	ldr	r3, [pc, #100]	; (8007c90 <HAL_RCC_OscConfig+0x4d0>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a18      	ldr	r2, [pc, #96]	; (8007c90 <HAL_RCC_OscConfig+0x4d0>)
 8007c2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007c32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c34:	f7fc f9cc 	bl	8003fd0 <HAL_GetTick>
 8007c38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c3a:	e008      	b.n	8007c4e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c3c:	f7fc f9c8 	bl	8003fd0 <HAL_GetTick>
 8007c40:	4602      	mov	r2, r0
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	1ad3      	subs	r3, r2, r3
 8007c46:	2b02      	cmp	r3, #2
 8007c48:	d901      	bls.n	8007c4e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8007c4a:	2303      	movs	r3, #3
 8007c4c:	e05f      	b.n	8007d0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c4e:	4b10      	ldr	r3, [pc, #64]	; (8007c90 <HAL_RCC_OscConfig+0x4d0>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d0f0      	beq.n	8007c3c <HAL_RCC_OscConfig+0x47c>
 8007c5a:	e057      	b.n	8007d0c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c5c:	4b0c      	ldr	r3, [pc, #48]	; (8007c90 <HAL_RCC_OscConfig+0x4d0>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a0b      	ldr	r2, [pc, #44]	; (8007c90 <HAL_RCC_OscConfig+0x4d0>)
 8007c62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007c66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c68:	f7fc f9b2 	bl	8003fd0 <HAL_GetTick>
 8007c6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c6e:	e008      	b.n	8007c82 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c70:	f7fc f9ae 	bl	8003fd0 <HAL_GetTick>
 8007c74:	4602      	mov	r2, r0
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	1ad3      	subs	r3, r2, r3
 8007c7a:	2b02      	cmp	r3, #2
 8007c7c:	d901      	bls.n	8007c82 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8007c7e:	2303      	movs	r3, #3
 8007c80:	e045      	b.n	8007d0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c82:	4b03      	ldr	r3, [pc, #12]	; (8007c90 <HAL_RCC_OscConfig+0x4d0>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d1f0      	bne.n	8007c70 <HAL_RCC_OscConfig+0x4b0>
 8007c8e:	e03d      	b.n	8007d0c <HAL_RCC_OscConfig+0x54c>
 8007c90:	40023800 	.word	0x40023800
 8007c94:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007c98:	4b1f      	ldr	r3, [pc, #124]	; (8007d18 <HAL_RCC_OscConfig+0x558>)
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	699b      	ldr	r3, [r3, #24]
 8007ca2:	2b01      	cmp	r3, #1
 8007ca4:	d030      	beq.n	8007d08 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007cb0:	429a      	cmp	r2, r3
 8007cb2:	d129      	bne.n	8007d08 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007cbe:	429a      	cmp	r2, r3
 8007cc0:	d122      	bne.n	8007d08 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007cc2:	68fa      	ldr	r2, [r7, #12]
 8007cc4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007cc8:	4013      	ands	r3, r2
 8007cca:	687a      	ldr	r2, [r7, #4]
 8007ccc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007cce:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d119      	bne.n	8007d08 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cde:	085b      	lsrs	r3, r3, #1
 8007ce0:	3b01      	subs	r3, #1
 8007ce2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d10f      	bne.n	8007d08 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cf2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d107      	bne.n	8007d08 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d02:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d001      	beq.n	8007d0c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8007d08:	2301      	movs	r3, #1
 8007d0a:	e000      	b.n	8007d0e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8007d0c:	2300      	movs	r3, #0
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3718      	adds	r7, #24
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}
 8007d16:	bf00      	nop
 8007d18:	40023800 	.word	0x40023800

08007d1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b084      	sub	sp, #16
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007d26:	2300      	movs	r3, #0
 8007d28:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d101      	bne.n	8007d34 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007d30:	2301      	movs	r3, #1
 8007d32:	e0d0      	b.n	8007ed6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007d34:	4b6a      	ldr	r3, [pc, #424]	; (8007ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f003 030f 	and.w	r3, r3, #15
 8007d3c:	683a      	ldr	r2, [r7, #0]
 8007d3e:	429a      	cmp	r2, r3
 8007d40:	d910      	bls.n	8007d64 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d42:	4b67      	ldr	r3, [pc, #412]	; (8007ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f023 020f 	bic.w	r2, r3, #15
 8007d4a:	4965      	ldr	r1, [pc, #404]	; (8007ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d52:	4b63      	ldr	r3, [pc, #396]	; (8007ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f003 030f 	and.w	r3, r3, #15
 8007d5a:	683a      	ldr	r2, [r7, #0]
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	d001      	beq.n	8007d64 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007d60:	2301      	movs	r3, #1
 8007d62:	e0b8      	b.n	8007ed6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f003 0302 	and.w	r3, r3, #2
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d020      	beq.n	8007db2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f003 0304 	and.w	r3, r3, #4
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d005      	beq.n	8007d88 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007d7c:	4b59      	ldr	r3, [pc, #356]	; (8007ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8007d7e:	689b      	ldr	r3, [r3, #8]
 8007d80:	4a58      	ldr	r2, [pc, #352]	; (8007ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8007d82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007d86:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f003 0308 	and.w	r3, r3, #8
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d005      	beq.n	8007da0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007d94:	4b53      	ldr	r3, [pc, #332]	; (8007ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8007d96:	689b      	ldr	r3, [r3, #8]
 8007d98:	4a52      	ldr	r2, [pc, #328]	; (8007ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8007d9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007d9e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007da0:	4b50      	ldr	r3, [pc, #320]	; (8007ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8007da2:	689b      	ldr	r3, [r3, #8]
 8007da4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	689b      	ldr	r3, [r3, #8]
 8007dac:	494d      	ldr	r1, [pc, #308]	; (8007ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8007dae:	4313      	orrs	r3, r2
 8007db0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f003 0301 	and.w	r3, r3, #1
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d040      	beq.n	8007e40 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	2b01      	cmp	r3, #1
 8007dc4:	d107      	bne.n	8007dd6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007dc6:	4b47      	ldr	r3, [pc, #284]	; (8007ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d115      	bne.n	8007dfe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	e07f      	b.n	8007ed6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	2b02      	cmp	r3, #2
 8007ddc:	d107      	bne.n	8007dee <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007dde:	4b41      	ldr	r3, [pc, #260]	; (8007ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d109      	bne.n	8007dfe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007dea:	2301      	movs	r3, #1
 8007dec:	e073      	b.n	8007ed6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007dee:	4b3d      	ldr	r3, [pc, #244]	; (8007ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f003 0302 	and.w	r3, r3, #2
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d101      	bne.n	8007dfe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	e06b      	b.n	8007ed6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007dfe:	4b39      	ldr	r3, [pc, #228]	; (8007ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8007e00:	689b      	ldr	r3, [r3, #8]
 8007e02:	f023 0203 	bic.w	r2, r3, #3
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	685b      	ldr	r3, [r3, #4]
 8007e0a:	4936      	ldr	r1, [pc, #216]	; (8007ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8007e0c:	4313      	orrs	r3, r2
 8007e0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e10:	f7fc f8de 	bl	8003fd0 <HAL_GetTick>
 8007e14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e16:	e00a      	b.n	8007e2e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e18:	f7fc f8da 	bl	8003fd0 <HAL_GetTick>
 8007e1c:	4602      	mov	r2, r0
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	1ad3      	subs	r3, r2, r3
 8007e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d901      	bls.n	8007e2e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007e2a:	2303      	movs	r3, #3
 8007e2c:	e053      	b.n	8007ed6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e2e:	4b2d      	ldr	r3, [pc, #180]	; (8007ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8007e30:	689b      	ldr	r3, [r3, #8]
 8007e32:	f003 020c 	and.w	r2, r3, #12
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	685b      	ldr	r3, [r3, #4]
 8007e3a:	009b      	lsls	r3, r3, #2
 8007e3c:	429a      	cmp	r2, r3
 8007e3e:	d1eb      	bne.n	8007e18 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007e40:	4b27      	ldr	r3, [pc, #156]	; (8007ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f003 030f 	and.w	r3, r3, #15
 8007e48:	683a      	ldr	r2, [r7, #0]
 8007e4a:	429a      	cmp	r2, r3
 8007e4c:	d210      	bcs.n	8007e70 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e4e:	4b24      	ldr	r3, [pc, #144]	; (8007ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f023 020f 	bic.w	r2, r3, #15
 8007e56:	4922      	ldr	r1, [pc, #136]	; (8007ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e5e:	4b20      	ldr	r3, [pc, #128]	; (8007ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f003 030f 	and.w	r3, r3, #15
 8007e66:	683a      	ldr	r2, [r7, #0]
 8007e68:	429a      	cmp	r2, r3
 8007e6a:	d001      	beq.n	8007e70 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	e032      	b.n	8007ed6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f003 0304 	and.w	r3, r3, #4
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d008      	beq.n	8007e8e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007e7c:	4b19      	ldr	r3, [pc, #100]	; (8007ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8007e7e:	689b      	ldr	r3, [r3, #8]
 8007e80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	68db      	ldr	r3, [r3, #12]
 8007e88:	4916      	ldr	r1, [pc, #88]	; (8007ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f003 0308 	and.w	r3, r3, #8
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d009      	beq.n	8007eae <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007e9a:	4b12      	ldr	r3, [pc, #72]	; (8007ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8007e9c:	689b      	ldr	r3, [r3, #8]
 8007e9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	691b      	ldr	r3, [r3, #16]
 8007ea6:	00db      	lsls	r3, r3, #3
 8007ea8:	490e      	ldr	r1, [pc, #56]	; (8007ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007eae:	f000 f831 	bl	8007f14 <HAL_RCC_GetSysClockFreq>
 8007eb2:	4601      	mov	r1, r0
 8007eb4:	4b0b      	ldr	r3, [pc, #44]	; (8007ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8007eb6:	689b      	ldr	r3, [r3, #8]
 8007eb8:	091b      	lsrs	r3, r3, #4
 8007eba:	f003 030f 	and.w	r3, r3, #15
 8007ebe:	4a0a      	ldr	r2, [pc, #40]	; (8007ee8 <HAL_RCC_ClockConfig+0x1cc>)
 8007ec0:	5cd3      	ldrb	r3, [r2, r3]
 8007ec2:	fa21 f303 	lsr.w	r3, r1, r3
 8007ec6:	4a09      	ldr	r2, [pc, #36]	; (8007eec <HAL_RCC_ClockConfig+0x1d0>)
 8007ec8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007eca:	4b09      	ldr	r3, [pc, #36]	; (8007ef0 <HAL_RCC_ClockConfig+0x1d4>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f7fc f83a 	bl	8003f48 <HAL_InitTick>

  return HAL_OK;
 8007ed4:	2300      	movs	r3, #0
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3710      	adds	r7, #16
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}
 8007ede:	bf00      	nop
 8007ee0:	40023c00 	.word	0x40023c00
 8007ee4:	40023800 	.word	0x40023800
 8007ee8:	080130e4 	.word	0x080130e4
 8007eec:	20000020 	.word	0x20000020
 8007ef0:	2000003c 	.word	0x2000003c

08007ef4 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M7 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 8007ef8:	4b05      	ldr	r3, [pc, #20]	; (8007f10 <HAL_RCC_EnableCSS+0x1c>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a04      	ldr	r2, [pc, #16]	; (8007f10 <HAL_RCC_EnableCSS+0x1c>)
 8007efe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007f02:	6013      	str	r3, [r2, #0]
}
 8007f04:	bf00      	nop
 8007f06:	46bd      	mov	sp, r7
 8007f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0c:	4770      	bx	lr
 8007f0e:	bf00      	nop
 8007f10:	40023800 	.word	0x40023800

08007f14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f16:	b085      	sub	sp, #20
 8007f18:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	607b      	str	r3, [r7, #4]
 8007f1e:	2300      	movs	r3, #0
 8007f20:	60fb      	str	r3, [r7, #12]
 8007f22:	2300      	movs	r3, #0
 8007f24:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8007f26:	2300      	movs	r3, #0
 8007f28:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007f2a:	4b50      	ldr	r3, [pc, #320]	; (800806c <HAL_RCC_GetSysClockFreq+0x158>)
 8007f2c:	689b      	ldr	r3, [r3, #8]
 8007f2e:	f003 030c 	and.w	r3, r3, #12
 8007f32:	2b04      	cmp	r3, #4
 8007f34:	d007      	beq.n	8007f46 <HAL_RCC_GetSysClockFreq+0x32>
 8007f36:	2b08      	cmp	r3, #8
 8007f38:	d008      	beq.n	8007f4c <HAL_RCC_GetSysClockFreq+0x38>
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	f040 808d 	bne.w	800805a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007f40:	4b4b      	ldr	r3, [pc, #300]	; (8008070 <HAL_RCC_GetSysClockFreq+0x15c>)
 8007f42:	60bb      	str	r3, [r7, #8]
      break;
 8007f44:	e08c      	b.n	8008060 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007f46:	4b4b      	ldr	r3, [pc, #300]	; (8008074 <HAL_RCC_GetSysClockFreq+0x160>)
 8007f48:	60bb      	str	r3, [r7, #8]
      break;
 8007f4a:	e089      	b.n	8008060 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007f4c:	4b47      	ldr	r3, [pc, #284]	; (800806c <HAL_RCC_GetSysClockFreq+0x158>)
 8007f4e:	685b      	ldr	r3, [r3, #4]
 8007f50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f54:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007f56:	4b45      	ldr	r3, [pc, #276]	; (800806c <HAL_RCC_GetSysClockFreq+0x158>)
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d023      	beq.n	8007faa <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f62:	4b42      	ldr	r3, [pc, #264]	; (800806c <HAL_RCC_GetSysClockFreq+0x158>)
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	099b      	lsrs	r3, r3, #6
 8007f68:	f04f 0400 	mov.w	r4, #0
 8007f6c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007f70:	f04f 0200 	mov.w	r2, #0
 8007f74:	ea03 0501 	and.w	r5, r3, r1
 8007f78:	ea04 0602 	and.w	r6, r4, r2
 8007f7c:	4a3d      	ldr	r2, [pc, #244]	; (8008074 <HAL_RCC_GetSysClockFreq+0x160>)
 8007f7e:	fb02 f106 	mul.w	r1, r2, r6
 8007f82:	2200      	movs	r2, #0
 8007f84:	fb02 f205 	mul.w	r2, r2, r5
 8007f88:	440a      	add	r2, r1
 8007f8a:	493a      	ldr	r1, [pc, #232]	; (8008074 <HAL_RCC_GetSysClockFreq+0x160>)
 8007f8c:	fba5 0101 	umull	r0, r1, r5, r1
 8007f90:	1853      	adds	r3, r2, r1
 8007f92:	4619      	mov	r1, r3
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f04f 0400 	mov.w	r4, #0
 8007f9a:	461a      	mov	r2, r3
 8007f9c:	4623      	mov	r3, r4
 8007f9e:	f7f8 f9b7 	bl	8000310 <__aeabi_uldivmod>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	460c      	mov	r4, r1
 8007fa6:	60fb      	str	r3, [r7, #12]
 8007fa8:	e049      	b.n	800803e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007faa:	4b30      	ldr	r3, [pc, #192]	; (800806c <HAL_RCC_GetSysClockFreq+0x158>)
 8007fac:	685b      	ldr	r3, [r3, #4]
 8007fae:	099b      	lsrs	r3, r3, #6
 8007fb0:	f04f 0400 	mov.w	r4, #0
 8007fb4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007fb8:	f04f 0200 	mov.w	r2, #0
 8007fbc:	ea03 0501 	and.w	r5, r3, r1
 8007fc0:	ea04 0602 	and.w	r6, r4, r2
 8007fc4:	4629      	mov	r1, r5
 8007fc6:	4632      	mov	r2, r6
 8007fc8:	f04f 0300 	mov.w	r3, #0
 8007fcc:	f04f 0400 	mov.w	r4, #0
 8007fd0:	0154      	lsls	r4, r2, #5
 8007fd2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007fd6:	014b      	lsls	r3, r1, #5
 8007fd8:	4619      	mov	r1, r3
 8007fda:	4622      	mov	r2, r4
 8007fdc:	1b49      	subs	r1, r1, r5
 8007fde:	eb62 0206 	sbc.w	r2, r2, r6
 8007fe2:	f04f 0300 	mov.w	r3, #0
 8007fe6:	f04f 0400 	mov.w	r4, #0
 8007fea:	0194      	lsls	r4, r2, #6
 8007fec:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007ff0:	018b      	lsls	r3, r1, #6
 8007ff2:	1a5b      	subs	r3, r3, r1
 8007ff4:	eb64 0402 	sbc.w	r4, r4, r2
 8007ff8:	f04f 0100 	mov.w	r1, #0
 8007ffc:	f04f 0200 	mov.w	r2, #0
 8008000:	00e2      	lsls	r2, r4, #3
 8008002:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008006:	00d9      	lsls	r1, r3, #3
 8008008:	460b      	mov	r3, r1
 800800a:	4614      	mov	r4, r2
 800800c:	195b      	adds	r3, r3, r5
 800800e:	eb44 0406 	adc.w	r4, r4, r6
 8008012:	f04f 0100 	mov.w	r1, #0
 8008016:	f04f 0200 	mov.w	r2, #0
 800801a:	02a2      	lsls	r2, r4, #10
 800801c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8008020:	0299      	lsls	r1, r3, #10
 8008022:	460b      	mov	r3, r1
 8008024:	4614      	mov	r4, r2
 8008026:	4618      	mov	r0, r3
 8008028:	4621      	mov	r1, r4
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f04f 0400 	mov.w	r4, #0
 8008030:	461a      	mov	r2, r3
 8008032:	4623      	mov	r3, r4
 8008034:	f7f8 f96c 	bl	8000310 <__aeabi_uldivmod>
 8008038:	4603      	mov	r3, r0
 800803a:	460c      	mov	r4, r1
 800803c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800803e:	4b0b      	ldr	r3, [pc, #44]	; (800806c <HAL_RCC_GetSysClockFreq+0x158>)
 8008040:	685b      	ldr	r3, [r3, #4]
 8008042:	0c1b      	lsrs	r3, r3, #16
 8008044:	f003 0303 	and.w	r3, r3, #3
 8008048:	3301      	adds	r3, #1
 800804a:	005b      	lsls	r3, r3, #1
 800804c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800804e:	68fa      	ldr	r2, [r7, #12]
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	fbb2 f3f3 	udiv	r3, r2, r3
 8008056:	60bb      	str	r3, [r7, #8]
      break;
 8008058:	e002      	b.n	8008060 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800805a:	4b05      	ldr	r3, [pc, #20]	; (8008070 <HAL_RCC_GetSysClockFreq+0x15c>)
 800805c:	60bb      	str	r3, [r7, #8]
      break;
 800805e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008060:	68bb      	ldr	r3, [r7, #8]
}
 8008062:	4618      	mov	r0, r3
 8008064:	3714      	adds	r7, #20
 8008066:	46bd      	mov	sp, r7
 8008068:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800806a:	bf00      	nop
 800806c:	40023800 	.word	0x40023800
 8008070:	00f42400 	.word	0x00f42400
 8008074:	017d7840 	.word	0x017d7840

08008078 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008078:	b480      	push	{r7}
 800807a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800807c:	4b03      	ldr	r3, [pc, #12]	; (800808c <HAL_RCC_GetHCLKFreq+0x14>)
 800807e:	681b      	ldr	r3, [r3, #0]
}
 8008080:	4618      	mov	r0, r3
 8008082:	46bd      	mov	sp, r7
 8008084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008088:	4770      	bx	lr
 800808a:	bf00      	nop
 800808c:	20000020 	.word	0x20000020

08008090 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008094:	f7ff fff0 	bl	8008078 <HAL_RCC_GetHCLKFreq>
 8008098:	4601      	mov	r1, r0
 800809a:	4b05      	ldr	r3, [pc, #20]	; (80080b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800809c:	689b      	ldr	r3, [r3, #8]
 800809e:	0a9b      	lsrs	r3, r3, #10
 80080a0:	f003 0307 	and.w	r3, r3, #7
 80080a4:	4a03      	ldr	r2, [pc, #12]	; (80080b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80080a6:	5cd3      	ldrb	r3, [r2, r3]
 80080a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	bd80      	pop	{r7, pc}
 80080b0:	40023800 	.word	0x40023800
 80080b4:	080130f4 	.word	0x080130f4

080080b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80080bc:	f7ff ffdc 	bl	8008078 <HAL_RCC_GetHCLKFreq>
 80080c0:	4601      	mov	r1, r0
 80080c2:	4b05      	ldr	r3, [pc, #20]	; (80080d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80080c4:	689b      	ldr	r3, [r3, #8]
 80080c6:	0b5b      	lsrs	r3, r3, #13
 80080c8:	f003 0307 	and.w	r3, r3, #7
 80080cc:	4a03      	ldr	r2, [pc, #12]	; (80080dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80080ce:	5cd3      	ldrb	r3, [r2, r3]
 80080d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	bd80      	pop	{r7, pc}
 80080d8:	40023800 	.word	0x40023800
 80080dc:	080130f4 	.word	0x080130f4

080080e0 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 80080e4:	4b06      	ldr	r3, [pc, #24]	; (8008100 <HAL_RCC_NMI_IRQHandler+0x20>)
 80080e6:	68db      	ldr	r3, [r3, #12]
 80080e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080ec:	2b80      	cmp	r3, #128	; 0x80
 80080ee:	d104      	bne.n	80080fa <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80080f0:	f000 f80a 	bl	8008108 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80080f4:	4b03      	ldr	r3, [pc, #12]	; (8008104 <HAL_RCC_NMI_IRQHandler+0x24>)
 80080f6:	2280      	movs	r2, #128	; 0x80
 80080f8:	701a      	strb	r2, [r3, #0]
  }
}
 80080fa:	bf00      	nop
 80080fc:	bd80      	pop	{r7, pc}
 80080fe:	bf00      	nop
 8008100:	40023800 	.word	0x40023800
 8008104:	4002380e 	.word	0x4002380e

08008108 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8008108:	b480      	push	{r7}
 800810a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 800810c:	bf00      	nop
 800810e:	46bd      	mov	sp, r7
 8008110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008114:	4770      	bx	lr
	...

08008118 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b088      	sub	sp, #32
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008120:	2300      	movs	r3, #0
 8008122:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8008124:	2300      	movs	r3, #0
 8008126:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8008128:	2300      	movs	r3, #0
 800812a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800812c:	2300      	movs	r3, #0
 800812e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8008130:	2300      	movs	r3, #0
 8008132:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f003 0301 	and.w	r3, r3, #1
 800813c:	2b00      	cmp	r3, #0
 800813e:	d012      	beq.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008140:	4b69      	ldr	r3, [pc, #420]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008142:	689b      	ldr	r3, [r3, #8]
 8008144:	4a68      	ldr	r2, [pc, #416]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008146:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800814a:	6093      	str	r3, [r2, #8]
 800814c:	4b66      	ldr	r3, [pc, #408]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800814e:	689a      	ldr	r2, [r3, #8]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008154:	4964      	ldr	r1, [pc, #400]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008156:	4313      	orrs	r3, r2
 8008158:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800815e:	2b00      	cmp	r3, #0
 8008160:	d101      	bne.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8008162:	2301      	movs	r3, #1
 8008164:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800816e:	2b00      	cmp	r3, #0
 8008170:	d017      	beq.n	80081a2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008172:	4b5d      	ldr	r3, [pc, #372]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008174:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008178:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008180:	4959      	ldr	r1, [pc, #356]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008182:	4313      	orrs	r3, r2
 8008184:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800818c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008190:	d101      	bne.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8008192:	2301      	movs	r3, #1
 8008194:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800819a:	2b00      	cmp	r3, #0
 800819c:	d101      	bne.n	80081a2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800819e:	2301      	movs	r3, #1
 80081a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d017      	beq.n	80081de <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80081ae:	4b4e      	ldr	r3, [pc, #312]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081b4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081bc:	494a      	ldr	r1, [pc, #296]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081be:	4313      	orrs	r3, r2
 80081c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80081cc:	d101      	bne.n	80081d2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80081ce:	2301      	movs	r3, #1
 80081d0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d101      	bne.n	80081de <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80081da:	2301      	movs	r3, #1
 80081dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d001      	beq.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80081ea:	2301      	movs	r3, #1
 80081ec:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f003 0320 	and.w	r3, r3, #32
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	f000 808b 	beq.w	8008312 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80081fc:	4b3a      	ldr	r3, [pc, #232]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008200:	4a39      	ldr	r2, [pc, #228]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008202:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008206:	6413      	str	r3, [r2, #64]	; 0x40
 8008208:	4b37      	ldr	r3, [pc, #220]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800820a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800820c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008210:	60bb      	str	r3, [r7, #8]
 8008212:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008214:	4b35      	ldr	r3, [pc, #212]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a34      	ldr	r2, [pc, #208]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800821a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800821e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008220:	f7fb fed6 	bl	8003fd0 <HAL_GetTick>
 8008224:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008226:	e008      	b.n	800823a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008228:	f7fb fed2 	bl	8003fd0 <HAL_GetTick>
 800822c:	4602      	mov	r2, r0
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	1ad3      	subs	r3, r2, r3
 8008232:	2b64      	cmp	r3, #100	; 0x64
 8008234:	d901      	bls.n	800823a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8008236:	2303      	movs	r3, #3
 8008238:	e38d      	b.n	8008956 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800823a:	4b2c      	ldr	r3, [pc, #176]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008242:	2b00      	cmp	r3, #0
 8008244:	d0f0      	beq.n	8008228 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008246:	4b28      	ldr	r3, [pc, #160]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800824a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800824e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d035      	beq.n	80082c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800825a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800825e:	693a      	ldr	r2, [r7, #16]
 8008260:	429a      	cmp	r2, r3
 8008262:	d02e      	beq.n	80082c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008264:	4b20      	ldr	r3, [pc, #128]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008268:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800826c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800826e:	4b1e      	ldr	r3, [pc, #120]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008272:	4a1d      	ldr	r2, [pc, #116]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008274:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008278:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800827a:	4b1b      	ldr	r3, [pc, #108]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800827c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800827e:	4a1a      	ldr	r2, [pc, #104]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008280:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008284:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8008286:	4a18      	ldr	r2, [pc, #96]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008288:	693b      	ldr	r3, [r7, #16]
 800828a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800828c:	4b16      	ldr	r3, [pc, #88]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800828e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008290:	f003 0301 	and.w	r3, r3, #1
 8008294:	2b01      	cmp	r3, #1
 8008296:	d114      	bne.n	80082c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008298:	f7fb fe9a 	bl	8003fd0 <HAL_GetTick>
 800829c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800829e:	e00a      	b.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80082a0:	f7fb fe96 	bl	8003fd0 <HAL_GetTick>
 80082a4:	4602      	mov	r2, r0
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	1ad3      	subs	r3, r2, r3
 80082aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d901      	bls.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80082b2:	2303      	movs	r3, #3
 80082b4:	e34f      	b.n	8008956 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80082b6:	4b0c      	ldr	r3, [pc, #48]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082ba:	f003 0302 	and.w	r3, r3, #2
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d0ee      	beq.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80082ce:	d111      	bne.n	80082f4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80082d0:	4b05      	ldr	r3, [pc, #20]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082d2:	689b      	ldr	r3, [r3, #8]
 80082d4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80082dc:	4b04      	ldr	r3, [pc, #16]	; (80082f0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80082de:	400b      	ands	r3, r1
 80082e0:	4901      	ldr	r1, [pc, #4]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082e2:	4313      	orrs	r3, r2
 80082e4:	608b      	str	r3, [r1, #8]
 80082e6:	e00b      	b.n	8008300 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80082e8:	40023800 	.word	0x40023800
 80082ec:	40007000 	.word	0x40007000
 80082f0:	0ffffcff 	.word	0x0ffffcff
 80082f4:	4bb3      	ldr	r3, [pc, #716]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80082f6:	689b      	ldr	r3, [r3, #8]
 80082f8:	4ab2      	ldr	r2, [pc, #712]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80082fa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80082fe:	6093      	str	r3, [r2, #8]
 8008300:	4bb0      	ldr	r3, [pc, #704]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008302:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008308:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800830c:	49ad      	ldr	r1, [pc, #692]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800830e:	4313      	orrs	r3, r2
 8008310:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f003 0310 	and.w	r3, r3, #16
 800831a:	2b00      	cmp	r3, #0
 800831c:	d010      	beq.n	8008340 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800831e:	4ba9      	ldr	r3, [pc, #676]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008320:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008324:	4aa7      	ldr	r2, [pc, #668]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008326:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800832a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800832e:	4ba5      	ldr	r3, [pc, #660]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008330:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008338:	49a2      	ldr	r1, [pc, #648]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800833a:	4313      	orrs	r3, r2
 800833c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008348:	2b00      	cmp	r3, #0
 800834a:	d00a      	beq.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800834c:	4b9d      	ldr	r3, [pc, #628]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800834e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008352:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800835a:	499a      	ldr	r1, [pc, #616]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800835c:	4313      	orrs	r3, r2
 800835e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800836a:	2b00      	cmp	r3, #0
 800836c:	d00a      	beq.n	8008384 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800836e:	4b95      	ldr	r3, [pc, #596]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008374:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800837c:	4991      	ldr	r1, [pc, #580]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800837e:	4313      	orrs	r3, r2
 8008380:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800838c:	2b00      	cmp	r3, #0
 800838e:	d00a      	beq.n	80083a6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008390:	4b8c      	ldr	r3, [pc, #560]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008396:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800839e:	4989      	ldr	r1, [pc, #548]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80083a0:	4313      	orrs	r3, r2
 80083a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d00a      	beq.n	80083c8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80083b2:	4b84      	ldr	r3, [pc, #528]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80083b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083b8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083c0:	4980      	ldr	r1, [pc, #512]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80083c2:	4313      	orrs	r3, r2
 80083c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d00a      	beq.n	80083ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80083d4:	4b7b      	ldr	r3, [pc, #492]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80083d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083da:	f023 0203 	bic.w	r2, r3, #3
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083e2:	4978      	ldr	r1, [pc, #480]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80083e4:	4313      	orrs	r3, r2
 80083e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d00a      	beq.n	800840c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80083f6:	4b73      	ldr	r3, [pc, #460]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80083f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083fc:	f023 020c 	bic.w	r2, r3, #12
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008404:	496f      	ldr	r1, [pc, #444]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008406:	4313      	orrs	r3, r2
 8008408:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008414:	2b00      	cmp	r3, #0
 8008416:	d00a      	beq.n	800842e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008418:	4b6a      	ldr	r3, [pc, #424]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800841a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800841e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008426:	4967      	ldr	r1, [pc, #412]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008428:	4313      	orrs	r3, r2
 800842a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008436:	2b00      	cmp	r3, #0
 8008438:	d00a      	beq.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800843a:	4b62      	ldr	r3, [pc, #392]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800843c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008440:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008448:	495e      	ldr	r1, [pc, #376]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800844a:	4313      	orrs	r3, r2
 800844c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008458:	2b00      	cmp	r3, #0
 800845a:	d00a      	beq.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800845c:	4b59      	ldr	r3, [pc, #356]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800845e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008462:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800846a:	4956      	ldr	r1, [pc, #344]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800846c:	4313      	orrs	r3, r2
 800846e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800847a:	2b00      	cmp	r3, #0
 800847c:	d00a      	beq.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800847e:	4b51      	ldr	r3, [pc, #324]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008484:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800848c:	494d      	ldr	r1, [pc, #308]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800848e:	4313      	orrs	r3, r2
 8008490:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800849c:	2b00      	cmp	r3, #0
 800849e:	d00a      	beq.n	80084b6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80084a0:	4b48      	ldr	r3, [pc, #288]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80084a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084a6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084ae:	4945      	ldr	r1, [pc, #276]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80084b0:	4313      	orrs	r3, r2
 80084b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d00a      	beq.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80084c2:	4b40      	ldr	r3, [pc, #256]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80084c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084c8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084d0:	493c      	ldr	r1, [pc, #240]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80084d2:	4313      	orrs	r3, r2
 80084d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d00a      	beq.n	80084fa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80084e4:	4b37      	ldr	r3, [pc, #220]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80084e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084ea:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084f2:	4934      	ldr	r1, [pc, #208]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80084f4:	4313      	orrs	r3, r2
 80084f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008502:	2b00      	cmp	r3, #0
 8008504:	d011      	beq.n	800852a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008506:	4b2f      	ldr	r3, [pc, #188]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800850c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008514:	492b      	ldr	r1, [pc, #172]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008516:	4313      	orrs	r3, r2
 8008518:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008520:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008524:	d101      	bne.n	800852a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8008526:	2301      	movs	r3, #1
 8008528:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f003 0308 	and.w	r3, r3, #8
 8008532:	2b00      	cmp	r3, #0
 8008534:	d001      	beq.n	800853a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8008536:	2301      	movs	r3, #1
 8008538:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008542:	2b00      	cmp	r3, #0
 8008544:	d00a      	beq.n	800855c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008546:	4b1f      	ldr	r3, [pc, #124]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800854c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008554:	491b      	ldr	r1, [pc, #108]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008556:	4313      	orrs	r3, r2
 8008558:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008564:	2b00      	cmp	r3, #0
 8008566:	d00b      	beq.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008568:	4b16      	ldr	r3, [pc, #88]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800856a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800856e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008578:	4912      	ldr	r1, [pc, #72]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800857a:	4313      	orrs	r3, r2
 800857c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008588:	2b00      	cmp	r3, #0
 800858a:	d00b      	beq.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800858c:	4b0d      	ldr	r3, [pc, #52]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800858e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008592:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800859c:	4909      	ldr	r1, [pc, #36]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800859e:	4313      	orrs	r3, r2
 80085a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d00f      	beq.n	80085d0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80085b0:	4b04      	ldr	r3, [pc, #16]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80085b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085b6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085c0:	e002      	b.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80085c2:	bf00      	nop
 80085c4:	40023800 	.word	0x40023800
 80085c8:	4985      	ldr	r1, [pc, #532]	; (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80085ca:	4313      	orrs	r3, r2
 80085cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d00b      	beq.n	80085f4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80085dc:	4b80      	ldr	r3, [pc, #512]	; (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80085de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085e2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085ec:	497c      	ldr	r1, [pc, #496]	; (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80085ee:	4313      	orrs	r3, r2
 80085f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80085f4:	69fb      	ldr	r3, [r7, #28]
 80085f6:	2b01      	cmp	r3, #1
 80085f8:	d005      	beq.n	8008606 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008602:	f040 80d6 	bne.w	80087b2 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008606:	4b76      	ldr	r3, [pc, #472]	; (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4a75      	ldr	r2, [pc, #468]	; (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800860c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008610:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008612:	f7fb fcdd 	bl	8003fd0 <HAL_GetTick>
 8008616:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008618:	e008      	b.n	800862c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800861a:	f7fb fcd9 	bl	8003fd0 <HAL_GetTick>
 800861e:	4602      	mov	r2, r0
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	1ad3      	subs	r3, r2, r3
 8008624:	2b64      	cmp	r3, #100	; 0x64
 8008626:	d901      	bls.n	800862c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008628:	2303      	movs	r3, #3
 800862a:	e194      	b.n	8008956 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800862c:	4b6c      	ldr	r3, [pc, #432]	; (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008634:	2b00      	cmp	r3, #0
 8008636:	d1f0      	bne.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f003 0301 	and.w	r3, r3, #1
 8008640:	2b00      	cmp	r3, #0
 8008642:	d021      	beq.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008648:	2b00      	cmp	r3, #0
 800864a:	d11d      	bne.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800864c:	4b64      	ldr	r3, [pc, #400]	; (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800864e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008652:	0c1b      	lsrs	r3, r3, #16
 8008654:	f003 0303 	and.w	r3, r3, #3
 8008658:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800865a:	4b61      	ldr	r3, [pc, #388]	; (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800865c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008660:	0e1b      	lsrs	r3, r3, #24
 8008662:	f003 030f 	and.w	r3, r3, #15
 8008666:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	019a      	lsls	r2, r3, #6
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	041b      	lsls	r3, r3, #16
 8008672:	431a      	orrs	r2, r3
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	061b      	lsls	r3, r3, #24
 8008678:	431a      	orrs	r2, r3
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	689b      	ldr	r3, [r3, #8]
 800867e:	071b      	lsls	r3, r3, #28
 8008680:	4957      	ldr	r1, [pc, #348]	; (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008682:	4313      	orrs	r3, r2
 8008684:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008690:	2b00      	cmp	r3, #0
 8008692:	d004      	beq.n	800869e <HAL_RCCEx_PeriphCLKConfig+0x586>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008698:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800869c:	d00a      	beq.n	80086b4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d02e      	beq.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80086b2:	d129      	bne.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80086b4:	4b4a      	ldr	r3, [pc, #296]	; (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80086b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086ba:	0c1b      	lsrs	r3, r3, #16
 80086bc:	f003 0303 	and.w	r3, r3, #3
 80086c0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80086c2:	4b47      	ldr	r3, [pc, #284]	; (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80086c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086c8:	0f1b      	lsrs	r3, r3, #28
 80086ca:	f003 0307 	and.w	r3, r3, #7
 80086ce:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	019a      	lsls	r2, r3, #6
 80086d6:	693b      	ldr	r3, [r7, #16]
 80086d8:	041b      	lsls	r3, r3, #16
 80086da:	431a      	orrs	r2, r3
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	68db      	ldr	r3, [r3, #12]
 80086e0:	061b      	lsls	r3, r3, #24
 80086e2:	431a      	orrs	r2, r3
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	071b      	lsls	r3, r3, #28
 80086e8:	493d      	ldr	r1, [pc, #244]	; (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80086ea:	4313      	orrs	r3, r2
 80086ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80086f0:	4b3b      	ldr	r3, [pc, #236]	; (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80086f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80086f6:	f023 021f 	bic.w	r2, r3, #31
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086fe:	3b01      	subs	r3, #1
 8008700:	4937      	ldr	r1, [pc, #220]	; (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008702:	4313      	orrs	r3, r2
 8008704:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008710:	2b00      	cmp	r3, #0
 8008712:	d01d      	beq.n	8008750 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008714:	4b32      	ldr	r3, [pc, #200]	; (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008716:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800871a:	0e1b      	lsrs	r3, r3, #24
 800871c:	f003 030f 	and.w	r3, r3, #15
 8008720:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008722:	4b2f      	ldr	r3, [pc, #188]	; (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008724:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008728:	0f1b      	lsrs	r3, r3, #28
 800872a:	f003 0307 	and.w	r3, r3, #7
 800872e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	019a      	lsls	r2, r3, #6
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	691b      	ldr	r3, [r3, #16]
 800873a:	041b      	lsls	r3, r3, #16
 800873c:	431a      	orrs	r2, r3
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	061b      	lsls	r3, r3, #24
 8008742:	431a      	orrs	r2, r3
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	071b      	lsls	r3, r3, #28
 8008748:	4925      	ldr	r1, [pc, #148]	; (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800874a:	4313      	orrs	r3, r2
 800874c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008758:	2b00      	cmp	r3, #0
 800875a:	d011      	beq.n	8008780 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	685b      	ldr	r3, [r3, #4]
 8008760:	019a      	lsls	r2, r3, #6
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	691b      	ldr	r3, [r3, #16]
 8008766:	041b      	lsls	r3, r3, #16
 8008768:	431a      	orrs	r2, r3
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	68db      	ldr	r3, [r3, #12]
 800876e:	061b      	lsls	r3, r3, #24
 8008770:	431a      	orrs	r2, r3
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	689b      	ldr	r3, [r3, #8]
 8008776:	071b      	lsls	r3, r3, #28
 8008778:	4919      	ldr	r1, [pc, #100]	; (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800877a:	4313      	orrs	r3, r2
 800877c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008780:	4b17      	ldr	r3, [pc, #92]	; (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4a16      	ldr	r2, [pc, #88]	; (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008786:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800878a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800878c:	f7fb fc20 	bl	8003fd0 <HAL_GetTick>
 8008790:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008792:	e008      	b.n	80087a6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008794:	f7fb fc1c 	bl	8003fd0 <HAL_GetTick>
 8008798:	4602      	mov	r2, r0
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	1ad3      	subs	r3, r2, r3
 800879e:	2b64      	cmp	r3, #100	; 0x64
 80087a0:	d901      	bls.n	80087a6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80087a2:	2303      	movs	r3, #3
 80087a4:	e0d7      	b.n	8008956 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80087a6:	4b0e      	ldr	r3, [pc, #56]	; (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d0f0      	beq.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80087b2:	69bb      	ldr	r3, [r7, #24]
 80087b4:	2b01      	cmp	r3, #1
 80087b6:	f040 80cd 	bne.w	8008954 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80087ba:	4b09      	ldr	r3, [pc, #36]	; (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	4a08      	ldr	r2, [pc, #32]	; (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80087c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80087c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80087c6:	f7fb fc03 	bl	8003fd0 <HAL_GetTick>
 80087ca:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80087cc:	e00a      	b.n	80087e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80087ce:	f7fb fbff 	bl	8003fd0 <HAL_GetTick>
 80087d2:	4602      	mov	r2, r0
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	1ad3      	subs	r3, r2, r3
 80087d8:	2b64      	cmp	r3, #100	; 0x64
 80087da:	d903      	bls.n	80087e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80087dc:	2303      	movs	r3, #3
 80087de:	e0ba      	b.n	8008956 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 80087e0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80087e4:	4b5e      	ldr	r3, [pc, #376]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80087ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087f0:	d0ed      	beq.n	80087ce <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d003      	beq.n	8008806 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008802:	2b00      	cmp	r3, #0
 8008804:	d009      	beq.n	800881a <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800880e:	2b00      	cmp	r3, #0
 8008810:	d02e      	beq.n	8008870 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008816:	2b00      	cmp	r3, #0
 8008818:	d12a      	bne.n	8008870 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800881a:	4b51      	ldr	r3, [pc, #324]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800881c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008820:	0c1b      	lsrs	r3, r3, #16
 8008822:	f003 0303 	and.w	r3, r3, #3
 8008826:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008828:	4b4d      	ldr	r3, [pc, #308]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800882a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800882e:	0f1b      	lsrs	r3, r3, #28
 8008830:	f003 0307 	and.w	r3, r3, #7
 8008834:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	695b      	ldr	r3, [r3, #20]
 800883a:	019a      	lsls	r2, r3, #6
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	041b      	lsls	r3, r3, #16
 8008840:	431a      	orrs	r2, r3
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	699b      	ldr	r3, [r3, #24]
 8008846:	061b      	lsls	r3, r3, #24
 8008848:	431a      	orrs	r2, r3
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	071b      	lsls	r3, r3, #28
 800884e:	4944      	ldr	r1, [pc, #272]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008850:	4313      	orrs	r3, r2
 8008852:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008856:	4b42      	ldr	r3, [pc, #264]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008858:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800885c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008864:	3b01      	subs	r3, #1
 8008866:	021b      	lsls	r3, r3, #8
 8008868:	493d      	ldr	r1, [pc, #244]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800886a:	4313      	orrs	r3, r2
 800886c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008878:	2b00      	cmp	r3, #0
 800887a:	d022      	beq.n	80088c2 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008880:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008884:	d11d      	bne.n	80088c2 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008886:	4b36      	ldr	r3, [pc, #216]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008888:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800888c:	0e1b      	lsrs	r3, r3, #24
 800888e:	f003 030f 	and.w	r3, r3, #15
 8008892:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008894:	4b32      	ldr	r3, [pc, #200]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800889a:	0f1b      	lsrs	r3, r3, #28
 800889c:	f003 0307 	and.w	r3, r3, #7
 80088a0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	695b      	ldr	r3, [r3, #20]
 80088a6:	019a      	lsls	r2, r3, #6
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6a1b      	ldr	r3, [r3, #32]
 80088ac:	041b      	lsls	r3, r3, #16
 80088ae:	431a      	orrs	r2, r3
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	061b      	lsls	r3, r3, #24
 80088b4:	431a      	orrs	r2, r3
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	071b      	lsls	r3, r3, #28
 80088ba:	4929      	ldr	r1, [pc, #164]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80088bc:	4313      	orrs	r3, r2
 80088be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f003 0308 	and.w	r3, r3, #8
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d028      	beq.n	8008920 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80088ce:	4b24      	ldr	r3, [pc, #144]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80088d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088d4:	0e1b      	lsrs	r3, r3, #24
 80088d6:	f003 030f 	and.w	r3, r3, #15
 80088da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80088dc:	4b20      	ldr	r3, [pc, #128]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80088de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088e2:	0c1b      	lsrs	r3, r3, #16
 80088e4:	f003 0303 	and.w	r3, r3, #3
 80088e8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	695b      	ldr	r3, [r3, #20]
 80088ee:	019a      	lsls	r2, r3, #6
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	041b      	lsls	r3, r3, #16
 80088f4:	431a      	orrs	r2, r3
 80088f6:	693b      	ldr	r3, [r7, #16]
 80088f8:	061b      	lsls	r3, r3, #24
 80088fa:	431a      	orrs	r2, r3
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	69db      	ldr	r3, [r3, #28]
 8008900:	071b      	lsls	r3, r3, #28
 8008902:	4917      	ldr	r1, [pc, #92]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008904:	4313      	orrs	r3, r2
 8008906:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800890a:	4b15      	ldr	r3, [pc, #84]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800890c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008910:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008918:	4911      	ldr	r1, [pc, #68]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800891a:	4313      	orrs	r3, r2
 800891c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008920:	4b0f      	ldr	r3, [pc, #60]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	4a0e      	ldr	r2, [pc, #56]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008926:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800892a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800892c:	f7fb fb50 	bl	8003fd0 <HAL_GetTick>
 8008930:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008932:	e008      	b.n	8008946 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008934:	f7fb fb4c 	bl	8003fd0 <HAL_GetTick>
 8008938:	4602      	mov	r2, r0
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	1ad3      	subs	r3, r2, r3
 800893e:	2b64      	cmp	r3, #100	; 0x64
 8008940:	d901      	bls.n	8008946 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008942:	2303      	movs	r3, #3
 8008944:	e007      	b.n	8008956 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008946:	4b06      	ldr	r3, [pc, #24]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800894e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008952:	d1ef      	bne.n	8008934 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8008954:	2300      	movs	r3, #0
}
 8008956:	4618      	mov	r0, r3
 8008958:	3720      	adds	r7, #32
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}
 800895e:	bf00      	nop
 8008960:	40023800 	.word	0x40023800

08008964 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b082      	sub	sp, #8
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d101      	bne.n	8008976 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8008972:	2301      	movs	r3, #1
 8008974:	e06b      	b.n	8008a4e <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	7f5b      	ldrb	r3, [r3, #29]
 800897a:	b2db      	uxtb	r3, r3
 800897c:	2b00      	cmp	r3, #0
 800897e:	d105      	bne.n	800898c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2200      	movs	r2, #0
 8008984:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f7fa fdc4 	bl	8003514 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2202      	movs	r2, #2
 8008990:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	22ca      	movs	r2, #202	; 0xca
 8008998:	625a      	str	r2, [r3, #36]	; 0x24
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	2253      	movs	r2, #83	; 0x53
 80089a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f000 f9e8 	bl	8008d78 <RTC_EnterInitMode>
 80089a8:	4603      	mov	r3, r0
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d008      	beq.n	80089c0 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	22ff      	movs	r2, #255	; 0xff
 80089b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2204      	movs	r2, #4
 80089ba:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80089bc:	2301      	movs	r3, #1
 80089be:	e046      	b.n	8008a4e <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	6899      	ldr	r1, [r3, #8]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681a      	ldr	r2, [r3, #0]
 80089ca:	4b23      	ldr	r3, [pc, #140]	; (8008a58 <HAL_RTC_Init+0xf4>)
 80089cc:	400b      	ands	r3, r1
 80089ce:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	6899      	ldr	r1, [r3, #8]
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	685a      	ldr	r2, [r3, #4]
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	691b      	ldr	r3, [r3, #16]
 80089de:	431a      	orrs	r2, r3
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	695b      	ldr	r3, [r3, #20]
 80089e4:	431a      	orrs	r2, r3
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	430a      	orrs	r2, r1
 80089ec:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	687a      	ldr	r2, [r7, #4]
 80089f4:	68d2      	ldr	r2, [r2, #12]
 80089f6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	6919      	ldr	r1, [r3, #16]
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	689b      	ldr	r3, [r3, #8]
 8008a02:	041a      	lsls	r2, r3, #16
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	430a      	orrs	r2, r1
 8008a0a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	68da      	ldr	r2, [r3, #12]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008a1a:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f022 0208 	bic.w	r2, r2, #8
 8008a2a:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	699a      	ldr	r2, [r3, #24]
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	430a      	orrs	r2, r1
 8008a3c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	22ff      	movs	r2, #255	; 0xff
 8008a44:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2201      	movs	r2, #1
 8008a4a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8008a4c:	2300      	movs	r3, #0
  }
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3708      	adds	r7, #8
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}
 8008a56:	bf00      	nop
 8008a58:	ff8fffbf 	.word	0xff8fffbf

08008a5c <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008a5c:	b590      	push	{r4, r7, lr}
 8008a5e:	b087      	sub	sp, #28
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	60f8      	str	r0, [r7, #12]
 8008a64:	60b9      	str	r1, [r7, #8]
 8008a66:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	7f1b      	ldrb	r3, [r3, #28]
 8008a70:	2b01      	cmp	r3, #1
 8008a72:	d101      	bne.n	8008a78 <HAL_RTC_SetTime+0x1c>
 8008a74:	2302      	movs	r3, #2
 8008a76:	e0a8      	b.n	8008bca <HAL_RTC_SetTime+0x16e>
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	2202      	movs	r2, #2
 8008a82:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d126      	bne.n	8008ad8 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	689b      	ldr	r3, [r3, #8]
 8008a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d102      	bne.n	8008a9e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	781b      	ldrb	r3, [r3, #0]
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f000 f994 	bl	8008dd0 <RTC_ByteToBcd2>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	785b      	ldrb	r3, [r3, #1]
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f000 f98d 	bl	8008dd0 <RTC_ByteToBcd2>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008aba:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	789b      	ldrb	r3, [r3, #2]
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	f000 f985 	bl	8008dd0 <RTC_ByteToBcd2>
 8008ac6:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8008ac8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	7b1b      	ldrb	r3, [r3, #12]
 8008ad0:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	617b      	str	r3, [r7, #20]
 8008ad6:	e018      	b.n	8008b0a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	689b      	ldr	r3, [r3, #8]
 8008ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d102      	bne.n	8008aec <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	781b      	ldrb	r3, [r3, #0]
 8008af0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	785b      	ldrb	r3, [r3, #1]
 8008af6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008af8:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8008afa:	68ba      	ldr	r2, [r7, #8]
 8008afc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8008afe:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	7b1b      	ldrb	r3, [r3, #12]
 8008b04:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008b06:	4313      	orrs	r3, r2
 8008b08:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	22ca      	movs	r2, #202	; 0xca
 8008b10:	625a      	str	r2, [r3, #36]	; 0x24
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	2253      	movs	r2, #83	; 0x53
 8008b18:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008b1a:	68f8      	ldr	r0, [r7, #12]
 8008b1c:	f000 f92c 	bl	8008d78 <RTC_EnterInitMode>
 8008b20:	4603      	mov	r3, r0
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d00b      	beq.n	8008b3e <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	22ff      	movs	r2, #255	; 0xff
 8008b2c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	2204      	movs	r2, #4
 8008b32:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2200      	movs	r2, #0
 8008b38:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	e045      	b.n	8008bca <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681a      	ldr	r2, [r3, #0]
 8008b42:	6979      	ldr	r1, [r7, #20]
 8008b44:	4b23      	ldr	r3, [pc, #140]	; (8008bd4 <HAL_RTC_SetTime+0x178>)
 8008b46:	400b      	ands	r3, r1
 8008b48:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	689a      	ldr	r2, [r3, #8]
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008b58:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	6899      	ldr	r1, [r3, #8]
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	691a      	ldr	r2, [r3, #16]
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	695b      	ldr	r3, [r3, #20]
 8008b68:	431a      	orrs	r2, r3
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	430a      	orrs	r2, r1
 8008b70:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	68da      	ldr	r2, [r3, #12]
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008b80:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	689b      	ldr	r3, [r3, #8]
 8008b88:	f003 0320 	and.w	r3, r3, #32
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d111      	bne.n	8008bb4 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008b90:	68f8      	ldr	r0, [r7, #12]
 8008b92:	f000 f8c9 	bl	8008d28 <HAL_RTC_WaitForSynchro>
 8008b96:	4603      	mov	r3, r0
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d00b      	beq.n	8008bb4 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	22ff      	movs	r2, #255	; 0xff
 8008ba2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	2204      	movs	r2, #4
 8008ba8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	2200      	movs	r2, #0
 8008bae:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	e00a      	b.n	8008bca <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	22ff      	movs	r2, #255	; 0xff
 8008bba:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8008bc8:	2300      	movs	r3, #0
  }
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	371c      	adds	r7, #28
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd90      	pop	{r4, r7, pc}
 8008bd2:	bf00      	nop
 8008bd4:	007f7f7f 	.word	0x007f7f7f

08008bd8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008bd8:	b590      	push	{r4, r7, lr}
 8008bda:	b087      	sub	sp, #28
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	60f8      	str	r0, [r7, #12]
 8008be0:	60b9      	str	r1, [r7, #8]
 8008be2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8008be4:	2300      	movs	r3, #0
 8008be6:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	7f1b      	ldrb	r3, [r3, #28]
 8008bec:	2b01      	cmp	r3, #1
 8008bee:	d101      	bne.n	8008bf4 <HAL_RTC_SetDate+0x1c>
 8008bf0:	2302      	movs	r3, #2
 8008bf2:	e092      	b.n	8008d1a <HAL_RTC_SetDate+0x142>
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	2202      	movs	r2, #2
 8008bfe:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d10e      	bne.n	8008c24 <HAL_RTC_SetDate+0x4c>
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	785b      	ldrb	r3, [r3, #1]
 8008c0a:	f003 0310 	and.w	r3, r3, #16
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d008      	beq.n	8008c24 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	785b      	ldrb	r3, [r3, #1]
 8008c16:	f023 0310 	bic.w	r3, r3, #16
 8008c1a:	b2db      	uxtb	r3, r3
 8008c1c:	330a      	adds	r3, #10
 8008c1e:	b2da      	uxtb	r2, r3
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d11c      	bne.n	8008c64 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	78db      	ldrb	r3, [r3, #3]
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f000 f8ce 	bl	8008dd0 <RTC_ByteToBcd2>
 8008c34:	4603      	mov	r3, r0
 8008c36:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	785b      	ldrb	r3, [r3, #1]
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	f000 f8c7 	bl	8008dd0 <RTC_ByteToBcd2>
 8008c42:	4603      	mov	r3, r0
 8008c44:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008c46:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	789b      	ldrb	r3, [r3, #2]
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f000 f8bf 	bl	8008dd0 <RTC_ByteToBcd2>
 8008c52:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8008c54:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	781b      	ldrb	r3, [r3, #0]
 8008c5c:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008c5e:	4313      	orrs	r3, r2
 8008c60:	617b      	str	r3, [r7, #20]
 8008c62:	e00e      	b.n	8008c82 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	78db      	ldrb	r3, [r3, #3]
 8008c68:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	785b      	ldrb	r3, [r3, #1]
 8008c6e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008c70:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8008c72:	68ba      	ldr	r2, [r7, #8]
 8008c74:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8008c76:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	781b      	ldrb	r3, [r3, #0]
 8008c7c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008c7e:	4313      	orrs	r3, r2
 8008c80:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	22ca      	movs	r2, #202	; 0xca
 8008c88:	625a      	str	r2, [r3, #36]	; 0x24
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	2253      	movs	r2, #83	; 0x53
 8008c90:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008c92:	68f8      	ldr	r0, [r7, #12]
 8008c94:	f000 f870 	bl	8008d78 <RTC_EnterInitMode>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d00b      	beq.n	8008cb6 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	22ff      	movs	r2, #255	; 0xff
 8008ca4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	2204      	movs	r2, #4
 8008caa:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	e031      	b.n	8008d1a <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681a      	ldr	r2, [r3, #0]
 8008cba:	6979      	ldr	r1, [r7, #20]
 8008cbc:	4b19      	ldr	r3, [pc, #100]	; (8008d24 <HAL_RTC_SetDate+0x14c>)
 8008cbe:	400b      	ands	r3, r1
 8008cc0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	68da      	ldr	r2, [r3, #12]
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008cd0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	689b      	ldr	r3, [r3, #8]
 8008cd8:	f003 0320 	and.w	r3, r3, #32
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d111      	bne.n	8008d04 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008ce0:	68f8      	ldr	r0, [r7, #12]
 8008ce2:	f000 f821 	bl	8008d28 <HAL_RTC_WaitForSynchro>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d00b      	beq.n	8008d04 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	22ff      	movs	r2, #255	; 0xff
 8008cf2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	2204      	movs	r2, #4
 8008cf8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008d00:	2301      	movs	r3, #1
 8008d02:	e00a      	b.n	8008d1a <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	22ff      	movs	r2, #255	; 0xff
 8008d0a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	2201      	movs	r2, #1
 8008d10:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	2200      	movs	r2, #0
 8008d16:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8008d18:	2300      	movs	r3, #0
  }
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	371c      	adds	r7, #28
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd90      	pop	{r4, r7, pc}
 8008d22:	bf00      	nop
 8008d24:	00ffff3f 	.word	0x00ffff3f

08008d28 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b084      	sub	sp, #16
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008d30:	2300      	movs	r3, #0
 8008d32:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	68da      	ldr	r2, [r3, #12]
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008d42:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008d44:	f7fb f944 	bl	8003fd0 <HAL_GetTick>
 8008d48:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008d4a:	e009      	b.n	8008d60 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008d4c:	f7fb f940 	bl	8003fd0 <HAL_GetTick>
 8008d50:	4602      	mov	r2, r0
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	1ad3      	subs	r3, r2, r3
 8008d56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008d5a:	d901      	bls.n	8008d60 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008d5c:	2303      	movs	r3, #3
 8008d5e:	e007      	b.n	8008d70 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	68db      	ldr	r3, [r3, #12]
 8008d66:	f003 0320 	and.w	r3, r3, #32
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d0ee      	beq.n	8008d4c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8008d6e:	2300      	movs	r3, #0
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3710      	adds	r7, #16
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}

08008d78 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b084      	sub	sp, #16
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008d80:	2300      	movs	r3, #0
 8008d82:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	68db      	ldr	r3, [r3, #12]
 8008d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d119      	bne.n	8008dc6 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f04f 32ff 	mov.w	r2, #4294967295
 8008d9a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008d9c:	f7fb f918 	bl	8003fd0 <HAL_GetTick>
 8008da0:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008da2:	e009      	b.n	8008db8 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008da4:	f7fb f914 	bl	8003fd0 <HAL_GetTick>
 8008da8:	4602      	mov	r2, r0
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	1ad3      	subs	r3, r2, r3
 8008dae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008db2:	d901      	bls.n	8008db8 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8008db4:	2303      	movs	r3, #3
 8008db6:	e007      	b.n	8008dc8 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	68db      	ldr	r3, [r3, #12]
 8008dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d0ee      	beq.n	8008da4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8008dc6:	2300      	movs	r3, #0
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3710      	adds	r7, #16
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}

08008dd0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b085      	sub	sp, #20
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8008dde:	e005      	b.n	8008dec <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	3301      	adds	r3, #1
 8008de4:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8008de6:	79fb      	ldrb	r3, [r7, #7]
 8008de8:	3b0a      	subs	r3, #10
 8008dea:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8008dec:	79fb      	ldrb	r3, [r7, #7]
 8008dee:	2b09      	cmp	r3, #9
 8008df0:	d8f6      	bhi.n	8008de0 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	b2db      	uxtb	r3, r3
 8008df6:	011b      	lsls	r3, r3, #4
 8008df8:	b2da      	uxtb	r2, r3
 8008dfa:	79fb      	ldrb	r3, [r7, #7]
 8008dfc:	4313      	orrs	r3, r2
 8008dfe:	b2db      	uxtb	r3, r3
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3714      	adds	r7, #20
 8008e04:	46bd      	mov	sp, r7
 8008e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0a:	4770      	bx	lr

08008e0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b084      	sub	sp, #16
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d101      	bne.n	8008e1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	e084      	b.n	8008f28 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2200      	movs	r2, #0
 8008e22:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008e2a:	b2db      	uxtb	r3, r3
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d106      	bne.n	8008e3e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2200      	movs	r2, #0
 8008e34:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f7fa fbe7 	bl	800360c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2202      	movs	r2, #2
 8008e42:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	681a      	ldr	r2, [r3, #0]
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e54:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	68db      	ldr	r3, [r3, #12]
 8008e5a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008e5e:	d902      	bls.n	8008e66 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008e60:	2300      	movs	r3, #0
 8008e62:	60fb      	str	r3, [r7, #12]
 8008e64:	e002      	b.n	8008e6c <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008e66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e6a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	68db      	ldr	r3, [r3, #12]
 8008e70:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008e74:	d007      	beq.n	8008e86 <HAL_SPI_Init+0x7a>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	68db      	ldr	r3, [r3, #12]
 8008e7a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008e7e:	d002      	beq.n	8008e86 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2200      	movs	r2, #0
 8008e84:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d10b      	bne.n	8008ea6 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	68db      	ldr	r3, [r3, #12]
 8008e92:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008e96:	d903      	bls.n	8008ea0 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2202      	movs	r2, #2
 8008e9c:	631a      	str	r2, [r3, #48]	; 0x30
 8008e9e:	e002      	b.n	8008ea6 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2201      	movs	r2, #1
 8008ea4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	685a      	ldr	r2, [r3, #4]
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	689b      	ldr	r3, [r3, #8]
 8008eae:	431a      	orrs	r2, r3
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	691b      	ldr	r3, [r3, #16]
 8008eb4:	431a      	orrs	r2, r3
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	695b      	ldr	r3, [r3, #20]
 8008eba:	431a      	orrs	r2, r3
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	699b      	ldr	r3, [r3, #24]
 8008ec0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008ec4:	431a      	orrs	r2, r3
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	69db      	ldr	r3, [r3, #28]
 8008eca:	431a      	orrs	r2, r3
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6a1b      	ldr	r3, [r3, #32]
 8008ed0:	ea42 0103 	orr.w	r1, r2, r3
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	430a      	orrs	r2, r1
 8008ede:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	699b      	ldr	r3, [r3, #24]
 8008ee4:	0c1b      	lsrs	r3, r3, #16
 8008ee6:	f003 0204 	and.w	r2, r3, #4
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eee:	431a      	orrs	r2, r3
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ef4:	431a      	orrs	r2, r3
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	68db      	ldr	r3, [r3, #12]
 8008efa:	ea42 0103 	orr.w	r1, r2, r3
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	68fa      	ldr	r2, [r7, #12]
 8008f04:	430a      	orrs	r2, r1
 8008f06:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	69da      	ldr	r2, [r3, #28]
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008f16:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2201      	movs	r2, #1
 8008f22:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008f26:	2300      	movs	r3, #0
}
 8008f28:	4618      	mov	r0, r3
 8008f2a:	3710      	adds	r7, #16
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bd80      	pop	{r7, pc}

08008f30 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b088      	sub	sp, #32
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	60f8      	str	r0, [r7, #12]
 8008f38:	60b9      	str	r1, [r7, #8]
 8008f3a:	603b      	str	r3, [r7, #0]
 8008f3c:	4613      	mov	r3, r2
 8008f3e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008f40:	2300      	movs	r3, #0
 8008f42:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008f4a:	2b01      	cmp	r3, #1
 8008f4c:	d101      	bne.n	8008f52 <HAL_SPI_Transmit+0x22>
 8008f4e:	2302      	movs	r3, #2
 8008f50:	e150      	b.n	80091f4 <HAL_SPI_Transmit+0x2c4>
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	2201      	movs	r2, #1
 8008f56:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008f5a:	f7fb f839 	bl	8003fd0 <HAL_GetTick>
 8008f5e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008f60:	88fb      	ldrh	r3, [r7, #6]
 8008f62:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008f6a:	b2db      	uxtb	r3, r3
 8008f6c:	2b01      	cmp	r3, #1
 8008f6e:	d002      	beq.n	8008f76 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008f70:	2302      	movs	r3, #2
 8008f72:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008f74:	e135      	b.n	80091e2 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d002      	beq.n	8008f82 <HAL_SPI_Transmit+0x52>
 8008f7c:	88fb      	ldrh	r3, [r7, #6]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d102      	bne.n	8008f88 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008f82:	2301      	movs	r3, #1
 8008f84:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008f86:	e12c      	b.n	80091e2 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	2203      	movs	r2, #3
 8008f8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	2200      	movs	r2, #0
 8008f94:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	68ba      	ldr	r2, [r7, #8]
 8008f9a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	88fa      	ldrh	r2, [r7, #6]
 8008fa0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	88fa      	ldrh	r2, [r7, #6]
 8008fa6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	2200      	movs	r2, #0
 8008fac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	689b      	ldr	r3, [r3, #8]
 8008fce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008fd2:	d107      	bne.n	8008fe4 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	681a      	ldr	r2, [r3, #0]
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008fe2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fee:	2b40      	cmp	r3, #64	; 0x40
 8008ff0:	d007      	beq.n	8009002 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	681a      	ldr	r2, [r3, #0]
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009000:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	68db      	ldr	r3, [r3, #12]
 8009006:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800900a:	d94b      	bls.n	80090a4 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	685b      	ldr	r3, [r3, #4]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d002      	beq.n	800901a <HAL_SPI_Transmit+0xea>
 8009014:	8afb      	ldrh	r3, [r7, #22]
 8009016:	2b01      	cmp	r3, #1
 8009018:	d13e      	bne.n	8009098 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800901e:	881a      	ldrh	r2, [r3, #0]
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800902a:	1c9a      	adds	r2, r3, #2
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009034:	b29b      	uxth	r3, r3
 8009036:	3b01      	subs	r3, #1
 8009038:	b29a      	uxth	r2, r3
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800903e:	e02b      	b.n	8009098 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	689b      	ldr	r3, [r3, #8]
 8009046:	f003 0302 	and.w	r3, r3, #2
 800904a:	2b02      	cmp	r3, #2
 800904c:	d112      	bne.n	8009074 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009052:	881a      	ldrh	r2, [r3, #0]
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800905e:	1c9a      	adds	r2, r3, #2
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009068:	b29b      	uxth	r3, r3
 800906a:	3b01      	subs	r3, #1
 800906c:	b29a      	uxth	r2, r3
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009072:	e011      	b.n	8009098 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009074:	f7fa ffac 	bl	8003fd0 <HAL_GetTick>
 8009078:	4602      	mov	r2, r0
 800907a:	69bb      	ldr	r3, [r7, #24]
 800907c:	1ad3      	subs	r3, r2, r3
 800907e:	683a      	ldr	r2, [r7, #0]
 8009080:	429a      	cmp	r2, r3
 8009082:	d803      	bhi.n	800908c <HAL_SPI_Transmit+0x15c>
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800908a:	d102      	bne.n	8009092 <HAL_SPI_Transmit+0x162>
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d102      	bne.n	8009098 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8009092:	2303      	movs	r3, #3
 8009094:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009096:	e0a4      	b.n	80091e2 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800909c:	b29b      	uxth	r3, r3
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d1ce      	bne.n	8009040 <HAL_SPI_Transmit+0x110>
 80090a2:	e07c      	b.n	800919e <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	685b      	ldr	r3, [r3, #4]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d002      	beq.n	80090b2 <HAL_SPI_Transmit+0x182>
 80090ac:	8afb      	ldrh	r3, [r7, #22]
 80090ae:	2b01      	cmp	r3, #1
 80090b0:	d170      	bne.n	8009194 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80090b6:	b29b      	uxth	r3, r3
 80090b8:	2b01      	cmp	r3, #1
 80090ba:	d912      	bls.n	80090e2 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090c0:	881a      	ldrh	r2, [r3, #0]
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090cc:	1c9a      	adds	r2, r3, #2
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80090d6:	b29b      	uxth	r3, r3
 80090d8:	3b02      	subs	r3, #2
 80090da:	b29a      	uxth	r2, r3
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	87da      	strh	r2, [r3, #62]	; 0x3e
 80090e0:	e058      	b.n	8009194 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	330c      	adds	r3, #12
 80090ec:	7812      	ldrb	r2, [r2, #0]
 80090ee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090f4:	1c5a      	adds	r2, r3, #1
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80090fe:	b29b      	uxth	r3, r3
 8009100:	3b01      	subs	r3, #1
 8009102:	b29a      	uxth	r2, r3
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8009108:	e044      	b.n	8009194 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	689b      	ldr	r3, [r3, #8]
 8009110:	f003 0302 	and.w	r3, r3, #2
 8009114:	2b02      	cmp	r3, #2
 8009116:	d12b      	bne.n	8009170 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800911c:	b29b      	uxth	r3, r3
 800911e:	2b01      	cmp	r3, #1
 8009120:	d912      	bls.n	8009148 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009126:	881a      	ldrh	r2, [r3, #0]
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009132:	1c9a      	adds	r2, r3, #2
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800913c:	b29b      	uxth	r3, r3
 800913e:	3b02      	subs	r3, #2
 8009140:	b29a      	uxth	r2, r3
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009146:	e025      	b.n	8009194 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	330c      	adds	r3, #12
 8009152:	7812      	ldrb	r2, [r2, #0]
 8009154:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800915a:	1c5a      	adds	r2, r3, #1
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009164:	b29b      	uxth	r3, r3
 8009166:	3b01      	subs	r3, #1
 8009168:	b29a      	uxth	r2, r3
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800916e:	e011      	b.n	8009194 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009170:	f7fa ff2e 	bl	8003fd0 <HAL_GetTick>
 8009174:	4602      	mov	r2, r0
 8009176:	69bb      	ldr	r3, [r7, #24]
 8009178:	1ad3      	subs	r3, r2, r3
 800917a:	683a      	ldr	r2, [r7, #0]
 800917c:	429a      	cmp	r2, r3
 800917e:	d803      	bhi.n	8009188 <HAL_SPI_Transmit+0x258>
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009186:	d102      	bne.n	800918e <HAL_SPI_Transmit+0x25e>
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d102      	bne.n	8009194 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 800918e:	2303      	movs	r3, #3
 8009190:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009192:	e026      	b.n	80091e2 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009198:	b29b      	uxth	r3, r3
 800919a:	2b00      	cmp	r3, #0
 800919c:	d1b5      	bne.n	800910a <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800919e:	69ba      	ldr	r2, [r7, #24]
 80091a0:	6839      	ldr	r1, [r7, #0]
 80091a2:	68f8      	ldr	r0, [r7, #12]
 80091a4:	f000 fca2 	bl	8009aec <SPI_EndRxTxTransaction>
 80091a8:	4603      	mov	r3, r0
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d002      	beq.n	80091b4 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	2220      	movs	r2, #32
 80091b2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	689b      	ldr	r3, [r3, #8]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d10a      	bne.n	80091d2 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80091bc:	2300      	movs	r3, #0
 80091be:	613b      	str	r3, [r7, #16]
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	68db      	ldr	r3, [r3, #12]
 80091c6:	613b      	str	r3, [r7, #16]
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	689b      	ldr	r3, [r3, #8]
 80091ce:	613b      	str	r3, [r7, #16]
 80091d0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d002      	beq.n	80091e0 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 80091da:	2301      	movs	r3, #1
 80091dc:	77fb      	strb	r3, [r7, #31]
 80091de:	e000      	b.n	80091e2 <HAL_SPI_Transmit+0x2b2>
  }

error:
 80091e0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	2201      	movs	r2, #1
 80091e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	2200      	movs	r2, #0
 80091ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80091f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	3720      	adds	r7, #32
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}

080091fc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b088      	sub	sp, #32
 8009200:	af02      	add	r7, sp, #8
 8009202:	60f8      	str	r0, [r7, #12]
 8009204:	60b9      	str	r1, [r7, #8]
 8009206:	603b      	str	r3, [r7, #0]
 8009208:	4613      	mov	r3, r2
 800920a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800920c:	2300      	movs	r3, #0
 800920e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	685b      	ldr	r3, [r3, #4]
 8009214:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009218:	d112      	bne.n	8009240 <HAL_SPI_Receive+0x44>
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	689b      	ldr	r3, [r3, #8]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d10e      	bne.n	8009240 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	2204      	movs	r2, #4
 8009226:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800922a:	88fa      	ldrh	r2, [r7, #6]
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	9300      	str	r3, [sp, #0]
 8009230:	4613      	mov	r3, r2
 8009232:	68ba      	ldr	r2, [r7, #8]
 8009234:	68b9      	ldr	r1, [r7, #8]
 8009236:	68f8      	ldr	r0, [r7, #12]
 8009238:	f000 f908 	bl	800944c <HAL_SPI_TransmitReceive>
 800923c:	4603      	mov	r3, r0
 800923e:	e101      	b.n	8009444 <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009246:	2b01      	cmp	r3, #1
 8009248:	d101      	bne.n	800924e <HAL_SPI_Receive+0x52>
 800924a:	2302      	movs	r3, #2
 800924c:	e0fa      	b.n	8009444 <HAL_SPI_Receive+0x248>
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	2201      	movs	r2, #1
 8009252:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009256:	f7fa febb 	bl	8003fd0 <HAL_GetTick>
 800925a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009262:	b2db      	uxtb	r3, r3
 8009264:	2b01      	cmp	r3, #1
 8009266:	d002      	beq.n	800926e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8009268:	2302      	movs	r3, #2
 800926a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800926c:	e0e1      	b.n	8009432 <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d002      	beq.n	800927a <HAL_SPI_Receive+0x7e>
 8009274:	88fb      	ldrh	r3, [r7, #6]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d102      	bne.n	8009280 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800927a:	2301      	movs	r3, #1
 800927c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800927e:	e0d8      	b.n	8009432 <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	2204      	movs	r2, #4
 8009284:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	2200      	movs	r2, #0
 800928c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	68ba      	ldr	r2, [r7, #8]
 8009292:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	88fa      	ldrh	r2, [r7, #6]
 8009298:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	88fa      	ldrh	r2, [r7, #6]
 80092a0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	2200      	movs	r2, #0
 80092a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	2200      	movs	r2, #0
 80092ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	2200      	movs	r2, #0
 80092b4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	2200      	movs	r2, #0
 80092ba:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	2200      	movs	r2, #0
 80092c0:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	68db      	ldr	r3, [r3, #12]
 80092c6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80092ca:	d908      	bls.n	80092de <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	685a      	ldr	r2, [r3, #4]
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80092da:	605a      	str	r2, [r3, #4]
 80092dc:	e007      	b.n	80092ee <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	685a      	ldr	r2, [r3, #4]
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80092ec:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	689b      	ldr	r3, [r3, #8]
 80092f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80092f6:	d107      	bne.n	8009308 <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	681a      	ldr	r2, [r3, #0]
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009306:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009312:	2b40      	cmp	r3, #64	; 0x40
 8009314:	d007      	beq.n	8009326 <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	681a      	ldr	r2, [r3, #0]
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009324:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	68db      	ldr	r3, [r3, #12]
 800932a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800932e:	d867      	bhi.n	8009400 <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009330:	e030      	b.n	8009394 <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	689b      	ldr	r3, [r3, #8]
 8009338:	f003 0301 	and.w	r3, r3, #1
 800933c:	2b01      	cmp	r3, #1
 800933e:	d117      	bne.n	8009370 <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f103 020c 	add.w	r2, r3, #12
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800934c:	7812      	ldrb	r2, [r2, #0]
 800934e:	b2d2      	uxtb	r2, r2
 8009350:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009356:	1c5a      	adds	r2, r3, #1
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009362:	b29b      	uxth	r3, r3
 8009364:	3b01      	subs	r3, #1
 8009366:	b29a      	uxth	r2, r3
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800936e:	e011      	b.n	8009394 <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009370:	f7fa fe2e 	bl	8003fd0 <HAL_GetTick>
 8009374:	4602      	mov	r2, r0
 8009376:	693b      	ldr	r3, [r7, #16]
 8009378:	1ad3      	subs	r3, r2, r3
 800937a:	683a      	ldr	r2, [r7, #0]
 800937c:	429a      	cmp	r2, r3
 800937e:	d803      	bhi.n	8009388 <HAL_SPI_Receive+0x18c>
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009386:	d102      	bne.n	800938e <HAL_SPI_Receive+0x192>
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d102      	bne.n	8009394 <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 800938e:	2303      	movs	r3, #3
 8009390:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009392:	e04e      	b.n	8009432 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800939a:	b29b      	uxth	r3, r3
 800939c:	2b00      	cmp	r3, #0
 800939e:	d1c8      	bne.n	8009332 <HAL_SPI_Receive+0x136>
 80093a0:	e034      	b.n	800940c <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	689b      	ldr	r3, [r3, #8]
 80093a8:	f003 0301 	and.w	r3, r3, #1
 80093ac:	2b01      	cmp	r3, #1
 80093ae:	d115      	bne.n	80093dc <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	68da      	ldr	r2, [r3, #12]
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093ba:	b292      	uxth	r2, r2
 80093bc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093c2:	1c9a      	adds	r2, r3, #2
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80093ce:	b29b      	uxth	r3, r3
 80093d0:	3b01      	subs	r3, #1
 80093d2:	b29a      	uxth	r2, r3
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80093da:	e011      	b.n	8009400 <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80093dc:	f7fa fdf8 	bl	8003fd0 <HAL_GetTick>
 80093e0:	4602      	mov	r2, r0
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	1ad3      	subs	r3, r2, r3
 80093e6:	683a      	ldr	r2, [r7, #0]
 80093e8:	429a      	cmp	r2, r3
 80093ea:	d803      	bhi.n	80093f4 <HAL_SPI_Receive+0x1f8>
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093f2:	d102      	bne.n	80093fa <HAL_SPI_Receive+0x1fe>
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d102      	bne.n	8009400 <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 80093fa:	2303      	movs	r3, #3
 80093fc:	75fb      	strb	r3, [r7, #23]
          goto error;
 80093fe:	e018      	b.n	8009432 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009406:	b29b      	uxth	r3, r3
 8009408:	2b00      	cmp	r3, #0
 800940a:	d1ca      	bne.n	80093a2 <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800940c:	693a      	ldr	r2, [r7, #16]
 800940e:	6839      	ldr	r1, [r7, #0]
 8009410:	68f8      	ldr	r0, [r7, #12]
 8009412:	f000 fb13 	bl	8009a3c <SPI_EndRxTransaction>
 8009416:	4603      	mov	r3, r0
 8009418:	2b00      	cmp	r3, #0
 800941a:	d002      	beq.n	8009422 <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	2220      	movs	r2, #32
 8009420:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009426:	2b00      	cmp	r3, #0
 8009428:	d002      	beq.n	8009430 <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 800942a:	2301      	movs	r3, #1
 800942c:	75fb      	strb	r3, [r7, #23]
 800942e:	e000      	b.n	8009432 <HAL_SPI_Receive+0x236>
  }

error :
 8009430:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	2201      	movs	r2, #1
 8009436:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	2200      	movs	r2, #0
 800943e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009442:	7dfb      	ldrb	r3, [r7, #23]
}
 8009444:	4618      	mov	r0, r3
 8009446:	3718      	adds	r7, #24
 8009448:	46bd      	mov	sp, r7
 800944a:	bd80      	pop	{r7, pc}

0800944c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b08a      	sub	sp, #40	; 0x28
 8009450:	af00      	add	r7, sp, #0
 8009452:	60f8      	str	r0, [r7, #12]
 8009454:	60b9      	str	r1, [r7, #8]
 8009456:	607a      	str	r2, [r7, #4]
 8009458:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800945a:	2301      	movs	r3, #1
 800945c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800945e:	2300      	movs	r3, #0
 8009460:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800946a:	2b01      	cmp	r3, #1
 800946c:	d101      	bne.n	8009472 <HAL_SPI_TransmitReceive+0x26>
 800946e:	2302      	movs	r3, #2
 8009470:	e1fb      	b.n	800986a <HAL_SPI_TransmitReceive+0x41e>
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	2201      	movs	r2, #1
 8009476:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800947a:	f7fa fda9 	bl	8003fd0 <HAL_GetTick>
 800947e:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009486:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	685b      	ldr	r3, [r3, #4]
 800948c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800948e:	887b      	ldrh	r3, [r7, #2]
 8009490:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8009492:	887b      	ldrh	r3, [r7, #2]
 8009494:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009496:	7efb      	ldrb	r3, [r7, #27]
 8009498:	2b01      	cmp	r3, #1
 800949a:	d00e      	beq.n	80094ba <HAL_SPI_TransmitReceive+0x6e>
 800949c:	697b      	ldr	r3, [r7, #20]
 800949e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80094a2:	d106      	bne.n	80094b2 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	689b      	ldr	r3, [r3, #8]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d102      	bne.n	80094b2 <HAL_SPI_TransmitReceive+0x66>
 80094ac:	7efb      	ldrb	r3, [r7, #27]
 80094ae:	2b04      	cmp	r3, #4
 80094b0:	d003      	beq.n	80094ba <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80094b2:	2302      	movs	r3, #2
 80094b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80094b8:	e1cd      	b.n	8009856 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d005      	beq.n	80094cc <HAL_SPI_TransmitReceive+0x80>
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d002      	beq.n	80094cc <HAL_SPI_TransmitReceive+0x80>
 80094c6:	887b      	ldrh	r3, [r7, #2]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d103      	bne.n	80094d4 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80094cc:	2301      	movs	r3, #1
 80094ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80094d2:	e1c0      	b.n	8009856 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80094da:	b2db      	uxtb	r3, r3
 80094dc:	2b04      	cmp	r3, #4
 80094de:	d003      	beq.n	80094e8 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	2205      	movs	r2, #5
 80094e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	2200      	movs	r2, #0
 80094ec:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	687a      	ldr	r2, [r7, #4]
 80094f2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	887a      	ldrh	r2, [r7, #2]
 80094f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	887a      	ldrh	r2, [r7, #2]
 8009500:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	68ba      	ldr	r2, [r7, #8]
 8009508:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	887a      	ldrh	r2, [r7, #2]
 800950e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	887a      	ldrh	r2, [r7, #2]
 8009514:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	2200      	movs	r2, #0
 800951a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	2200      	movs	r2, #0
 8009520:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	68db      	ldr	r3, [r3, #12]
 8009526:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800952a:	d802      	bhi.n	8009532 <HAL_SPI_TransmitReceive+0xe6>
 800952c:	8a3b      	ldrh	r3, [r7, #16]
 800952e:	2b01      	cmp	r3, #1
 8009530:	d908      	bls.n	8009544 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	685a      	ldr	r2, [r3, #4]
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009540:	605a      	str	r2, [r3, #4]
 8009542:	e007      	b.n	8009554 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	685a      	ldr	r2, [r3, #4]
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009552:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800955e:	2b40      	cmp	r3, #64	; 0x40
 8009560:	d007      	beq.n	8009572 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	681a      	ldr	r2, [r3, #0]
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009570:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	68db      	ldr	r3, [r3, #12]
 8009576:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800957a:	d97c      	bls.n	8009676 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	685b      	ldr	r3, [r3, #4]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d002      	beq.n	800958a <HAL_SPI_TransmitReceive+0x13e>
 8009584:	8a7b      	ldrh	r3, [r7, #18]
 8009586:	2b01      	cmp	r3, #1
 8009588:	d169      	bne.n	800965e <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800958e:	881a      	ldrh	r2, [r3, #0]
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800959a:	1c9a      	adds	r2, r3, #2
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095a4:	b29b      	uxth	r3, r3
 80095a6:	3b01      	subs	r3, #1
 80095a8:	b29a      	uxth	r2, r3
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80095ae:	e056      	b.n	800965e <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	689b      	ldr	r3, [r3, #8]
 80095b6:	f003 0302 	and.w	r3, r3, #2
 80095ba:	2b02      	cmp	r3, #2
 80095bc:	d11b      	bne.n	80095f6 <HAL_SPI_TransmitReceive+0x1aa>
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095c2:	b29b      	uxth	r3, r3
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d016      	beq.n	80095f6 <HAL_SPI_TransmitReceive+0x1aa>
 80095c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ca:	2b01      	cmp	r3, #1
 80095cc:	d113      	bne.n	80095f6 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095d2:	881a      	ldrh	r2, [r3, #0]
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095de:	1c9a      	adds	r2, r3, #2
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095e8:	b29b      	uxth	r3, r3
 80095ea:	3b01      	subs	r3, #1
 80095ec:	b29a      	uxth	r2, r3
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80095f2:	2300      	movs	r3, #0
 80095f4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	689b      	ldr	r3, [r3, #8]
 80095fc:	f003 0301 	and.w	r3, r3, #1
 8009600:	2b01      	cmp	r3, #1
 8009602:	d11c      	bne.n	800963e <HAL_SPI_TransmitReceive+0x1f2>
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800960a:	b29b      	uxth	r3, r3
 800960c:	2b00      	cmp	r3, #0
 800960e:	d016      	beq.n	800963e <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	68da      	ldr	r2, [r3, #12]
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800961a:	b292      	uxth	r2, r2
 800961c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009622:	1c9a      	adds	r2, r3, #2
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800962e:	b29b      	uxth	r3, r3
 8009630:	3b01      	subs	r3, #1
 8009632:	b29a      	uxth	r2, r3
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800963a:	2301      	movs	r3, #1
 800963c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800963e:	f7fa fcc7 	bl	8003fd0 <HAL_GetTick>
 8009642:	4602      	mov	r2, r0
 8009644:	69fb      	ldr	r3, [r7, #28]
 8009646:	1ad3      	subs	r3, r2, r3
 8009648:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800964a:	429a      	cmp	r2, r3
 800964c:	d807      	bhi.n	800965e <HAL_SPI_TransmitReceive+0x212>
 800964e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009654:	d003      	beq.n	800965e <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8009656:	2303      	movs	r3, #3
 8009658:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800965c:	e0fb      	b.n	8009856 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009662:	b29b      	uxth	r3, r3
 8009664:	2b00      	cmp	r3, #0
 8009666:	d1a3      	bne.n	80095b0 <HAL_SPI_TransmitReceive+0x164>
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800966e:	b29b      	uxth	r3, r3
 8009670:	2b00      	cmp	r3, #0
 8009672:	d19d      	bne.n	80095b0 <HAL_SPI_TransmitReceive+0x164>
 8009674:	e0df      	b.n	8009836 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	685b      	ldr	r3, [r3, #4]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d003      	beq.n	8009686 <HAL_SPI_TransmitReceive+0x23a>
 800967e:	8a7b      	ldrh	r3, [r7, #18]
 8009680:	2b01      	cmp	r3, #1
 8009682:	f040 80cb 	bne.w	800981c <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800968a:	b29b      	uxth	r3, r3
 800968c:	2b01      	cmp	r3, #1
 800968e:	d912      	bls.n	80096b6 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009694:	881a      	ldrh	r2, [r3, #0]
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096a0:	1c9a      	adds	r2, r3, #2
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80096aa:	b29b      	uxth	r3, r3
 80096ac:	3b02      	subs	r3, #2
 80096ae:	b29a      	uxth	r2, r3
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80096b4:	e0b2      	b.n	800981c <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	330c      	adds	r3, #12
 80096c0:	7812      	ldrb	r2, [r2, #0]
 80096c2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096c8:	1c5a      	adds	r2, r3, #1
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80096d2:	b29b      	uxth	r3, r3
 80096d4:	3b01      	subs	r3, #1
 80096d6:	b29a      	uxth	r2, r3
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80096dc:	e09e      	b.n	800981c <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	689b      	ldr	r3, [r3, #8]
 80096e4:	f003 0302 	and.w	r3, r3, #2
 80096e8:	2b02      	cmp	r3, #2
 80096ea:	d134      	bne.n	8009756 <HAL_SPI_TransmitReceive+0x30a>
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80096f0:	b29b      	uxth	r3, r3
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d02f      	beq.n	8009756 <HAL_SPI_TransmitReceive+0x30a>
 80096f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096f8:	2b01      	cmp	r3, #1
 80096fa:	d12c      	bne.n	8009756 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009700:	b29b      	uxth	r3, r3
 8009702:	2b01      	cmp	r3, #1
 8009704:	d912      	bls.n	800972c <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800970a:	881a      	ldrh	r2, [r3, #0]
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009716:	1c9a      	adds	r2, r3, #2
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009720:	b29b      	uxth	r3, r3
 8009722:	3b02      	subs	r3, #2
 8009724:	b29a      	uxth	r2, r3
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	87da      	strh	r2, [r3, #62]	; 0x3e
 800972a:	e012      	b.n	8009752 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	330c      	adds	r3, #12
 8009736:	7812      	ldrb	r2, [r2, #0]
 8009738:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800973e:	1c5a      	adds	r2, r3, #1
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009748:	b29b      	uxth	r3, r3
 800974a:	3b01      	subs	r3, #1
 800974c:	b29a      	uxth	r2, r3
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009752:	2300      	movs	r3, #0
 8009754:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	689b      	ldr	r3, [r3, #8]
 800975c:	f003 0301 	and.w	r3, r3, #1
 8009760:	2b01      	cmp	r3, #1
 8009762:	d148      	bne.n	80097f6 <HAL_SPI_TransmitReceive+0x3aa>
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800976a:	b29b      	uxth	r3, r3
 800976c:	2b00      	cmp	r3, #0
 800976e:	d042      	beq.n	80097f6 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009776:	b29b      	uxth	r3, r3
 8009778:	2b01      	cmp	r3, #1
 800977a:	d923      	bls.n	80097c4 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	68da      	ldr	r2, [r3, #12]
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009786:	b292      	uxth	r2, r2
 8009788:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800978e:	1c9a      	adds	r2, r3, #2
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800979a:	b29b      	uxth	r3, r3
 800979c:	3b02      	subs	r3, #2
 800979e:	b29a      	uxth	r2, r3
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80097ac:	b29b      	uxth	r3, r3
 80097ae:	2b01      	cmp	r3, #1
 80097b0:	d81f      	bhi.n	80097f2 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	685a      	ldr	r2, [r3, #4]
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80097c0:	605a      	str	r2, [r3, #4]
 80097c2:	e016      	b.n	80097f2 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f103 020c 	add.w	r2, r3, #12
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097d0:	7812      	ldrb	r2, [r2, #0]
 80097d2:	b2d2      	uxtb	r2, r2
 80097d4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097da:	1c5a      	adds	r2, r3, #1
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80097e6:	b29b      	uxth	r3, r3
 80097e8:	3b01      	subs	r3, #1
 80097ea:	b29a      	uxth	r2, r3
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80097f2:	2301      	movs	r3, #1
 80097f4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80097f6:	f7fa fbeb 	bl	8003fd0 <HAL_GetTick>
 80097fa:	4602      	mov	r2, r0
 80097fc:	69fb      	ldr	r3, [r7, #28]
 80097fe:	1ad3      	subs	r3, r2, r3
 8009800:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009802:	429a      	cmp	r2, r3
 8009804:	d803      	bhi.n	800980e <HAL_SPI_TransmitReceive+0x3c2>
 8009806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800980c:	d102      	bne.n	8009814 <HAL_SPI_TransmitReceive+0x3c8>
 800980e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009810:	2b00      	cmp	r3, #0
 8009812:	d103      	bne.n	800981c <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8009814:	2303      	movs	r3, #3
 8009816:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800981a:	e01c      	b.n	8009856 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009820:	b29b      	uxth	r3, r3
 8009822:	2b00      	cmp	r3, #0
 8009824:	f47f af5b 	bne.w	80096de <HAL_SPI_TransmitReceive+0x292>
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800982e:	b29b      	uxth	r3, r3
 8009830:	2b00      	cmp	r3, #0
 8009832:	f47f af54 	bne.w	80096de <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009836:	69fa      	ldr	r2, [r7, #28]
 8009838:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800983a:	68f8      	ldr	r0, [r7, #12]
 800983c:	f000 f956 	bl	8009aec <SPI_EndRxTxTransaction>
 8009840:	4603      	mov	r3, r0
 8009842:	2b00      	cmp	r3, #0
 8009844:	d006      	beq.n	8009854 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8009846:	2301      	movs	r3, #1
 8009848:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	2220      	movs	r2, #32
 8009850:	661a      	str	r2, [r3, #96]	; 0x60
 8009852:	e000      	b.n	8009856 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8009854:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	2201      	movs	r2, #1
 800985a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	2200      	movs	r2, #0
 8009862:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009866:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800986a:	4618      	mov	r0, r3
 800986c:	3728      	adds	r7, #40	; 0x28
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}

08009872 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8009872:	b480      	push	{r7}
 8009874:	b083      	sub	sp, #12
 8009876:	af00      	add	r7, sp, #0
 8009878:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009880:	b2db      	uxtb	r3, r3
}
 8009882:	4618      	mov	r0, r3
 8009884:	370c      	adds	r7, #12
 8009886:	46bd      	mov	sp, r7
 8009888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988c:	4770      	bx	lr

0800988e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800988e:	b580      	push	{r7, lr}
 8009890:	b084      	sub	sp, #16
 8009892:	af00      	add	r7, sp, #0
 8009894:	60f8      	str	r0, [r7, #12]
 8009896:	60b9      	str	r1, [r7, #8]
 8009898:	603b      	str	r3, [r7, #0]
 800989a:	4613      	mov	r3, r2
 800989c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800989e:	e04c      	b.n	800993a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098a6:	d048      	beq.n	800993a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80098a8:	f7fa fb92 	bl	8003fd0 <HAL_GetTick>
 80098ac:	4602      	mov	r2, r0
 80098ae:	69bb      	ldr	r3, [r7, #24]
 80098b0:	1ad3      	subs	r3, r2, r3
 80098b2:	683a      	ldr	r2, [r7, #0]
 80098b4:	429a      	cmp	r2, r3
 80098b6:	d902      	bls.n	80098be <SPI_WaitFlagStateUntilTimeout+0x30>
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d13d      	bne.n	800993a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	685a      	ldr	r2, [r3, #4]
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80098cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	685b      	ldr	r3, [r3, #4]
 80098d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80098d6:	d111      	bne.n	80098fc <SPI_WaitFlagStateUntilTimeout+0x6e>
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	689b      	ldr	r3, [r3, #8]
 80098dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80098e0:	d004      	beq.n	80098ec <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	689b      	ldr	r3, [r3, #8]
 80098e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80098ea:	d107      	bne.n	80098fc <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	681a      	ldr	r2, [r3, #0]
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80098fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009900:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009904:	d10f      	bne.n	8009926 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	681a      	ldr	r2, [r3, #0]
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009914:	601a      	str	r2, [r3, #0]
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	681a      	ldr	r2, [r3, #0]
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009924:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	2201      	movs	r2, #1
 800992a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	2200      	movs	r2, #0
 8009932:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009936:	2303      	movs	r3, #3
 8009938:	e00f      	b.n	800995a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	689a      	ldr	r2, [r3, #8]
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	4013      	ands	r3, r2
 8009944:	68ba      	ldr	r2, [r7, #8]
 8009946:	429a      	cmp	r2, r3
 8009948:	bf0c      	ite	eq
 800994a:	2301      	moveq	r3, #1
 800994c:	2300      	movne	r3, #0
 800994e:	b2db      	uxtb	r3, r3
 8009950:	461a      	mov	r2, r3
 8009952:	79fb      	ldrb	r3, [r7, #7]
 8009954:	429a      	cmp	r2, r3
 8009956:	d1a3      	bne.n	80098a0 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8009958:	2300      	movs	r3, #0
}
 800995a:	4618      	mov	r0, r3
 800995c:	3710      	adds	r7, #16
 800995e:	46bd      	mov	sp, r7
 8009960:	bd80      	pop	{r7, pc}

08009962 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009962:	b580      	push	{r7, lr}
 8009964:	b084      	sub	sp, #16
 8009966:	af00      	add	r7, sp, #0
 8009968:	60f8      	str	r0, [r7, #12]
 800996a:	60b9      	str	r1, [r7, #8]
 800996c:	607a      	str	r2, [r7, #4]
 800996e:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8009970:	e057      	b.n	8009a22 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009978:	d106      	bne.n	8009988 <SPI_WaitFifoStateUntilTimeout+0x26>
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d103      	bne.n	8009988 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	330c      	adds	r3, #12
 8009986:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800998e:	d048      	beq.n	8009a22 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8009990:	f7fa fb1e 	bl	8003fd0 <HAL_GetTick>
 8009994:	4602      	mov	r2, r0
 8009996:	69bb      	ldr	r3, [r7, #24]
 8009998:	1ad3      	subs	r3, r2, r3
 800999a:	683a      	ldr	r2, [r7, #0]
 800999c:	429a      	cmp	r2, r3
 800999e:	d902      	bls.n	80099a6 <SPI_WaitFifoStateUntilTimeout+0x44>
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d13d      	bne.n	8009a22 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	685a      	ldr	r2, [r3, #4]
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80099b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	685b      	ldr	r3, [r3, #4]
 80099ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80099be:	d111      	bne.n	80099e4 <SPI_WaitFifoStateUntilTimeout+0x82>
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	689b      	ldr	r3, [r3, #8]
 80099c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80099c8:	d004      	beq.n	80099d4 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	689b      	ldr	r3, [r3, #8]
 80099ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80099d2:	d107      	bne.n	80099e4 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	681a      	ldr	r2, [r3, #0]
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80099e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099ec:	d10f      	bne.n	8009a0e <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	681a      	ldr	r2, [r3, #0]
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80099fc:	601a      	str	r2, [r3, #0]
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	681a      	ldr	r2, [r3, #0]
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009a0c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	2201      	movs	r2, #1
 8009a12:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	2200      	movs	r2, #0
 8009a1a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009a1e:	2303      	movs	r3, #3
 8009a20:	e008      	b.n	8009a34 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	689a      	ldr	r2, [r3, #8]
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	4013      	ands	r3, r2
 8009a2c:	687a      	ldr	r2, [r7, #4]
 8009a2e:	429a      	cmp	r2, r3
 8009a30:	d19f      	bne.n	8009972 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8009a32:	2300      	movs	r3, #0
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	3710      	adds	r7, #16
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}

08009a3c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b086      	sub	sp, #24
 8009a40:	af02      	add	r7, sp, #8
 8009a42:	60f8      	str	r0, [r7, #12]
 8009a44:	60b9      	str	r1, [r7, #8]
 8009a46:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	685b      	ldr	r3, [r3, #4]
 8009a4c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009a50:	d111      	bne.n	8009a76 <SPI_EndRxTransaction+0x3a>
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	689b      	ldr	r3, [r3, #8]
 8009a56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a5a:	d004      	beq.n	8009a66 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	689b      	ldr	r3, [r3, #8]
 8009a60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a64:	d107      	bne.n	8009a76 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	681a      	ldr	r2, [r3, #0]
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a74:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	9300      	str	r3, [sp, #0]
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	2180      	movs	r1, #128	; 0x80
 8009a80:	68f8      	ldr	r0, [r7, #12]
 8009a82:	f7ff ff04 	bl	800988e <SPI_WaitFlagStateUntilTimeout>
 8009a86:	4603      	mov	r3, r0
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d007      	beq.n	8009a9c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a90:	f043 0220 	orr.w	r2, r3, #32
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009a98:	2303      	movs	r3, #3
 8009a9a:	e023      	b.n	8009ae4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	685b      	ldr	r3, [r3, #4]
 8009aa0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009aa4:	d11d      	bne.n	8009ae2 <SPI_EndRxTransaction+0xa6>
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	689b      	ldr	r3, [r3, #8]
 8009aaa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009aae:	d004      	beq.n	8009aba <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	689b      	ldr	r3, [r3, #8]
 8009ab4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ab8:	d113      	bne.n	8009ae2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	9300      	str	r3, [sp, #0]
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009ac6:	68f8      	ldr	r0, [r7, #12]
 8009ac8:	f7ff ff4b 	bl	8009962 <SPI_WaitFifoStateUntilTimeout>
 8009acc:	4603      	mov	r3, r0
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d007      	beq.n	8009ae2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ad6:	f043 0220 	orr.w	r2, r3, #32
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8009ade:	2303      	movs	r3, #3
 8009ae0:	e000      	b.n	8009ae4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8009ae2:	2300      	movs	r3, #0
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3710      	adds	r7, #16
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}

08009aec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b086      	sub	sp, #24
 8009af0:	af02      	add	r7, sp, #8
 8009af2:	60f8      	str	r0, [r7, #12]
 8009af4:	60b9      	str	r1, [r7, #8]
 8009af6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	9300      	str	r3, [sp, #0]
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	2200      	movs	r2, #0
 8009b00:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009b04:	68f8      	ldr	r0, [r7, #12]
 8009b06:	f7ff ff2c 	bl	8009962 <SPI_WaitFifoStateUntilTimeout>
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d007      	beq.n	8009b20 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b14:	f043 0220 	orr.w	r2, r3, #32
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009b1c:	2303      	movs	r3, #3
 8009b1e:	e027      	b.n	8009b70 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	9300      	str	r3, [sp, #0]
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	2200      	movs	r2, #0
 8009b28:	2180      	movs	r1, #128	; 0x80
 8009b2a:	68f8      	ldr	r0, [r7, #12]
 8009b2c:	f7ff feaf 	bl	800988e <SPI_WaitFlagStateUntilTimeout>
 8009b30:	4603      	mov	r3, r0
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d007      	beq.n	8009b46 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b3a:	f043 0220 	orr.w	r2, r3, #32
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009b42:	2303      	movs	r3, #3
 8009b44:	e014      	b.n	8009b70 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	9300      	str	r3, [sp, #0]
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009b52:	68f8      	ldr	r0, [r7, #12]
 8009b54:	f7ff ff05 	bl	8009962 <SPI_WaitFifoStateUntilTimeout>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d007      	beq.n	8009b6e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b62:	f043 0220 	orr.w	r2, r3, #32
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009b6a:	2303      	movs	r3, #3
 8009b6c:	e000      	b.n	8009b70 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009b6e:	2300      	movs	r3, #0
}
 8009b70:	4618      	mov	r0, r3
 8009b72:	3710      	adds	r7, #16
 8009b74:	46bd      	mov	sp, r7
 8009b76:	bd80      	pop	{r7, pc}

08009b78 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b082      	sub	sp, #8
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d101      	bne.n	8009b8a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009b86:	2301      	movs	r3, #1
 8009b88:	e01d      	b.n	8009bc6 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b90:	b2db      	uxtb	r3, r3
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d106      	bne.n	8009ba4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f7f9 fdbc 	bl	800371c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2202      	movs	r2, #2
 8009ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681a      	ldr	r2, [r3, #0]
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	3304      	adds	r3, #4
 8009bb4:	4619      	mov	r1, r3
 8009bb6:	4610      	mov	r0, r2
 8009bb8:	f000 fa2e 	bl	800a018 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2201      	movs	r2, #1
 8009bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009bc4:	2300      	movs	r3, #0
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	3708      	adds	r7, #8
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bd80      	pop	{r7, pc}
	...

08009bd0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b084      	sub	sp, #16
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
 8009bd8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	2201      	movs	r2, #1
 8009be0:	6839      	ldr	r1, [r7, #0]
 8009be2:	4618      	mov	r0, r3
 8009be4:	f000 fe40 	bl	800a868 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	4a17      	ldr	r2, [pc, #92]	; (8009c4c <HAL_TIM_PWM_Start+0x7c>)
 8009bee:	4293      	cmp	r3, r2
 8009bf0:	d004      	beq.n	8009bfc <HAL_TIM_PWM_Start+0x2c>
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	4a16      	ldr	r2, [pc, #88]	; (8009c50 <HAL_TIM_PWM_Start+0x80>)
 8009bf8:	4293      	cmp	r3, r2
 8009bfa:	d101      	bne.n	8009c00 <HAL_TIM_PWM_Start+0x30>
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	e000      	b.n	8009c02 <HAL_TIM_PWM_Start+0x32>
 8009c00:	2300      	movs	r3, #0
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d007      	beq.n	8009c16 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009c14:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	689a      	ldr	r2, [r3, #8]
 8009c1c:	4b0d      	ldr	r3, [pc, #52]	; (8009c54 <HAL_TIM_PWM_Start+0x84>)
 8009c1e:	4013      	ands	r3, r2
 8009c20:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	2b06      	cmp	r3, #6
 8009c26:	d00b      	beq.n	8009c40 <HAL_TIM_PWM_Start+0x70>
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c2e:	d007      	beq.n	8009c40 <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	681a      	ldr	r2, [r3, #0]
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	f042 0201 	orr.w	r2, r2, #1
 8009c3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009c40:	2300      	movs	r3, #0
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	3710      	adds	r7, #16
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bd80      	pop	{r7, pc}
 8009c4a:	bf00      	nop
 8009c4c:	40010000 	.word	0x40010000
 8009c50:	40010400 	.word	0x40010400
 8009c54:	00010007 	.word	0x00010007

08009c58 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b082      	sub	sp, #8
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d101      	bne.n	8009c6a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8009c66:	2301      	movs	r3, #1
 8009c68:	e01d      	b.n	8009ca6 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c70:	b2db      	uxtb	r3, r3
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d106      	bne.n	8009c84 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2200      	movs	r2, #0
 8009c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f7f9 fd08 	bl	8003694 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2202      	movs	r2, #2
 8009c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681a      	ldr	r2, [r3, #0]
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	3304      	adds	r3, #4
 8009c94:	4619      	mov	r1, r3
 8009c96:	4610      	mov	r0, r2
 8009c98:	f000 f9be 	bl	800a018 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2201      	movs	r2, #1
 8009ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009ca4:	2300      	movs	r3, #0
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3708      	adds	r7, #8
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}

08009cae <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009cae:	b580      	push	{r7, lr}
 8009cb0:	b084      	sub	sp, #16
 8009cb2:	af00      	add	r7, sp, #0
 8009cb4:	60f8      	str	r0, [r7, #12]
 8009cb6:	60b9      	str	r1, [r7, #8]
 8009cb8:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009cc0:	2b01      	cmp	r3, #1
 8009cc2:	d101      	bne.n	8009cc8 <HAL_TIM_IC_ConfigChannel+0x1a>
 8009cc4:	2302      	movs	r3, #2
 8009cc6:	e08a      	b.n	8009dde <HAL_TIM_IC_ConfigChannel+0x130>
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	2201      	movs	r2, #1
 8009ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	2202      	movs	r2, #2
 8009cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d11b      	bne.n	8009d16 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	6818      	ldr	r0, [r3, #0]
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	6819      	ldr	r1, [r3, #0]
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	685a      	ldr	r2, [r3, #4]
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	68db      	ldr	r3, [r3, #12]
 8009cee:	f000 fc91 	bl	800a614 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	699a      	ldr	r2, [r3, #24]
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	f022 020c 	bic.w	r2, r2, #12
 8009d00:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	6999      	ldr	r1, [r3, #24]
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	689a      	ldr	r2, [r3, #8]
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	430a      	orrs	r2, r1
 8009d12:	619a      	str	r2, [r3, #24]
 8009d14:	e05a      	b.n	8009dcc <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2b04      	cmp	r3, #4
 8009d1a:	d11c      	bne.n	8009d56 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	6818      	ldr	r0, [r3, #0]
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	6819      	ldr	r1, [r3, #0]
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	685a      	ldr	r2, [r3, #4]
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	68db      	ldr	r3, [r3, #12]
 8009d2c:	f000 fce6 	bl	800a6fc <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	699a      	ldr	r2, [r3, #24]
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009d3e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	6999      	ldr	r1, [r3, #24]
 8009d46:	68bb      	ldr	r3, [r7, #8]
 8009d48:	689b      	ldr	r3, [r3, #8]
 8009d4a:	021a      	lsls	r2, r3, #8
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	430a      	orrs	r2, r1
 8009d52:	619a      	str	r2, [r3, #24]
 8009d54:	e03a      	b.n	8009dcc <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2b08      	cmp	r3, #8
 8009d5a:	d11b      	bne.n	8009d94 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	6818      	ldr	r0, [r3, #0]
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	6819      	ldr	r1, [r3, #0]
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	685a      	ldr	r2, [r3, #4]
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	68db      	ldr	r3, [r3, #12]
 8009d6c:	f000 fd03 	bl	800a776 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	69da      	ldr	r2, [r3, #28]
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	f022 020c 	bic.w	r2, r2, #12
 8009d7e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	69d9      	ldr	r1, [r3, #28]
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	689a      	ldr	r2, [r3, #8]
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	430a      	orrs	r2, r1
 8009d90:	61da      	str	r2, [r3, #28]
 8009d92:	e01b      	b.n	8009dcc <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	6818      	ldr	r0, [r3, #0]
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	6819      	ldr	r1, [r3, #0]
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	685a      	ldr	r2, [r3, #4]
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	68db      	ldr	r3, [r3, #12]
 8009da4:	f000 fd23 	bl	800a7ee <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	69da      	ldr	r2, [r3, #28]
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009db6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	69d9      	ldr	r1, [r3, #28]
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	689b      	ldr	r3, [r3, #8]
 8009dc2:	021a      	lsls	r2, r3, #8
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	430a      	orrs	r2, r1
 8009dca:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	2201      	movs	r2, #1
 8009dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009ddc:	2300      	movs	r3, #0
}
 8009dde:	4618      	mov	r0, r3
 8009de0:	3710      	adds	r7, #16
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bd80      	pop	{r7, pc}
	...

08009de8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b084      	sub	sp, #16
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	60f8      	str	r0, [r7, #12]
 8009df0:	60b9      	str	r1, [r7, #8]
 8009df2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009dfa:	2b01      	cmp	r3, #1
 8009dfc:	d101      	bne.n	8009e02 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009dfe:	2302      	movs	r3, #2
 8009e00:	e105      	b.n	800a00e <HAL_TIM_PWM_ConfigChannel+0x226>
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	2201      	movs	r2, #1
 8009e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	2202      	movs	r2, #2
 8009e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2b14      	cmp	r3, #20
 8009e16:	f200 80f0 	bhi.w	8009ffa <HAL_TIM_PWM_ConfigChannel+0x212>
 8009e1a:	a201      	add	r2, pc, #4	; (adr r2, 8009e20 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8009e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e20:	08009e75 	.word	0x08009e75
 8009e24:	08009ffb 	.word	0x08009ffb
 8009e28:	08009ffb 	.word	0x08009ffb
 8009e2c:	08009ffb 	.word	0x08009ffb
 8009e30:	08009eb5 	.word	0x08009eb5
 8009e34:	08009ffb 	.word	0x08009ffb
 8009e38:	08009ffb 	.word	0x08009ffb
 8009e3c:	08009ffb 	.word	0x08009ffb
 8009e40:	08009ef7 	.word	0x08009ef7
 8009e44:	08009ffb 	.word	0x08009ffb
 8009e48:	08009ffb 	.word	0x08009ffb
 8009e4c:	08009ffb 	.word	0x08009ffb
 8009e50:	08009f37 	.word	0x08009f37
 8009e54:	08009ffb 	.word	0x08009ffb
 8009e58:	08009ffb 	.word	0x08009ffb
 8009e5c:	08009ffb 	.word	0x08009ffb
 8009e60:	08009f79 	.word	0x08009f79
 8009e64:	08009ffb 	.word	0x08009ffb
 8009e68:	08009ffb 	.word	0x08009ffb
 8009e6c:	08009ffb 	.word	0x08009ffb
 8009e70:	08009fb9 	.word	0x08009fb9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	68b9      	ldr	r1, [r7, #8]
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f000 f96c 	bl	800a158 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	699a      	ldr	r2, [r3, #24]
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	f042 0208 	orr.w	r2, r2, #8
 8009e8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	699a      	ldr	r2, [r3, #24]
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	f022 0204 	bic.w	r2, r2, #4
 8009e9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	6999      	ldr	r1, [r3, #24]
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	691a      	ldr	r2, [r3, #16]
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	430a      	orrs	r2, r1
 8009eb0:	619a      	str	r2, [r3, #24]
      break;
 8009eb2:	e0a3      	b.n	8009ffc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	68b9      	ldr	r1, [r7, #8]
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f000 f9be 	bl	800a23c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	699a      	ldr	r2, [r3, #24]
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009ece:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	699a      	ldr	r2, [r3, #24]
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ede:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	6999      	ldr	r1, [r3, #24]
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	691b      	ldr	r3, [r3, #16]
 8009eea:	021a      	lsls	r2, r3, #8
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	430a      	orrs	r2, r1
 8009ef2:	619a      	str	r2, [r3, #24]
      break;
 8009ef4:	e082      	b.n	8009ffc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	68b9      	ldr	r1, [r7, #8]
 8009efc:	4618      	mov	r0, r3
 8009efe:	f000 fa15 	bl	800a32c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	69da      	ldr	r2, [r3, #28]
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	f042 0208 	orr.w	r2, r2, #8
 8009f10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	69da      	ldr	r2, [r3, #28]
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f022 0204 	bic.w	r2, r2, #4
 8009f20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	69d9      	ldr	r1, [r3, #28]
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	691a      	ldr	r2, [r3, #16]
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	430a      	orrs	r2, r1
 8009f32:	61da      	str	r2, [r3, #28]
      break;
 8009f34:	e062      	b.n	8009ffc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	68b9      	ldr	r1, [r7, #8]
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	f000 fa6b 	bl	800a418 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	69da      	ldr	r2, [r3, #28]
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009f50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	69da      	ldr	r2, [r3, #28]
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009f60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	69d9      	ldr	r1, [r3, #28]
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	691b      	ldr	r3, [r3, #16]
 8009f6c:	021a      	lsls	r2, r3, #8
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	430a      	orrs	r2, r1
 8009f74:	61da      	str	r2, [r3, #28]
      break;
 8009f76:	e041      	b.n	8009ffc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	68b9      	ldr	r1, [r7, #8]
 8009f7e:	4618      	mov	r0, r3
 8009f80:	f000 faa2 	bl	800a4c8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f042 0208 	orr.w	r2, r2, #8
 8009f92:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f022 0204 	bic.w	r2, r2, #4
 8009fa2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	691a      	ldr	r2, [r3, #16]
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	430a      	orrs	r2, r1
 8009fb4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009fb6:	e021      	b.n	8009ffc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	68b9      	ldr	r1, [r7, #8]
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f000 fad4 	bl	800a56c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009fd2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009fe2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009fea:	68bb      	ldr	r3, [r7, #8]
 8009fec:	691b      	ldr	r3, [r3, #16]
 8009fee:	021a      	lsls	r2, r3, #8
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	430a      	orrs	r2, r1
 8009ff6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009ff8:	e000      	b.n	8009ffc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8009ffa:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	2201      	movs	r2, #1
 800a000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	2200      	movs	r2, #0
 800a008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a00c:	2300      	movs	r3, #0
}
 800a00e:	4618      	mov	r0, r3
 800a010:	3710      	adds	r7, #16
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}
 800a016:	bf00      	nop

0800a018 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a018:	b480      	push	{r7}
 800a01a:	b085      	sub	sp, #20
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
 800a020:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	4a40      	ldr	r2, [pc, #256]	; (800a12c <TIM_Base_SetConfig+0x114>)
 800a02c:	4293      	cmp	r3, r2
 800a02e:	d013      	beq.n	800a058 <TIM_Base_SetConfig+0x40>
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a036:	d00f      	beq.n	800a058 <TIM_Base_SetConfig+0x40>
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	4a3d      	ldr	r2, [pc, #244]	; (800a130 <TIM_Base_SetConfig+0x118>)
 800a03c:	4293      	cmp	r3, r2
 800a03e:	d00b      	beq.n	800a058 <TIM_Base_SetConfig+0x40>
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	4a3c      	ldr	r2, [pc, #240]	; (800a134 <TIM_Base_SetConfig+0x11c>)
 800a044:	4293      	cmp	r3, r2
 800a046:	d007      	beq.n	800a058 <TIM_Base_SetConfig+0x40>
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	4a3b      	ldr	r2, [pc, #236]	; (800a138 <TIM_Base_SetConfig+0x120>)
 800a04c:	4293      	cmp	r3, r2
 800a04e:	d003      	beq.n	800a058 <TIM_Base_SetConfig+0x40>
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	4a3a      	ldr	r2, [pc, #232]	; (800a13c <TIM_Base_SetConfig+0x124>)
 800a054:	4293      	cmp	r3, r2
 800a056:	d108      	bne.n	800a06a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a05e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	685b      	ldr	r3, [r3, #4]
 800a064:	68fa      	ldr	r2, [r7, #12]
 800a066:	4313      	orrs	r3, r2
 800a068:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	4a2f      	ldr	r2, [pc, #188]	; (800a12c <TIM_Base_SetConfig+0x114>)
 800a06e:	4293      	cmp	r3, r2
 800a070:	d02b      	beq.n	800a0ca <TIM_Base_SetConfig+0xb2>
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a078:	d027      	beq.n	800a0ca <TIM_Base_SetConfig+0xb2>
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	4a2c      	ldr	r2, [pc, #176]	; (800a130 <TIM_Base_SetConfig+0x118>)
 800a07e:	4293      	cmp	r3, r2
 800a080:	d023      	beq.n	800a0ca <TIM_Base_SetConfig+0xb2>
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	4a2b      	ldr	r2, [pc, #172]	; (800a134 <TIM_Base_SetConfig+0x11c>)
 800a086:	4293      	cmp	r3, r2
 800a088:	d01f      	beq.n	800a0ca <TIM_Base_SetConfig+0xb2>
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	4a2a      	ldr	r2, [pc, #168]	; (800a138 <TIM_Base_SetConfig+0x120>)
 800a08e:	4293      	cmp	r3, r2
 800a090:	d01b      	beq.n	800a0ca <TIM_Base_SetConfig+0xb2>
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	4a29      	ldr	r2, [pc, #164]	; (800a13c <TIM_Base_SetConfig+0x124>)
 800a096:	4293      	cmp	r3, r2
 800a098:	d017      	beq.n	800a0ca <TIM_Base_SetConfig+0xb2>
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	4a28      	ldr	r2, [pc, #160]	; (800a140 <TIM_Base_SetConfig+0x128>)
 800a09e:	4293      	cmp	r3, r2
 800a0a0:	d013      	beq.n	800a0ca <TIM_Base_SetConfig+0xb2>
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	4a27      	ldr	r2, [pc, #156]	; (800a144 <TIM_Base_SetConfig+0x12c>)
 800a0a6:	4293      	cmp	r3, r2
 800a0a8:	d00f      	beq.n	800a0ca <TIM_Base_SetConfig+0xb2>
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	4a26      	ldr	r2, [pc, #152]	; (800a148 <TIM_Base_SetConfig+0x130>)
 800a0ae:	4293      	cmp	r3, r2
 800a0b0:	d00b      	beq.n	800a0ca <TIM_Base_SetConfig+0xb2>
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	4a25      	ldr	r2, [pc, #148]	; (800a14c <TIM_Base_SetConfig+0x134>)
 800a0b6:	4293      	cmp	r3, r2
 800a0b8:	d007      	beq.n	800a0ca <TIM_Base_SetConfig+0xb2>
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	4a24      	ldr	r2, [pc, #144]	; (800a150 <TIM_Base_SetConfig+0x138>)
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	d003      	beq.n	800a0ca <TIM_Base_SetConfig+0xb2>
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	4a23      	ldr	r2, [pc, #140]	; (800a154 <TIM_Base_SetConfig+0x13c>)
 800a0c6:	4293      	cmp	r3, r2
 800a0c8:	d108      	bne.n	800a0dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a0d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	68db      	ldr	r3, [r3, #12]
 800a0d6:	68fa      	ldr	r2, [r7, #12]
 800a0d8:	4313      	orrs	r3, r2
 800a0da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	695b      	ldr	r3, [r3, #20]
 800a0e6:	4313      	orrs	r3, r2
 800a0e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	68fa      	ldr	r2, [r7, #12]
 800a0ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	689a      	ldr	r2, [r3, #8]
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	681a      	ldr	r2, [r3, #0]
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	4a0a      	ldr	r2, [pc, #40]	; (800a12c <TIM_Base_SetConfig+0x114>)
 800a104:	4293      	cmp	r3, r2
 800a106:	d003      	beq.n	800a110 <TIM_Base_SetConfig+0xf8>
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	4a0c      	ldr	r2, [pc, #48]	; (800a13c <TIM_Base_SetConfig+0x124>)
 800a10c:	4293      	cmp	r3, r2
 800a10e:	d103      	bne.n	800a118 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	691a      	ldr	r2, [r3, #16]
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2201      	movs	r2, #1
 800a11c:	615a      	str	r2, [r3, #20]
}
 800a11e:	bf00      	nop
 800a120:	3714      	adds	r7, #20
 800a122:	46bd      	mov	sp, r7
 800a124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a128:	4770      	bx	lr
 800a12a:	bf00      	nop
 800a12c:	40010000 	.word	0x40010000
 800a130:	40000400 	.word	0x40000400
 800a134:	40000800 	.word	0x40000800
 800a138:	40000c00 	.word	0x40000c00
 800a13c:	40010400 	.word	0x40010400
 800a140:	40014000 	.word	0x40014000
 800a144:	40014400 	.word	0x40014400
 800a148:	40014800 	.word	0x40014800
 800a14c:	40001800 	.word	0x40001800
 800a150:	40001c00 	.word	0x40001c00
 800a154:	40002000 	.word	0x40002000

0800a158 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a158:	b480      	push	{r7}
 800a15a:	b087      	sub	sp, #28
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
 800a160:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6a1b      	ldr	r3, [r3, #32]
 800a166:	f023 0201 	bic.w	r2, r3, #1
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6a1b      	ldr	r3, [r3, #32]
 800a172:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	685b      	ldr	r3, [r3, #4]
 800a178:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	699b      	ldr	r3, [r3, #24]
 800a17e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a180:	68fa      	ldr	r2, [r7, #12]
 800a182:	4b2b      	ldr	r3, [pc, #172]	; (800a230 <TIM_OC1_SetConfig+0xd8>)
 800a184:	4013      	ands	r3, r2
 800a186:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	f023 0303 	bic.w	r3, r3, #3
 800a18e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	68fa      	ldr	r2, [r7, #12]
 800a196:	4313      	orrs	r3, r2
 800a198:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a19a:	697b      	ldr	r3, [r7, #20]
 800a19c:	f023 0302 	bic.w	r3, r3, #2
 800a1a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	689b      	ldr	r3, [r3, #8]
 800a1a6:	697a      	ldr	r2, [r7, #20]
 800a1a8:	4313      	orrs	r3, r2
 800a1aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	4a21      	ldr	r2, [pc, #132]	; (800a234 <TIM_OC1_SetConfig+0xdc>)
 800a1b0:	4293      	cmp	r3, r2
 800a1b2:	d003      	beq.n	800a1bc <TIM_OC1_SetConfig+0x64>
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	4a20      	ldr	r2, [pc, #128]	; (800a238 <TIM_OC1_SetConfig+0xe0>)
 800a1b8:	4293      	cmp	r3, r2
 800a1ba:	d10c      	bne.n	800a1d6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a1bc:	697b      	ldr	r3, [r7, #20]
 800a1be:	f023 0308 	bic.w	r3, r3, #8
 800a1c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	68db      	ldr	r3, [r3, #12]
 800a1c8:	697a      	ldr	r2, [r7, #20]
 800a1ca:	4313      	orrs	r3, r2
 800a1cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a1ce:	697b      	ldr	r3, [r7, #20]
 800a1d0:	f023 0304 	bic.w	r3, r3, #4
 800a1d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	4a16      	ldr	r2, [pc, #88]	; (800a234 <TIM_OC1_SetConfig+0xdc>)
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	d003      	beq.n	800a1e6 <TIM_OC1_SetConfig+0x8e>
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	4a15      	ldr	r2, [pc, #84]	; (800a238 <TIM_OC1_SetConfig+0xe0>)
 800a1e2:	4293      	cmp	r3, r2
 800a1e4:	d111      	bne.n	800a20a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a1e6:	693b      	ldr	r3, [r7, #16]
 800a1e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a1ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a1ee:	693b      	ldr	r3, [r7, #16]
 800a1f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a1f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	695b      	ldr	r3, [r3, #20]
 800a1fa:	693a      	ldr	r2, [r7, #16]
 800a1fc:	4313      	orrs	r3, r2
 800a1fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	699b      	ldr	r3, [r3, #24]
 800a204:	693a      	ldr	r2, [r7, #16]
 800a206:	4313      	orrs	r3, r2
 800a208:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	693a      	ldr	r2, [r7, #16]
 800a20e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	68fa      	ldr	r2, [r7, #12]
 800a214:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	685a      	ldr	r2, [r3, #4]
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	697a      	ldr	r2, [r7, #20]
 800a222:	621a      	str	r2, [r3, #32]
}
 800a224:	bf00      	nop
 800a226:	371c      	adds	r7, #28
 800a228:	46bd      	mov	sp, r7
 800a22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22e:	4770      	bx	lr
 800a230:	fffeff8f 	.word	0xfffeff8f
 800a234:	40010000 	.word	0x40010000
 800a238:	40010400 	.word	0x40010400

0800a23c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a23c:	b480      	push	{r7}
 800a23e:	b087      	sub	sp, #28
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
 800a244:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6a1b      	ldr	r3, [r3, #32]
 800a24a:	f023 0210 	bic.w	r2, r3, #16
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6a1b      	ldr	r3, [r3, #32]
 800a256:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	685b      	ldr	r3, [r3, #4]
 800a25c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	699b      	ldr	r3, [r3, #24]
 800a262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a264:	68fa      	ldr	r2, [r7, #12]
 800a266:	4b2e      	ldr	r3, [pc, #184]	; (800a320 <TIM_OC2_SetConfig+0xe4>)
 800a268:	4013      	ands	r3, r2
 800a26a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a272:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	021b      	lsls	r3, r3, #8
 800a27a:	68fa      	ldr	r2, [r7, #12]
 800a27c:	4313      	orrs	r3, r2
 800a27e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a280:	697b      	ldr	r3, [r7, #20]
 800a282:	f023 0320 	bic.w	r3, r3, #32
 800a286:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	689b      	ldr	r3, [r3, #8]
 800a28c:	011b      	lsls	r3, r3, #4
 800a28e:	697a      	ldr	r2, [r7, #20]
 800a290:	4313      	orrs	r3, r2
 800a292:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	4a23      	ldr	r2, [pc, #140]	; (800a324 <TIM_OC2_SetConfig+0xe8>)
 800a298:	4293      	cmp	r3, r2
 800a29a:	d003      	beq.n	800a2a4 <TIM_OC2_SetConfig+0x68>
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	4a22      	ldr	r2, [pc, #136]	; (800a328 <TIM_OC2_SetConfig+0xec>)
 800a2a0:	4293      	cmp	r3, r2
 800a2a2:	d10d      	bne.n	800a2c0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a2a4:	697b      	ldr	r3, [r7, #20]
 800a2a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a2aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	68db      	ldr	r3, [r3, #12]
 800a2b0:	011b      	lsls	r3, r3, #4
 800a2b2:	697a      	ldr	r2, [r7, #20]
 800a2b4:	4313      	orrs	r3, r2
 800a2b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a2b8:	697b      	ldr	r3, [r7, #20]
 800a2ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a2be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	4a18      	ldr	r2, [pc, #96]	; (800a324 <TIM_OC2_SetConfig+0xe8>)
 800a2c4:	4293      	cmp	r3, r2
 800a2c6:	d003      	beq.n	800a2d0 <TIM_OC2_SetConfig+0x94>
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	4a17      	ldr	r2, [pc, #92]	; (800a328 <TIM_OC2_SetConfig+0xec>)
 800a2cc:	4293      	cmp	r3, r2
 800a2ce:	d113      	bne.n	800a2f8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a2d0:	693b      	ldr	r3, [r7, #16]
 800a2d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a2d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a2d8:	693b      	ldr	r3, [r7, #16]
 800a2da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a2de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	695b      	ldr	r3, [r3, #20]
 800a2e4:	009b      	lsls	r3, r3, #2
 800a2e6:	693a      	ldr	r2, [r7, #16]
 800a2e8:	4313      	orrs	r3, r2
 800a2ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	699b      	ldr	r3, [r3, #24]
 800a2f0:	009b      	lsls	r3, r3, #2
 800a2f2:	693a      	ldr	r2, [r7, #16]
 800a2f4:	4313      	orrs	r3, r2
 800a2f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	693a      	ldr	r2, [r7, #16]
 800a2fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	68fa      	ldr	r2, [r7, #12]
 800a302:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	685a      	ldr	r2, [r3, #4]
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	697a      	ldr	r2, [r7, #20]
 800a310:	621a      	str	r2, [r3, #32]
}
 800a312:	bf00      	nop
 800a314:	371c      	adds	r7, #28
 800a316:	46bd      	mov	sp, r7
 800a318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31c:	4770      	bx	lr
 800a31e:	bf00      	nop
 800a320:	feff8fff 	.word	0xfeff8fff
 800a324:	40010000 	.word	0x40010000
 800a328:	40010400 	.word	0x40010400

0800a32c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a32c:	b480      	push	{r7}
 800a32e:	b087      	sub	sp, #28
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
 800a334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6a1b      	ldr	r3, [r3, #32]
 800a33a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6a1b      	ldr	r3, [r3, #32]
 800a346:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	685b      	ldr	r3, [r3, #4]
 800a34c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	69db      	ldr	r3, [r3, #28]
 800a352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a354:	68fa      	ldr	r2, [r7, #12]
 800a356:	4b2d      	ldr	r3, [pc, #180]	; (800a40c <TIM_OC3_SetConfig+0xe0>)
 800a358:	4013      	ands	r3, r2
 800a35a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	f023 0303 	bic.w	r3, r3, #3
 800a362:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	68fa      	ldr	r2, [r7, #12]
 800a36a:	4313      	orrs	r3, r2
 800a36c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a36e:	697b      	ldr	r3, [r7, #20]
 800a370:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a374:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	689b      	ldr	r3, [r3, #8]
 800a37a:	021b      	lsls	r3, r3, #8
 800a37c:	697a      	ldr	r2, [r7, #20]
 800a37e:	4313      	orrs	r3, r2
 800a380:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	4a22      	ldr	r2, [pc, #136]	; (800a410 <TIM_OC3_SetConfig+0xe4>)
 800a386:	4293      	cmp	r3, r2
 800a388:	d003      	beq.n	800a392 <TIM_OC3_SetConfig+0x66>
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	4a21      	ldr	r2, [pc, #132]	; (800a414 <TIM_OC3_SetConfig+0xe8>)
 800a38e:	4293      	cmp	r3, r2
 800a390:	d10d      	bne.n	800a3ae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a392:	697b      	ldr	r3, [r7, #20]
 800a394:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a398:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	68db      	ldr	r3, [r3, #12]
 800a39e:	021b      	lsls	r3, r3, #8
 800a3a0:	697a      	ldr	r2, [r7, #20]
 800a3a2:	4313      	orrs	r3, r2
 800a3a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a3a6:	697b      	ldr	r3, [r7, #20]
 800a3a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a3ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	4a17      	ldr	r2, [pc, #92]	; (800a410 <TIM_OC3_SetConfig+0xe4>)
 800a3b2:	4293      	cmp	r3, r2
 800a3b4:	d003      	beq.n	800a3be <TIM_OC3_SetConfig+0x92>
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	4a16      	ldr	r2, [pc, #88]	; (800a414 <TIM_OC3_SetConfig+0xe8>)
 800a3ba:	4293      	cmp	r3, r2
 800a3bc:	d113      	bne.n	800a3e6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a3be:	693b      	ldr	r3, [r7, #16]
 800a3c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a3c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a3c6:	693b      	ldr	r3, [r7, #16]
 800a3c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a3cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	695b      	ldr	r3, [r3, #20]
 800a3d2:	011b      	lsls	r3, r3, #4
 800a3d4:	693a      	ldr	r2, [r7, #16]
 800a3d6:	4313      	orrs	r3, r2
 800a3d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	699b      	ldr	r3, [r3, #24]
 800a3de:	011b      	lsls	r3, r3, #4
 800a3e0:	693a      	ldr	r2, [r7, #16]
 800a3e2:	4313      	orrs	r3, r2
 800a3e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	693a      	ldr	r2, [r7, #16]
 800a3ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	68fa      	ldr	r2, [r7, #12]
 800a3f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	685a      	ldr	r2, [r3, #4]
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	697a      	ldr	r2, [r7, #20]
 800a3fe:	621a      	str	r2, [r3, #32]
}
 800a400:	bf00      	nop
 800a402:	371c      	adds	r7, #28
 800a404:	46bd      	mov	sp, r7
 800a406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40a:	4770      	bx	lr
 800a40c:	fffeff8f 	.word	0xfffeff8f
 800a410:	40010000 	.word	0x40010000
 800a414:	40010400 	.word	0x40010400

0800a418 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a418:	b480      	push	{r7}
 800a41a:	b087      	sub	sp, #28
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
 800a420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6a1b      	ldr	r3, [r3, #32]
 800a426:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	6a1b      	ldr	r3, [r3, #32]
 800a432:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	685b      	ldr	r3, [r3, #4]
 800a438:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	69db      	ldr	r3, [r3, #28]
 800a43e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a440:	68fa      	ldr	r2, [r7, #12]
 800a442:	4b1e      	ldr	r3, [pc, #120]	; (800a4bc <TIM_OC4_SetConfig+0xa4>)
 800a444:	4013      	ands	r3, r2
 800a446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a44e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	021b      	lsls	r3, r3, #8
 800a456:	68fa      	ldr	r2, [r7, #12]
 800a458:	4313      	orrs	r3, r2
 800a45a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a45c:	693b      	ldr	r3, [r7, #16]
 800a45e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a462:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	689b      	ldr	r3, [r3, #8]
 800a468:	031b      	lsls	r3, r3, #12
 800a46a:	693a      	ldr	r2, [r7, #16]
 800a46c:	4313      	orrs	r3, r2
 800a46e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	4a13      	ldr	r2, [pc, #76]	; (800a4c0 <TIM_OC4_SetConfig+0xa8>)
 800a474:	4293      	cmp	r3, r2
 800a476:	d003      	beq.n	800a480 <TIM_OC4_SetConfig+0x68>
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	4a12      	ldr	r2, [pc, #72]	; (800a4c4 <TIM_OC4_SetConfig+0xac>)
 800a47c:	4293      	cmp	r3, r2
 800a47e:	d109      	bne.n	800a494 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a480:	697b      	ldr	r3, [r7, #20]
 800a482:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a486:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	695b      	ldr	r3, [r3, #20]
 800a48c:	019b      	lsls	r3, r3, #6
 800a48e:	697a      	ldr	r2, [r7, #20]
 800a490:	4313      	orrs	r3, r2
 800a492:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	697a      	ldr	r2, [r7, #20]
 800a498:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	68fa      	ldr	r2, [r7, #12]
 800a49e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	685a      	ldr	r2, [r3, #4]
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	693a      	ldr	r2, [r7, #16]
 800a4ac:	621a      	str	r2, [r3, #32]
}
 800a4ae:	bf00      	nop
 800a4b0:	371c      	adds	r7, #28
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b8:	4770      	bx	lr
 800a4ba:	bf00      	nop
 800a4bc:	feff8fff 	.word	0xfeff8fff
 800a4c0:	40010000 	.word	0x40010000
 800a4c4:	40010400 	.word	0x40010400

0800a4c8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a4c8:	b480      	push	{r7}
 800a4ca:	b087      	sub	sp, #28
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
 800a4d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6a1b      	ldr	r3, [r3, #32]
 800a4d6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	6a1b      	ldr	r3, [r3, #32]
 800a4e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	685b      	ldr	r3, [r3, #4]
 800a4e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a4f0:	68fa      	ldr	r2, [r7, #12]
 800a4f2:	4b1b      	ldr	r3, [pc, #108]	; (800a560 <TIM_OC5_SetConfig+0x98>)
 800a4f4:	4013      	ands	r3, r2
 800a4f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	68fa      	ldr	r2, [r7, #12]
 800a4fe:	4313      	orrs	r3, r2
 800a500:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a502:	693b      	ldr	r3, [r7, #16]
 800a504:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a508:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a50a:	683b      	ldr	r3, [r7, #0]
 800a50c:	689b      	ldr	r3, [r3, #8]
 800a50e:	041b      	lsls	r3, r3, #16
 800a510:	693a      	ldr	r2, [r7, #16]
 800a512:	4313      	orrs	r3, r2
 800a514:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	4a12      	ldr	r2, [pc, #72]	; (800a564 <TIM_OC5_SetConfig+0x9c>)
 800a51a:	4293      	cmp	r3, r2
 800a51c:	d003      	beq.n	800a526 <TIM_OC5_SetConfig+0x5e>
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	4a11      	ldr	r2, [pc, #68]	; (800a568 <TIM_OC5_SetConfig+0xa0>)
 800a522:	4293      	cmp	r3, r2
 800a524:	d109      	bne.n	800a53a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a526:	697b      	ldr	r3, [r7, #20]
 800a528:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a52c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a52e:	683b      	ldr	r3, [r7, #0]
 800a530:	695b      	ldr	r3, [r3, #20]
 800a532:	021b      	lsls	r3, r3, #8
 800a534:	697a      	ldr	r2, [r7, #20]
 800a536:	4313      	orrs	r3, r2
 800a538:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	697a      	ldr	r2, [r7, #20]
 800a53e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	68fa      	ldr	r2, [r7, #12]
 800a544:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	685a      	ldr	r2, [r3, #4]
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	693a      	ldr	r2, [r7, #16]
 800a552:	621a      	str	r2, [r3, #32]
}
 800a554:	bf00      	nop
 800a556:	371c      	adds	r7, #28
 800a558:	46bd      	mov	sp, r7
 800a55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55e:	4770      	bx	lr
 800a560:	fffeff8f 	.word	0xfffeff8f
 800a564:	40010000 	.word	0x40010000
 800a568:	40010400 	.word	0x40010400

0800a56c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a56c:	b480      	push	{r7}
 800a56e:	b087      	sub	sp, #28
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
 800a574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6a1b      	ldr	r3, [r3, #32]
 800a57a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6a1b      	ldr	r3, [r3, #32]
 800a586:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	685b      	ldr	r3, [r3, #4]
 800a58c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a594:	68fa      	ldr	r2, [r7, #12]
 800a596:	4b1c      	ldr	r3, [pc, #112]	; (800a608 <TIM_OC6_SetConfig+0x9c>)
 800a598:	4013      	ands	r3, r2
 800a59a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	021b      	lsls	r3, r3, #8
 800a5a2:	68fa      	ldr	r2, [r7, #12]
 800a5a4:	4313      	orrs	r3, r2
 800a5a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a5a8:	693b      	ldr	r3, [r7, #16]
 800a5aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a5ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	689b      	ldr	r3, [r3, #8]
 800a5b4:	051b      	lsls	r3, r3, #20
 800a5b6:	693a      	ldr	r2, [r7, #16]
 800a5b8:	4313      	orrs	r3, r2
 800a5ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	4a13      	ldr	r2, [pc, #76]	; (800a60c <TIM_OC6_SetConfig+0xa0>)
 800a5c0:	4293      	cmp	r3, r2
 800a5c2:	d003      	beq.n	800a5cc <TIM_OC6_SetConfig+0x60>
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	4a12      	ldr	r2, [pc, #72]	; (800a610 <TIM_OC6_SetConfig+0xa4>)
 800a5c8:	4293      	cmp	r3, r2
 800a5ca:	d109      	bne.n	800a5e0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a5cc:	697b      	ldr	r3, [r7, #20]
 800a5ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a5d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	695b      	ldr	r3, [r3, #20]
 800a5d8:	029b      	lsls	r3, r3, #10
 800a5da:	697a      	ldr	r2, [r7, #20]
 800a5dc:	4313      	orrs	r3, r2
 800a5de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	697a      	ldr	r2, [r7, #20]
 800a5e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	68fa      	ldr	r2, [r7, #12]
 800a5ea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	685a      	ldr	r2, [r3, #4]
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	693a      	ldr	r2, [r7, #16]
 800a5f8:	621a      	str	r2, [r3, #32]
}
 800a5fa:	bf00      	nop
 800a5fc:	371c      	adds	r7, #28
 800a5fe:	46bd      	mov	sp, r7
 800a600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a604:	4770      	bx	lr
 800a606:	bf00      	nop
 800a608:	feff8fff 	.word	0xfeff8fff
 800a60c:	40010000 	.word	0x40010000
 800a610:	40010400 	.word	0x40010400

0800a614 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a614:	b480      	push	{r7}
 800a616:	b087      	sub	sp, #28
 800a618:	af00      	add	r7, sp, #0
 800a61a:	60f8      	str	r0, [r7, #12]
 800a61c:	60b9      	str	r1, [r7, #8]
 800a61e:	607a      	str	r2, [r7, #4]
 800a620:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	6a1b      	ldr	r3, [r3, #32]
 800a626:	f023 0201 	bic.w	r2, r3, #1
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	699b      	ldr	r3, [r3, #24]
 800a632:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	6a1b      	ldr	r3, [r3, #32]
 800a638:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	4a28      	ldr	r2, [pc, #160]	; (800a6e0 <TIM_TI1_SetConfig+0xcc>)
 800a63e:	4293      	cmp	r3, r2
 800a640:	d01b      	beq.n	800a67a <TIM_TI1_SetConfig+0x66>
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a648:	d017      	beq.n	800a67a <TIM_TI1_SetConfig+0x66>
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	4a25      	ldr	r2, [pc, #148]	; (800a6e4 <TIM_TI1_SetConfig+0xd0>)
 800a64e:	4293      	cmp	r3, r2
 800a650:	d013      	beq.n	800a67a <TIM_TI1_SetConfig+0x66>
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	4a24      	ldr	r2, [pc, #144]	; (800a6e8 <TIM_TI1_SetConfig+0xd4>)
 800a656:	4293      	cmp	r3, r2
 800a658:	d00f      	beq.n	800a67a <TIM_TI1_SetConfig+0x66>
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	4a23      	ldr	r2, [pc, #140]	; (800a6ec <TIM_TI1_SetConfig+0xd8>)
 800a65e:	4293      	cmp	r3, r2
 800a660:	d00b      	beq.n	800a67a <TIM_TI1_SetConfig+0x66>
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	4a22      	ldr	r2, [pc, #136]	; (800a6f0 <TIM_TI1_SetConfig+0xdc>)
 800a666:	4293      	cmp	r3, r2
 800a668:	d007      	beq.n	800a67a <TIM_TI1_SetConfig+0x66>
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	4a21      	ldr	r2, [pc, #132]	; (800a6f4 <TIM_TI1_SetConfig+0xe0>)
 800a66e:	4293      	cmp	r3, r2
 800a670:	d003      	beq.n	800a67a <TIM_TI1_SetConfig+0x66>
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	4a20      	ldr	r2, [pc, #128]	; (800a6f8 <TIM_TI1_SetConfig+0xe4>)
 800a676:	4293      	cmp	r3, r2
 800a678:	d101      	bne.n	800a67e <TIM_TI1_SetConfig+0x6a>
 800a67a:	2301      	movs	r3, #1
 800a67c:	e000      	b.n	800a680 <TIM_TI1_SetConfig+0x6c>
 800a67e:	2300      	movs	r3, #0
 800a680:	2b00      	cmp	r3, #0
 800a682:	d008      	beq.n	800a696 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a684:	697b      	ldr	r3, [r7, #20]
 800a686:	f023 0303 	bic.w	r3, r3, #3
 800a68a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a68c:	697a      	ldr	r2, [r7, #20]
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	4313      	orrs	r3, r2
 800a692:	617b      	str	r3, [r7, #20]
 800a694:	e003      	b.n	800a69e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a696:	697b      	ldr	r3, [r7, #20]
 800a698:	f043 0301 	orr.w	r3, r3, #1
 800a69c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a69e:	697b      	ldr	r3, [r7, #20]
 800a6a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a6a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	011b      	lsls	r3, r3, #4
 800a6aa:	b2db      	uxtb	r3, r3
 800a6ac:	697a      	ldr	r2, [r7, #20]
 800a6ae:	4313      	orrs	r3, r2
 800a6b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a6b2:	693b      	ldr	r3, [r7, #16]
 800a6b4:	f023 030a 	bic.w	r3, r3, #10
 800a6b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a6ba:	68bb      	ldr	r3, [r7, #8]
 800a6bc:	f003 030a 	and.w	r3, r3, #10
 800a6c0:	693a      	ldr	r2, [r7, #16]
 800a6c2:	4313      	orrs	r3, r2
 800a6c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	697a      	ldr	r2, [r7, #20]
 800a6ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	693a      	ldr	r2, [r7, #16]
 800a6d0:	621a      	str	r2, [r3, #32]
}
 800a6d2:	bf00      	nop
 800a6d4:	371c      	adds	r7, #28
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6dc:	4770      	bx	lr
 800a6de:	bf00      	nop
 800a6e0:	40010000 	.word	0x40010000
 800a6e4:	40000400 	.word	0x40000400
 800a6e8:	40000800 	.word	0x40000800
 800a6ec:	40000c00 	.word	0x40000c00
 800a6f0:	40010400 	.word	0x40010400
 800a6f4:	40014000 	.word	0x40014000
 800a6f8:	40001800 	.word	0x40001800

0800a6fc <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a6fc:	b480      	push	{r7}
 800a6fe:	b087      	sub	sp, #28
 800a700:	af00      	add	r7, sp, #0
 800a702:	60f8      	str	r0, [r7, #12]
 800a704:	60b9      	str	r1, [r7, #8]
 800a706:	607a      	str	r2, [r7, #4]
 800a708:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	6a1b      	ldr	r3, [r3, #32]
 800a70e:	f023 0210 	bic.w	r2, r3, #16
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	699b      	ldr	r3, [r3, #24]
 800a71a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	6a1b      	ldr	r3, [r3, #32]
 800a720:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a722:	697b      	ldr	r3, [r7, #20]
 800a724:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a728:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	021b      	lsls	r3, r3, #8
 800a72e:	697a      	ldr	r2, [r7, #20]
 800a730:	4313      	orrs	r3, r2
 800a732:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a734:	697b      	ldr	r3, [r7, #20]
 800a736:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a73a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	031b      	lsls	r3, r3, #12
 800a740:	b29b      	uxth	r3, r3
 800a742:	697a      	ldr	r2, [r7, #20]
 800a744:	4313      	orrs	r3, r2
 800a746:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a748:	693b      	ldr	r3, [r7, #16]
 800a74a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a74e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a750:	68bb      	ldr	r3, [r7, #8]
 800a752:	011b      	lsls	r3, r3, #4
 800a754:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800a758:	693a      	ldr	r2, [r7, #16]
 800a75a:	4313      	orrs	r3, r2
 800a75c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	697a      	ldr	r2, [r7, #20]
 800a762:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	693a      	ldr	r2, [r7, #16]
 800a768:	621a      	str	r2, [r3, #32]
}
 800a76a:	bf00      	nop
 800a76c:	371c      	adds	r7, #28
 800a76e:	46bd      	mov	sp, r7
 800a770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a774:	4770      	bx	lr

0800a776 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a776:	b480      	push	{r7}
 800a778:	b087      	sub	sp, #28
 800a77a:	af00      	add	r7, sp, #0
 800a77c:	60f8      	str	r0, [r7, #12]
 800a77e:	60b9      	str	r1, [r7, #8]
 800a780:	607a      	str	r2, [r7, #4]
 800a782:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	6a1b      	ldr	r3, [r3, #32]
 800a788:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	69db      	ldr	r3, [r3, #28]
 800a794:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	6a1b      	ldr	r3, [r3, #32]
 800a79a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a79c:	697b      	ldr	r3, [r7, #20]
 800a79e:	f023 0303 	bic.w	r3, r3, #3
 800a7a2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800a7a4:	697a      	ldr	r2, [r7, #20]
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	4313      	orrs	r3, r2
 800a7aa:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a7ac:	697b      	ldr	r3, [r7, #20]
 800a7ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a7b2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	011b      	lsls	r3, r3, #4
 800a7b8:	b2db      	uxtb	r3, r3
 800a7ba:	697a      	ldr	r2, [r7, #20]
 800a7bc:	4313      	orrs	r3, r2
 800a7be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a7c0:	693b      	ldr	r3, [r7, #16]
 800a7c2:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800a7c6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a7c8:	68bb      	ldr	r3, [r7, #8]
 800a7ca:	021b      	lsls	r3, r3, #8
 800a7cc:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800a7d0:	693a      	ldr	r2, [r7, #16]
 800a7d2:	4313      	orrs	r3, r2
 800a7d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	697a      	ldr	r2, [r7, #20]
 800a7da:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	693a      	ldr	r2, [r7, #16]
 800a7e0:	621a      	str	r2, [r3, #32]
}
 800a7e2:	bf00      	nop
 800a7e4:	371c      	adds	r7, #28
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ec:	4770      	bx	lr

0800a7ee <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a7ee:	b480      	push	{r7}
 800a7f0:	b087      	sub	sp, #28
 800a7f2:	af00      	add	r7, sp, #0
 800a7f4:	60f8      	str	r0, [r7, #12]
 800a7f6:	60b9      	str	r1, [r7, #8]
 800a7f8:	607a      	str	r2, [r7, #4]
 800a7fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	6a1b      	ldr	r3, [r3, #32]
 800a800:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	69db      	ldr	r3, [r3, #28]
 800a80c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	6a1b      	ldr	r3, [r3, #32]
 800a812:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a814:	697b      	ldr	r3, [r7, #20]
 800a816:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a81a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	021b      	lsls	r3, r3, #8
 800a820:	697a      	ldr	r2, [r7, #20]
 800a822:	4313      	orrs	r3, r2
 800a824:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a826:	697b      	ldr	r3, [r7, #20]
 800a828:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a82c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	031b      	lsls	r3, r3, #12
 800a832:	b29b      	uxth	r3, r3
 800a834:	697a      	ldr	r2, [r7, #20]
 800a836:	4313      	orrs	r3, r2
 800a838:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a83a:	693b      	ldr	r3, [r7, #16]
 800a83c:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800a840:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a842:	68bb      	ldr	r3, [r7, #8]
 800a844:	031b      	lsls	r3, r3, #12
 800a846:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800a84a:	693a      	ldr	r2, [r7, #16]
 800a84c:	4313      	orrs	r3, r2
 800a84e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	697a      	ldr	r2, [r7, #20]
 800a854:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	693a      	ldr	r2, [r7, #16]
 800a85a:	621a      	str	r2, [r3, #32]
}
 800a85c:	bf00      	nop
 800a85e:	371c      	adds	r7, #28
 800a860:	46bd      	mov	sp, r7
 800a862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a866:	4770      	bx	lr

0800a868 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a868:	b480      	push	{r7}
 800a86a:	b087      	sub	sp, #28
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	60f8      	str	r0, [r7, #12]
 800a870:	60b9      	str	r1, [r7, #8]
 800a872:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a874:	68bb      	ldr	r3, [r7, #8]
 800a876:	f003 031f 	and.w	r3, r3, #31
 800a87a:	2201      	movs	r2, #1
 800a87c:	fa02 f303 	lsl.w	r3, r2, r3
 800a880:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	6a1a      	ldr	r2, [r3, #32]
 800a886:	697b      	ldr	r3, [r7, #20]
 800a888:	43db      	mvns	r3, r3
 800a88a:	401a      	ands	r2, r3
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	6a1a      	ldr	r2, [r3, #32]
 800a894:	68bb      	ldr	r3, [r7, #8]
 800a896:	f003 031f 	and.w	r3, r3, #31
 800a89a:	6879      	ldr	r1, [r7, #4]
 800a89c:	fa01 f303 	lsl.w	r3, r1, r3
 800a8a0:	431a      	orrs	r2, r3
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	621a      	str	r2, [r3, #32]
}
 800a8a6:	bf00      	nop
 800a8a8:	371c      	adds	r7, #28
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b0:	4770      	bx	lr
	...

0800a8b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a8b4:	b480      	push	{r7}
 800a8b6:	b085      	sub	sp, #20
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
 800a8bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a8c4:	2b01      	cmp	r3, #1
 800a8c6:	d101      	bne.n	800a8cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a8c8:	2302      	movs	r3, #2
 800a8ca:	e06d      	b.n	800a9a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2201      	movs	r2, #1
 800a8d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2202      	movs	r2, #2
 800a8d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	685b      	ldr	r3, [r3, #4]
 800a8e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	689b      	ldr	r3, [r3, #8]
 800a8ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	4a30      	ldr	r2, [pc, #192]	; (800a9b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a8f2:	4293      	cmp	r3, r2
 800a8f4:	d004      	beq.n	800a900 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	4a2f      	ldr	r2, [pc, #188]	; (800a9b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a8fc:	4293      	cmp	r3, r2
 800a8fe:	d108      	bne.n	800a912 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a906:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	685b      	ldr	r3, [r3, #4]
 800a90c:	68fa      	ldr	r2, [r7, #12]
 800a90e:	4313      	orrs	r3, r2
 800a910:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a918:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	68fa      	ldr	r2, [r7, #12]
 800a920:	4313      	orrs	r3, r2
 800a922:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	68fa      	ldr	r2, [r7, #12]
 800a92a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	4a20      	ldr	r2, [pc, #128]	; (800a9b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a932:	4293      	cmp	r3, r2
 800a934:	d022      	beq.n	800a97c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a93e:	d01d      	beq.n	800a97c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	4a1d      	ldr	r2, [pc, #116]	; (800a9bc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a946:	4293      	cmp	r3, r2
 800a948:	d018      	beq.n	800a97c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	4a1c      	ldr	r2, [pc, #112]	; (800a9c0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a950:	4293      	cmp	r3, r2
 800a952:	d013      	beq.n	800a97c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	4a1a      	ldr	r2, [pc, #104]	; (800a9c4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a95a:	4293      	cmp	r3, r2
 800a95c:	d00e      	beq.n	800a97c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	4a15      	ldr	r2, [pc, #84]	; (800a9b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a964:	4293      	cmp	r3, r2
 800a966:	d009      	beq.n	800a97c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	4a16      	ldr	r2, [pc, #88]	; (800a9c8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a96e:	4293      	cmp	r3, r2
 800a970:	d004      	beq.n	800a97c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	4a15      	ldr	r2, [pc, #84]	; (800a9cc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a978:	4293      	cmp	r3, r2
 800a97a:	d10c      	bne.n	800a996 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a97c:	68bb      	ldr	r3, [r7, #8]
 800a97e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a982:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	689b      	ldr	r3, [r3, #8]
 800a988:	68ba      	ldr	r2, [r7, #8]
 800a98a:	4313      	orrs	r3, r2
 800a98c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	68ba      	ldr	r2, [r7, #8]
 800a994:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2201      	movs	r2, #1
 800a99a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a9a6:	2300      	movs	r3, #0
}
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	3714      	adds	r7, #20
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b2:	4770      	bx	lr
 800a9b4:	40010000 	.word	0x40010000
 800a9b8:	40010400 	.word	0x40010400
 800a9bc:	40000400 	.word	0x40000400
 800a9c0:	40000800 	.word	0x40000800
 800a9c4:	40000c00 	.word	0x40000c00
 800a9c8:	40014000 	.word	0x40014000
 800a9cc:	40001800 	.word	0x40001800

0800a9d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a9d0:	b480      	push	{r7}
 800a9d2:	b085      	sub	sp, #20
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
 800a9d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a9e4:	2b01      	cmp	r3, #1
 800a9e6:	d101      	bne.n	800a9ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a9e8:	2302      	movs	r3, #2
 800a9ea:	e065      	b.n	800aab8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2201      	movs	r2, #1
 800a9f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	68db      	ldr	r3, [r3, #12]
 800a9fe:	4313      	orrs	r3, r2
 800aa00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	689b      	ldr	r3, [r3, #8]
 800aa0c:	4313      	orrs	r3, r2
 800aa0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	685b      	ldr	r3, [r3, #4]
 800aa1a:	4313      	orrs	r3, r2
 800aa1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	4313      	orrs	r3, r2
 800aa2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	691b      	ldr	r3, [r3, #16]
 800aa36:	4313      	orrs	r3, r2
 800aa38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	695b      	ldr	r3, [r3, #20]
 800aa44:	4313      	orrs	r3, r2
 800aa46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa52:	4313      	orrs	r3, r2
 800aa54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	699b      	ldr	r3, [r3, #24]
 800aa60:	041b      	lsls	r3, r3, #16
 800aa62:	4313      	orrs	r3, r2
 800aa64:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	4a16      	ldr	r2, [pc, #88]	; (800aac4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800aa6c:	4293      	cmp	r3, r2
 800aa6e:	d004      	beq.n	800aa7a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	4a14      	ldr	r2, [pc, #80]	; (800aac8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800aa76:	4293      	cmp	r3, r2
 800aa78:	d115      	bne.n	800aaa6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa84:	051b      	lsls	r3, r3, #20
 800aa86:	4313      	orrs	r3, r2
 800aa88:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	69db      	ldr	r3, [r3, #28]
 800aa94:	4313      	orrs	r3, r2
 800aa96:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	6a1b      	ldr	r3, [r3, #32]
 800aaa2:	4313      	orrs	r3, r2
 800aaa4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	68fa      	ldr	r2, [r7, #12]
 800aaac:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	2200      	movs	r2, #0
 800aab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aab6:	2300      	movs	r3, #0
}
 800aab8:	4618      	mov	r0, r3
 800aaba:	3714      	adds	r7, #20
 800aabc:	46bd      	mov	sp, r7
 800aabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac2:	4770      	bx	lr
 800aac4:	40010000 	.word	0x40010000
 800aac8:	40010400 	.word	0x40010400

0800aacc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b082      	sub	sp, #8
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d101      	bne.n	800aade <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aada:	2301      	movs	r3, #1
 800aadc:	e040      	b.n	800ab60 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d106      	bne.n	800aaf4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2200      	movs	r2, #0
 800aaea:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	f7f8 fec8 	bl	8003884 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2224      	movs	r2, #36	; 0x24
 800aaf8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	681a      	ldr	r2, [r3, #0]
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	f022 0201 	bic.w	r2, r2, #1
 800ab08:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ab0a:	6878      	ldr	r0, [r7, #4]
 800ab0c:	f000 fb54 	bl	800b1b8 <UART_SetConfig>
 800ab10:	4603      	mov	r3, r0
 800ab12:	2b01      	cmp	r3, #1
 800ab14:	d101      	bne.n	800ab1a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800ab16:	2301      	movs	r3, #1
 800ab18:	e022      	b.n	800ab60 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d002      	beq.n	800ab28 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800ab22:	6878      	ldr	r0, [r7, #4]
 800ab24:	f000 fdf2 	bl	800b70c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	685a      	ldr	r2, [r3, #4]
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ab36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	689a      	ldr	r2, [r3, #8]
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ab46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	681a      	ldr	r2, [r3, #0]
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	f042 0201 	orr.w	r2, r2, #1
 800ab56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ab58:	6878      	ldr	r0, [r7, #4]
 800ab5a:	f000 fe79 	bl	800b850 <UART_CheckIdleState>
 800ab5e:	4603      	mov	r3, r0
}
 800ab60:	4618      	mov	r0, r3
 800ab62:	3708      	adds	r7, #8
 800ab64:	46bd      	mov	sp, r7
 800ab66:	bd80      	pop	{r7, pc}

0800ab68 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b08a      	sub	sp, #40	; 0x28
 800ab6c:	af02      	add	r7, sp, #8
 800ab6e:	60f8      	str	r0, [r7, #12]
 800ab70:	60b9      	str	r1, [r7, #8]
 800ab72:	603b      	str	r3, [r7, #0]
 800ab74:	4613      	mov	r3, r2
 800ab76:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab7c:	2b20      	cmp	r3, #32
 800ab7e:	d17f      	bne.n	800ac80 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800ab80:	68bb      	ldr	r3, [r7, #8]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d002      	beq.n	800ab8c <HAL_UART_Transmit+0x24>
 800ab86:	88fb      	ldrh	r3, [r7, #6]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d101      	bne.n	800ab90 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800ab8c:	2301      	movs	r3, #1
 800ab8e:	e078      	b.n	800ac82 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800ab96:	2b01      	cmp	r3, #1
 800ab98:	d101      	bne.n	800ab9e <HAL_UART_Transmit+0x36>
 800ab9a:	2302      	movs	r3, #2
 800ab9c:	e071      	b.n	800ac82 <HAL_UART_Transmit+0x11a>
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	2201      	movs	r2, #1
 800aba2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	2200      	movs	r2, #0
 800abaa:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	2221      	movs	r2, #33	; 0x21
 800abb0:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800abb2:	f7f9 fa0d 	bl	8003fd0 <HAL_GetTick>
 800abb6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	88fa      	ldrh	r2, [r7, #6]
 800abbc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	88fa      	ldrh	r2, [r7, #6]
 800abc4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	689b      	ldr	r3, [r3, #8]
 800abcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800abd0:	d108      	bne.n	800abe4 <HAL_UART_Transmit+0x7c>
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	691b      	ldr	r3, [r3, #16]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d104      	bne.n	800abe4 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800abda:	2300      	movs	r3, #0
 800abdc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800abde:	68bb      	ldr	r3, [r7, #8]
 800abe0:	61bb      	str	r3, [r7, #24]
 800abe2:	e003      	b.n	800abec <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 800abe4:	68bb      	ldr	r3, [r7, #8]
 800abe6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800abe8:	2300      	movs	r3, #0
 800abea:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	2200      	movs	r2, #0
 800abf0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800abf4:	e02c      	b.n	800ac50 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	9300      	str	r3, [sp, #0]
 800abfa:	697b      	ldr	r3, [r7, #20]
 800abfc:	2200      	movs	r2, #0
 800abfe:	2180      	movs	r1, #128	; 0x80
 800ac00:	68f8      	ldr	r0, [r7, #12]
 800ac02:	f000 fe6a 	bl	800b8da <UART_WaitOnFlagUntilTimeout>
 800ac06:	4603      	mov	r3, r0
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d001      	beq.n	800ac10 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 800ac0c:	2303      	movs	r3, #3
 800ac0e:	e038      	b.n	800ac82 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 800ac10:	69fb      	ldr	r3, [r7, #28]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d10b      	bne.n	800ac2e <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ac16:	69bb      	ldr	r3, [r7, #24]
 800ac18:	881b      	ldrh	r3, [r3, #0]
 800ac1a:	461a      	mov	r2, r3
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ac24:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ac26:	69bb      	ldr	r3, [r7, #24]
 800ac28:	3302      	adds	r3, #2
 800ac2a:	61bb      	str	r3, [r7, #24]
 800ac2c:	e007      	b.n	800ac3e <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ac2e:	69fb      	ldr	r3, [r7, #28]
 800ac30:	781a      	ldrb	r2, [r3, #0]
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ac38:	69fb      	ldr	r3, [r7, #28]
 800ac3a:	3301      	adds	r3, #1
 800ac3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ac44:	b29b      	uxth	r3, r3
 800ac46:	3b01      	subs	r3, #1
 800ac48:	b29a      	uxth	r2, r3
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ac56:	b29b      	uxth	r3, r3
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d1cc      	bne.n	800abf6 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	9300      	str	r3, [sp, #0]
 800ac60:	697b      	ldr	r3, [r7, #20]
 800ac62:	2200      	movs	r2, #0
 800ac64:	2140      	movs	r1, #64	; 0x40
 800ac66:	68f8      	ldr	r0, [r7, #12]
 800ac68:	f000 fe37 	bl	800b8da <UART_WaitOnFlagUntilTimeout>
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d001      	beq.n	800ac76 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800ac72:	2303      	movs	r3, #3
 800ac74:	e005      	b.n	800ac82 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	2220      	movs	r2, #32
 800ac7a:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	e000      	b.n	800ac82 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 800ac80:	2302      	movs	r3, #2
  }
}
 800ac82:	4618      	mov	r0, r3
 800ac84:	3720      	adds	r7, #32
 800ac86:	46bd      	mov	sp, r7
 800ac88:	bd80      	pop	{r7, pc}
	...

0800ac8c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b084      	sub	sp, #16
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	60f8      	str	r0, [r7, #12]
 800ac94:	60b9      	str	r1, [r7, #8]
 800ac96:	4613      	mov	r3, r2
 800ac98:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ac9e:	2b20      	cmp	r3, #32
 800aca0:	d16c      	bne.n	800ad7c <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d002      	beq.n	800acae <HAL_UART_Receive_DMA+0x22>
 800aca8:	88fb      	ldrh	r3, [r7, #6]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d101      	bne.n	800acb2 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 800acae:	2301      	movs	r3, #1
 800acb0:	e065      	b.n	800ad7e <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800acb8:	2b01      	cmp	r3, #1
 800acba:	d101      	bne.n	800acc0 <HAL_UART_Receive_DMA+0x34>
 800acbc:	2302      	movs	r3, #2
 800acbe:	e05e      	b.n	800ad7e <HAL_UART_Receive_DMA+0xf2>
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	2201      	movs	r2, #1
 800acc4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	68ba      	ldr	r2, [r7, #8]
 800accc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	88fa      	ldrh	r2, [r7, #6]
 800acd2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	2200      	movs	r2, #0
 800acda:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	2222      	movs	r2, #34	; 0x22
 800ace0:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d02a      	beq.n	800ad40 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800acee:	4a26      	ldr	r2, [pc, #152]	; (800ad88 <HAL_UART_Receive_DMA+0xfc>)
 800acf0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800acf6:	4a25      	ldr	r2, [pc, #148]	; (800ad8c <HAL_UART_Receive_DMA+0x100>)
 800acf8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800acfe:	4a24      	ldr	r2, [pc, #144]	; (800ad90 <HAL_UART_Receive_DMA+0x104>)
 800ad00:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad06:	2200      	movs	r2, #0
 800ad08:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	3324      	adds	r3, #36	; 0x24
 800ad14:	4619      	mov	r1, r3
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad1a:	461a      	mov	r2, r3
 800ad1c:	88fb      	ldrh	r3, [r7, #6]
 800ad1e:	f7fa f803 	bl	8004d28 <HAL_DMA_Start_IT>
 800ad22:	4603      	mov	r3, r0
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d00b      	beq.n	800ad40 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	2210      	movs	r2, #16
 800ad2c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	2200      	movs	r2, #0
 800ad32:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	2220      	movs	r2, #32
 800ad3a:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 800ad3c:	2301      	movs	r3, #1
 800ad3e:	e01e      	b.n	800ad7e <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	2200      	movs	r2, #0
 800ad44:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	681a      	ldr	r2, [r3, #0]
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ad56:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	689a      	ldr	r2, [r3, #8]
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	f042 0201 	orr.w	r2, r2, #1
 800ad66:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	689a      	ldr	r2, [r3, #8]
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ad76:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800ad78:	2300      	movs	r3, #0
 800ad7a:	e000      	b.n	800ad7e <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 800ad7c:	2302      	movs	r3, #2
  }
}
 800ad7e:	4618      	mov	r0, r3
 800ad80:	3710      	adds	r7, #16
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bd80      	pop	{r7, pc}
 800ad86:	bf00      	nop
 800ad88:	0800ba3b 	.word	0x0800ba3b
 800ad8c:	0800ba9f 	.word	0x0800ba9f
 800ad90:	0800babb 	.word	0x0800babb

0800ad94 <HAL_UART_DMAPause>:
  * @brief Pause the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
{
 800ad94:	b480      	push	{r7}
 800ad96:	b085      	sub	sp, #20
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ada0:	60fb      	str	r3, [r7, #12]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ada6:	60bb      	str	r3, [r7, #8]

  __HAL_LOCK(huart);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800adae:	2b01      	cmp	r3, #1
 800adb0:	d101      	bne.n	800adb6 <HAL_UART_DMAPause+0x22>
 800adb2:	2302      	movs	r3, #2
 800adb4:	e03c      	b.n	800ae30 <HAL_UART_DMAPause+0x9c>
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	2201      	movs	r2, #1
 800adba:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	689b      	ldr	r3, [r3, #8]
 800adc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800adc8:	2b80      	cmp	r3, #128	; 0x80
 800adca:	d10a      	bne.n	800ade2 <HAL_UART_DMAPause+0x4e>
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	2b21      	cmp	r3, #33	; 0x21
 800add0:	d107      	bne.n	800ade2 <HAL_UART_DMAPause+0x4e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    /* Disable the UART DMA Tx request */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	689a      	ldr	r2, [r3, #8]
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ade0:	609a      	str	r2, [r3, #8]
  }
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	689b      	ldr	r3, [r3, #8]
 800ade8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adec:	2b40      	cmp	r3, #64	; 0x40
 800adee:	d11a      	bne.n	800ae26 <HAL_UART_DMAPause+0x92>
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	2b22      	cmp	r3, #34	; 0x22
 800adf4:	d117      	bne.n	800ae26 <HAL_UART_DMAPause+0x92>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	681a      	ldr	r2, [r3, #0]
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ae04:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	689a      	ldr	r2, [r3, #8]
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	f022 0201 	bic.w	r2, r2, #1
 800ae14:	609a      	str	r2, [r3, #8]

    /* Disable the UART DMA Rx request */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	689a      	ldr	r2, [r3, #8]
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ae24:	609a      	str	r2, [r3, #8]
  }

  __HAL_UNLOCK(huart);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	2200      	movs	r2, #0
 800ae2a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800ae2e:	2300      	movs	r3, #0
}
 800ae30:	4618      	mov	r0, r3
 800ae32:	3714      	adds	r7, #20
 800ae34:	46bd      	mov	sp, r7
 800ae36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3a:	4770      	bx	lr

0800ae3c <HAL_UART_DMAResume>:
  * @brief Resume the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
{
 800ae3c:	b480      	push	{r7}
 800ae3e:	b083      	sub	sp, #12
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800ae4a:	2b01      	cmp	r3, #1
 800ae4c:	d101      	bne.n	800ae52 <HAL_UART_DMAResume+0x16>
 800ae4e:	2302      	movs	r3, #2
 800ae50:	e034      	b.n	800aebc <HAL_UART_DMAResume+0x80>
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	2201      	movs	r2, #1
 800ae56:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae5e:	2b21      	cmp	r3, #33	; 0x21
 800ae60:	d107      	bne.n	800ae72 <HAL_UART_DMAResume+0x36>
  {
    /* Enable the UART DMA Tx request */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	689a      	ldr	r2, [r3, #8]
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ae70:	609a      	str	r2, [r3, #8]
  }
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ae76:	2b22      	cmp	r3, #34	; 0x22
 800ae78:	d11b      	bne.n	800aeb2 <HAL_UART_DMAResume+0x76>
  {
    /* Clear the Overrun flag before resuming the Rx transfer */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	2208      	movs	r2, #8
 800ae80:	621a      	str	r2, [r3, #32]

    /* Reenable PE and ERR (Frame error, noise error, overrun error) interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	681a      	ldr	r2, [r3, #0]
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ae90:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	689a      	ldr	r2, [r3, #8]
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	f042 0201 	orr.w	r2, r2, #1
 800aea0:	609a      	str	r2, [r3, #8]

    /* Enable the UART DMA Rx request */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	689a      	ldr	r2, [r3, #8]
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aeb0:	609a      	str	r2, [r3, #8]
  }

  __HAL_UNLOCK(huart);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800aeba:	2300      	movs	r3, #0
}
 800aebc:	4618      	mov	r0, r3
 800aebe:	370c      	adds	r7, #12
 800aec0:	46bd      	mov	sp, r7
 800aec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec6:	4770      	bx	lr

0800aec8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b088      	sub	sp, #32
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	69db      	ldr	r3, [r3, #28]
 800aed6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	689b      	ldr	r3, [r3, #8]
 800aee6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800aee8:	69fa      	ldr	r2, [r7, #28]
 800aeea:	f640 030f 	movw	r3, #2063	; 0x80f
 800aeee:	4013      	ands	r3, r2
 800aef0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800aef2:	693b      	ldr	r3, [r7, #16]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d113      	bne.n	800af20 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800aef8:	69fb      	ldr	r3, [r7, #28]
 800aefa:	f003 0320 	and.w	r3, r3, #32
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d00e      	beq.n	800af20 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800af02:	69bb      	ldr	r3, [r7, #24]
 800af04:	f003 0320 	and.w	r3, r3, #32
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d009      	beq.n	800af20 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af10:	2b00      	cmp	r3, #0
 800af12:	f000 8114 	beq.w	800b13e <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	4798      	blx	r3
      }
      return;
 800af1e:	e10e      	b.n	800b13e <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800af20:	693b      	ldr	r3, [r7, #16]
 800af22:	2b00      	cmp	r3, #0
 800af24:	f000 80d6 	beq.w	800b0d4 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800af28:	697b      	ldr	r3, [r7, #20]
 800af2a:	f003 0301 	and.w	r3, r3, #1
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d105      	bne.n	800af3e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800af32:	69bb      	ldr	r3, [r7, #24]
 800af34:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800af38:	2b00      	cmp	r3, #0
 800af3a:	f000 80cb 	beq.w	800b0d4 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800af3e:	69fb      	ldr	r3, [r7, #28]
 800af40:	f003 0301 	and.w	r3, r3, #1
 800af44:	2b00      	cmp	r3, #0
 800af46:	d00e      	beq.n	800af66 <HAL_UART_IRQHandler+0x9e>
 800af48:	69bb      	ldr	r3, [r7, #24]
 800af4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d009      	beq.n	800af66 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	2201      	movs	r2, #1
 800af58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800af5e:	f043 0201 	orr.w	r2, r3, #1
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800af66:	69fb      	ldr	r3, [r7, #28]
 800af68:	f003 0302 	and.w	r3, r3, #2
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d00e      	beq.n	800af8e <HAL_UART_IRQHandler+0xc6>
 800af70:	697b      	ldr	r3, [r7, #20]
 800af72:	f003 0301 	and.w	r3, r3, #1
 800af76:	2b00      	cmp	r3, #0
 800af78:	d009      	beq.n	800af8e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	2202      	movs	r2, #2
 800af80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800af86:	f043 0204 	orr.w	r2, r3, #4
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800af8e:	69fb      	ldr	r3, [r7, #28]
 800af90:	f003 0304 	and.w	r3, r3, #4
 800af94:	2b00      	cmp	r3, #0
 800af96:	d00e      	beq.n	800afb6 <HAL_UART_IRQHandler+0xee>
 800af98:	697b      	ldr	r3, [r7, #20]
 800af9a:	f003 0301 	and.w	r3, r3, #1
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d009      	beq.n	800afb6 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	2204      	movs	r2, #4
 800afa8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800afae:	f043 0202 	orr.w	r2, r3, #2
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800afb6:	69fb      	ldr	r3, [r7, #28]
 800afb8:	f003 0308 	and.w	r3, r3, #8
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d013      	beq.n	800afe8 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800afc0:	69bb      	ldr	r3, [r7, #24]
 800afc2:	f003 0320 	and.w	r3, r3, #32
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d104      	bne.n	800afd4 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800afca:	697b      	ldr	r3, [r7, #20]
 800afcc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d009      	beq.n	800afe8 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	2208      	movs	r2, #8
 800afda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800afe0:	f043 0208 	orr.w	r2, r3, #8
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800afe8:	69fb      	ldr	r3, [r7, #28]
 800afea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d00f      	beq.n	800b012 <HAL_UART_IRQHandler+0x14a>
 800aff2:	69bb      	ldr	r3, [r7, #24]
 800aff4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d00a      	beq.n	800b012 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b004:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b00a:	f043 0220 	orr.w	r2, r3, #32
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b016:	2b00      	cmp	r3, #0
 800b018:	f000 8093 	beq.w	800b142 <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800b01c:	69fb      	ldr	r3, [r7, #28]
 800b01e:	f003 0320 	and.w	r3, r3, #32
 800b022:	2b00      	cmp	r3, #0
 800b024:	d00c      	beq.n	800b040 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b026:	69bb      	ldr	r3, [r7, #24]
 800b028:	f003 0320 	and.w	r3, r3, #32
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d007      	beq.n	800b040 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b034:	2b00      	cmp	r3, #0
 800b036:	d003      	beq.n	800b040 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b03c:	6878      	ldr	r0, [r7, #4]
 800b03e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b044:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	689b      	ldr	r3, [r3, #8]
 800b04c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b050:	2b40      	cmp	r3, #64	; 0x40
 800b052:	d004      	beq.n	800b05e <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d031      	beq.n	800b0c2 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b05e:	6878      	ldr	r0, [r7, #4]
 800b060:	f000 fccb 	bl	800b9fa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	689b      	ldr	r3, [r3, #8]
 800b06a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b06e:	2b40      	cmp	r3, #64	; 0x40
 800b070:	d123      	bne.n	800b0ba <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	689a      	ldr	r2, [r3, #8]
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b080:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b086:	2b00      	cmp	r3, #0
 800b088:	d013      	beq.n	800b0b2 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b08e:	4a30      	ldr	r2, [pc, #192]	; (800b150 <HAL_UART_IRQHandler+0x288>)
 800b090:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b096:	4618      	mov	r0, r3
 800b098:	f7f9 fea6 	bl	8004de8 <HAL_DMA_Abort_IT>
 800b09c:	4603      	mov	r3, r0
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d016      	beq.n	800b0d0 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0a8:	687a      	ldr	r2, [r7, #4]
 800b0aa:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800b0ac:	4610      	mov	r0, r2
 800b0ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b0b0:	e00e      	b.n	800b0d0 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b0b2:	6878      	ldr	r0, [r7, #4]
 800b0b4:	f000 f86c 	bl	800b190 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b0b8:	e00a      	b.n	800b0d0 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b0ba:	6878      	ldr	r0, [r7, #4]
 800b0bc:	f000 f868 	bl	800b190 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b0c0:	e006      	b.n	800b0d0 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b0c2:	6878      	ldr	r0, [r7, #4]
 800b0c4:	f000 f864 	bl	800b190 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800b0ce:	e038      	b.n	800b142 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b0d0:	bf00      	nop
    return;
 800b0d2:	e036      	b.n	800b142 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b0d4:	69fb      	ldr	r3, [r7, #28]
 800b0d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d00d      	beq.n	800b0fa <HAL_UART_IRQHandler+0x232>
 800b0de:	697b      	ldr	r3, [r7, #20]
 800b0e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d008      	beq.n	800b0fa <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b0f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	f000 f856 	bl	800b1a4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b0f8:	e026      	b.n	800b148 <HAL_UART_IRQHandler+0x280>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800b0fa:	69fb      	ldr	r3, [r7, #28]
 800b0fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b100:	2b00      	cmp	r3, #0
 800b102:	d00d      	beq.n	800b120 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800b104:	69bb      	ldr	r3, [r7, #24]
 800b106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d008      	beq.n	800b120 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b112:	2b00      	cmp	r3, #0
 800b114:	d017      	beq.n	800b146 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b11a:	6878      	ldr	r0, [r7, #4]
 800b11c:	4798      	blx	r3
    }
    return;
 800b11e:	e012      	b.n	800b146 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b120:	69fb      	ldr	r3, [r7, #28]
 800b122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b126:	2b00      	cmp	r3, #0
 800b128:	d00e      	beq.n	800b148 <HAL_UART_IRQHandler+0x280>
 800b12a:	69bb      	ldr	r3, [r7, #24]
 800b12c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b130:	2b00      	cmp	r3, #0
 800b132:	d009      	beq.n	800b148 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 800b134:	6878      	ldr	r0, [r7, #4]
 800b136:	f000 fd12 	bl	800bb5e <UART_EndTransmit_IT>
    return;
 800b13a:	bf00      	nop
 800b13c:	e004      	b.n	800b148 <HAL_UART_IRQHandler+0x280>
      return;
 800b13e:	bf00      	nop
 800b140:	e002      	b.n	800b148 <HAL_UART_IRQHandler+0x280>
    return;
 800b142:	bf00      	nop
 800b144:	e000      	b.n	800b148 <HAL_UART_IRQHandler+0x280>
    return;
 800b146:	bf00      	nop
  }

}
 800b148:	3720      	adds	r7, #32
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bd80      	pop	{r7, pc}
 800b14e:	bf00      	nop
 800b150:	0800bb33 	.word	0x0800bb33

0800b154 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b154:	b480      	push	{r7}
 800b156:	b083      	sub	sp, #12
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b15c:	bf00      	nop
 800b15e:	370c      	adds	r7, #12
 800b160:	46bd      	mov	sp, r7
 800b162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b166:	4770      	bx	lr

0800b168 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b168:	b480      	push	{r7}
 800b16a:	b083      	sub	sp, #12
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800b170:	bf00      	nop
 800b172:	370c      	adds	r7, #12
 800b174:	46bd      	mov	sp, r7
 800b176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17a:	4770      	bx	lr

0800b17c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b17c:	b480      	push	{r7}
 800b17e:	b083      	sub	sp, #12
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800b184:	bf00      	nop
 800b186:	370c      	adds	r7, #12
 800b188:	46bd      	mov	sp, r7
 800b18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18e:	4770      	bx	lr

0800b190 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b190:	b480      	push	{r7}
 800b192:	b083      	sub	sp, #12
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b198:	bf00      	nop
 800b19a:	370c      	adds	r7, #12
 800b19c:	46bd      	mov	sp, r7
 800b19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a2:	4770      	bx	lr

0800b1a4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b1a4:	b480      	push	{r7}
 800b1a6:	b083      	sub	sp, #12
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b1ac:	bf00      	nop
 800b1ae:	370c      	adds	r7, #12
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b6:	4770      	bx	lr

0800b1b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b088      	sub	sp, #32
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	689a      	ldr	r2, [r3, #8]
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	691b      	ldr	r3, [r3, #16]
 800b1d0:	431a      	orrs	r2, r3
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	695b      	ldr	r3, [r3, #20]
 800b1d6:	431a      	orrs	r2, r3
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	69db      	ldr	r3, [r3, #28]
 800b1dc:	4313      	orrs	r3, r2
 800b1de:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	681a      	ldr	r2, [r3, #0]
 800b1e6:	4bb1      	ldr	r3, [pc, #708]	; (800b4ac <UART_SetConfig+0x2f4>)
 800b1e8:	4013      	ands	r3, r2
 800b1ea:	687a      	ldr	r2, [r7, #4]
 800b1ec:	6812      	ldr	r2, [r2, #0]
 800b1ee:	6939      	ldr	r1, [r7, #16]
 800b1f0:	430b      	orrs	r3, r1
 800b1f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	685b      	ldr	r3, [r3, #4]
 800b1fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	68da      	ldr	r2, [r3, #12]
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	430a      	orrs	r2, r1
 800b208:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	699b      	ldr	r3, [r3, #24]
 800b20e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	6a1b      	ldr	r3, [r3, #32]
 800b214:	693a      	ldr	r2, [r7, #16]
 800b216:	4313      	orrs	r3, r2
 800b218:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	689b      	ldr	r3, [r3, #8]
 800b220:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	693a      	ldr	r2, [r7, #16]
 800b22a:	430a      	orrs	r2, r1
 800b22c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	4a9f      	ldr	r2, [pc, #636]	; (800b4b0 <UART_SetConfig+0x2f8>)
 800b234:	4293      	cmp	r3, r2
 800b236:	d121      	bne.n	800b27c <UART_SetConfig+0xc4>
 800b238:	4b9e      	ldr	r3, [pc, #632]	; (800b4b4 <UART_SetConfig+0x2fc>)
 800b23a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b23e:	f003 0303 	and.w	r3, r3, #3
 800b242:	2b03      	cmp	r3, #3
 800b244:	d816      	bhi.n	800b274 <UART_SetConfig+0xbc>
 800b246:	a201      	add	r2, pc, #4	; (adr r2, 800b24c <UART_SetConfig+0x94>)
 800b248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b24c:	0800b25d 	.word	0x0800b25d
 800b250:	0800b269 	.word	0x0800b269
 800b254:	0800b263 	.word	0x0800b263
 800b258:	0800b26f 	.word	0x0800b26f
 800b25c:	2301      	movs	r3, #1
 800b25e:	77fb      	strb	r3, [r7, #31]
 800b260:	e151      	b.n	800b506 <UART_SetConfig+0x34e>
 800b262:	2302      	movs	r3, #2
 800b264:	77fb      	strb	r3, [r7, #31]
 800b266:	e14e      	b.n	800b506 <UART_SetConfig+0x34e>
 800b268:	2304      	movs	r3, #4
 800b26a:	77fb      	strb	r3, [r7, #31]
 800b26c:	e14b      	b.n	800b506 <UART_SetConfig+0x34e>
 800b26e:	2308      	movs	r3, #8
 800b270:	77fb      	strb	r3, [r7, #31]
 800b272:	e148      	b.n	800b506 <UART_SetConfig+0x34e>
 800b274:	2310      	movs	r3, #16
 800b276:	77fb      	strb	r3, [r7, #31]
 800b278:	bf00      	nop
 800b27a:	e144      	b.n	800b506 <UART_SetConfig+0x34e>
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	4a8d      	ldr	r2, [pc, #564]	; (800b4b8 <UART_SetConfig+0x300>)
 800b282:	4293      	cmp	r3, r2
 800b284:	d134      	bne.n	800b2f0 <UART_SetConfig+0x138>
 800b286:	4b8b      	ldr	r3, [pc, #556]	; (800b4b4 <UART_SetConfig+0x2fc>)
 800b288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b28c:	f003 030c 	and.w	r3, r3, #12
 800b290:	2b0c      	cmp	r3, #12
 800b292:	d829      	bhi.n	800b2e8 <UART_SetConfig+0x130>
 800b294:	a201      	add	r2, pc, #4	; (adr r2, 800b29c <UART_SetConfig+0xe4>)
 800b296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b29a:	bf00      	nop
 800b29c:	0800b2d1 	.word	0x0800b2d1
 800b2a0:	0800b2e9 	.word	0x0800b2e9
 800b2a4:	0800b2e9 	.word	0x0800b2e9
 800b2a8:	0800b2e9 	.word	0x0800b2e9
 800b2ac:	0800b2dd 	.word	0x0800b2dd
 800b2b0:	0800b2e9 	.word	0x0800b2e9
 800b2b4:	0800b2e9 	.word	0x0800b2e9
 800b2b8:	0800b2e9 	.word	0x0800b2e9
 800b2bc:	0800b2d7 	.word	0x0800b2d7
 800b2c0:	0800b2e9 	.word	0x0800b2e9
 800b2c4:	0800b2e9 	.word	0x0800b2e9
 800b2c8:	0800b2e9 	.word	0x0800b2e9
 800b2cc:	0800b2e3 	.word	0x0800b2e3
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	77fb      	strb	r3, [r7, #31]
 800b2d4:	e117      	b.n	800b506 <UART_SetConfig+0x34e>
 800b2d6:	2302      	movs	r3, #2
 800b2d8:	77fb      	strb	r3, [r7, #31]
 800b2da:	e114      	b.n	800b506 <UART_SetConfig+0x34e>
 800b2dc:	2304      	movs	r3, #4
 800b2de:	77fb      	strb	r3, [r7, #31]
 800b2e0:	e111      	b.n	800b506 <UART_SetConfig+0x34e>
 800b2e2:	2308      	movs	r3, #8
 800b2e4:	77fb      	strb	r3, [r7, #31]
 800b2e6:	e10e      	b.n	800b506 <UART_SetConfig+0x34e>
 800b2e8:	2310      	movs	r3, #16
 800b2ea:	77fb      	strb	r3, [r7, #31]
 800b2ec:	bf00      	nop
 800b2ee:	e10a      	b.n	800b506 <UART_SetConfig+0x34e>
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	4a71      	ldr	r2, [pc, #452]	; (800b4bc <UART_SetConfig+0x304>)
 800b2f6:	4293      	cmp	r3, r2
 800b2f8:	d120      	bne.n	800b33c <UART_SetConfig+0x184>
 800b2fa:	4b6e      	ldr	r3, [pc, #440]	; (800b4b4 <UART_SetConfig+0x2fc>)
 800b2fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b300:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b304:	2b10      	cmp	r3, #16
 800b306:	d00f      	beq.n	800b328 <UART_SetConfig+0x170>
 800b308:	2b10      	cmp	r3, #16
 800b30a:	d802      	bhi.n	800b312 <UART_SetConfig+0x15a>
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d005      	beq.n	800b31c <UART_SetConfig+0x164>
 800b310:	e010      	b.n	800b334 <UART_SetConfig+0x17c>
 800b312:	2b20      	cmp	r3, #32
 800b314:	d005      	beq.n	800b322 <UART_SetConfig+0x16a>
 800b316:	2b30      	cmp	r3, #48	; 0x30
 800b318:	d009      	beq.n	800b32e <UART_SetConfig+0x176>
 800b31a:	e00b      	b.n	800b334 <UART_SetConfig+0x17c>
 800b31c:	2300      	movs	r3, #0
 800b31e:	77fb      	strb	r3, [r7, #31]
 800b320:	e0f1      	b.n	800b506 <UART_SetConfig+0x34e>
 800b322:	2302      	movs	r3, #2
 800b324:	77fb      	strb	r3, [r7, #31]
 800b326:	e0ee      	b.n	800b506 <UART_SetConfig+0x34e>
 800b328:	2304      	movs	r3, #4
 800b32a:	77fb      	strb	r3, [r7, #31]
 800b32c:	e0eb      	b.n	800b506 <UART_SetConfig+0x34e>
 800b32e:	2308      	movs	r3, #8
 800b330:	77fb      	strb	r3, [r7, #31]
 800b332:	e0e8      	b.n	800b506 <UART_SetConfig+0x34e>
 800b334:	2310      	movs	r3, #16
 800b336:	77fb      	strb	r3, [r7, #31]
 800b338:	bf00      	nop
 800b33a:	e0e4      	b.n	800b506 <UART_SetConfig+0x34e>
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	4a5f      	ldr	r2, [pc, #380]	; (800b4c0 <UART_SetConfig+0x308>)
 800b342:	4293      	cmp	r3, r2
 800b344:	d120      	bne.n	800b388 <UART_SetConfig+0x1d0>
 800b346:	4b5b      	ldr	r3, [pc, #364]	; (800b4b4 <UART_SetConfig+0x2fc>)
 800b348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b34c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b350:	2b40      	cmp	r3, #64	; 0x40
 800b352:	d00f      	beq.n	800b374 <UART_SetConfig+0x1bc>
 800b354:	2b40      	cmp	r3, #64	; 0x40
 800b356:	d802      	bhi.n	800b35e <UART_SetConfig+0x1a6>
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d005      	beq.n	800b368 <UART_SetConfig+0x1b0>
 800b35c:	e010      	b.n	800b380 <UART_SetConfig+0x1c8>
 800b35e:	2b80      	cmp	r3, #128	; 0x80
 800b360:	d005      	beq.n	800b36e <UART_SetConfig+0x1b6>
 800b362:	2bc0      	cmp	r3, #192	; 0xc0
 800b364:	d009      	beq.n	800b37a <UART_SetConfig+0x1c2>
 800b366:	e00b      	b.n	800b380 <UART_SetConfig+0x1c8>
 800b368:	2300      	movs	r3, #0
 800b36a:	77fb      	strb	r3, [r7, #31]
 800b36c:	e0cb      	b.n	800b506 <UART_SetConfig+0x34e>
 800b36e:	2302      	movs	r3, #2
 800b370:	77fb      	strb	r3, [r7, #31]
 800b372:	e0c8      	b.n	800b506 <UART_SetConfig+0x34e>
 800b374:	2304      	movs	r3, #4
 800b376:	77fb      	strb	r3, [r7, #31]
 800b378:	e0c5      	b.n	800b506 <UART_SetConfig+0x34e>
 800b37a:	2308      	movs	r3, #8
 800b37c:	77fb      	strb	r3, [r7, #31]
 800b37e:	e0c2      	b.n	800b506 <UART_SetConfig+0x34e>
 800b380:	2310      	movs	r3, #16
 800b382:	77fb      	strb	r3, [r7, #31]
 800b384:	bf00      	nop
 800b386:	e0be      	b.n	800b506 <UART_SetConfig+0x34e>
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	4a4d      	ldr	r2, [pc, #308]	; (800b4c4 <UART_SetConfig+0x30c>)
 800b38e:	4293      	cmp	r3, r2
 800b390:	d124      	bne.n	800b3dc <UART_SetConfig+0x224>
 800b392:	4b48      	ldr	r3, [pc, #288]	; (800b4b4 <UART_SetConfig+0x2fc>)
 800b394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b398:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b39c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b3a0:	d012      	beq.n	800b3c8 <UART_SetConfig+0x210>
 800b3a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b3a6:	d802      	bhi.n	800b3ae <UART_SetConfig+0x1f6>
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d007      	beq.n	800b3bc <UART_SetConfig+0x204>
 800b3ac:	e012      	b.n	800b3d4 <UART_SetConfig+0x21c>
 800b3ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b3b2:	d006      	beq.n	800b3c2 <UART_SetConfig+0x20a>
 800b3b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b3b8:	d009      	beq.n	800b3ce <UART_SetConfig+0x216>
 800b3ba:	e00b      	b.n	800b3d4 <UART_SetConfig+0x21c>
 800b3bc:	2300      	movs	r3, #0
 800b3be:	77fb      	strb	r3, [r7, #31]
 800b3c0:	e0a1      	b.n	800b506 <UART_SetConfig+0x34e>
 800b3c2:	2302      	movs	r3, #2
 800b3c4:	77fb      	strb	r3, [r7, #31]
 800b3c6:	e09e      	b.n	800b506 <UART_SetConfig+0x34e>
 800b3c8:	2304      	movs	r3, #4
 800b3ca:	77fb      	strb	r3, [r7, #31]
 800b3cc:	e09b      	b.n	800b506 <UART_SetConfig+0x34e>
 800b3ce:	2308      	movs	r3, #8
 800b3d0:	77fb      	strb	r3, [r7, #31]
 800b3d2:	e098      	b.n	800b506 <UART_SetConfig+0x34e>
 800b3d4:	2310      	movs	r3, #16
 800b3d6:	77fb      	strb	r3, [r7, #31]
 800b3d8:	bf00      	nop
 800b3da:	e094      	b.n	800b506 <UART_SetConfig+0x34e>
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	4a39      	ldr	r2, [pc, #228]	; (800b4c8 <UART_SetConfig+0x310>)
 800b3e2:	4293      	cmp	r3, r2
 800b3e4:	d124      	bne.n	800b430 <UART_SetConfig+0x278>
 800b3e6:	4b33      	ldr	r3, [pc, #204]	; (800b4b4 <UART_SetConfig+0x2fc>)
 800b3e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3ec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b3f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b3f4:	d012      	beq.n	800b41c <UART_SetConfig+0x264>
 800b3f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b3fa:	d802      	bhi.n	800b402 <UART_SetConfig+0x24a>
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d007      	beq.n	800b410 <UART_SetConfig+0x258>
 800b400:	e012      	b.n	800b428 <UART_SetConfig+0x270>
 800b402:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b406:	d006      	beq.n	800b416 <UART_SetConfig+0x25e>
 800b408:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b40c:	d009      	beq.n	800b422 <UART_SetConfig+0x26a>
 800b40e:	e00b      	b.n	800b428 <UART_SetConfig+0x270>
 800b410:	2301      	movs	r3, #1
 800b412:	77fb      	strb	r3, [r7, #31]
 800b414:	e077      	b.n	800b506 <UART_SetConfig+0x34e>
 800b416:	2302      	movs	r3, #2
 800b418:	77fb      	strb	r3, [r7, #31]
 800b41a:	e074      	b.n	800b506 <UART_SetConfig+0x34e>
 800b41c:	2304      	movs	r3, #4
 800b41e:	77fb      	strb	r3, [r7, #31]
 800b420:	e071      	b.n	800b506 <UART_SetConfig+0x34e>
 800b422:	2308      	movs	r3, #8
 800b424:	77fb      	strb	r3, [r7, #31]
 800b426:	e06e      	b.n	800b506 <UART_SetConfig+0x34e>
 800b428:	2310      	movs	r3, #16
 800b42a:	77fb      	strb	r3, [r7, #31]
 800b42c:	bf00      	nop
 800b42e:	e06a      	b.n	800b506 <UART_SetConfig+0x34e>
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	4a25      	ldr	r2, [pc, #148]	; (800b4cc <UART_SetConfig+0x314>)
 800b436:	4293      	cmp	r3, r2
 800b438:	d124      	bne.n	800b484 <UART_SetConfig+0x2cc>
 800b43a:	4b1e      	ldr	r3, [pc, #120]	; (800b4b4 <UART_SetConfig+0x2fc>)
 800b43c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b440:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800b444:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b448:	d012      	beq.n	800b470 <UART_SetConfig+0x2b8>
 800b44a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b44e:	d802      	bhi.n	800b456 <UART_SetConfig+0x29e>
 800b450:	2b00      	cmp	r3, #0
 800b452:	d007      	beq.n	800b464 <UART_SetConfig+0x2ac>
 800b454:	e012      	b.n	800b47c <UART_SetConfig+0x2c4>
 800b456:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b45a:	d006      	beq.n	800b46a <UART_SetConfig+0x2b2>
 800b45c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b460:	d009      	beq.n	800b476 <UART_SetConfig+0x2be>
 800b462:	e00b      	b.n	800b47c <UART_SetConfig+0x2c4>
 800b464:	2300      	movs	r3, #0
 800b466:	77fb      	strb	r3, [r7, #31]
 800b468:	e04d      	b.n	800b506 <UART_SetConfig+0x34e>
 800b46a:	2302      	movs	r3, #2
 800b46c:	77fb      	strb	r3, [r7, #31]
 800b46e:	e04a      	b.n	800b506 <UART_SetConfig+0x34e>
 800b470:	2304      	movs	r3, #4
 800b472:	77fb      	strb	r3, [r7, #31]
 800b474:	e047      	b.n	800b506 <UART_SetConfig+0x34e>
 800b476:	2308      	movs	r3, #8
 800b478:	77fb      	strb	r3, [r7, #31]
 800b47a:	e044      	b.n	800b506 <UART_SetConfig+0x34e>
 800b47c:	2310      	movs	r3, #16
 800b47e:	77fb      	strb	r3, [r7, #31]
 800b480:	bf00      	nop
 800b482:	e040      	b.n	800b506 <UART_SetConfig+0x34e>
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	4a11      	ldr	r2, [pc, #68]	; (800b4d0 <UART_SetConfig+0x318>)
 800b48a:	4293      	cmp	r3, r2
 800b48c:	d139      	bne.n	800b502 <UART_SetConfig+0x34a>
 800b48e:	4b09      	ldr	r3, [pc, #36]	; (800b4b4 <UART_SetConfig+0x2fc>)
 800b490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b494:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b498:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b49c:	d027      	beq.n	800b4ee <UART_SetConfig+0x336>
 800b49e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b4a2:	d817      	bhi.n	800b4d4 <UART_SetConfig+0x31c>
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d01c      	beq.n	800b4e2 <UART_SetConfig+0x32a>
 800b4a8:	e027      	b.n	800b4fa <UART_SetConfig+0x342>
 800b4aa:	bf00      	nop
 800b4ac:	efff69f3 	.word	0xefff69f3
 800b4b0:	40011000 	.word	0x40011000
 800b4b4:	40023800 	.word	0x40023800
 800b4b8:	40004400 	.word	0x40004400
 800b4bc:	40004800 	.word	0x40004800
 800b4c0:	40004c00 	.word	0x40004c00
 800b4c4:	40005000 	.word	0x40005000
 800b4c8:	40011400 	.word	0x40011400
 800b4cc:	40007800 	.word	0x40007800
 800b4d0:	40007c00 	.word	0x40007c00
 800b4d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b4d8:	d006      	beq.n	800b4e8 <UART_SetConfig+0x330>
 800b4da:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b4de:	d009      	beq.n	800b4f4 <UART_SetConfig+0x33c>
 800b4e0:	e00b      	b.n	800b4fa <UART_SetConfig+0x342>
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	77fb      	strb	r3, [r7, #31]
 800b4e6:	e00e      	b.n	800b506 <UART_SetConfig+0x34e>
 800b4e8:	2302      	movs	r3, #2
 800b4ea:	77fb      	strb	r3, [r7, #31]
 800b4ec:	e00b      	b.n	800b506 <UART_SetConfig+0x34e>
 800b4ee:	2304      	movs	r3, #4
 800b4f0:	77fb      	strb	r3, [r7, #31]
 800b4f2:	e008      	b.n	800b506 <UART_SetConfig+0x34e>
 800b4f4:	2308      	movs	r3, #8
 800b4f6:	77fb      	strb	r3, [r7, #31]
 800b4f8:	e005      	b.n	800b506 <UART_SetConfig+0x34e>
 800b4fa:	2310      	movs	r3, #16
 800b4fc:	77fb      	strb	r3, [r7, #31]
 800b4fe:	bf00      	nop
 800b500:	e001      	b.n	800b506 <UART_SetConfig+0x34e>
 800b502:	2310      	movs	r3, #16
 800b504:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	69db      	ldr	r3, [r3, #28]
 800b50a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b50e:	d17f      	bne.n	800b610 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800b510:	7ffb      	ldrb	r3, [r7, #31]
 800b512:	2b08      	cmp	r3, #8
 800b514:	d85c      	bhi.n	800b5d0 <UART_SetConfig+0x418>
 800b516:	a201      	add	r2, pc, #4	; (adr r2, 800b51c <UART_SetConfig+0x364>)
 800b518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b51c:	0800b541 	.word	0x0800b541
 800b520:	0800b561 	.word	0x0800b561
 800b524:	0800b581 	.word	0x0800b581
 800b528:	0800b5d1 	.word	0x0800b5d1
 800b52c:	0800b599 	.word	0x0800b599
 800b530:	0800b5d1 	.word	0x0800b5d1
 800b534:	0800b5d1 	.word	0x0800b5d1
 800b538:	0800b5d1 	.word	0x0800b5d1
 800b53c:	0800b5b9 	.word	0x0800b5b9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b540:	f7fc fda6 	bl	8008090 <HAL_RCC_GetPCLK1Freq>
 800b544:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	005a      	lsls	r2, r3, #1
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	685b      	ldr	r3, [r3, #4]
 800b54e:	085b      	lsrs	r3, r3, #1
 800b550:	441a      	add	r2, r3
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	685b      	ldr	r3, [r3, #4]
 800b556:	fbb2 f3f3 	udiv	r3, r2, r3
 800b55a:	b29b      	uxth	r3, r3
 800b55c:	61bb      	str	r3, [r7, #24]
        break;
 800b55e:	e03a      	b.n	800b5d6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b560:	f7fc fdaa 	bl	80080b8 <HAL_RCC_GetPCLK2Freq>
 800b564:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	005a      	lsls	r2, r3, #1
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	685b      	ldr	r3, [r3, #4]
 800b56e:	085b      	lsrs	r3, r3, #1
 800b570:	441a      	add	r2, r3
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	685b      	ldr	r3, [r3, #4]
 800b576:	fbb2 f3f3 	udiv	r3, r2, r3
 800b57a:	b29b      	uxth	r3, r3
 800b57c:	61bb      	str	r3, [r7, #24]
        break;
 800b57e:	e02a      	b.n	800b5d6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	685b      	ldr	r3, [r3, #4]
 800b584:	085a      	lsrs	r2, r3, #1
 800b586:	4b5f      	ldr	r3, [pc, #380]	; (800b704 <UART_SetConfig+0x54c>)
 800b588:	4413      	add	r3, r2
 800b58a:	687a      	ldr	r2, [r7, #4]
 800b58c:	6852      	ldr	r2, [r2, #4]
 800b58e:	fbb3 f3f2 	udiv	r3, r3, r2
 800b592:	b29b      	uxth	r3, r3
 800b594:	61bb      	str	r3, [r7, #24]
        break;
 800b596:	e01e      	b.n	800b5d6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b598:	f7fc fcbc 	bl	8007f14 <HAL_RCC_GetSysClockFreq>
 800b59c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	005a      	lsls	r2, r3, #1
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	685b      	ldr	r3, [r3, #4]
 800b5a6:	085b      	lsrs	r3, r3, #1
 800b5a8:	441a      	add	r2, r3
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	685b      	ldr	r3, [r3, #4]
 800b5ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5b2:	b29b      	uxth	r3, r3
 800b5b4:	61bb      	str	r3, [r7, #24]
        break;
 800b5b6:	e00e      	b.n	800b5d6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	685b      	ldr	r3, [r3, #4]
 800b5bc:	085b      	lsrs	r3, r3, #1
 800b5be:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	685b      	ldr	r3, [r3, #4]
 800b5c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5ca:	b29b      	uxth	r3, r3
 800b5cc:	61bb      	str	r3, [r7, #24]
        break;
 800b5ce:	e002      	b.n	800b5d6 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800b5d0:	2301      	movs	r3, #1
 800b5d2:	75fb      	strb	r3, [r7, #23]
        break;
 800b5d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b5d6:	69bb      	ldr	r3, [r7, #24]
 800b5d8:	2b0f      	cmp	r3, #15
 800b5da:	d916      	bls.n	800b60a <UART_SetConfig+0x452>
 800b5dc:	69bb      	ldr	r3, [r7, #24]
 800b5de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b5e2:	d212      	bcs.n	800b60a <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b5e4:	69bb      	ldr	r3, [r7, #24]
 800b5e6:	b29b      	uxth	r3, r3
 800b5e8:	f023 030f 	bic.w	r3, r3, #15
 800b5ec:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b5ee:	69bb      	ldr	r3, [r7, #24]
 800b5f0:	085b      	lsrs	r3, r3, #1
 800b5f2:	b29b      	uxth	r3, r3
 800b5f4:	f003 0307 	and.w	r3, r3, #7
 800b5f8:	b29a      	uxth	r2, r3
 800b5fa:	897b      	ldrh	r3, [r7, #10]
 800b5fc:	4313      	orrs	r3, r2
 800b5fe:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	897a      	ldrh	r2, [r7, #10]
 800b606:	60da      	str	r2, [r3, #12]
 800b608:	e070      	b.n	800b6ec <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800b60a:	2301      	movs	r3, #1
 800b60c:	75fb      	strb	r3, [r7, #23]
 800b60e:	e06d      	b.n	800b6ec <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800b610:	7ffb      	ldrb	r3, [r7, #31]
 800b612:	2b08      	cmp	r3, #8
 800b614:	d859      	bhi.n	800b6ca <UART_SetConfig+0x512>
 800b616:	a201      	add	r2, pc, #4	; (adr r2, 800b61c <UART_SetConfig+0x464>)
 800b618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b61c:	0800b641 	.word	0x0800b641
 800b620:	0800b65f 	.word	0x0800b65f
 800b624:	0800b67d 	.word	0x0800b67d
 800b628:	0800b6cb 	.word	0x0800b6cb
 800b62c:	0800b695 	.word	0x0800b695
 800b630:	0800b6cb 	.word	0x0800b6cb
 800b634:	0800b6cb 	.word	0x0800b6cb
 800b638:	0800b6cb 	.word	0x0800b6cb
 800b63c:	0800b6b3 	.word	0x0800b6b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b640:	f7fc fd26 	bl	8008090 <HAL_RCC_GetPCLK1Freq>
 800b644:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	685b      	ldr	r3, [r3, #4]
 800b64a:	085a      	lsrs	r2, r3, #1
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	441a      	add	r2, r3
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	685b      	ldr	r3, [r3, #4]
 800b654:	fbb2 f3f3 	udiv	r3, r2, r3
 800b658:	b29b      	uxth	r3, r3
 800b65a:	61bb      	str	r3, [r7, #24]
        break;
 800b65c:	e038      	b.n	800b6d0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b65e:	f7fc fd2b 	bl	80080b8 <HAL_RCC_GetPCLK2Freq>
 800b662:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	685b      	ldr	r3, [r3, #4]
 800b668:	085a      	lsrs	r2, r3, #1
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	441a      	add	r2, r3
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	685b      	ldr	r3, [r3, #4]
 800b672:	fbb2 f3f3 	udiv	r3, r2, r3
 800b676:	b29b      	uxth	r3, r3
 800b678:	61bb      	str	r3, [r7, #24]
        break;
 800b67a:	e029      	b.n	800b6d0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	685b      	ldr	r3, [r3, #4]
 800b680:	085a      	lsrs	r2, r3, #1
 800b682:	4b21      	ldr	r3, [pc, #132]	; (800b708 <UART_SetConfig+0x550>)
 800b684:	4413      	add	r3, r2
 800b686:	687a      	ldr	r2, [r7, #4]
 800b688:	6852      	ldr	r2, [r2, #4]
 800b68a:	fbb3 f3f2 	udiv	r3, r3, r2
 800b68e:	b29b      	uxth	r3, r3
 800b690:	61bb      	str	r3, [r7, #24]
        break;
 800b692:	e01d      	b.n	800b6d0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b694:	f7fc fc3e 	bl	8007f14 <HAL_RCC_GetSysClockFreq>
 800b698:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	685b      	ldr	r3, [r3, #4]
 800b69e:	085a      	lsrs	r2, r3, #1
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	441a      	add	r2, r3
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	685b      	ldr	r3, [r3, #4]
 800b6a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6ac:	b29b      	uxth	r3, r3
 800b6ae:	61bb      	str	r3, [r7, #24]
        break;
 800b6b0:	e00e      	b.n	800b6d0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	685b      	ldr	r3, [r3, #4]
 800b6b6:	085b      	lsrs	r3, r3, #1
 800b6b8:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	685b      	ldr	r3, [r3, #4]
 800b6c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6c4:	b29b      	uxth	r3, r3
 800b6c6:	61bb      	str	r3, [r7, #24]
        break;
 800b6c8:	e002      	b.n	800b6d0 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800b6ca:	2301      	movs	r3, #1
 800b6cc:	75fb      	strb	r3, [r7, #23]
        break;
 800b6ce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b6d0:	69bb      	ldr	r3, [r7, #24]
 800b6d2:	2b0f      	cmp	r3, #15
 800b6d4:	d908      	bls.n	800b6e8 <UART_SetConfig+0x530>
 800b6d6:	69bb      	ldr	r3, [r7, #24]
 800b6d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b6dc:	d204      	bcs.n	800b6e8 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	69ba      	ldr	r2, [r7, #24]
 800b6e4:	60da      	str	r2, [r3, #12]
 800b6e6:	e001      	b.n	800b6ec <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800b6e8:	2301      	movs	r3, #1
 800b6ea:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800b6f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	3720      	adds	r7, #32
 800b6fe:	46bd      	mov	sp, r7
 800b700:	bd80      	pop	{r7, pc}
 800b702:	bf00      	nop
 800b704:	01e84800 	.word	0x01e84800
 800b708:	00f42400 	.word	0x00f42400

0800b70c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b70c:	b480      	push	{r7}
 800b70e:	b083      	sub	sp, #12
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b718:	f003 0301 	and.w	r3, r3, #1
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d00a      	beq.n	800b736 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	685b      	ldr	r3, [r3, #4]
 800b726:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	430a      	orrs	r2, r1
 800b734:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b73a:	f003 0302 	and.w	r3, r3, #2
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d00a      	beq.n	800b758 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	685b      	ldr	r3, [r3, #4]
 800b748:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	430a      	orrs	r2, r1
 800b756:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b75c:	f003 0304 	and.w	r3, r3, #4
 800b760:	2b00      	cmp	r3, #0
 800b762:	d00a      	beq.n	800b77a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	685b      	ldr	r3, [r3, #4]
 800b76a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	430a      	orrs	r2, r1
 800b778:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b77e:	f003 0308 	and.w	r3, r3, #8
 800b782:	2b00      	cmp	r3, #0
 800b784:	d00a      	beq.n	800b79c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	685b      	ldr	r3, [r3, #4]
 800b78c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	430a      	orrs	r2, r1
 800b79a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7a0:	f003 0310 	and.w	r3, r3, #16
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d00a      	beq.n	800b7be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	689b      	ldr	r3, [r3, #8]
 800b7ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	430a      	orrs	r2, r1
 800b7bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7c2:	f003 0320 	and.w	r3, r3, #32
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d00a      	beq.n	800b7e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	689b      	ldr	r3, [r3, #8]
 800b7d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	430a      	orrs	r2, r1
 800b7de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d01a      	beq.n	800b822 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	685b      	ldr	r3, [r3, #4]
 800b7f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	430a      	orrs	r2, r1
 800b800:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b806:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b80a:	d10a      	bne.n	800b822 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	685b      	ldr	r3, [r3, #4]
 800b812:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	430a      	orrs	r2, r1
 800b820:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d00a      	beq.n	800b844 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	685b      	ldr	r3, [r3, #4]
 800b834:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	430a      	orrs	r2, r1
 800b842:	605a      	str	r2, [r3, #4]
  }
}
 800b844:	bf00      	nop
 800b846:	370c      	adds	r7, #12
 800b848:	46bd      	mov	sp, r7
 800b84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84e:	4770      	bx	lr

0800b850 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b086      	sub	sp, #24
 800b854:	af02      	add	r7, sp, #8
 800b856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2200      	movs	r2, #0
 800b85c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800b85e:	f7f8 fbb7 	bl	8003fd0 <HAL_GetTick>
 800b862:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	f003 0308 	and.w	r3, r3, #8
 800b86e:	2b08      	cmp	r3, #8
 800b870:	d10e      	bne.n	800b890 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b872:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b876:	9300      	str	r3, [sp, #0]
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	2200      	movs	r2, #0
 800b87c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b880:	6878      	ldr	r0, [r7, #4]
 800b882:	f000 f82a 	bl	800b8da <UART_WaitOnFlagUntilTimeout>
 800b886:	4603      	mov	r3, r0
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d001      	beq.n	800b890 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b88c:	2303      	movs	r3, #3
 800b88e:	e020      	b.n	800b8d2 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	f003 0304 	and.w	r3, r3, #4
 800b89a:	2b04      	cmp	r3, #4
 800b89c:	d10e      	bne.n	800b8bc <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b89e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b8a2:	9300      	str	r3, [sp, #0]
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b8ac:	6878      	ldr	r0, [r7, #4]
 800b8ae:	f000 f814 	bl	800b8da <UART_WaitOnFlagUntilTimeout>
 800b8b2:	4603      	mov	r3, r0
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d001      	beq.n	800b8bc <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b8b8:	2303      	movs	r3, #3
 800b8ba:	e00a      	b.n	800b8d2 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	2220      	movs	r2, #32
 800b8c0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	2220      	movs	r2, #32
 800b8c6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800b8d0:	2300      	movs	r3, #0
}
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	3710      	adds	r7, #16
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	bd80      	pop	{r7, pc}

0800b8da <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b8da:	b580      	push	{r7, lr}
 800b8dc:	b084      	sub	sp, #16
 800b8de:	af00      	add	r7, sp, #0
 800b8e0:	60f8      	str	r0, [r7, #12]
 800b8e2:	60b9      	str	r1, [r7, #8]
 800b8e4:	603b      	str	r3, [r7, #0]
 800b8e6:	4613      	mov	r3, r2
 800b8e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b8ea:	e05d      	b.n	800b9a8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b8ec:	69bb      	ldr	r3, [r7, #24]
 800b8ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8f2:	d059      	beq.n	800b9a8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b8f4:	f7f8 fb6c 	bl	8003fd0 <HAL_GetTick>
 800b8f8:	4602      	mov	r2, r0
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	1ad3      	subs	r3, r2, r3
 800b8fe:	69ba      	ldr	r2, [r7, #24]
 800b900:	429a      	cmp	r2, r3
 800b902:	d302      	bcc.n	800b90a <UART_WaitOnFlagUntilTimeout+0x30>
 800b904:	69bb      	ldr	r3, [r7, #24]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d11b      	bne.n	800b942 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	681a      	ldr	r2, [r3, #0]
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b918:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	689a      	ldr	r2, [r3, #8]
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	f022 0201 	bic.w	r2, r2, #1
 800b928:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	2220      	movs	r2, #32
 800b92e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	2220      	movs	r2, #32
 800b934:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	2200      	movs	r2, #0
 800b93a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800b93e:	2303      	movs	r3, #3
 800b940:	e042      	b.n	800b9c8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	f003 0304 	and.w	r3, r3, #4
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d02b      	beq.n	800b9a8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	69db      	ldr	r3, [r3, #28]
 800b956:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b95a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b95e:	d123      	bne.n	800b9a8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b968:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	681a      	ldr	r2, [r3, #0]
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b978:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	689a      	ldr	r2, [r3, #8]
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	f022 0201 	bic.w	r2, r2, #1
 800b988:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	2220      	movs	r2, #32
 800b98e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	2220      	movs	r2, #32
 800b994:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	2220      	movs	r2, #32
 800b99a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	2200      	movs	r2, #0
 800b9a0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800b9a4:	2303      	movs	r3, #3
 800b9a6:	e00f      	b.n	800b9c8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	69da      	ldr	r2, [r3, #28]
 800b9ae:	68bb      	ldr	r3, [r7, #8]
 800b9b0:	4013      	ands	r3, r2
 800b9b2:	68ba      	ldr	r2, [r7, #8]
 800b9b4:	429a      	cmp	r2, r3
 800b9b6:	bf0c      	ite	eq
 800b9b8:	2301      	moveq	r3, #1
 800b9ba:	2300      	movne	r3, #0
 800b9bc:	b2db      	uxtb	r3, r3
 800b9be:	461a      	mov	r2, r3
 800b9c0:	79fb      	ldrb	r3, [r7, #7]
 800b9c2:	429a      	cmp	r2, r3
 800b9c4:	d092      	beq.n	800b8ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b9c6:	2300      	movs	r3, #0
}
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	3710      	adds	r7, #16
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	bd80      	pop	{r7, pc}

0800b9d0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b9d0:	b480      	push	{r7}
 800b9d2:	b083      	sub	sp, #12
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	681a      	ldr	r2, [r3, #0]
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800b9e6:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2220      	movs	r2, #32
 800b9ec:	675a      	str	r2, [r3, #116]	; 0x74
}
 800b9ee:	bf00      	nop
 800b9f0:	370c      	adds	r7, #12
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f8:	4770      	bx	lr

0800b9fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b9fa:	b480      	push	{r7}
 800b9fc:	b083      	sub	sp, #12
 800b9fe:	af00      	add	r7, sp, #0
 800ba00:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	681a      	ldr	r2, [r3, #0]
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ba10:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	689a      	ldr	r2, [r3, #8]
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	f022 0201 	bic.w	r2, r2, #1
 800ba20:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	2220      	movs	r2, #32
 800ba26:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	661a      	str	r2, [r3, #96]	; 0x60
}
 800ba2e:	bf00      	nop
 800ba30:	370c      	adds	r7, #12
 800ba32:	46bd      	mov	sp, r7
 800ba34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba38:	4770      	bx	lr

0800ba3a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ba3a:	b580      	push	{r7, lr}
 800ba3c:	b084      	sub	sp, #16
 800ba3e:	af00      	add	r7, sp, #0
 800ba40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba46:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	69db      	ldr	r3, [r3, #28]
 800ba4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba50:	d01e      	beq.n	800ba90 <UART_DMAReceiveCplt+0x56>
  {
    huart->RxXferCount = 0U;
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	2200      	movs	r2, #0
 800ba56:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	681a      	ldr	r2, [r3, #0]
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ba68:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	689a      	ldr	r2, [r3, #8]
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	f022 0201 	bic.w	r2, r2, #1
 800ba78:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	689a      	ldr	r2, [r3, #8]
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ba88:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	2220      	movs	r2, #32
 800ba8e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800ba90:	68f8      	ldr	r0, [r7, #12]
 800ba92:	f7ff fb69 	bl	800b168 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ba96:	bf00      	nop
 800ba98:	3710      	adds	r7, #16
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	bd80      	pop	{r7, pc}

0800ba9e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ba9e:	b580      	push	{r7, lr}
 800baa0:	b084      	sub	sp, #16
 800baa2:	af00      	add	r7, sp, #0
 800baa4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800baaa:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800baac:	68f8      	ldr	r0, [r7, #12]
 800baae:	f7ff fb65 	bl	800b17c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bab2:	bf00      	nop
 800bab4:	3710      	adds	r7, #16
 800bab6:	46bd      	mov	sp, r7
 800bab8:	bd80      	pop	{r7, pc}

0800baba <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800baba:	b580      	push	{r7, lr}
 800babc:	b086      	sub	sp, #24
 800babe:	af00      	add	r7, sp, #0
 800bac0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bac6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800bac8:	697b      	ldr	r3, [r7, #20]
 800baca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bacc:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800bace:	697b      	ldr	r3, [r7, #20]
 800bad0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bad2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bad4:	697b      	ldr	r3, [r7, #20]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	689b      	ldr	r3, [r3, #8]
 800bada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bade:	2b80      	cmp	r3, #128	; 0x80
 800bae0:	d109      	bne.n	800baf6 <UART_DMAError+0x3c>
 800bae2:	693b      	ldr	r3, [r7, #16]
 800bae4:	2b21      	cmp	r3, #33	; 0x21
 800bae6:	d106      	bne.n	800baf6 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800bae8:	697b      	ldr	r3, [r7, #20]
 800baea:	2200      	movs	r2, #0
 800baec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800baf0:	6978      	ldr	r0, [r7, #20]
 800baf2:	f7ff ff6d 	bl	800b9d0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800baf6:	697b      	ldr	r3, [r7, #20]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	689b      	ldr	r3, [r3, #8]
 800bafc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb00:	2b40      	cmp	r3, #64	; 0x40
 800bb02:	d109      	bne.n	800bb18 <UART_DMAError+0x5e>
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	2b22      	cmp	r3, #34	; 0x22
 800bb08:	d106      	bne.n	800bb18 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800bb0a:	697b      	ldr	r3, [r7, #20]
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800bb12:	6978      	ldr	r0, [r7, #20]
 800bb14:	f7ff ff71 	bl	800b9fa <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bb18:	697b      	ldr	r3, [r7, #20]
 800bb1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bb1c:	f043 0210 	orr.w	r2, r3, #16
 800bb20:	697b      	ldr	r3, [r7, #20]
 800bb22:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bb24:	6978      	ldr	r0, [r7, #20]
 800bb26:	f7ff fb33 	bl	800b190 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bb2a:	bf00      	nop
 800bb2c:	3718      	adds	r7, #24
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bd80      	pop	{r7, pc}

0800bb32 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bb32:	b580      	push	{r7, lr}
 800bb34:	b084      	sub	sp, #16
 800bb36:	af00      	add	r7, sp, #0
 800bb38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb3e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	2200      	movs	r2, #0
 800bb44:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bb50:	68f8      	ldr	r0, [r7, #12]
 800bb52:	f7ff fb1d 	bl	800b190 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bb56:	bf00      	nop
 800bb58:	3710      	adds	r7, #16
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	bd80      	pop	{r7, pc}

0800bb5e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bb5e:	b580      	push	{r7, lr}
 800bb60:	b082      	sub	sp, #8
 800bb62:	af00      	add	r7, sp, #0
 800bb64:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	681a      	ldr	r2, [r3, #0]
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bb74:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	2220      	movs	r2, #32
 800bb7a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	2200      	movs	r2, #0
 800bb80:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bb82:	6878      	ldr	r0, [r7, #4]
 800bb84:	f7ff fae6 	bl	800b154 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bb88:	bf00      	nop
 800bb8a:	3708      	adds	r7, #8
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	bd80      	pop	{r7, pc}

0800bb90 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800bb90:	b084      	sub	sp, #16
 800bb92:	b480      	push	{r7}
 800bb94:	b085      	sub	sp, #20
 800bb96:	af00      	add	r7, sp, #0
 800bb98:	6078      	str	r0, [r7, #4]
 800bb9a:	f107 001c 	add.w	r0, r7, #28
 800bb9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800bba2:	2300      	movs	r3, #0
 800bba4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800bba6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800bba8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800bbaa:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800bbac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800bbae:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800bbb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800bbb2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800bbb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800bbb6:	431a      	orrs	r2, r3
             Init.ClockDiv
 800bbb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800bbba:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800bbbc:	68fa      	ldr	r2, [r7, #12]
 800bbbe:	4313      	orrs	r3, r2
 800bbc0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	685a      	ldr	r2, [r3, #4]
 800bbc6:	4b07      	ldr	r3, [pc, #28]	; (800bbe4 <SDMMC_Init+0x54>)
 800bbc8:	4013      	ands	r3, r2
 800bbca:	68fa      	ldr	r2, [r7, #12]
 800bbcc:	431a      	orrs	r2, r3
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800bbd2:	2300      	movs	r3, #0
}
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	3714      	adds	r7, #20
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbde:	b004      	add	sp, #16
 800bbe0:	4770      	bx	lr
 800bbe2:	bf00      	nop
 800bbe4:	ffff8100 	.word	0xffff8100

0800bbe8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b082      	sub	sp, #8
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	2203      	movs	r2, #3
 800bbf4:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800bbf6:	2002      	movs	r0, #2
 800bbf8:	f7f8 f9f6 	bl	8003fe8 <HAL_Delay>
  
  return HAL_OK;
 800bbfc:	2300      	movs	r3, #0
}
 800bbfe:	4618      	mov	r0, r3
 800bc00:	3708      	adds	r7, #8
 800bc02:	46bd      	mov	sp, r7
 800bc04:	bd80      	pop	{r7, pc}

0800bc06 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800bc06:	b480      	push	{r7}
 800bc08:	b083      	sub	sp, #12
 800bc0a:	af00      	add	r7, sp, #0
 800bc0c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	f003 0303 	and.w	r3, r3, #3
}
 800bc16:	4618      	mov	r0, r3
 800bc18:	370c      	adds	r7, #12
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc20:	4770      	bx	lr
	...

0800bc24 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800bc24:	b480      	push	{r7}
 800bc26:	b085      	sub	sp, #20
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
 800bc2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800bc2e:	2300      	movs	r3, #0
 800bc30:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	681a      	ldr	r2, [r3, #0]
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bc3a:	683b      	ldr	r3, [r7, #0]
 800bc3c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bc42:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800bc44:	683b      	ldr	r3, [r7, #0]
 800bc46:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800bc48:	431a      	orrs	r2, r3
                       Command->CPSM);
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800bc4e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bc50:	68fa      	ldr	r2, [r7, #12]
 800bc52:	4313      	orrs	r3, r2
 800bc54:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	68da      	ldr	r2, [r3, #12]
 800bc5a:	4b06      	ldr	r3, [pc, #24]	; (800bc74 <SDMMC_SendCommand+0x50>)
 800bc5c:	4013      	ands	r3, r2
 800bc5e:	68fa      	ldr	r2, [r7, #12]
 800bc60:	431a      	orrs	r2, r3
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800bc66:	2300      	movs	r3, #0
}
 800bc68:	4618      	mov	r0, r3
 800bc6a:	3714      	adds	r7, #20
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc72:	4770      	bx	lr
 800bc74:	fffff000 	.word	0xfffff000

0800bc78 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800bc78:	b480      	push	{r7}
 800bc7a:	b083      	sub	sp, #12
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	691b      	ldr	r3, [r3, #16]
 800bc84:	b2db      	uxtb	r3, r3
}
 800bc86:	4618      	mov	r0, r3
 800bc88:	370c      	adds	r7, #12
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc90:	4770      	bx	lr

0800bc92 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800bc92:	b480      	push	{r7}
 800bc94:	b085      	sub	sp, #20
 800bc96:	af00      	add	r7, sp, #0
 800bc98:	6078      	str	r0, [r7, #4]
 800bc9a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	3314      	adds	r3, #20
 800bca0:	461a      	mov	r2, r3
 800bca2:	683b      	ldr	r3, [r7, #0]
 800bca4:	4413      	add	r3, r2
 800bca6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	681b      	ldr	r3, [r3, #0]
}  
 800bcac:	4618      	mov	r0, r3
 800bcae:	3714      	adds	r7, #20
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb6:	4770      	bx	lr

0800bcb8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b08a      	sub	sp, #40	; 0x28
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	60f8      	str	r0, [r7, #12]
 800bcc0:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800bcc4:	683b      	ldr	r3, [r7, #0]
 800bcc6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800bcc8:	2307      	movs	r3, #7
 800bcca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bccc:	2340      	movs	r3, #64	; 0x40
 800bcce:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bcd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bcd8:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bcda:	f107 0310 	add.w	r3, r7, #16
 800bcde:	4619      	mov	r1, r3
 800bce0:	68f8      	ldr	r0, [r7, #12]
 800bce2:	f7ff ff9f 	bl	800bc24 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800bce6:	f241 3288 	movw	r2, #5000	; 0x1388
 800bcea:	2107      	movs	r1, #7
 800bcec:	68f8      	ldr	r0, [r7, #12]
 800bcee:	f000 f8c9 	bl	800be84 <SDMMC_GetCmdResp1>
 800bcf2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800bcf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	3728      	adds	r7, #40	; 0x28
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	bd80      	pop	{r7, pc}

0800bcfe <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800bcfe:	b580      	push	{r7, lr}
 800bd00:	b088      	sub	sp, #32
 800bd02:	af00      	add	r7, sp, #0
 800bd04:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800bd06:	2300      	movs	r3, #0
 800bd08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800bd0e:	2300      	movs	r3, #0
 800bd10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bd12:	2300      	movs	r3, #0
 800bd14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bd16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd1a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bd1c:	f107 0308 	add.w	r3, r7, #8
 800bd20:	4619      	mov	r1, r3
 800bd22:	6878      	ldr	r0, [r7, #4]
 800bd24:	f7ff ff7e 	bl	800bc24 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800bd28:	6878      	ldr	r0, [r7, #4]
 800bd2a:	f000 f883 	bl	800be34 <SDMMC_GetCmdError>
 800bd2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bd30:	69fb      	ldr	r3, [r7, #28]
}
 800bd32:	4618      	mov	r0, r3
 800bd34:	3720      	adds	r7, #32
 800bd36:	46bd      	mov	sp, r7
 800bd38:	bd80      	pop	{r7, pc}

0800bd3a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800bd3a:	b580      	push	{r7, lr}
 800bd3c:	b088      	sub	sp, #32
 800bd3e:	af00      	add	r7, sp, #0
 800bd40:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800bd42:	2300      	movs	r3, #0
 800bd44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800bd46:	2302      	movs	r3, #2
 800bd48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800bd4a:	23c0      	movs	r3, #192	; 0xc0
 800bd4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bd4e:	2300      	movs	r3, #0
 800bd50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bd52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd56:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bd58:	f107 0308 	add.w	r3, r7, #8
 800bd5c:	4619      	mov	r1, r3
 800bd5e:	6878      	ldr	r0, [r7, #4]
 800bd60:	f7ff ff60 	bl	800bc24 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800bd64:	6878      	ldr	r0, [r7, #4]
 800bd66:	f000 f979 	bl	800c05c <SDMMC_GetCmdResp2>
 800bd6a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bd6c:	69fb      	ldr	r3, [r7, #28]
}
 800bd6e:	4618      	mov	r0, r3
 800bd70:	3720      	adds	r7, #32
 800bd72:	46bd      	mov	sp, r7
 800bd74:	bd80      	pop	{r7, pc}

0800bd76 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bd76:	b580      	push	{r7, lr}
 800bd78:	b088      	sub	sp, #32
 800bd7a:	af00      	add	r7, sp, #0
 800bd7c:	6078      	str	r0, [r7, #4]
 800bd7e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800bd84:	2309      	movs	r3, #9
 800bd86:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800bd88:	23c0      	movs	r3, #192	; 0xc0
 800bd8a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bd90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd94:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bd96:	f107 0308 	add.w	r3, r7, #8
 800bd9a:	4619      	mov	r1, r3
 800bd9c:	6878      	ldr	r0, [r7, #4]
 800bd9e:	f7ff ff41 	bl	800bc24 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800bda2:	6878      	ldr	r0, [r7, #4]
 800bda4:	f000 f95a 	bl	800c05c <SDMMC_GetCmdResp2>
 800bda8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bdaa:	69fb      	ldr	r3, [r7, #28]
}
 800bdac:	4618      	mov	r0, r3
 800bdae:	3720      	adds	r7, #32
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	bd80      	pop	{r7, pc}

0800bdb4 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b088      	sub	sp, #32
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
 800bdbc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800bdc2:	2303      	movs	r3, #3
 800bdc4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bdc6:	2340      	movs	r3, #64	; 0x40
 800bdc8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bdca:	2300      	movs	r3, #0
 800bdcc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bdce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bdd2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bdd4:	f107 0308 	add.w	r3, r7, #8
 800bdd8:	4619      	mov	r1, r3
 800bdda:	6878      	ldr	r0, [r7, #4]
 800bddc:	f7ff ff22 	bl	800bc24 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800bde0:	683a      	ldr	r2, [r7, #0]
 800bde2:	2103      	movs	r1, #3
 800bde4:	6878      	ldr	r0, [r7, #4]
 800bde6:	f000 f9b9 	bl	800c15c <SDMMC_GetCmdResp6>
 800bdea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bdec:	69fb      	ldr	r3, [r7, #28]
}
 800bdee:	4618      	mov	r0, r3
 800bdf0:	3720      	adds	r7, #32
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	bd80      	pop	{r7, pc}

0800bdf6 <SDMMC_CmdOpCondition>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @parame Argument: Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdOpCondition(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bdf6:	b580      	push	{r7, lr}
 800bdf8:	b088      	sub	sp, #32
 800bdfa:	af00      	add	r7, sp, #0
 800bdfc:	6078      	str	r0, [r7, #4]
 800bdfe:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800be00:	683b      	ldr	r3, [r7, #0]
 800be02:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_OP_COND;
 800be04:	2301      	movs	r3, #1
 800be06:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800be08:	2340      	movs	r3, #64	; 0x40
 800be0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800be0c:	2300      	movs	r3, #0
 800be0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800be10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be14:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800be16:	f107 0308 	add.w	r3, r7, #8
 800be1a:	4619      	mov	r1, r3
 800be1c:	6878      	ldr	r0, [r7, #4]
 800be1e:	f7ff ff01 	bl	800bc24 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800be22:	6878      	ldr	r0, [r7, #4]
 800be24:	f000 f960 	bl	800c0e8 <SDMMC_GetCmdResp3>
 800be28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be2a:	69fb      	ldr	r3, [r7, #28]
}
 800be2c:	4618      	mov	r0, r3
 800be2e:	3720      	adds	r7, #32
 800be30:	46bd      	mov	sp, r7
 800be32:	bd80      	pop	{r7, pc}

0800be34 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800be34:	b490      	push	{r4, r7}
 800be36:	b082      	sub	sp, #8
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800be3c:	4b0f      	ldr	r3, [pc, #60]	; (800be7c <SDMMC_GetCmdError+0x48>)
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	4a0f      	ldr	r2, [pc, #60]	; (800be80 <SDMMC_GetCmdError+0x4c>)
 800be42:	fba2 2303 	umull	r2, r3, r2, r3
 800be46:	0a5b      	lsrs	r3, r3, #9
 800be48:	f241 3288 	movw	r2, #5000	; 0x1388
 800be4c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800be50:	4623      	mov	r3, r4
 800be52:	1e5c      	subs	r4, r3, #1
 800be54:	2b00      	cmp	r3, #0
 800be56:	d102      	bne.n	800be5e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800be58:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800be5c:	e009      	b.n	800be72 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be66:	2b00      	cmp	r3, #0
 800be68:	d0f2      	beq.n	800be50 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	22c5      	movs	r2, #197	; 0xc5
 800be6e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800be70:	2300      	movs	r3, #0
}
 800be72:	4618      	mov	r0, r3
 800be74:	3708      	adds	r7, #8
 800be76:	46bd      	mov	sp, r7
 800be78:	bc90      	pop	{r4, r7}
 800be7a:	4770      	bx	lr
 800be7c:	20000020 	.word	0x20000020
 800be80:	10624dd3 	.word	0x10624dd3

0800be84 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800be84:	b590      	push	{r4, r7, lr}
 800be86:	b087      	sub	sp, #28
 800be88:	af00      	add	r7, sp, #0
 800be8a:	60f8      	str	r0, [r7, #12]
 800be8c:	460b      	mov	r3, r1
 800be8e:	607a      	str	r2, [r7, #4]
 800be90:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800be92:	4b6f      	ldr	r3, [pc, #444]	; (800c050 <SDMMC_GetCmdResp1+0x1cc>)
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	4a6f      	ldr	r2, [pc, #444]	; (800c054 <SDMMC_GetCmdResp1+0x1d0>)
 800be98:	fba2 2303 	umull	r2, r3, r2, r3
 800be9c:	0a5b      	lsrs	r3, r3, #9
 800be9e:	687a      	ldr	r2, [r7, #4]
 800bea0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800bea4:	4623      	mov	r3, r4
 800bea6:	1e5c      	subs	r4, r3, #1
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d102      	bne.n	800beb2 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800beac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800beb0:	e0c9      	b.n	800c046 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800beb6:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800beb8:	697b      	ldr	r3, [r7, #20]
 800beba:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d0f0      	beq.n	800bea4 <SDMMC_GetCmdResp1+0x20>
 800bec2:	697b      	ldr	r3, [r7, #20]
 800bec4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d1eb      	bne.n	800bea4 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bed0:	f003 0304 	and.w	r3, r3, #4
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d004      	beq.n	800bee2 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	2204      	movs	r2, #4
 800bedc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bede:	2304      	movs	r3, #4
 800bee0:	e0b1      	b.n	800c046 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bee6:	f003 0301 	and.w	r3, r3, #1
 800beea:	2b00      	cmp	r3, #0
 800beec:	d004      	beq.n	800bef8 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	2201      	movs	r2, #1
 800bef2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bef4:	2301      	movs	r3, #1
 800bef6:	e0a6      	b.n	800c046 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	22c5      	movs	r2, #197	; 0xc5
 800befc:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800befe:	68f8      	ldr	r0, [r7, #12]
 800bf00:	f7ff feba 	bl	800bc78 <SDMMC_GetCommandResponse>
 800bf04:	4603      	mov	r3, r0
 800bf06:	461a      	mov	r2, r3
 800bf08:	7afb      	ldrb	r3, [r7, #11]
 800bf0a:	4293      	cmp	r3, r2
 800bf0c:	d001      	beq.n	800bf12 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bf0e:	2301      	movs	r3, #1
 800bf10:	e099      	b.n	800c046 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800bf12:	2100      	movs	r1, #0
 800bf14:	68f8      	ldr	r0, [r7, #12]
 800bf16:	f7ff febc 	bl	800bc92 <SDMMC_GetResponse>
 800bf1a:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800bf1c:	693a      	ldr	r2, [r7, #16]
 800bf1e:	4b4e      	ldr	r3, [pc, #312]	; (800c058 <SDMMC_GetCmdResp1+0x1d4>)
 800bf20:	4013      	ands	r3, r2
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d101      	bne.n	800bf2a <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800bf26:	2300      	movs	r3, #0
 800bf28:	e08d      	b.n	800c046 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800bf2a:	693b      	ldr	r3, [r7, #16]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	da02      	bge.n	800bf36 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800bf30:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bf34:	e087      	b.n	800c046 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800bf36:	693b      	ldr	r3, [r7, #16]
 800bf38:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d001      	beq.n	800bf44 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800bf40:	2340      	movs	r3, #64	; 0x40
 800bf42:	e080      	b.n	800c046 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800bf44:	693b      	ldr	r3, [r7, #16]
 800bf46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d001      	beq.n	800bf52 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800bf4e:	2380      	movs	r3, #128	; 0x80
 800bf50:	e079      	b.n	800c046 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800bf52:	693b      	ldr	r3, [r7, #16]
 800bf54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d002      	beq.n	800bf62 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800bf5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bf60:	e071      	b.n	800c046 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800bf62:	693b      	ldr	r3, [r7, #16]
 800bf64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d002      	beq.n	800bf72 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800bf6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bf70:	e069      	b.n	800c046 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800bf72:	693b      	ldr	r3, [r7, #16]
 800bf74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d002      	beq.n	800bf82 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800bf7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf80:	e061      	b.n	800c046 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800bf82:	693b      	ldr	r3, [r7, #16]
 800bf84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d002      	beq.n	800bf92 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800bf8c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bf90:	e059      	b.n	800c046 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800bf92:	693b      	ldr	r3, [r7, #16]
 800bf94:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d002      	beq.n	800bfa2 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bf9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bfa0:	e051      	b.n	800c046 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800bfa2:	693b      	ldr	r3, [r7, #16]
 800bfa4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d002      	beq.n	800bfb2 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bfac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bfb0:	e049      	b.n	800c046 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800bfb2:	693b      	ldr	r3, [r7, #16]
 800bfb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d002      	beq.n	800bfc2 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800bfbc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bfc0:	e041      	b.n	800c046 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800bfc2:	693b      	ldr	r3, [r7, #16]
 800bfc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d002      	beq.n	800bfd2 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800bfcc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bfd0:	e039      	b.n	800c046 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800bfd2:	693b      	ldr	r3, [r7, #16]
 800bfd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d002      	beq.n	800bfe2 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800bfdc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800bfe0:	e031      	b.n	800c046 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800bfe2:	693b      	ldr	r3, [r7, #16]
 800bfe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d002      	beq.n	800bff2 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800bfec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800bff0:	e029      	b.n	800c046 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800bff2:	693b      	ldr	r3, [r7, #16]
 800bff4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d002      	beq.n	800c002 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800bffc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c000:	e021      	b.n	800c046 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c002:	693b      	ldr	r3, [r7, #16]
 800c004:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d002      	beq.n	800c012 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c00c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c010:	e019      	b.n	800c046 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c012:	693b      	ldr	r3, [r7, #16]
 800c014:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d002      	beq.n	800c022 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c01c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c020:	e011      	b.n	800c046 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c022:	693b      	ldr	r3, [r7, #16]
 800c024:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d002      	beq.n	800c032 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c02c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c030:	e009      	b.n	800c046 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c032:	693b      	ldr	r3, [r7, #16]
 800c034:	f003 0308 	and.w	r3, r3, #8
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d002      	beq.n	800c042 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c03c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c040:	e001      	b.n	800c046 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c042:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c046:	4618      	mov	r0, r3
 800c048:	371c      	adds	r7, #28
 800c04a:	46bd      	mov	sp, r7
 800c04c:	bd90      	pop	{r4, r7, pc}
 800c04e:	bf00      	nop
 800c050:	20000020 	.word	0x20000020
 800c054:	10624dd3 	.word	0x10624dd3
 800c058:	fdffe008 	.word	0xfdffe008

0800c05c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800c05c:	b490      	push	{r4, r7}
 800c05e:	b084      	sub	sp, #16
 800c060:	af00      	add	r7, sp, #0
 800c062:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c064:	4b1e      	ldr	r3, [pc, #120]	; (800c0e0 <SDMMC_GetCmdResp2+0x84>)
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	4a1e      	ldr	r2, [pc, #120]	; (800c0e4 <SDMMC_GetCmdResp2+0x88>)
 800c06a:	fba2 2303 	umull	r2, r3, r2, r3
 800c06e:	0a5b      	lsrs	r3, r3, #9
 800c070:	f241 3288 	movw	r2, #5000	; 0x1388
 800c074:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c078:	4623      	mov	r3, r4
 800c07a:	1e5c      	subs	r4, r3, #1
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d102      	bne.n	800c086 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c080:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c084:	e026      	b.n	800c0d4 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c08a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c092:	2b00      	cmp	r3, #0
 800c094:	d0f0      	beq.n	800c078 <SDMMC_GetCmdResp2+0x1c>
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d1eb      	bne.n	800c078 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0a4:	f003 0304 	and.w	r3, r3, #4
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d004      	beq.n	800c0b6 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	2204      	movs	r2, #4
 800c0b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c0b2:	2304      	movs	r3, #4
 800c0b4:	e00e      	b.n	800c0d4 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0ba:	f003 0301 	and.w	r3, r3, #1
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d004      	beq.n	800c0cc <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	2201      	movs	r2, #1
 800c0c6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c0c8:	2301      	movs	r3, #1
 800c0ca:	e003      	b.n	800c0d4 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	22c5      	movs	r2, #197	; 0xc5
 800c0d0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c0d2:	2300      	movs	r3, #0
}
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	3710      	adds	r7, #16
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	bc90      	pop	{r4, r7}
 800c0dc:	4770      	bx	lr
 800c0de:	bf00      	nop
 800c0e0:	20000020 	.word	0x20000020
 800c0e4:	10624dd3 	.word	0x10624dd3

0800c0e8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800c0e8:	b490      	push	{r4, r7}
 800c0ea:	b084      	sub	sp, #16
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c0f0:	4b18      	ldr	r3, [pc, #96]	; (800c154 <SDMMC_GetCmdResp3+0x6c>)
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	4a18      	ldr	r2, [pc, #96]	; (800c158 <SDMMC_GetCmdResp3+0x70>)
 800c0f6:	fba2 2303 	umull	r2, r3, r2, r3
 800c0fa:	0a5b      	lsrs	r3, r3, #9
 800c0fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800c100:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c104:	4623      	mov	r3, r4
 800c106:	1e5c      	subs	r4, r3, #1
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d102      	bne.n	800c112 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c10c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c110:	e01b      	b.n	800c14a <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c116:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d0f0      	beq.n	800c104 <SDMMC_GetCmdResp3+0x1c>
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d1eb      	bne.n	800c104 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c130:	f003 0304 	and.w	r3, r3, #4
 800c134:	2b00      	cmp	r3, #0
 800c136:	d004      	beq.n	800c142 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	2204      	movs	r2, #4
 800c13c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c13e:	2304      	movs	r3, #4
 800c140:	e003      	b.n	800c14a <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	22c5      	movs	r2, #197	; 0xc5
 800c146:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c148:	2300      	movs	r3, #0
}
 800c14a:	4618      	mov	r0, r3
 800c14c:	3710      	adds	r7, #16
 800c14e:	46bd      	mov	sp, r7
 800c150:	bc90      	pop	{r4, r7}
 800c152:	4770      	bx	lr
 800c154:	20000020 	.word	0x20000020
 800c158:	10624dd3 	.word	0x10624dd3

0800c15c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c15c:	b590      	push	{r4, r7, lr}
 800c15e:	b087      	sub	sp, #28
 800c160:	af00      	add	r7, sp, #0
 800c162:	60f8      	str	r0, [r7, #12]
 800c164:	460b      	mov	r3, r1
 800c166:	607a      	str	r2, [r7, #4]
 800c168:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c16a:	4b34      	ldr	r3, [pc, #208]	; (800c23c <SDMMC_GetCmdResp6+0xe0>)
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	4a34      	ldr	r2, [pc, #208]	; (800c240 <SDMMC_GetCmdResp6+0xe4>)
 800c170:	fba2 2303 	umull	r2, r3, r2, r3
 800c174:	0a5b      	lsrs	r3, r3, #9
 800c176:	f241 3288 	movw	r2, #5000	; 0x1388
 800c17a:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c17e:	4623      	mov	r3, r4
 800c180:	1e5c      	subs	r4, r3, #1
 800c182:	2b00      	cmp	r3, #0
 800c184:	d102      	bne.n	800c18c <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c186:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c18a:	e052      	b.n	800c232 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c190:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c192:	697b      	ldr	r3, [r7, #20]
 800c194:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d0f0      	beq.n	800c17e <SDMMC_GetCmdResp6+0x22>
 800c19c:	697b      	ldr	r3, [r7, #20]
 800c19e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d1eb      	bne.n	800c17e <SDMMC_GetCmdResp6+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1aa:	f003 0304 	and.w	r3, r3, #4
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d004      	beq.n	800c1bc <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	2204      	movs	r2, #4
 800c1b6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c1b8:	2304      	movs	r3, #4
 800c1ba:	e03a      	b.n	800c232 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1c0:	f003 0301 	and.w	r3, r3, #1
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d004      	beq.n	800c1d2 <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	2201      	movs	r2, #1
 800c1cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c1ce:	2301      	movs	r3, #1
 800c1d0:	e02f      	b.n	800c232 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c1d2:	68f8      	ldr	r0, [r7, #12]
 800c1d4:	f7ff fd50 	bl	800bc78 <SDMMC_GetCommandResponse>
 800c1d8:	4603      	mov	r3, r0
 800c1da:	461a      	mov	r2, r3
 800c1dc:	7afb      	ldrb	r3, [r7, #11]
 800c1de:	4293      	cmp	r3, r2
 800c1e0:	d001      	beq.n	800c1e6 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c1e2:	2301      	movs	r3, #1
 800c1e4:	e025      	b.n	800c232 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	22c5      	movs	r2, #197	; 0xc5
 800c1ea:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c1ec:	2100      	movs	r1, #0
 800c1ee:	68f8      	ldr	r0, [r7, #12]
 800c1f0:	f7ff fd4f 	bl	800bc92 <SDMMC_GetResponse>
 800c1f4:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800c1f6:	693b      	ldr	r3, [r7, #16]
 800c1f8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d106      	bne.n	800c20e <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800c200:	693b      	ldr	r3, [r7, #16]
 800c202:	0c1b      	lsrs	r3, r3, #16
 800c204:	b29a      	uxth	r2, r3
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800c20a:	2300      	movs	r3, #0
 800c20c:	e011      	b.n	800c232 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c20e:	693b      	ldr	r3, [r7, #16]
 800c210:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c214:	2b00      	cmp	r3, #0
 800c216:	d002      	beq.n	800c21e <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c218:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c21c:	e009      	b.n	800c232 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c21e:	693b      	ldr	r3, [r7, #16]
 800c220:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c224:	2b00      	cmp	r3, #0
 800c226:	d002      	beq.n	800c22e <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c228:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c22c:	e001      	b.n	800c232 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c22e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c232:	4618      	mov	r0, r3
 800c234:	371c      	adds	r7, #28
 800c236:	46bd      	mov	sp, r7
 800c238:	bd90      	pop	{r4, r7, pc}
 800c23a:	bf00      	nop
 800c23c:	20000020 	.word	0x20000020
 800c240:	10624dd3 	.word	0x10624dd3

0800c244 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b084      	sub	sp, #16
 800c248:	af00      	add	r7, sp, #0
 800c24a:	4603      	mov	r3, r0
 800c24c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c24e:	79fb      	ldrb	r3, [r7, #7]
 800c250:	4a08      	ldr	r2, [pc, #32]	; (800c274 <disk_status+0x30>)
 800c252:	009b      	lsls	r3, r3, #2
 800c254:	4413      	add	r3, r2
 800c256:	685b      	ldr	r3, [r3, #4]
 800c258:	685b      	ldr	r3, [r3, #4]
 800c25a:	79fa      	ldrb	r2, [r7, #7]
 800c25c:	4905      	ldr	r1, [pc, #20]	; (800c274 <disk_status+0x30>)
 800c25e:	440a      	add	r2, r1
 800c260:	7a12      	ldrb	r2, [r2, #8]
 800c262:	4610      	mov	r0, r2
 800c264:	4798      	blx	r3
 800c266:	4603      	mov	r3, r0
 800c268:	73fb      	strb	r3, [r7, #15]
  return stat;
 800c26a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c26c:	4618      	mov	r0, r3
 800c26e:	3710      	adds	r7, #16
 800c270:	46bd      	mov	sp, r7
 800c272:	bd80      	pop	{r7, pc}
 800c274:	20001300 	.word	0x20001300

0800c278 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	b084      	sub	sp, #16
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	4603      	mov	r3, r0
 800c280:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800c282:	2300      	movs	r3, #0
 800c284:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800c286:	79fb      	ldrb	r3, [r7, #7]
 800c288:	4a0d      	ldr	r2, [pc, #52]	; (800c2c0 <disk_initialize+0x48>)
 800c28a:	5cd3      	ldrb	r3, [r2, r3]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d111      	bne.n	800c2b4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800c290:	79fb      	ldrb	r3, [r7, #7]
 800c292:	4a0b      	ldr	r2, [pc, #44]	; (800c2c0 <disk_initialize+0x48>)
 800c294:	2101      	movs	r1, #1
 800c296:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c298:	79fb      	ldrb	r3, [r7, #7]
 800c29a:	4a09      	ldr	r2, [pc, #36]	; (800c2c0 <disk_initialize+0x48>)
 800c29c:	009b      	lsls	r3, r3, #2
 800c29e:	4413      	add	r3, r2
 800c2a0:	685b      	ldr	r3, [r3, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	79fa      	ldrb	r2, [r7, #7]
 800c2a6:	4906      	ldr	r1, [pc, #24]	; (800c2c0 <disk_initialize+0x48>)
 800c2a8:	440a      	add	r2, r1
 800c2aa:	7a12      	ldrb	r2, [r2, #8]
 800c2ac:	4610      	mov	r0, r2
 800c2ae:	4798      	blx	r3
 800c2b0:	4603      	mov	r3, r0
 800c2b2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800c2b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	3710      	adds	r7, #16
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	bd80      	pop	{r7, pc}
 800c2be:	bf00      	nop
 800c2c0:	20001300 	.word	0x20001300

0800c2c4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c2c4:	b590      	push	{r4, r7, lr}
 800c2c6:	b087      	sub	sp, #28
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	60b9      	str	r1, [r7, #8]
 800c2cc:	607a      	str	r2, [r7, #4]
 800c2ce:	603b      	str	r3, [r7, #0]
 800c2d0:	4603      	mov	r3, r0
 800c2d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c2d4:	7bfb      	ldrb	r3, [r7, #15]
 800c2d6:	4a0a      	ldr	r2, [pc, #40]	; (800c300 <disk_read+0x3c>)
 800c2d8:	009b      	lsls	r3, r3, #2
 800c2da:	4413      	add	r3, r2
 800c2dc:	685b      	ldr	r3, [r3, #4]
 800c2de:	689c      	ldr	r4, [r3, #8]
 800c2e0:	7bfb      	ldrb	r3, [r7, #15]
 800c2e2:	4a07      	ldr	r2, [pc, #28]	; (800c300 <disk_read+0x3c>)
 800c2e4:	4413      	add	r3, r2
 800c2e6:	7a18      	ldrb	r0, [r3, #8]
 800c2e8:	683b      	ldr	r3, [r7, #0]
 800c2ea:	687a      	ldr	r2, [r7, #4]
 800c2ec:	68b9      	ldr	r1, [r7, #8]
 800c2ee:	47a0      	blx	r4
 800c2f0:	4603      	mov	r3, r0
 800c2f2:	75fb      	strb	r3, [r7, #23]
  return res;
 800c2f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	371c      	adds	r7, #28
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	bd90      	pop	{r4, r7, pc}
 800c2fe:	bf00      	nop
 800c300:	20001300 	.word	0x20001300

0800c304 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c304:	b590      	push	{r4, r7, lr}
 800c306:	b087      	sub	sp, #28
 800c308:	af00      	add	r7, sp, #0
 800c30a:	60b9      	str	r1, [r7, #8]
 800c30c:	607a      	str	r2, [r7, #4]
 800c30e:	603b      	str	r3, [r7, #0]
 800c310:	4603      	mov	r3, r0
 800c312:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c314:	7bfb      	ldrb	r3, [r7, #15]
 800c316:	4a0a      	ldr	r2, [pc, #40]	; (800c340 <disk_write+0x3c>)
 800c318:	009b      	lsls	r3, r3, #2
 800c31a:	4413      	add	r3, r2
 800c31c:	685b      	ldr	r3, [r3, #4]
 800c31e:	68dc      	ldr	r4, [r3, #12]
 800c320:	7bfb      	ldrb	r3, [r7, #15]
 800c322:	4a07      	ldr	r2, [pc, #28]	; (800c340 <disk_write+0x3c>)
 800c324:	4413      	add	r3, r2
 800c326:	7a18      	ldrb	r0, [r3, #8]
 800c328:	683b      	ldr	r3, [r7, #0]
 800c32a:	687a      	ldr	r2, [r7, #4]
 800c32c:	68b9      	ldr	r1, [r7, #8]
 800c32e:	47a0      	blx	r4
 800c330:	4603      	mov	r3, r0
 800c332:	75fb      	strb	r3, [r7, #23]
  return res;
 800c334:	7dfb      	ldrb	r3, [r7, #23]
}
 800c336:	4618      	mov	r0, r3
 800c338:	371c      	adds	r7, #28
 800c33a:	46bd      	mov	sp, r7
 800c33c:	bd90      	pop	{r4, r7, pc}
 800c33e:	bf00      	nop
 800c340:	20001300 	.word	0x20001300

0800c344 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800c344:	b580      	push	{r7, lr}
 800c346:	b084      	sub	sp, #16
 800c348:	af00      	add	r7, sp, #0
 800c34a:	4603      	mov	r3, r0
 800c34c:	603a      	str	r2, [r7, #0]
 800c34e:	71fb      	strb	r3, [r7, #7]
 800c350:	460b      	mov	r3, r1
 800c352:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c354:	79fb      	ldrb	r3, [r7, #7]
 800c356:	4a09      	ldr	r2, [pc, #36]	; (800c37c <disk_ioctl+0x38>)
 800c358:	009b      	lsls	r3, r3, #2
 800c35a:	4413      	add	r3, r2
 800c35c:	685b      	ldr	r3, [r3, #4]
 800c35e:	691b      	ldr	r3, [r3, #16]
 800c360:	79fa      	ldrb	r2, [r7, #7]
 800c362:	4906      	ldr	r1, [pc, #24]	; (800c37c <disk_ioctl+0x38>)
 800c364:	440a      	add	r2, r1
 800c366:	7a10      	ldrb	r0, [r2, #8]
 800c368:	79b9      	ldrb	r1, [r7, #6]
 800c36a:	683a      	ldr	r2, [r7, #0]
 800c36c:	4798      	blx	r3
 800c36e:	4603      	mov	r3, r0
 800c370:	73fb      	strb	r3, [r7, #15]
  return res;
 800c372:	7bfb      	ldrb	r3, [r7, #15]
}
 800c374:	4618      	mov	r0, r3
 800c376:	3710      	adds	r7, #16
 800c378:	46bd      	mov	sp, r7
 800c37a:	bd80      	pop	{r7, pc}
 800c37c:	20001300 	.word	0x20001300

0800c380 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c380:	b480      	push	{r7}
 800c382:	b085      	sub	sp, #20
 800c384:	af00      	add	r7, sp, #0
 800c386:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	3301      	adds	r3, #1
 800c38c:	781b      	ldrb	r3, [r3, #0]
 800c38e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c390:	89fb      	ldrh	r3, [r7, #14]
 800c392:	021b      	lsls	r3, r3, #8
 800c394:	b21a      	sxth	r2, r3
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	781b      	ldrb	r3, [r3, #0]
 800c39a:	b21b      	sxth	r3, r3
 800c39c:	4313      	orrs	r3, r2
 800c39e:	b21b      	sxth	r3, r3
 800c3a0:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c3a2:	89fb      	ldrh	r3, [r7, #14]
}
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	3714      	adds	r7, #20
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ae:	4770      	bx	lr

0800c3b0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c3b0:	b480      	push	{r7}
 800c3b2:	b085      	sub	sp, #20
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	3303      	adds	r3, #3
 800c3bc:	781b      	ldrb	r3, [r3, #0]
 800c3be:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	021b      	lsls	r3, r3, #8
 800c3c4:	687a      	ldr	r2, [r7, #4]
 800c3c6:	3202      	adds	r2, #2
 800c3c8:	7812      	ldrb	r2, [r2, #0]
 800c3ca:	4313      	orrs	r3, r2
 800c3cc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	021b      	lsls	r3, r3, #8
 800c3d2:	687a      	ldr	r2, [r7, #4]
 800c3d4:	3201      	adds	r2, #1
 800c3d6:	7812      	ldrb	r2, [r2, #0]
 800c3d8:	4313      	orrs	r3, r2
 800c3da:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	021b      	lsls	r3, r3, #8
 800c3e0:	687a      	ldr	r2, [r7, #4]
 800c3e2:	7812      	ldrb	r2, [r2, #0]
 800c3e4:	4313      	orrs	r3, r2
 800c3e6:	60fb      	str	r3, [r7, #12]
	return rv;
 800c3e8:	68fb      	ldr	r3, [r7, #12]
}
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	3714      	adds	r7, #20
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f4:	4770      	bx	lr

0800c3f6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c3f6:	b480      	push	{r7}
 800c3f8:	b083      	sub	sp, #12
 800c3fa:	af00      	add	r7, sp, #0
 800c3fc:	6078      	str	r0, [r7, #4]
 800c3fe:	460b      	mov	r3, r1
 800c400:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	1c5a      	adds	r2, r3, #1
 800c406:	607a      	str	r2, [r7, #4]
 800c408:	887a      	ldrh	r2, [r7, #2]
 800c40a:	b2d2      	uxtb	r2, r2
 800c40c:	701a      	strb	r2, [r3, #0]
 800c40e:	887b      	ldrh	r3, [r7, #2]
 800c410:	0a1b      	lsrs	r3, r3, #8
 800c412:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	1c5a      	adds	r2, r3, #1
 800c418:	607a      	str	r2, [r7, #4]
 800c41a:	887a      	ldrh	r2, [r7, #2]
 800c41c:	b2d2      	uxtb	r2, r2
 800c41e:	701a      	strb	r2, [r3, #0]
}
 800c420:	bf00      	nop
 800c422:	370c      	adds	r7, #12
 800c424:	46bd      	mov	sp, r7
 800c426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42a:	4770      	bx	lr

0800c42c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c42c:	b480      	push	{r7}
 800c42e:	b083      	sub	sp, #12
 800c430:	af00      	add	r7, sp, #0
 800c432:	6078      	str	r0, [r7, #4]
 800c434:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	1c5a      	adds	r2, r3, #1
 800c43a:	607a      	str	r2, [r7, #4]
 800c43c:	683a      	ldr	r2, [r7, #0]
 800c43e:	b2d2      	uxtb	r2, r2
 800c440:	701a      	strb	r2, [r3, #0]
 800c442:	683b      	ldr	r3, [r7, #0]
 800c444:	0a1b      	lsrs	r3, r3, #8
 800c446:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	1c5a      	adds	r2, r3, #1
 800c44c:	607a      	str	r2, [r7, #4]
 800c44e:	683a      	ldr	r2, [r7, #0]
 800c450:	b2d2      	uxtb	r2, r2
 800c452:	701a      	strb	r2, [r3, #0]
 800c454:	683b      	ldr	r3, [r7, #0]
 800c456:	0a1b      	lsrs	r3, r3, #8
 800c458:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	1c5a      	adds	r2, r3, #1
 800c45e:	607a      	str	r2, [r7, #4]
 800c460:	683a      	ldr	r2, [r7, #0]
 800c462:	b2d2      	uxtb	r2, r2
 800c464:	701a      	strb	r2, [r3, #0]
 800c466:	683b      	ldr	r3, [r7, #0]
 800c468:	0a1b      	lsrs	r3, r3, #8
 800c46a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	1c5a      	adds	r2, r3, #1
 800c470:	607a      	str	r2, [r7, #4]
 800c472:	683a      	ldr	r2, [r7, #0]
 800c474:	b2d2      	uxtb	r2, r2
 800c476:	701a      	strb	r2, [r3, #0]
}
 800c478:	bf00      	nop
 800c47a:	370c      	adds	r7, #12
 800c47c:	46bd      	mov	sp, r7
 800c47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c482:	4770      	bx	lr

0800c484 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c484:	b480      	push	{r7}
 800c486:	b087      	sub	sp, #28
 800c488:	af00      	add	r7, sp, #0
 800c48a:	60f8      	str	r0, [r7, #12]
 800c48c:	60b9      	str	r1, [r7, #8]
 800c48e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c494:	68bb      	ldr	r3, [r7, #8]
 800c496:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d00d      	beq.n	800c4ba <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c49e:	693a      	ldr	r2, [r7, #16]
 800c4a0:	1c53      	adds	r3, r2, #1
 800c4a2:	613b      	str	r3, [r7, #16]
 800c4a4:	697b      	ldr	r3, [r7, #20]
 800c4a6:	1c59      	adds	r1, r3, #1
 800c4a8:	6179      	str	r1, [r7, #20]
 800c4aa:	7812      	ldrb	r2, [r2, #0]
 800c4ac:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	3b01      	subs	r3, #1
 800c4b2:	607b      	str	r3, [r7, #4]
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d1f1      	bne.n	800c49e <mem_cpy+0x1a>
	}
}
 800c4ba:	bf00      	nop
 800c4bc:	371c      	adds	r7, #28
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c4:	4770      	bx	lr

0800c4c6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c4c6:	b480      	push	{r7}
 800c4c8:	b087      	sub	sp, #28
 800c4ca:	af00      	add	r7, sp, #0
 800c4cc:	60f8      	str	r0, [r7, #12]
 800c4ce:	60b9      	str	r1, [r7, #8]
 800c4d0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c4d6:	697b      	ldr	r3, [r7, #20]
 800c4d8:	1c5a      	adds	r2, r3, #1
 800c4da:	617a      	str	r2, [r7, #20]
 800c4dc:	68ba      	ldr	r2, [r7, #8]
 800c4de:	b2d2      	uxtb	r2, r2
 800c4e0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	3b01      	subs	r3, #1
 800c4e6:	607b      	str	r3, [r7, #4]
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d1f3      	bne.n	800c4d6 <mem_set+0x10>
}
 800c4ee:	bf00      	nop
 800c4f0:	371c      	adds	r7, #28
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f8:	4770      	bx	lr

0800c4fa <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c4fa:	b480      	push	{r7}
 800c4fc:	b089      	sub	sp, #36	; 0x24
 800c4fe:	af00      	add	r7, sp, #0
 800c500:	60f8      	str	r0, [r7, #12]
 800c502:	60b9      	str	r1, [r7, #8]
 800c504:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	61fb      	str	r3, [r7, #28]
 800c50a:	68bb      	ldr	r3, [r7, #8]
 800c50c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c50e:	2300      	movs	r3, #0
 800c510:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c512:	69fb      	ldr	r3, [r7, #28]
 800c514:	1c5a      	adds	r2, r3, #1
 800c516:	61fa      	str	r2, [r7, #28]
 800c518:	781b      	ldrb	r3, [r3, #0]
 800c51a:	4619      	mov	r1, r3
 800c51c:	69bb      	ldr	r3, [r7, #24]
 800c51e:	1c5a      	adds	r2, r3, #1
 800c520:	61ba      	str	r2, [r7, #24]
 800c522:	781b      	ldrb	r3, [r3, #0]
 800c524:	1acb      	subs	r3, r1, r3
 800c526:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	3b01      	subs	r3, #1
 800c52c:	607b      	str	r3, [r7, #4]
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d002      	beq.n	800c53a <mem_cmp+0x40>
 800c534:	697b      	ldr	r3, [r7, #20]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d0eb      	beq.n	800c512 <mem_cmp+0x18>

	return r;
 800c53a:	697b      	ldr	r3, [r7, #20]
}
 800c53c:	4618      	mov	r0, r3
 800c53e:	3724      	adds	r7, #36	; 0x24
 800c540:	46bd      	mov	sp, r7
 800c542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c546:	4770      	bx	lr

0800c548 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c548:	b480      	push	{r7}
 800c54a:	b083      	sub	sp, #12
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
 800c550:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c552:	e002      	b.n	800c55a <chk_chr+0x12>
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	3301      	adds	r3, #1
 800c558:	607b      	str	r3, [r7, #4]
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	781b      	ldrb	r3, [r3, #0]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d005      	beq.n	800c56e <chk_chr+0x26>
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	781b      	ldrb	r3, [r3, #0]
 800c566:	461a      	mov	r2, r3
 800c568:	683b      	ldr	r3, [r7, #0]
 800c56a:	4293      	cmp	r3, r2
 800c56c:	d1f2      	bne.n	800c554 <chk_chr+0xc>
	return *str;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	781b      	ldrb	r3, [r3, #0]
}
 800c572:	4618      	mov	r0, r3
 800c574:	370c      	adds	r7, #12
 800c576:	46bd      	mov	sp, r7
 800c578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57c:	4770      	bx	lr
	...

0800c580 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c580:	b480      	push	{r7}
 800c582:	b085      	sub	sp, #20
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]
 800c588:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c58a:	2300      	movs	r3, #0
 800c58c:	60bb      	str	r3, [r7, #8]
 800c58e:	68bb      	ldr	r3, [r7, #8]
 800c590:	60fb      	str	r3, [r7, #12]
 800c592:	e029      	b.n	800c5e8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c594:	4a27      	ldr	r2, [pc, #156]	; (800c634 <chk_lock+0xb4>)
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	011b      	lsls	r3, r3, #4
 800c59a:	4413      	add	r3, r2
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d01d      	beq.n	800c5de <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c5a2:	4a24      	ldr	r2, [pc, #144]	; (800c634 <chk_lock+0xb4>)
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	011b      	lsls	r3, r3, #4
 800c5a8:	4413      	add	r3, r2
 800c5aa:	681a      	ldr	r2, [r3, #0]
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	429a      	cmp	r2, r3
 800c5b2:	d116      	bne.n	800c5e2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c5b4:	4a1f      	ldr	r2, [pc, #124]	; (800c634 <chk_lock+0xb4>)
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	011b      	lsls	r3, r3, #4
 800c5ba:	4413      	add	r3, r2
 800c5bc:	3304      	adds	r3, #4
 800c5be:	681a      	ldr	r2, [r3, #0]
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c5c4:	429a      	cmp	r2, r3
 800c5c6:	d10c      	bne.n	800c5e2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c5c8:	4a1a      	ldr	r2, [pc, #104]	; (800c634 <chk_lock+0xb4>)
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	011b      	lsls	r3, r3, #4
 800c5ce:	4413      	add	r3, r2
 800c5d0:	3308      	adds	r3, #8
 800c5d2:	681a      	ldr	r2, [r3, #0]
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800c5d8:	429a      	cmp	r2, r3
 800c5da:	d102      	bne.n	800c5e2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c5dc:	e007      	b.n	800c5ee <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c5de:	2301      	movs	r3, #1
 800c5e0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	3301      	adds	r3, #1
 800c5e6:	60fb      	str	r3, [r7, #12]
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	2b01      	cmp	r3, #1
 800c5ec:	d9d2      	bls.n	800c594 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	2b02      	cmp	r3, #2
 800c5f2:	d109      	bne.n	800c608 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c5f4:	68bb      	ldr	r3, [r7, #8]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d102      	bne.n	800c600 <chk_lock+0x80>
 800c5fa:	683b      	ldr	r3, [r7, #0]
 800c5fc:	2b02      	cmp	r3, #2
 800c5fe:	d101      	bne.n	800c604 <chk_lock+0x84>
 800c600:	2300      	movs	r3, #0
 800c602:	e010      	b.n	800c626 <chk_lock+0xa6>
 800c604:	2312      	movs	r3, #18
 800c606:	e00e      	b.n	800c626 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c608:	683b      	ldr	r3, [r7, #0]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d108      	bne.n	800c620 <chk_lock+0xa0>
 800c60e:	4a09      	ldr	r2, [pc, #36]	; (800c634 <chk_lock+0xb4>)
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	011b      	lsls	r3, r3, #4
 800c614:	4413      	add	r3, r2
 800c616:	330c      	adds	r3, #12
 800c618:	881b      	ldrh	r3, [r3, #0]
 800c61a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c61e:	d101      	bne.n	800c624 <chk_lock+0xa4>
 800c620:	2310      	movs	r3, #16
 800c622:	e000      	b.n	800c626 <chk_lock+0xa6>
 800c624:	2300      	movs	r3, #0
}
 800c626:	4618      	mov	r0, r3
 800c628:	3714      	adds	r7, #20
 800c62a:	46bd      	mov	sp, r7
 800c62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c630:	4770      	bx	lr
 800c632:	bf00      	nop
 800c634:	200010e0 	.word	0x200010e0

0800c638 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c638:	b480      	push	{r7}
 800c63a:	b083      	sub	sp, #12
 800c63c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c63e:	2300      	movs	r3, #0
 800c640:	607b      	str	r3, [r7, #4]
 800c642:	e002      	b.n	800c64a <enq_lock+0x12>
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	3301      	adds	r3, #1
 800c648:	607b      	str	r3, [r7, #4]
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	2b01      	cmp	r3, #1
 800c64e:	d806      	bhi.n	800c65e <enq_lock+0x26>
 800c650:	4a09      	ldr	r2, [pc, #36]	; (800c678 <enq_lock+0x40>)
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	011b      	lsls	r3, r3, #4
 800c656:	4413      	add	r3, r2
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d1f2      	bne.n	800c644 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	2b02      	cmp	r3, #2
 800c662:	bf14      	ite	ne
 800c664:	2301      	movne	r3, #1
 800c666:	2300      	moveq	r3, #0
 800c668:	b2db      	uxtb	r3, r3
}
 800c66a:	4618      	mov	r0, r3
 800c66c:	370c      	adds	r7, #12
 800c66e:	46bd      	mov	sp, r7
 800c670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c674:	4770      	bx	lr
 800c676:	bf00      	nop
 800c678:	200010e0 	.word	0x200010e0

0800c67c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c67c:	b480      	push	{r7}
 800c67e:	b085      	sub	sp, #20
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
 800c684:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c686:	2300      	movs	r3, #0
 800c688:	60fb      	str	r3, [r7, #12]
 800c68a:	e01f      	b.n	800c6cc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c68c:	4a41      	ldr	r2, [pc, #260]	; (800c794 <inc_lock+0x118>)
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	011b      	lsls	r3, r3, #4
 800c692:	4413      	add	r3, r2
 800c694:	681a      	ldr	r2, [r3, #0]
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	429a      	cmp	r2, r3
 800c69c:	d113      	bne.n	800c6c6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c69e:	4a3d      	ldr	r2, [pc, #244]	; (800c794 <inc_lock+0x118>)
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	011b      	lsls	r3, r3, #4
 800c6a4:	4413      	add	r3, r2
 800c6a6:	3304      	adds	r3, #4
 800c6a8:	681a      	ldr	r2, [r3, #0]
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c6ae:	429a      	cmp	r2, r3
 800c6b0:	d109      	bne.n	800c6c6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c6b2:	4a38      	ldr	r2, [pc, #224]	; (800c794 <inc_lock+0x118>)
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	011b      	lsls	r3, r3, #4
 800c6b8:	4413      	add	r3, r2
 800c6ba:	3308      	adds	r3, #8
 800c6bc:	681a      	ldr	r2, [r3, #0]
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800c6c2:	429a      	cmp	r2, r3
 800c6c4:	d006      	beq.n	800c6d4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	3301      	adds	r3, #1
 800c6ca:	60fb      	str	r3, [r7, #12]
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	2b01      	cmp	r3, #1
 800c6d0:	d9dc      	bls.n	800c68c <inc_lock+0x10>
 800c6d2:	e000      	b.n	800c6d6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c6d4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	2b02      	cmp	r3, #2
 800c6da:	d132      	bne.n	800c742 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c6dc:	2300      	movs	r3, #0
 800c6de:	60fb      	str	r3, [r7, #12]
 800c6e0:	e002      	b.n	800c6e8 <inc_lock+0x6c>
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	3301      	adds	r3, #1
 800c6e6:	60fb      	str	r3, [r7, #12]
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	2b01      	cmp	r3, #1
 800c6ec:	d806      	bhi.n	800c6fc <inc_lock+0x80>
 800c6ee:	4a29      	ldr	r2, [pc, #164]	; (800c794 <inc_lock+0x118>)
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	011b      	lsls	r3, r3, #4
 800c6f4:	4413      	add	r3, r2
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d1f2      	bne.n	800c6e2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	2b02      	cmp	r3, #2
 800c700:	d101      	bne.n	800c706 <inc_lock+0x8a>
 800c702:	2300      	movs	r3, #0
 800c704:	e040      	b.n	800c788 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	681a      	ldr	r2, [r3, #0]
 800c70a:	4922      	ldr	r1, [pc, #136]	; (800c794 <inc_lock+0x118>)
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	011b      	lsls	r3, r3, #4
 800c710:	440b      	add	r3, r1
 800c712:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	689a      	ldr	r2, [r3, #8]
 800c718:	491e      	ldr	r1, [pc, #120]	; (800c794 <inc_lock+0x118>)
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	011b      	lsls	r3, r3, #4
 800c71e:	440b      	add	r3, r1
 800c720:	3304      	adds	r3, #4
 800c722:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	695a      	ldr	r2, [r3, #20]
 800c728:	491a      	ldr	r1, [pc, #104]	; (800c794 <inc_lock+0x118>)
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	011b      	lsls	r3, r3, #4
 800c72e:	440b      	add	r3, r1
 800c730:	3308      	adds	r3, #8
 800c732:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c734:	4a17      	ldr	r2, [pc, #92]	; (800c794 <inc_lock+0x118>)
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	011b      	lsls	r3, r3, #4
 800c73a:	4413      	add	r3, r2
 800c73c:	330c      	adds	r3, #12
 800c73e:	2200      	movs	r2, #0
 800c740:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c742:	683b      	ldr	r3, [r7, #0]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d009      	beq.n	800c75c <inc_lock+0xe0>
 800c748:	4a12      	ldr	r2, [pc, #72]	; (800c794 <inc_lock+0x118>)
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	011b      	lsls	r3, r3, #4
 800c74e:	4413      	add	r3, r2
 800c750:	330c      	adds	r3, #12
 800c752:	881b      	ldrh	r3, [r3, #0]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d001      	beq.n	800c75c <inc_lock+0xe0>
 800c758:	2300      	movs	r3, #0
 800c75a:	e015      	b.n	800c788 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c75c:	683b      	ldr	r3, [r7, #0]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d108      	bne.n	800c774 <inc_lock+0xf8>
 800c762:	4a0c      	ldr	r2, [pc, #48]	; (800c794 <inc_lock+0x118>)
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	011b      	lsls	r3, r3, #4
 800c768:	4413      	add	r3, r2
 800c76a:	330c      	adds	r3, #12
 800c76c:	881b      	ldrh	r3, [r3, #0]
 800c76e:	3301      	adds	r3, #1
 800c770:	b29a      	uxth	r2, r3
 800c772:	e001      	b.n	800c778 <inc_lock+0xfc>
 800c774:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c778:	4906      	ldr	r1, [pc, #24]	; (800c794 <inc_lock+0x118>)
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	011b      	lsls	r3, r3, #4
 800c77e:	440b      	add	r3, r1
 800c780:	330c      	adds	r3, #12
 800c782:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	3301      	adds	r3, #1
}
 800c788:	4618      	mov	r0, r3
 800c78a:	3714      	adds	r7, #20
 800c78c:	46bd      	mov	sp, r7
 800c78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c792:	4770      	bx	lr
 800c794:	200010e0 	.word	0x200010e0

0800c798 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c798:	b480      	push	{r7}
 800c79a:	b085      	sub	sp, #20
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	60fb      	str	r3, [r7, #12]
 800c7a4:	e010      	b.n	800c7c8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c7a6:	4a0d      	ldr	r2, [pc, #52]	; (800c7dc <clear_lock+0x44>)
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	011b      	lsls	r3, r3, #4
 800c7ac:	4413      	add	r3, r2
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	687a      	ldr	r2, [r7, #4]
 800c7b2:	429a      	cmp	r2, r3
 800c7b4:	d105      	bne.n	800c7c2 <clear_lock+0x2a>
 800c7b6:	4a09      	ldr	r2, [pc, #36]	; (800c7dc <clear_lock+0x44>)
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	011b      	lsls	r3, r3, #4
 800c7bc:	4413      	add	r3, r2
 800c7be:	2200      	movs	r2, #0
 800c7c0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	3301      	adds	r3, #1
 800c7c6:	60fb      	str	r3, [r7, #12]
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	2b01      	cmp	r3, #1
 800c7cc:	d9eb      	bls.n	800c7a6 <clear_lock+0xe>
	}
}
 800c7ce:	bf00      	nop
 800c7d0:	3714      	adds	r7, #20
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d8:	4770      	bx	lr
 800c7da:	bf00      	nop
 800c7dc:	200010e0 	.word	0x200010e0

0800c7e0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b086      	sub	sp, #24
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	78db      	ldrb	r3, [r3, #3]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d034      	beq.n	800c85e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7f8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	7858      	ldrb	r0, [r3, #1]
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c804:	2301      	movs	r3, #1
 800c806:	697a      	ldr	r2, [r7, #20]
 800c808:	f7ff fd7c 	bl	800c304 <disk_write>
 800c80c:	4603      	mov	r3, r0
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d002      	beq.n	800c818 <sync_window+0x38>
			res = FR_DISK_ERR;
 800c812:	2301      	movs	r3, #1
 800c814:	73fb      	strb	r3, [r7, #15]
 800c816:	e022      	b.n	800c85e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	2200      	movs	r2, #0
 800c81c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c822:	697a      	ldr	r2, [r7, #20]
 800c824:	1ad2      	subs	r2, r2, r3
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	69db      	ldr	r3, [r3, #28]
 800c82a:	429a      	cmp	r2, r3
 800c82c:	d217      	bcs.n	800c85e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	789b      	ldrb	r3, [r3, #2]
 800c832:	613b      	str	r3, [r7, #16]
 800c834:	e010      	b.n	800c858 <sync_window+0x78>
					wsect += fs->fsize;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	69db      	ldr	r3, [r3, #28]
 800c83a:	697a      	ldr	r2, [r7, #20]
 800c83c:	4413      	add	r3, r2
 800c83e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	7858      	ldrb	r0, [r3, #1]
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c84a:	2301      	movs	r3, #1
 800c84c:	697a      	ldr	r2, [r7, #20]
 800c84e:	f7ff fd59 	bl	800c304 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c852:	693b      	ldr	r3, [r7, #16]
 800c854:	3b01      	subs	r3, #1
 800c856:	613b      	str	r3, [r7, #16]
 800c858:	693b      	ldr	r3, [r7, #16]
 800c85a:	2b01      	cmp	r3, #1
 800c85c:	d8eb      	bhi.n	800c836 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c85e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c860:	4618      	mov	r0, r3
 800c862:	3718      	adds	r7, #24
 800c864:	46bd      	mov	sp, r7
 800c866:	bd80      	pop	{r7, pc}

0800c868 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b084      	sub	sp, #16
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
 800c870:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c872:	2300      	movs	r3, #0
 800c874:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c87a:	683a      	ldr	r2, [r7, #0]
 800c87c:	429a      	cmp	r2, r3
 800c87e:	d01b      	beq.n	800c8b8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c880:	6878      	ldr	r0, [r7, #4]
 800c882:	f7ff ffad 	bl	800c7e0 <sync_window>
 800c886:	4603      	mov	r3, r0
 800c888:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c88a:	7bfb      	ldrb	r3, [r7, #15]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d113      	bne.n	800c8b8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	7858      	ldrb	r0, [r3, #1]
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c89a:	2301      	movs	r3, #1
 800c89c:	683a      	ldr	r2, [r7, #0]
 800c89e:	f7ff fd11 	bl	800c2c4 <disk_read>
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d004      	beq.n	800c8b2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c8a8:	f04f 33ff 	mov.w	r3, #4294967295
 800c8ac:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c8ae:	2301      	movs	r3, #1
 800c8b0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	683a      	ldr	r2, [r7, #0]
 800c8b6:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800c8b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	3710      	adds	r7, #16
 800c8be:	46bd      	mov	sp, r7
 800c8c0:	bd80      	pop	{r7, pc}

0800c8c2 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c8c2:	b480      	push	{r7}
 800c8c4:	b083      	sub	sp, #12
 800c8c6:	af00      	add	r7, sp, #0
 800c8c8:	6078      	str	r0, [r7, #4]
 800c8ca:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c8cc:	683b      	ldr	r3, [r7, #0]
 800c8ce:	3b02      	subs	r3, #2
 800c8d0:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	699b      	ldr	r3, [r3, #24]
 800c8d6:	3b02      	subs	r3, #2
 800c8d8:	683a      	ldr	r2, [r7, #0]
 800c8da:	429a      	cmp	r2, r3
 800c8dc:	d301      	bcc.n	800c8e2 <clust2sect+0x20>
 800c8de:	2300      	movs	r3, #0
 800c8e0:	e008      	b.n	800c8f4 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	895b      	ldrh	r3, [r3, #10]
 800c8e6:	461a      	mov	r2, r3
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	fb03 f202 	mul.w	r2, r3, r2
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8f2:	4413      	add	r3, r2
}
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	370c      	adds	r7, #12
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8fe:	4770      	bx	lr

0800c900 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c900:	b580      	push	{r7, lr}
 800c902:	b086      	sub	sp, #24
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
 800c908:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c910:	683b      	ldr	r3, [r7, #0]
 800c912:	2b01      	cmp	r3, #1
 800c914:	d904      	bls.n	800c920 <get_fat+0x20>
 800c916:	693b      	ldr	r3, [r7, #16]
 800c918:	699b      	ldr	r3, [r3, #24]
 800c91a:	683a      	ldr	r2, [r7, #0]
 800c91c:	429a      	cmp	r2, r3
 800c91e:	d302      	bcc.n	800c926 <get_fat+0x26>
		val = 1;	/* Internal error */
 800c920:	2301      	movs	r3, #1
 800c922:	617b      	str	r3, [r7, #20]
 800c924:	e08e      	b.n	800ca44 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c926:	f04f 33ff 	mov.w	r3, #4294967295
 800c92a:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c92c:	693b      	ldr	r3, [r7, #16]
 800c92e:	781b      	ldrb	r3, [r3, #0]
 800c930:	2b02      	cmp	r3, #2
 800c932:	d045      	beq.n	800c9c0 <get_fat+0xc0>
 800c934:	2b03      	cmp	r3, #3
 800c936:	d05e      	beq.n	800c9f6 <get_fat+0xf6>
 800c938:	2b01      	cmp	r3, #1
 800c93a:	d179      	bne.n	800ca30 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c93c:	683b      	ldr	r3, [r7, #0]
 800c93e:	60fb      	str	r3, [r7, #12]
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	085b      	lsrs	r3, r3, #1
 800c944:	68fa      	ldr	r2, [r7, #12]
 800c946:	4413      	add	r3, r2
 800c948:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c94a:	693b      	ldr	r3, [r7, #16]
 800c94c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	0b1b      	lsrs	r3, r3, #12
 800c952:	4413      	add	r3, r2
 800c954:	4619      	mov	r1, r3
 800c956:	6938      	ldr	r0, [r7, #16]
 800c958:	f7ff ff86 	bl	800c868 <move_window>
 800c95c:	4603      	mov	r3, r0
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d169      	bne.n	800ca36 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	1c5a      	adds	r2, r3, #1
 800c966:	60fa      	str	r2, [r7, #12]
 800c968:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c96c:	693a      	ldr	r2, [r7, #16]
 800c96e:	4413      	add	r3, r2
 800c970:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c974:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c976:	693b      	ldr	r3, [r7, #16]
 800c978:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	0b1b      	lsrs	r3, r3, #12
 800c97e:	4413      	add	r3, r2
 800c980:	4619      	mov	r1, r3
 800c982:	6938      	ldr	r0, [r7, #16]
 800c984:	f7ff ff70 	bl	800c868 <move_window>
 800c988:	4603      	mov	r3, r0
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d155      	bne.n	800ca3a <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c994:	693a      	ldr	r2, [r7, #16]
 800c996:	4413      	add	r3, r2
 800c998:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c99c:	021b      	lsls	r3, r3, #8
 800c99e:	461a      	mov	r2, r3
 800c9a0:	68bb      	ldr	r3, [r7, #8]
 800c9a2:	4313      	orrs	r3, r2
 800c9a4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c9a6:	683b      	ldr	r3, [r7, #0]
 800c9a8:	f003 0301 	and.w	r3, r3, #1
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d002      	beq.n	800c9b6 <get_fat+0xb6>
 800c9b0:	68bb      	ldr	r3, [r7, #8]
 800c9b2:	091b      	lsrs	r3, r3, #4
 800c9b4:	e002      	b.n	800c9bc <get_fat+0xbc>
 800c9b6:	68bb      	ldr	r3, [r7, #8]
 800c9b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c9bc:	617b      	str	r3, [r7, #20]
			break;
 800c9be:	e041      	b.n	800ca44 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c9c0:	693b      	ldr	r3, [r7, #16]
 800c9c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c9c4:	683b      	ldr	r3, [r7, #0]
 800c9c6:	0adb      	lsrs	r3, r3, #11
 800c9c8:	4413      	add	r3, r2
 800c9ca:	4619      	mov	r1, r3
 800c9cc:	6938      	ldr	r0, [r7, #16]
 800c9ce:	f7ff ff4b 	bl	800c868 <move_window>
 800c9d2:	4603      	mov	r3, r0
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d132      	bne.n	800ca3e <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c9d8:	693b      	ldr	r3, [r7, #16]
 800c9da:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c9de:	683b      	ldr	r3, [r7, #0]
 800c9e0:	0059      	lsls	r1, r3, #1
 800c9e2:	f640 73fe 	movw	r3, #4094	; 0xffe
 800c9e6:	400b      	ands	r3, r1
 800c9e8:	4413      	add	r3, r2
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	f7ff fcc8 	bl	800c380 <ld_word>
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	617b      	str	r3, [r7, #20]
			break;
 800c9f4:	e026      	b.n	800ca44 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c9f6:	693b      	ldr	r3, [r7, #16]
 800c9f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c9fa:	683b      	ldr	r3, [r7, #0]
 800c9fc:	0a9b      	lsrs	r3, r3, #10
 800c9fe:	4413      	add	r3, r2
 800ca00:	4619      	mov	r1, r3
 800ca02:	6938      	ldr	r0, [r7, #16]
 800ca04:	f7ff ff30 	bl	800c868 <move_window>
 800ca08:	4603      	mov	r3, r0
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d119      	bne.n	800ca42 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ca0e:	693b      	ldr	r3, [r7, #16]
 800ca10:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ca14:	683b      	ldr	r3, [r7, #0]
 800ca16:	0099      	lsls	r1, r3, #2
 800ca18:	f640 73fc 	movw	r3, #4092	; 0xffc
 800ca1c:	400b      	ands	r3, r1
 800ca1e:	4413      	add	r3, r2
 800ca20:	4618      	mov	r0, r3
 800ca22:	f7ff fcc5 	bl	800c3b0 <ld_dword>
 800ca26:	4603      	mov	r3, r0
 800ca28:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ca2c:	617b      	str	r3, [r7, #20]
			break;
 800ca2e:	e009      	b.n	800ca44 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800ca30:	2301      	movs	r3, #1
 800ca32:	617b      	str	r3, [r7, #20]
 800ca34:	e006      	b.n	800ca44 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ca36:	bf00      	nop
 800ca38:	e004      	b.n	800ca44 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ca3a:	bf00      	nop
 800ca3c:	e002      	b.n	800ca44 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ca3e:	bf00      	nop
 800ca40:	e000      	b.n	800ca44 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ca42:	bf00      	nop
		}
	}

	return val;
 800ca44:	697b      	ldr	r3, [r7, #20]
}
 800ca46:	4618      	mov	r0, r3
 800ca48:	3718      	adds	r7, #24
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	bd80      	pop	{r7, pc}

0800ca4e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800ca4e:	b590      	push	{r4, r7, lr}
 800ca50:	b089      	sub	sp, #36	; 0x24
 800ca52:	af00      	add	r7, sp, #0
 800ca54:	60f8      	str	r0, [r7, #12]
 800ca56:	60b9      	str	r1, [r7, #8]
 800ca58:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800ca5a:	2302      	movs	r3, #2
 800ca5c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800ca5e:	68bb      	ldr	r3, [r7, #8]
 800ca60:	2b01      	cmp	r3, #1
 800ca62:	f240 80d9 	bls.w	800cc18 <put_fat+0x1ca>
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	699b      	ldr	r3, [r3, #24]
 800ca6a:	68ba      	ldr	r2, [r7, #8]
 800ca6c:	429a      	cmp	r2, r3
 800ca6e:	f080 80d3 	bcs.w	800cc18 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	781b      	ldrb	r3, [r3, #0]
 800ca76:	2b02      	cmp	r3, #2
 800ca78:	d073      	beq.n	800cb62 <put_fat+0x114>
 800ca7a:	2b03      	cmp	r3, #3
 800ca7c:	f000 8092 	beq.w	800cba4 <put_fat+0x156>
 800ca80:	2b01      	cmp	r3, #1
 800ca82:	f040 80c9 	bne.w	800cc18 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800ca86:	68bb      	ldr	r3, [r7, #8]
 800ca88:	61bb      	str	r3, [r7, #24]
 800ca8a:	69bb      	ldr	r3, [r7, #24]
 800ca8c:	085b      	lsrs	r3, r3, #1
 800ca8e:	69ba      	ldr	r2, [r7, #24]
 800ca90:	4413      	add	r3, r2
 800ca92:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ca98:	69bb      	ldr	r3, [r7, #24]
 800ca9a:	0b1b      	lsrs	r3, r3, #12
 800ca9c:	4413      	add	r3, r2
 800ca9e:	4619      	mov	r1, r3
 800caa0:	68f8      	ldr	r0, [r7, #12]
 800caa2:	f7ff fee1 	bl	800c868 <move_window>
 800caa6:	4603      	mov	r3, r0
 800caa8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800caaa:	7ffb      	ldrb	r3, [r7, #31]
 800caac:	2b00      	cmp	r3, #0
 800caae:	f040 80ac 	bne.w	800cc0a <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cab8:	69bb      	ldr	r3, [r7, #24]
 800caba:	1c59      	adds	r1, r3, #1
 800cabc:	61b9      	str	r1, [r7, #24]
 800cabe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cac2:	4413      	add	r3, r2
 800cac4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800cac6:	68bb      	ldr	r3, [r7, #8]
 800cac8:	f003 0301 	and.w	r3, r3, #1
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d00d      	beq.n	800caec <put_fat+0x9e>
 800cad0:	697b      	ldr	r3, [r7, #20]
 800cad2:	781b      	ldrb	r3, [r3, #0]
 800cad4:	b25b      	sxtb	r3, r3
 800cad6:	f003 030f 	and.w	r3, r3, #15
 800cada:	b25a      	sxtb	r2, r3
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	b2db      	uxtb	r3, r3
 800cae0:	011b      	lsls	r3, r3, #4
 800cae2:	b25b      	sxtb	r3, r3
 800cae4:	4313      	orrs	r3, r2
 800cae6:	b25b      	sxtb	r3, r3
 800cae8:	b2db      	uxtb	r3, r3
 800caea:	e001      	b.n	800caf0 <put_fat+0xa2>
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	b2db      	uxtb	r3, r3
 800caf0:	697a      	ldr	r2, [r7, #20]
 800caf2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	2201      	movs	r2, #1
 800caf8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cafe:	69bb      	ldr	r3, [r7, #24]
 800cb00:	0b1b      	lsrs	r3, r3, #12
 800cb02:	4413      	add	r3, r2
 800cb04:	4619      	mov	r1, r3
 800cb06:	68f8      	ldr	r0, [r7, #12]
 800cb08:	f7ff feae 	bl	800c868 <move_window>
 800cb0c:	4603      	mov	r3, r0
 800cb0e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cb10:	7ffb      	ldrb	r3, [r7, #31]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d17b      	bne.n	800cc0e <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cb1c:	69bb      	ldr	r3, [r7, #24]
 800cb1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cb22:	4413      	add	r3, r2
 800cb24:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800cb26:	68bb      	ldr	r3, [r7, #8]
 800cb28:	f003 0301 	and.w	r3, r3, #1
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d003      	beq.n	800cb38 <put_fat+0xea>
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	091b      	lsrs	r3, r3, #4
 800cb34:	b2db      	uxtb	r3, r3
 800cb36:	e00e      	b.n	800cb56 <put_fat+0x108>
 800cb38:	697b      	ldr	r3, [r7, #20]
 800cb3a:	781b      	ldrb	r3, [r3, #0]
 800cb3c:	b25b      	sxtb	r3, r3
 800cb3e:	f023 030f 	bic.w	r3, r3, #15
 800cb42:	b25a      	sxtb	r2, r3
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	0a1b      	lsrs	r3, r3, #8
 800cb48:	b25b      	sxtb	r3, r3
 800cb4a:	f003 030f 	and.w	r3, r3, #15
 800cb4e:	b25b      	sxtb	r3, r3
 800cb50:	4313      	orrs	r3, r2
 800cb52:	b25b      	sxtb	r3, r3
 800cb54:	b2db      	uxtb	r3, r3
 800cb56:	697a      	ldr	r2, [r7, #20]
 800cb58:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	2201      	movs	r2, #1
 800cb5e:	70da      	strb	r2, [r3, #3]
			break;
 800cb60:	e05a      	b.n	800cc18 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cb66:	68bb      	ldr	r3, [r7, #8]
 800cb68:	0adb      	lsrs	r3, r3, #11
 800cb6a:	4413      	add	r3, r2
 800cb6c:	4619      	mov	r1, r3
 800cb6e:	68f8      	ldr	r0, [r7, #12]
 800cb70:	f7ff fe7a 	bl	800c868 <move_window>
 800cb74:	4603      	mov	r3, r0
 800cb76:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cb78:	7ffb      	ldrb	r3, [r7, #31]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d149      	bne.n	800cc12 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cb84:	68bb      	ldr	r3, [r7, #8]
 800cb86:	0059      	lsls	r1, r3, #1
 800cb88:	f640 73fe 	movw	r3, #4094	; 0xffe
 800cb8c:	400b      	ands	r3, r1
 800cb8e:	4413      	add	r3, r2
 800cb90:	687a      	ldr	r2, [r7, #4]
 800cb92:	b292      	uxth	r2, r2
 800cb94:	4611      	mov	r1, r2
 800cb96:	4618      	mov	r0, r3
 800cb98:	f7ff fc2d 	bl	800c3f6 <st_word>
			fs->wflag = 1;
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	2201      	movs	r2, #1
 800cba0:	70da      	strb	r2, [r3, #3]
			break;
 800cba2:	e039      	b.n	800cc18 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cba8:	68bb      	ldr	r3, [r7, #8]
 800cbaa:	0a9b      	lsrs	r3, r3, #10
 800cbac:	4413      	add	r3, r2
 800cbae:	4619      	mov	r1, r3
 800cbb0:	68f8      	ldr	r0, [r7, #12]
 800cbb2:	f7ff fe59 	bl	800c868 <move_window>
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cbba:	7ffb      	ldrb	r3, [r7, #31]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d12a      	bne.n	800cc16 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cbcc:	68bb      	ldr	r3, [r7, #8]
 800cbce:	0099      	lsls	r1, r3, #2
 800cbd0:	f640 73fc 	movw	r3, #4092	; 0xffc
 800cbd4:	400b      	ands	r3, r1
 800cbd6:	4413      	add	r3, r2
 800cbd8:	4618      	mov	r0, r3
 800cbda:	f7ff fbe9 	bl	800c3b0 <ld_dword>
 800cbde:	4603      	mov	r3, r0
 800cbe0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800cbe4:	4323      	orrs	r3, r4
 800cbe6:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cbee:	68bb      	ldr	r3, [r7, #8]
 800cbf0:	0099      	lsls	r1, r3, #2
 800cbf2:	f640 73fc 	movw	r3, #4092	; 0xffc
 800cbf6:	400b      	ands	r3, r1
 800cbf8:	4413      	add	r3, r2
 800cbfa:	6879      	ldr	r1, [r7, #4]
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	f7ff fc15 	bl	800c42c <st_dword>
			fs->wflag = 1;
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	2201      	movs	r2, #1
 800cc06:	70da      	strb	r2, [r3, #3]
			break;
 800cc08:	e006      	b.n	800cc18 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800cc0a:	bf00      	nop
 800cc0c:	e004      	b.n	800cc18 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800cc0e:	bf00      	nop
 800cc10:	e002      	b.n	800cc18 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800cc12:	bf00      	nop
 800cc14:	e000      	b.n	800cc18 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800cc16:	bf00      	nop
		}
	}
	return res;
 800cc18:	7ffb      	ldrb	r3, [r7, #31]
}
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	3724      	adds	r7, #36	; 0x24
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	bd90      	pop	{r4, r7, pc}

0800cc22 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800cc22:	b580      	push	{r7, lr}
 800cc24:	b088      	sub	sp, #32
 800cc26:	af00      	add	r7, sp, #0
 800cc28:	60f8      	str	r0, [r7, #12]
 800cc2a:	60b9      	str	r1, [r7, #8]
 800cc2c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800cc2e:	2300      	movs	r3, #0
 800cc30:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800cc38:	68bb      	ldr	r3, [r7, #8]
 800cc3a:	2b01      	cmp	r3, #1
 800cc3c:	d904      	bls.n	800cc48 <remove_chain+0x26>
 800cc3e:	69bb      	ldr	r3, [r7, #24]
 800cc40:	699b      	ldr	r3, [r3, #24]
 800cc42:	68ba      	ldr	r2, [r7, #8]
 800cc44:	429a      	cmp	r2, r3
 800cc46:	d301      	bcc.n	800cc4c <remove_chain+0x2a>
 800cc48:	2302      	movs	r3, #2
 800cc4a:	e04b      	b.n	800cce4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d00c      	beq.n	800cc6c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800cc52:	f04f 32ff 	mov.w	r2, #4294967295
 800cc56:	6879      	ldr	r1, [r7, #4]
 800cc58:	69b8      	ldr	r0, [r7, #24]
 800cc5a:	f7ff fef8 	bl	800ca4e <put_fat>
 800cc5e:	4603      	mov	r3, r0
 800cc60:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800cc62:	7ffb      	ldrb	r3, [r7, #31]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d001      	beq.n	800cc6c <remove_chain+0x4a>
 800cc68:	7ffb      	ldrb	r3, [r7, #31]
 800cc6a:	e03b      	b.n	800cce4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800cc6c:	68b9      	ldr	r1, [r7, #8]
 800cc6e:	68f8      	ldr	r0, [r7, #12]
 800cc70:	f7ff fe46 	bl	800c900 <get_fat>
 800cc74:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800cc76:	697b      	ldr	r3, [r7, #20]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d031      	beq.n	800cce0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800cc7c:	697b      	ldr	r3, [r7, #20]
 800cc7e:	2b01      	cmp	r3, #1
 800cc80:	d101      	bne.n	800cc86 <remove_chain+0x64>
 800cc82:	2302      	movs	r3, #2
 800cc84:	e02e      	b.n	800cce4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800cc86:	697b      	ldr	r3, [r7, #20]
 800cc88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc8c:	d101      	bne.n	800cc92 <remove_chain+0x70>
 800cc8e:	2301      	movs	r3, #1
 800cc90:	e028      	b.n	800cce4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800cc92:	2200      	movs	r2, #0
 800cc94:	68b9      	ldr	r1, [r7, #8]
 800cc96:	69b8      	ldr	r0, [r7, #24]
 800cc98:	f7ff fed9 	bl	800ca4e <put_fat>
 800cc9c:	4603      	mov	r3, r0
 800cc9e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800cca0:	7ffb      	ldrb	r3, [r7, #31]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d001      	beq.n	800ccaa <remove_chain+0x88>
 800cca6:	7ffb      	ldrb	r3, [r7, #31]
 800cca8:	e01c      	b.n	800cce4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800ccaa:	69bb      	ldr	r3, [r7, #24]
 800ccac:	695a      	ldr	r2, [r3, #20]
 800ccae:	69bb      	ldr	r3, [r7, #24]
 800ccb0:	699b      	ldr	r3, [r3, #24]
 800ccb2:	3b02      	subs	r3, #2
 800ccb4:	429a      	cmp	r2, r3
 800ccb6:	d20b      	bcs.n	800ccd0 <remove_chain+0xae>
			fs->free_clst++;
 800ccb8:	69bb      	ldr	r3, [r7, #24]
 800ccba:	695b      	ldr	r3, [r3, #20]
 800ccbc:	1c5a      	adds	r2, r3, #1
 800ccbe:	69bb      	ldr	r3, [r7, #24]
 800ccc0:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800ccc2:	69bb      	ldr	r3, [r7, #24]
 800ccc4:	791b      	ldrb	r3, [r3, #4]
 800ccc6:	f043 0301 	orr.w	r3, r3, #1
 800ccca:	b2da      	uxtb	r2, r3
 800cccc:	69bb      	ldr	r3, [r7, #24]
 800ccce:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800ccd0:	697b      	ldr	r3, [r7, #20]
 800ccd2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800ccd4:	69bb      	ldr	r3, [r7, #24]
 800ccd6:	699b      	ldr	r3, [r3, #24]
 800ccd8:	68ba      	ldr	r2, [r7, #8]
 800ccda:	429a      	cmp	r2, r3
 800ccdc:	d3c6      	bcc.n	800cc6c <remove_chain+0x4a>
 800ccde:	e000      	b.n	800cce2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800cce0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800cce2:	2300      	movs	r3, #0
}
 800cce4:	4618      	mov	r0, r3
 800cce6:	3720      	adds	r7, #32
 800cce8:	46bd      	mov	sp, r7
 800ccea:	bd80      	pop	{r7, pc}

0800ccec <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	b088      	sub	sp, #32
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
 800ccf4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800ccfc:	683b      	ldr	r3, [r7, #0]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d10d      	bne.n	800cd1e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800cd02:	693b      	ldr	r3, [r7, #16]
 800cd04:	691b      	ldr	r3, [r3, #16]
 800cd06:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800cd08:	69bb      	ldr	r3, [r7, #24]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d004      	beq.n	800cd18 <create_chain+0x2c>
 800cd0e:	693b      	ldr	r3, [r7, #16]
 800cd10:	699b      	ldr	r3, [r3, #24]
 800cd12:	69ba      	ldr	r2, [r7, #24]
 800cd14:	429a      	cmp	r2, r3
 800cd16:	d31b      	bcc.n	800cd50 <create_chain+0x64>
 800cd18:	2301      	movs	r3, #1
 800cd1a:	61bb      	str	r3, [r7, #24]
 800cd1c:	e018      	b.n	800cd50 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800cd1e:	6839      	ldr	r1, [r7, #0]
 800cd20:	6878      	ldr	r0, [r7, #4]
 800cd22:	f7ff fded 	bl	800c900 <get_fat>
 800cd26:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	2b01      	cmp	r3, #1
 800cd2c:	d801      	bhi.n	800cd32 <create_chain+0x46>
 800cd2e:	2301      	movs	r3, #1
 800cd30:	e070      	b.n	800ce14 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd38:	d101      	bne.n	800cd3e <create_chain+0x52>
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	e06a      	b.n	800ce14 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800cd3e:	693b      	ldr	r3, [r7, #16]
 800cd40:	699b      	ldr	r3, [r3, #24]
 800cd42:	68fa      	ldr	r2, [r7, #12]
 800cd44:	429a      	cmp	r2, r3
 800cd46:	d201      	bcs.n	800cd4c <create_chain+0x60>
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	e063      	b.n	800ce14 <create_chain+0x128>
		scl = clst;
 800cd4c:	683b      	ldr	r3, [r7, #0]
 800cd4e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800cd50:	69bb      	ldr	r3, [r7, #24]
 800cd52:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800cd54:	69fb      	ldr	r3, [r7, #28]
 800cd56:	3301      	adds	r3, #1
 800cd58:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800cd5a:	693b      	ldr	r3, [r7, #16]
 800cd5c:	699b      	ldr	r3, [r3, #24]
 800cd5e:	69fa      	ldr	r2, [r7, #28]
 800cd60:	429a      	cmp	r2, r3
 800cd62:	d307      	bcc.n	800cd74 <create_chain+0x88>
				ncl = 2;
 800cd64:	2302      	movs	r3, #2
 800cd66:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800cd68:	69fa      	ldr	r2, [r7, #28]
 800cd6a:	69bb      	ldr	r3, [r7, #24]
 800cd6c:	429a      	cmp	r2, r3
 800cd6e:	d901      	bls.n	800cd74 <create_chain+0x88>
 800cd70:	2300      	movs	r3, #0
 800cd72:	e04f      	b.n	800ce14 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800cd74:	69f9      	ldr	r1, [r7, #28]
 800cd76:	6878      	ldr	r0, [r7, #4]
 800cd78:	f7ff fdc2 	bl	800c900 <get_fat>
 800cd7c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d00e      	beq.n	800cda2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	2b01      	cmp	r3, #1
 800cd88:	d003      	beq.n	800cd92 <create_chain+0xa6>
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd90:	d101      	bne.n	800cd96 <create_chain+0xaa>
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	e03e      	b.n	800ce14 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800cd96:	69fa      	ldr	r2, [r7, #28]
 800cd98:	69bb      	ldr	r3, [r7, #24]
 800cd9a:	429a      	cmp	r2, r3
 800cd9c:	d1da      	bne.n	800cd54 <create_chain+0x68>
 800cd9e:	2300      	movs	r3, #0
 800cda0:	e038      	b.n	800ce14 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800cda2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800cda4:	f04f 32ff 	mov.w	r2, #4294967295
 800cda8:	69f9      	ldr	r1, [r7, #28]
 800cdaa:	6938      	ldr	r0, [r7, #16]
 800cdac:	f7ff fe4f 	bl	800ca4e <put_fat>
 800cdb0:	4603      	mov	r3, r0
 800cdb2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800cdb4:	7dfb      	ldrb	r3, [r7, #23]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d109      	bne.n	800cdce <create_chain+0xe2>
 800cdba:	683b      	ldr	r3, [r7, #0]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d006      	beq.n	800cdce <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800cdc0:	69fa      	ldr	r2, [r7, #28]
 800cdc2:	6839      	ldr	r1, [r7, #0]
 800cdc4:	6938      	ldr	r0, [r7, #16]
 800cdc6:	f7ff fe42 	bl	800ca4e <put_fat>
 800cdca:	4603      	mov	r3, r0
 800cdcc:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800cdce:	7dfb      	ldrb	r3, [r7, #23]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d116      	bne.n	800ce02 <create_chain+0x116>
		fs->last_clst = ncl;
 800cdd4:	693b      	ldr	r3, [r7, #16]
 800cdd6:	69fa      	ldr	r2, [r7, #28]
 800cdd8:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800cdda:	693b      	ldr	r3, [r7, #16]
 800cddc:	695a      	ldr	r2, [r3, #20]
 800cdde:	693b      	ldr	r3, [r7, #16]
 800cde0:	699b      	ldr	r3, [r3, #24]
 800cde2:	3b02      	subs	r3, #2
 800cde4:	429a      	cmp	r2, r3
 800cde6:	d804      	bhi.n	800cdf2 <create_chain+0x106>
 800cde8:	693b      	ldr	r3, [r7, #16]
 800cdea:	695b      	ldr	r3, [r3, #20]
 800cdec:	1e5a      	subs	r2, r3, #1
 800cdee:	693b      	ldr	r3, [r7, #16]
 800cdf0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800cdf2:	693b      	ldr	r3, [r7, #16]
 800cdf4:	791b      	ldrb	r3, [r3, #4]
 800cdf6:	f043 0301 	orr.w	r3, r3, #1
 800cdfa:	b2da      	uxtb	r2, r3
 800cdfc:	693b      	ldr	r3, [r7, #16]
 800cdfe:	711a      	strb	r2, [r3, #4]
 800ce00:	e007      	b.n	800ce12 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ce02:	7dfb      	ldrb	r3, [r7, #23]
 800ce04:	2b01      	cmp	r3, #1
 800ce06:	d102      	bne.n	800ce0e <create_chain+0x122>
 800ce08:	f04f 33ff 	mov.w	r3, #4294967295
 800ce0c:	e000      	b.n	800ce10 <create_chain+0x124>
 800ce0e:	2301      	movs	r3, #1
 800ce10:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800ce12:	69fb      	ldr	r3, [r7, #28]
}
 800ce14:	4618      	mov	r0, r3
 800ce16:	3720      	adds	r7, #32
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	bd80      	pop	{r7, pc}

0800ce1c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800ce1c:	b480      	push	{r7}
 800ce1e:	b087      	sub	sp, #28
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
 800ce24:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce30:	3304      	adds	r3, #4
 800ce32:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ce34:	683b      	ldr	r3, [r7, #0]
 800ce36:	0b1b      	lsrs	r3, r3, #12
 800ce38:	68fa      	ldr	r2, [r7, #12]
 800ce3a:	8952      	ldrh	r2, [r2, #10]
 800ce3c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ce40:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ce42:	693b      	ldr	r3, [r7, #16]
 800ce44:	1d1a      	adds	r2, r3, #4
 800ce46:	613a      	str	r2, [r7, #16]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ce4c:	68bb      	ldr	r3, [r7, #8]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d101      	bne.n	800ce56 <clmt_clust+0x3a>
 800ce52:	2300      	movs	r3, #0
 800ce54:	e010      	b.n	800ce78 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800ce56:	697a      	ldr	r2, [r7, #20]
 800ce58:	68bb      	ldr	r3, [r7, #8]
 800ce5a:	429a      	cmp	r2, r3
 800ce5c:	d307      	bcc.n	800ce6e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800ce5e:	697a      	ldr	r2, [r7, #20]
 800ce60:	68bb      	ldr	r3, [r7, #8]
 800ce62:	1ad3      	subs	r3, r2, r3
 800ce64:	617b      	str	r3, [r7, #20]
 800ce66:	693b      	ldr	r3, [r7, #16]
 800ce68:	3304      	adds	r3, #4
 800ce6a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ce6c:	e7e9      	b.n	800ce42 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800ce6e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800ce70:	693b      	ldr	r3, [r7, #16]
 800ce72:	681a      	ldr	r2, [r3, #0]
 800ce74:	697b      	ldr	r3, [r7, #20]
 800ce76:	4413      	add	r3, r2
}
 800ce78:	4618      	mov	r0, r3
 800ce7a:	371c      	adds	r7, #28
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce82:	4770      	bx	lr

0800ce84 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800ce84:	b580      	push	{r7, lr}
 800ce86:	b086      	sub	sp, #24
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
 800ce8c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800ce94:	683b      	ldr	r3, [r7, #0]
 800ce96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ce9a:	d204      	bcs.n	800cea6 <dir_sdi+0x22>
 800ce9c:	683b      	ldr	r3, [r7, #0]
 800ce9e:	f003 031f 	and.w	r3, r3, #31
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d001      	beq.n	800ceaa <dir_sdi+0x26>
		return FR_INT_ERR;
 800cea6:	2302      	movs	r3, #2
 800cea8:	e063      	b.n	800cf72 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	683a      	ldr	r2, [r7, #0]
 800ceae:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	689b      	ldr	r3, [r3, #8]
 800ceb4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ceb6:	697b      	ldr	r3, [r7, #20]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d106      	bne.n	800ceca <dir_sdi+0x46>
 800cebc:	693b      	ldr	r3, [r7, #16]
 800cebe:	781b      	ldrb	r3, [r3, #0]
 800cec0:	2b02      	cmp	r3, #2
 800cec2:	d902      	bls.n	800ceca <dir_sdi+0x46>
		clst = fs->dirbase;
 800cec4:	693b      	ldr	r3, [r7, #16]
 800cec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cec8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ceca:	697b      	ldr	r3, [r7, #20]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d10c      	bne.n	800ceea <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ced0:	683b      	ldr	r3, [r7, #0]
 800ced2:	095b      	lsrs	r3, r3, #5
 800ced4:	693a      	ldr	r2, [r7, #16]
 800ced6:	8912      	ldrh	r2, [r2, #8]
 800ced8:	4293      	cmp	r3, r2
 800ceda:	d301      	bcc.n	800cee0 <dir_sdi+0x5c>
 800cedc:	2302      	movs	r3, #2
 800cede:	e048      	b.n	800cf72 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800cee0:	693b      	ldr	r3, [r7, #16]
 800cee2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	61da      	str	r2, [r3, #28]
 800cee8:	e029      	b.n	800cf3e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800ceea:	693b      	ldr	r3, [r7, #16]
 800ceec:	895b      	ldrh	r3, [r3, #10]
 800ceee:	031b      	lsls	r3, r3, #12
 800cef0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800cef2:	e019      	b.n	800cf28 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	6979      	ldr	r1, [r7, #20]
 800cef8:	4618      	mov	r0, r3
 800cefa:	f7ff fd01 	bl	800c900 <get_fat>
 800cefe:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cf00:	697b      	ldr	r3, [r7, #20]
 800cf02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf06:	d101      	bne.n	800cf0c <dir_sdi+0x88>
 800cf08:	2301      	movs	r3, #1
 800cf0a:	e032      	b.n	800cf72 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800cf0c:	697b      	ldr	r3, [r7, #20]
 800cf0e:	2b01      	cmp	r3, #1
 800cf10:	d904      	bls.n	800cf1c <dir_sdi+0x98>
 800cf12:	693b      	ldr	r3, [r7, #16]
 800cf14:	699b      	ldr	r3, [r3, #24]
 800cf16:	697a      	ldr	r2, [r7, #20]
 800cf18:	429a      	cmp	r2, r3
 800cf1a:	d301      	bcc.n	800cf20 <dir_sdi+0x9c>
 800cf1c:	2302      	movs	r3, #2
 800cf1e:	e028      	b.n	800cf72 <dir_sdi+0xee>
			ofs -= csz;
 800cf20:	683a      	ldr	r2, [r7, #0]
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	1ad3      	subs	r3, r2, r3
 800cf26:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800cf28:	683a      	ldr	r2, [r7, #0]
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	429a      	cmp	r2, r3
 800cf2e:	d2e1      	bcs.n	800cef4 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800cf30:	6979      	ldr	r1, [r7, #20]
 800cf32:	6938      	ldr	r0, [r7, #16]
 800cf34:	f7ff fcc5 	bl	800c8c2 <clust2sect>
 800cf38:	4602      	mov	r2, r0
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	697a      	ldr	r2, [r7, #20]
 800cf42:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	69db      	ldr	r3, [r3, #28]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d101      	bne.n	800cf50 <dir_sdi+0xcc>
 800cf4c:	2302      	movs	r3, #2
 800cf4e:	e010      	b.n	800cf72 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	69da      	ldr	r2, [r3, #28]
 800cf54:	683b      	ldr	r3, [r7, #0]
 800cf56:	0b1b      	lsrs	r3, r3, #12
 800cf58:	441a      	add	r2, r3
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800cf5e:	693b      	ldr	r3, [r7, #16]
 800cf60:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cf64:	683b      	ldr	r3, [r7, #0]
 800cf66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cf6a:	441a      	add	r2, r3
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800cf70:	2300      	movs	r3, #0
}
 800cf72:	4618      	mov	r0, r3
 800cf74:	3718      	adds	r7, #24
 800cf76:	46bd      	mov	sp, r7
 800cf78:	bd80      	pop	{r7, pc}

0800cf7a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800cf7a:	b580      	push	{r7, lr}
 800cf7c:	b086      	sub	sp, #24
 800cf7e:	af00      	add	r7, sp, #0
 800cf80:	6078      	str	r0, [r7, #4]
 800cf82:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	695b      	ldr	r3, [r3, #20]
 800cf8e:	3320      	adds	r3, #32
 800cf90:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	69db      	ldr	r3, [r3, #28]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d003      	beq.n	800cfa2 <dir_next+0x28>
 800cf9a:	68bb      	ldr	r3, [r7, #8]
 800cf9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cfa0:	d301      	bcc.n	800cfa6 <dir_next+0x2c>
 800cfa2:	2304      	movs	r3, #4
 800cfa4:	e0aa      	b.n	800d0fc <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800cfa6:	68bb      	ldr	r3, [r7, #8]
 800cfa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	f040 8098 	bne.w	800d0e2 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	69db      	ldr	r3, [r3, #28]
 800cfb6:	1c5a      	adds	r2, r3, #1
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	699b      	ldr	r3, [r3, #24]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d10b      	bne.n	800cfdc <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800cfc4:	68bb      	ldr	r3, [r7, #8]
 800cfc6:	095b      	lsrs	r3, r3, #5
 800cfc8:	68fa      	ldr	r2, [r7, #12]
 800cfca:	8912      	ldrh	r2, [r2, #8]
 800cfcc:	4293      	cmp	r3, r2
 800cfce:	f0c0 8088 	bcc.w	800d0e2 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	61da      	str	r2, [r3, #28]
 800cfd8:	2304      	movs	r3, #4
 800cfda:	e08f      	b.n	800d0fc <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800cfdc:	68bb      	ldr	r3, [r7, #8]
 800cfde:	0b1b      	lsrs	r3, r3, #12
 800cfe0:	68fa      	ldr	r2, [r7, #12]
 800cfe2:	8952      	ldrh	r2, [r2, #10]
 800cfe4:	3a01      	subs	r2, #1
 800cfe6:	4013      	ands	r3, r2
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d17a      	bne.n	800d0e2 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800cfec:	687a      	ldr	r2, [r7, #4]
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	699b      	ldr	r3, [r3, #24]
 800cff2:	4619      	mov	r1, r3
 800cff4:	4610      	mov	r0, r2
 800cff6:	f7ff fc83 	bl	800c900 <get_fat>
 800cffa:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800cffc:	697b      	ldr	r3, [r7, #20]
 800cffe:	2b01      	cmp	r3, #1
 800d000:	d801      	bhi.n	800d006 <dir_next+0x8c>
 800d002:	2302      	movs	r3, #2
 800d004:	e07a      	b.n	800d0fc <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d006:	697b      	ldr	r3, [r7, #20]
 800d008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d00c:	d101      	bne.n	800d012 <dir_next+0x98>
 800d00e:	2301      	movs	r3, #1
 800d010:	e074      	b.n	800d0fc <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	699b      	ldr	r3, [r3, #24]
 800d016:	697a      	ldr	r2, [r7, #20]
 800d018:	429a      	cmp	r2, r3
 800d01a:	d358      	bcc.n	800d0ce <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800d01c:	683b      	ldr	r3, [r7, #0]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d104      	bne.n	800d02c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	2200      	movs	r2, #0
 800d026:	61da      	str	r2, [r3, #28]
 800d028:	2304      	movs	r3, #4
 800d02a:	e067      	b.n	800d0fc <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800d02c:	687a      	ldr	r2, [r7, #4]
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	699b      	ldr	r3, [r3, #24]
 800d032:	4619      	mov	r1, r3
 800d034:	4610      	mov	r0, r2
 800d036:	f7ff fe59 	bl	800ccec <create_chain>
 800d03a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d03c:	697b      	ldr	r3, [r7, #20]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d101      	bne.n	800d046 <dir_next+0xcc>
 800d042:	2307      	movs	r3, #7
 800d044:	e05a      	b.n	800d0fc <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800d046:	697b      	ldr	r3, [r7, #20]
 800d048:	2b01      	cmp	r3, #1
 800d04a:	d101      	bne.n	800d050 <dir_next+0xd6>
 800d04c:	2302      	movs	r3, #2
 800d04e:	e055      	b.n	800d0fc <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d050:	697b      	ldr	r3, [r7, #20]
 800d052:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d056:	d101      	bne.n	800d05c <dir_next+0xe2>
 800d058:	2301      	movs	r3, #1
 800d05a:	e04f      	b.n	800d0fc <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800d05c:	68f8      	ldr	r0, [r7, #12]
 800d05e:	f7ff fbbf 	bl	800c7e0 <sync_window>
 800d062:	4603      	mov	r3, r0
 800d064:	2b00      	cmp	r3, #0
 800d066:	d001      	beq.n	800d06c <dir_next+0xf2>
 800d068:	2301      	movs	r3, #1
 800d06a:	e047      	b.n	800d0fc <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	3334      	adds	r3, #52	; 0x34
 800d070:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d074:	2100      	movs	r1, #0
 800d076:	4618      	mov	r0, r3
 800d078:	f7ff fa25 	bl	800c4c6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d07c:	2300      	movs	r3, #0
 800d07e:	613b      	str	r3, [r7, #16]
 800d080:	6979      	ldr	r1, [r7, #20]
 800d082:	68f8      	ldr	r0, [r7, #12]
 800d084:	f7ff fc1d 	bl	800c8c2 <clust2sect>
 800d088:	4602      	mov	r2, r0
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	631a      	str	r2, [r3, #48]	; 0x30
 800d08e:	e012      	b.n	800d0b6 <dir_next+0x13c>
						fs->wflag = 1;
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	2201      	movs	r2, #1
 800d094:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800d096:	68f8      	ldr	r0, [r7, #12]
 800d098:	f7ff fba2 	bl	800c7e0 <sync_window>
 800d09c:	4603      	mov	r3, r0
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d001      	beq.n	800d0a6 <dir_next+0x12c>
 800d0a2:	2301      	movs	r3, #1
 800d0a4:	e02a      	b.n	800d0fc <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d0a6:	693b      	ldr	r3, [r7, #16]
 800d0a8:	3301      	adds	r3, #1
 800d0aa:	613b      	str	r3, [r7, #16]
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0b0:	1c5a      	adds	r2, r3, #1
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	631a      	str	r2, [r3, #48]	; 0x30
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	895b      	ldrh	r3, [r3, #10]
 800d0ba:	461a      	mov	r2, r3
 800d0bc:	693b      	ldr	r3, [r7, #16]
 800d0be:	4293      	cmp	r3, r2
 800d0c0:	d3e6      	bcc.n	800d090 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d0c6:	693b      	ldr	r3, [r7, #16]
 800d0c8:	1ad2      	subs	r2, r2, r3
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	697a      	ldr	r2, [r7, #20]
 800d0d2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800d0d4:	6979      	ldr	r1, [r7, #20]
 800d0d6:	68f8      	ldr	r0, [r7, #12]
 800d0d8:	f7ff fbf3 	bl	800c8c2 <clust2sect>
 800d0dc:	4602      	mov	r2, r0
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	68ba      	ldr	r2, [r7, #8]
 800d0e6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d0ee:	68bb      	ldr	r3, [r7, #8]
 800d0f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d0f4:	441a      	add	r2, r3
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d0fa:	2300      	movs	r3, #0
}
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	3718      	adds	r7, #24
 800d100:	46bd      	mov	sp, r7
 800d102:	bd80      	pop	{r7, pc}

0800d104 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800d104:	b580      	push	{r7, lr}
 800d106:	b086      	sub	sp, #24
 800d108:	af00      	add	r7, sp, #0
 800d10a:	6078      	str	r0, [r7, #4]
 800d10c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800d114:	2100      	movs	r1, #0
 800d116:	6878      	ldr	r0, [r7, #4]
 800d118:	f7ff feb4 	bl	800ce84 <dir_sdi>
 800d11c:	4603      	mov	r3, r0
 800d11e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d120:	7dfb      	ldrb	r3, [r7, #23]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d12b      	bne.n	800d17e <dir_alloc+0x7a>
		n = 0;
 800d126:	2300      	movs	r3, #0
 800d128:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	69db      	ldr	r3, [r3, #28]
 800d12e:	4619      	mov	r1, r3
 800d130:	68f8      	ldr	r0, [r7, #12]
 800d132:	f7ff fb99 	bl	800c868 <move_window>
 800d136:	4603      	mov	r3, r0
 800d138:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d13a:	7dfb      	ldrb	r3, [r7, #23]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d11d      	bne.n	800d17c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	6a1b      	ldr	r3, [r3, #32]
 800d144:	781b      	ldrb	r3, [r3, #0]
 800d146:	2be5      	cmp	r3, #229	; 0xe5
 800d148:	d004      	beq.n	800d154 <dir_alloc+0x50>
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	6a1b      	ldr	r3, [r3, #32]
 800d14e:	781b      	ldrb	r3, [r3, #0]
 800d150:	2b00      	cmp	r3, #0
 800d152:	d107      	bne.n	800d164 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800d154:	693b      	ldr	r3, [r7, #16]
 800d156:	3301      	adds	r3, #1
 800d158:	613b      	str	r3, [r7, #16]
 800d15a:	693a      	ldr	r2, [r7, #16]
 800d15c:	683b      	ldr	r3, [r7, #0]
 800d15e:	429a      	cmp	r2, r3
 800d160:	d102      	bne.n	800d168 <dir_alloc+0x64>
 800d162:	e00c      	b.n	800d17e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800d164:	2300      	movs	r3, #0
 800d166:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800d168:	2101      	movs	r1, #1
 800d16a:	6878      	ldr	r0, [r7, #4]
 800d16c:	f7ff ff05 	bl	800cf7a <dir_next>
 800d170:	4603      	mov	r3, r0
 800d172:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800d174:	7dfb      	ldrb	r3, [r7, #23]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d0d7      	beq.n	800d12a <dir_alloc+0x26>
 800d17a:	e000      	b.n	800d17e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800d17c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800d17e:	7dfb      	ldrb	r3, [r7, #23]
 800d180:	2b04      	cmp	r3, #4
 800d182:	d101      	bne.n	800d188 <dir_alloc+0x84>
 800d184:	2307      	movs	r3, #7
 800d186:	75fb      	strb	r3, [r7, #23]
	return res;
 800d188:	7dfb      	ldrb	r3, [r7, #23]
}
 800d18a:	4618      	mov	r0, r3
 800d18c:	3718      	adds	r7, #24
 800d18e:	46bd      	mov	sp, r7
 800d190:	bd80      	pop	{r7, pc}

0800d192 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800d192:	b580      	push	{r7, lr}
 800d194:	b084      	sub	sp, #16
 800d196:	af00      	add	r7, sp, #0
 800d198:	6078      	str	r0, [r7, #4]
 800d19a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800d19c:	683b      	ldr	r3, [r7, #0]
 800d19e:	331a      	adds	r3, #26
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	f7ff f8ed 	bl	800c380 <ld_word>
 800d1a6:	4603      	mov	r3, r0
 800d1a8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	781b      	ldrb	r3, [r3, #0]
 800d1ae:	2b03      	cmp	r3, #3
 800d1b0:	d109      	bne.n	800d1c6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d1b2:	683b      	ldr	r3, [r7, #0]
 800d1b4:	3314      	adds	r3, #20
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	f7ff f8e2 	bl	800c380 <ld_word>
 800d1bc:	4603      	mov	r3, r0
 800d1be:	041b      	lsls	r3, r3, #16
 800d1c0:	68fa      	ldr	r2, [r7, #12]
 800d1c2:	4313      	orrs	r3, r2
 800d1c4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800d1c6:	68fb      	ldr	r3, [r7, #12]
}
 800d1c8:	4618      	mov	r0, r3
 800d1ca:	3710      	adds	r7, #16
 800d1cc:	46bd      	mov	sp, r7
 800d1ce:	bd80      	pop	{r7, pc}

0800d1d0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800d1d0:	b580      	push	{r7, lr}
 800d1d2:	b084      	sub	sp, #16
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	60f8      	str	r0, [r7, #12]
 800d1d8:	60b9      	str	r1, [r7, #8]
 800d1da:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800d1dc:	68bb      	ldr	r3, [r7, #8]
 800d1de:	331a      	adds	r3, #26
 800d1e0:	687a      	ldr	r2, [r7, #4]
 800d1e2:	b292      	uxth	r2, r2
 800d1e4:	4611      	mov	r1, r2
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	f7ff f905 	bl	800c3f6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	781b      	ldrb	r3, [r3, #0]
 800d1f0:	2b03      	cmp	r3, #3
 800d1f2:	d109      	bne.n	800d208 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800d1f4:	68bb      	ldr	r3, [r7, #8]
 800d1f6:	f103 0214 	add.w	r2, r3, #20
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	0c1b      	lsrs	r3, r3, #16
 800d1fe:	b29b      	uxth	r3, r3
 800d200:	4619      	mov	r1, r3
 800d202:	4610      	mov	r0, r2
 800d204:	f7ff f8f7 	bl	800c3f6 <st_word>
	}
}
 800d208:	bf00      	nop
 800d20a:	3710      	adds	r7, #16
 800d20c:	46bd      	mov	sp, r7
 800d20e:	bd80      	pop	{r7, pc}

0800d210 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800d210:	b590      	push	{r4, r7, lr}
 800d212:	b087      	sub	sp, #28
 800d214:	af00      	add	r7, sp, #0
 800d216:	6078      	str	r0, [r7, #4]
 800d218:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800d21a:	683b      	ldr	r3, [r7, #0]
 800d21c:	331a      	adds	r3, #26
 800d21e:	4618      	mov	r0, r3
 800d220:	f7ff f8ae 	bl	800c380 <ld_word>
 800d224:	4603      	mov	r3, r0
 800d226:	2b00      	cmp	r3, #0
 800d228:	d001      	beq.n	800d22e <cmp_lfn+0x1e>
 800d22a:	2300      	movs	r3, #0
 800d22c:	e059      	b.n	800d2e2 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800d22e:	683b      	ldr	r3, [r7, #0]
 800d230:	781b      	ldrb	r3, [r3, #0]
 800d232:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d236:	1e5a      	subs	r2, r3, #1
 800d238:	4613      	mov	r3, r2
 800d23a:	005b      	lsls	r3, r3, #1
 800d23c:	4413      	add	r3, r2
 800d23e:	009b      	lsls	r3, r3, #2
 800d240:	4413      	add	r3, r2
 800d242:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d244:	2301      	movs	r3, #1
 800d246:	81fb      	strh	r3, [r7, #14]
 800d248:	2300      	movs	r3, #0
 800d24a:	613b      	str	r3, [r7, #16]
 800d24c:	e033      	b.n	800d2b6 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800d24e:	4a27      	ldr	r2, [pc, #156]	; (800d2ec <cmp_lfn+0xdc>)
 800d250:	693b      	ldr	r3, [r7, #16]
 800d252:	4413      	add	r3, r2
 800d254:	781b      	ldrb	r3, [r3, #0]
 800d256:	461a      	mov	r2, r3
 800d258:	683b      	ldr	r3, [r7, #0]
 800d25a:	4413      	add	r3, r2
 800d25c:	4618      	mov	r0, r3
 800d25e:	f7ff f88f 	bl	800c380 <ld_word>
 800d262:	4603      	mov	r3, r0
 800d264:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800d266:	89fb      	ldrh	r3, [r7, #14]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d01a      	beq.n	800d2a2 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800d26c:	697b      	ldr	r3, [r7, #20]
 800d26e:	2bfe      	cmp	r3, #254	; 0xfe
 800d270:	d812      	bhi.n	800d298 <cmp_lfn+0x88>
 800d272:	89bb      	ldrh	r3, [r7, #12]
 800d274:	4618      	mov	r0, r3
 800d276:	f002 f915 	bl	800f4a4 <ff_wtoupper>
 800d27a:	4603      	mov	r3, r0
 800d27c:	461c      	mov	r4, r3
 800d27e:	697b      	ldr	r3, [r7, #20]
 800d280:	1c5a      	adds	r2, r3, #1
 800d282:	617a      	str	r2, [r7, #20]
 800d284:	005b      	lsls	r3, r3, #1
 800d286:	687a      	ldr	r2, [r7, #4]
 800d288:	4413      	add	r3, r2
 800d28a:	881b      	ldrh	r3, [r3, #0]
 800d28c:	4618      	mov	r0, r3
 800d28e:	f002 f909 	bl	800f4a4 <ff_wtoupper>
 800d292:	4603      	mov	r3, r0
 800d294:	429c      	cmp	r4, r3
 800d296:	d001      	beq.n	800d29c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800d298:	2300      	movs	r3, #0
 800d29a:	e022      	b.n	800d2e2 <cmp_lfn+0xd2>
			}
			wc = uc;
 800d29c:	89bb      	ldrh	r3, [r7, #12]
 800d29e:	81fb      	strh	r3, [r7, #14]
 800d2a0:	e006      	b.n	800d2b0 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d2a2:	89bb      	ldrh	r3, [r7, #12]
 800d2a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d2a8:	4293      	cmp	r3, r2
 800d2aa:	d001      	beq.n	800d2b0 <cmp_lfn+0xa0>
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	e018      	b.n	800d2e2 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d2b0:	693b      	ldr	r3, [r7, #16]
 800d2b2:	3301      	adds	r3, #1
 800d2b4:	613b      	str	r3, [r7, #16]
 800d2b6:	693b      	ldr	r3, [r7, #16]
 800d2b8:	2b0c      	cmp	r3, #12
 800d2ba:	d9c8      	bls.n	800d24e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800d2bc:	683b      	ldr	r3, [r7, #0]
 800d2be:	781b      	ldrb	r3, [r3, #0]
 800d2c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d00b      	beq.n	800d2e0 <cmp_lfn+0xd0>
 800d2c8:	89fb      	ldrh	r3, [r7, #14]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d008      	beq.n	800d2e0 <cmp_lfn+0xd0>
 800d2ce:	697b      	ldr	r3, [r7, #20]
 800d2d0:	005b      	lsls	r3, r3, #1
 800d2d2:	687a      	ldr	r2, [r7, #4]
 800d2d4:	4413      	add	r3, r2
 800d2d6:	881b      	ldrh	r3, [r3, #0]
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d001      	beq.n	800d2e0 <cmp_lfn+0xd0>
 800d2dc:	2300      	movs	r3, #0
 800d2de:	e000      	b.n	800d2e2 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800d2e0:	2301      	movs	r3, #1
}
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	371c      	adds	r7, #28
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	bd90      	pop	{r4, r7, pc}
 800d2ea:	bf00      	nop
 800d2ec:	08013184 	.word	0x08013184

0800d2f0 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800d2f0:	b580      	push	{r7, lr}
 800d2f2:	b088      	sub	sp, #32
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	60f8      	str	r0, [r7, #12]
 800d2f8:	60b9      	str	r1, [r7, #8]
 800d2fa:	4611      	mov	r1, r2
 800d2fc:	461a      	mov	r2, r3
 800d2fe:	460b      	mov	r3, r1
 800d300:	71fb      	strb	r3, [r7, #7]
 800d302:	4613      	mov	r3, r2
 800d304:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800d306:	68bb      	ldr	r3, [r7, #8]
 800d308:	330d      	adds	r3, #13
 800d30a:	79ba      	ldrb	r2, [r7, #6]
 800d30c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800d30e:	68bb      	ldr	r3, [r7, #8]
 800d310:	330b      	adds	r3, #11
 800d312:	220f      	movs	r2, #15
 800d314:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800d316:	68bb      	ldr	r3, [r7, #8]
 800d318:	330c      	adds	r3, #12
 800d31a:	2200      	movs	r2, #0
 800d31c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800d31e:	68bb      	ldr	r3, [r7, #8]
 800d320:	331a      	adds	r3, #26
 800d322:	2100      	movs	r1, #0
 800d324:	4618      	mov	r0, r3
 800d326:	f7ff f866 	bl	800c3f6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800d32a:	79fb      	ldrb	r3, [r7, #7]
 800d32c:	1e5a      	subs	r2, r3, #1
 800d32e:	4613      	mov	r3, r2
 800d330:	005b      	lsls	r3, r3, #1
 800d332:	4413      	add	r3, r2
 800d334:	009b      	lsls	r3, r3, #2
 800d336:	4413      	add	r3, r2
 800d338:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800d33a:	2300      	movs	r3, #0
 800d33c:	82fb      	strh	r3, [r7, #22]
 800d33e:	2300      	movs	r3, #0
 800d340:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d342:	8afb      	ldrh	r3, [r7, #22]
 800d344:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d348:	4293      	cmp	r3, r2
 800d34a:	d007      	beq.n	800d35c <put_lfn+0x6c>
 800d34c:	69fb      	ldr	r3, [r7, #28]
 800d34e:	1c5a      	adds	r2, r3, #1
 800d350:	61fa      	str	r2, [r7, #28]
 800d352:	005b      	lsls	r3, r3, #1
 800d354:	68fa      	ldr	r2, [r7, #12]
 800d356:	4413      	add	r3, r2
 800d358:	881b      	ldrh	r3, [r3, #0]
 800d35a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800d35c:	4a17      	ldr	r2, [pc, #92]	; (800d3bc <put_lfn+0xcc>)
 800d35e:	69bb      	ldr	r3, [r7, #24]
 800d360:	4413      	add	r3, r2
 800d362:	781b      	ldrb	r3, [r3, #0]
 800d364:	461a      	mov	r2, r3
 800d366:	68bb      	ldr	r3, [r7, #8]
 800d368:	4413      	add	r3, r2
 800d36a:	8afa      	ldrh	r2, [r7, #22]
 800d36c:	4611      	mov	r1, r2
 800d36e:	4618      	mov	r0, r3
 800d370:	f7ff f841 	bl	800c3f6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800d374:	8afb      	ldrh	r3, [r7, #22]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d102      	bne.n	800d380 <put_lfn+0x90>
 800d37a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d37e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800d380:	69bb      	ldr	r3, [r7, #24]
 800d382:	3301      	adds	r3, #1
 800d384:	61bb      	str	r3, [r7, #24]
 800d386:	69bb      	ldr	r3, [r7, #24]
 800d388:	2b0c      	cmp	r3, #12
 800d38a:	d9da      	bls.n	800d342 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800d38c:	8afb      	ldrh	r3, [r7, #22]
 800d38e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d392:	4293      	cmp	r3, r2
 800d394:	d006      	beq.n	800d3a4 <put_lfn+0xb4>
 800d396:	69fb      	ldr	r3, [r7, #28]
 800d398:	005b      	lsls	r3, r3, #1
 800d39a:	68fa      	ldr	r2, [r7, #12]
 800d39c:	4413      	add	r3, r2
 800d39e:	881b      	ldrh	r3, [r3, #0]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d103      	bne.n	800d3ac <put_lfn+0xbc>
 800d3a4:	79fb      	ldrb	r3, [r7, #7]
 800d3a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d3aa:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800d3ac:	68bb      	ldr	r3, [r7, #8]
 800d3ae:	79fa      	ldrb	r2, [r7, #7]
 800d3b0:	701a      	strb	r2, [r3, #0]
}
 800d3b2:	bf00      	nop
 800d3b4:	3720      	adds	r7, #32
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	bd80      	pop	{r7, pc}
 800d3ba:	bf00      	nop
 800d3bc:	08013184 	.word	0x08013184

0800d3c0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b08c      	sub	sp, #48	; 0x30
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	60f8      	str	r0, [r7, #12]
 800d3c8:	60b9      	str	r1, [r7, #8]
 800d3ca:	607a      	str	r2, [r7, #4]
 800d3cc:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800d3ce:	220b      	movs	r2, #11
 800d3d0:	68b9      	ldr	r1, [r7, #8]
 800d3d2:	68f8      	ldr	r0, [r7, #12]
 800d3d4:	f7ff f856 	bl	800c484 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800d3d8:	683b      	ldr	r3, [r7, #0]
 800d3da:	2b05      	cmp	r3, #5
 800d3dc:	d929      	bls.n	800d432 <gen_numname+0x72>
		sr = seq;
 800d3de:	683b      	ldr	r3, [r7, #0]
 800d3e0:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800d3e2:	e020      	b.n	800d426 <gen_numname+0x66>
			wc = *lfn++;
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	1c9a      	adds	r2, r3, #2
 800d3e8:	607a      	str	r2, [r7, #4]
 800d3ea:	881b      	ldrh	r3, [r3, #0]
 800d3ec:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	62bb      	str	r3, [r7, #40]	; 0x28
 800d3f2:	e015      	b.n	800d420 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800d3f4:	69fb      	ldr	r3, [r7, #28]
 800d3f6:	005a      	lsls	r2, r3, #1
 800d3f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d3fa:	f003 0301 	and.w	r3, r3, #1
 800d3fe:	4413      	add	r3, r2
 800d400:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800d402:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d404:	085b      	lsrs	r3, r3, #1
 800d406:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800d408:	69fb      	ldr	r3, [r7, #28]
 800d40a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d003      	beq.n	800d41a <gen_numname+0x5a>
 800d412:	69fa      	ldr	r2, [r7, #28]
 800d414:	4b31      	ldr	r3, [pc, #196]	; (800d4dc <gen_numname+0x11c>)
 800d416:	4053      	eors	r3, r2
 800d418:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800d41a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d41c:	3301      	adds	r3, #1
 800d41e:	62bb      	str	r3, [r7, #40]	; 0x28
 800d420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d422:	2b0f      	cmp	r3, #15
 800d424:	d9e6      	bls.n	800d3f4 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	881b      	ldrh	r3, [r3, #0]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d1da      	bne.n	800d3e4 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800d42e:	69fb      	ldr	r3, [r7, #28]
 800d430:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800d432:	2307      	movs	r3, #7
 800d434:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800d436:	683b      	ldr	r3, [r7, #0]
 800d438:	b2db      	uxtb	r3, r3
 800d43a:	f003 030f 	and.w	r3, r3, #15
 800d43e:	b2db      	uxtb	r3, r3
 800d440:	3330      	adds	r3, #48	; 0x30
 800d442:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800d446:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d44a:	2b39      	cmp	r3, #57	; 0x39
 800d44c:	d904      	bls.n	800d458 <gen_numname+0x98>
 800d44e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d452:	3307      	adds	r3, #7
 800d454:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800d458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d45a:	1e5a      	subs	r2, r3, #1
 800d45c:	62ba      	str	r2, [r7, #40]	; 0x28
 800d45e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800d462:	4413      	add	r3, r2
 800d464:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800d468:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800d46c:	683b      	ldr	r3, [r7, #0]
 800d46e:	091b      	lsrs	r3, r3, #4
 800d470:	603b      	str	r3, [r7, #0]
	} while (seq);
 800d472:	683b      	ldr	r3, [r7, #0]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d1de      	bne.n	800d436 <gen_numname+0x76>
	ns[i] = '~';
 800d478:	f107 0214 	add.w	r2, r7, #20
 800d47c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d47e:	4413      	add	r3, r2
 800d480:	227e      	movs	r2, #126	; 0x7e
 800d482:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800d484:	2300      	movs	r3, #0
 800d486:	627b      	str	r3, [r7, #36]	; 0x24
 800d488:	e002      	b.n	800d490 <gen_numname+0xd0>
 800d48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d48c:	3301      	adds	r3, #1
 800d48e:	627b      	str	r3, [r7, #36]	; 0x24
 800d490:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d494:	429a      	cmp	r2, r3
 800d496:	d205      	bcs.n	800d4a4 <gen_numname+0xe4>
 800d498:	68fa      	ldr	r2, [r7, #12]
 800d49a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d49c:	4413      	add	r3, r2
 800d49e:	781b      	ldrb	r3, [r3, #0]
 800d4a0:	2b20      	cmp	r3, #32
 800d4a2:	d1f2      	bne.n	800d48a <gen_numname+0xca>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d4a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4a6:	2b07      	cmp	r3, #7
 800d4a8:	d808      	bhi.n	800d4bc <gen_numname+0xfc>
 800d4aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4ac:	1c5a      	adds	r2, r3, #1
 800d4ae:	62ba      	str	r2, [r7, #40]	; 0x28
 800d4b0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800d4b4:	4413      	add	r3, r2
 800d4b6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800d4ba:	e000      	b.n	800d4be <gen_numname+0xfe>
 800d4bc:	2120      	movs	r1, #32
 800d4be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4c0:	1c5a      	adds	r2, r3, #1
 800d4c2:	627a      	str	r2, [r7, #36]	; 0x24
 800d4c4:	68fa      	ldr	r2, [r7, #12]
 800d4c6:	4413      	add	r3, r2
 800d4c8:	460a      	mov	r2, r1
 800d4ca:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800d4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4ce:	2b07      	cmp	r3, #7
 800d4d0:	d9e8      	bls.n	800d4a4 <gen_numname+0xe4>
}
 800d4d2:	bf00      	nop
 800d4d4:	3730      	adds	r7, #48	; 0x30
 800d4d6:	46bd      	mov	sp, r7
 800d4d8:	bd80      	pop	{r7, pc}
 800d4da:	bf00      	nop
 800d4dc:	00011021 	.word	0x00011021

0800d4e0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800d4e0:	b480      	push	{r7}
 800d4e2:	b085      	sub	sp, #20
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800d4e8:	2300      	movs	r3, #0
 800d4ea:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800d4ec:	230b      	movs	r3, #11
 800d4ee:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800d4f0:	7bfb      	ldrb	r3, [r7, #15]
 800d4f2:	b2da      	uxtb	r2, r3
 800d4f4:	0852      	lsrs	r2, r2, #1
 800d4f6:	01db      	lsls	r3, r3, #7
 800d4f8:	4313      	orrs	r3, r2
 800d4fa:	b2da      	uxtb	r2, r3
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	1c59      	adds	r1, r3, #1
 800d500:	6079      	str	r1, [r7, #4]
 800d502:	781b      	ldrb	r3, [r3, #0]
 800d504:	4413      	add	r3, r2
 800d506:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800d508:	68bb      	ldr	r3, [r7, #8]
 800d50a:	3b01      	subs	r3, #1
 800d50c:	60bb      	str	r3, [r7, #8]
 800d50e:	68bb      	ldr	r3, [r7, #8]
 800d510:	2b00      	cmp	r3, #0
 800d512:	d1ed      	bne.n	800d4f0 <sum_sfn+0x10>
	return sum;
 800d514:	7bfb      	ldrb	r3, [r7, #15]
}
 800d516:	4618      	mov	r0, r3
 800d518:	3714      	adds	r7, #20
 800d51a:	46bd      	mov	sp, r7
 800d51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d520:	4770      	bx	lr

0800d522 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d522:	b580      	push	{r7, lr}
 800d524:	b086      	sub	sp, #24
 800d526:	af00      	add	r7, sp, #0
 800d528:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d530:	2100      	movs	r1, #0
 800d532:	6878      	ldr	r0, [r7, #4]
 800d534:	f7ff fca6 	bl	800ce84 <dir_sdi>
 800d538:	4603      	mov	r3, r0
 800d53a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d53c:	7dfb      	ldrb	r3, [r7, #23]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d001      	beq.n	800d546 <dir_find+0x24>
 800d542:	7dfb      	ldrb	r3, [r7, #23]
 800d544:	e0a9      	b.n	800d69a <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d546:	23ff      	movs	r3, #255	; 0xff
 800d548:	753b      	strb	r3, [r7, #20]
 800d54a:	7d3b      	ldrb	r3, [r7, #20]
 800d54c:	757b      	strb	r3, [r7, #21]
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	f04f 32ff 	mov.w	r2, #4294967295
 800d554:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	69db      	ldr	r3, [r3, #28]
 800d55a:	4619      	mov	r1, r3
 800d55c:	6938      	ldr	r0, [r7, #16]
 800d55e:	f7ff f983 	bl	800c868 <move_window>
 800d562:	4603      	mov	r3, r0
 800d564:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d566:	7dfb      	ldrb	r3, [r7, #23]
 800d568:	2b00      	cmp	r3, #0
 800d56a:	f040 8090 	bne.w	800d68e <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	6a1b      	ldr	r3, [r3, #32]
 800d572:	781b      	ldrb	r3, [r3, #0]
 800d574:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d576:	7dbb      	ldrb	r3, [r7, #22]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d102      	bne.n	800d582 <dir_find+0x60>
 800d57c:	2304      	movs	r3, #4
 800d57e:	75fb      	strb	r3, [r7, #23]
 800d580:	e08a      	b.n	800d698 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	6a1b      	ldr	r3, [r3, #32]
 800d586:	330b      	adds	r3, #11
 800d588:	781b      	ldrb	r3, [r3, #0]
 800d58a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d58e:	73fb      	strb	r3, [r7, #15]
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	7bfa      	ldrb	r2, [r7, #15]
 800d594:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800d596:	7dbb      	ldrb	r3, [r7, #22]
 800d598:	2be5      	cmp	r3, #229	; 0xe5
 800d59a:	d007      	beq.n	800d5ac <dir_find+0x8a>
 800d59c:	7bfb      	ldrb	r3, [r7, #15]
 800d59e:	f003 0308 	and.w	r3, r3, #8
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d009      	beq.n	800d5ba <dir_find+0x98>
 800d5a6:	7bfb      	ldrb	r3, [r7, #15]
 800d5a8:	2b0f      	cmp	r3, #15
 800d5aa:	d006      	beq.n	800d5ba <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d5ac:	23ff      	movs	r3, #255	; 0xff
 800d5ae:	757b      	strb	r3, [r7, #21]
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	f04f 32ff 	mov.w	r2, #4294967295
 800d5b6:	631a      	str	r2, [r3, #48]	; 0x30
 800d5b8:	e05e      	b.n	800d678 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800d5ba:	7bfb      	ldrb	r3, [r7, #15]
 800d5bc:	2b0f      	cmp	r3, #15
 800d5be:	d136      	bne.n	800d62e <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d5c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d154      	bne.n	800d678 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800d5ce:	7dbb      	ldrb	r3, [r7, #22]
 800d5d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d00d      	beq.n	800d5f4 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	6a1b      	ldr	r3, [r3, #32]
 800d5dc:	7b5b      	ldrb	r3, [r3, #13]
 800d5de:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800d5e0:	7dbb      	ldrb	r3, [r7, #22]
 800d5e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d5e6:	75bb      	strb	r3, [r7, #22]
 800d5e8:	7dbb      	ldrb	r3, [r7, #22]
 800d5ea:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	695a      	ldr	r2, [r3, #20]
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d5f4:	7dba      	ldrb	r2, [r7, #22]
 800d5f6:	7d7b      	ldrb	r3, [r7, #21]
 800d5f8:	429a      	cmp	r2, r3
 800d5fa:	d115      	bne.n	800d628 <dir_find+0x106>
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	6a1b      	ldr	r3, [r3, #32]
 800d600:	330d      	adds	r3, #13
 800d602:	781b      	ldrb	r3, [r3, #0]
 800d604:	7d3a      	ldrb	r2, [r7, #20]
 800d606:	429a      	cmp	r2, r3
 800d608:	d10e      	bne.n	800d628 <dir_find+0x106>
 800d60a:	693b      	ldr	r3, [r7, #16]
 800d60c:	68da      	ldr	r2, [r3, #12]
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	6a1b      	ldr	r3, [r3, #32]
 800d612:	4619      	mov	r1, r3
 800d614:	4610      	mov	r0, r2
 800d616:	f7ff fdfb 	bl	800d210 <cmp_lfn>
 800d61a:	4603      	mov	r3, r0
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d003      	beq.n	800d628 <dir_find+0x106>
 800d620:	7d7b      	ldrb	r3, [r7, #21]
 800d622:	3b01      	subs	r3, #1
 800d624:	b2db      	uxtb	r3, r3
 800d626:	e000      	b.n	800d62a <dir_find+0x108>
 800d628:	23ff      	movs	r3, #255	; 0xff
 800d62a:	757b      	strb	r3, [r7, #21]
 800d62c:	e024      	b.n	800d678 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d62e:	7d7b      	ldrb	r3, [r7, #21]
 800d630:	2b00      	cmp	r3, #0
 800d632:	d109      	bne.n	800d648 <dir_find+0x126>
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	6a1b      	ldr	r3, [r3, #32]
 800d638:	4618      	mov	r0, r3
 800d63a:	f7ff ff51 	bl	800d4e0 <sum_sfn>
 800d63e:	4603      	mov	r3, r0
 800d640:	461a      	mov	r2, r3
 800d642:	7d3b      	ldrb	r3, [r7, #20]
 800d644:	4293      	cmp	r3, r2
 800d646:	d024      	beq.n	800d692 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d64e:	f003 0301 	and.w	r3, r3, #1
 800d652:	2b00      	cmp	r3, #0
 800d654:	d10a      	bne.n	800d66c <dir_find+0x14a>
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	6a18      	ldr	r0, [r3, #32]
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	3324      	adds	r3, #36	; 0x24
 800d65e:	220b      	movs	r2, #11
 800d660:	4619      	mov	r1, r3
 800d662:	f7fe ff4a 	bl	800c4fa <mem_cmp>
 800d666:	4603      	mov	r3, r0
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d014      	beq.n	800d696 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d66c:	23ff      	movs	r3, #255	; 0xff
 800d66e:	757b      	strb	r3, [r7, #21]
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	f04f 32ff 	mov.w	r2, #4294967295
 800d676:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d678:	2100      	movs	r1, #0
 800d67a:	6878      	ldr	r0, [r7, #4]
 800d67c:	f7ff fc7d 	bl	800cf7a <dir_next>
 800d680:	4603      	mov	r3, r0
 800d682:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800d684:	7dfb      	ldrb	r3, [r7, #23]
 800d686:	2b00      	cmp	r3, #0
 800d688:	f43f af65 	beq.w	800d556 <dir_find+0x34>
 800d68c:	e004      	b.n	800d698 <dir_find+0x176>
		if (res != FR_OK) break;
 800d68e:	bf00      	nop
 800d690:	e002      	b.n	800d698 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d692:	bf00      	nop
 800d694:	e000      	b.n	800d698 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d696:	bf00      	nop

	return res;
 800d698:	7dfb      	ldrb	r3, [r7, #23]
}
 800d69a:	4618      	mov	r0, r3
 800d69c:	3718      	adds	r7, #24
 800d69e:	46bd      	mov	sp, r7
 800d6a0:	bd80      	pop	{r7, pc}
	...

0800d6a4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d6a4:	b580      	push	{r7, lr}
 800d6a6:	b08c      	sub	sp, #48	; 0x30
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d6b8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d001      	beq.n	800d6c4 <dir_register+0x20>
 800d6c0:	2306      	movs	r3, #6
 800d6c2:	e0e0      	b.n	800d886 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	627b      	str	r3, [r7, #36]	; 0x24
 800d6c8:	e002      	b.n	800d6d0 <dir_register+0x2c>
 800d6ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6cc:	3301      	adds	r3, #1
 800d6ce:	627b      	str	r3, [r7, #36]	; 0x24
 800d6d0:	69fb      	ldr	r3, [r7, #28]
 800d6d2:	68da      	ldr	r2, [r3, #12]
 800d6d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6d6:	005b      	lsls	r3, r3, #1
 800d6d8:	4413      	add	r3, r2
 800d6da:	881b      	ldrh	r3, [r3, #0]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d1f4      	bne.n	800d6ca <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800d6e6:	f107 030c 	add.w	r3, r7, #12
 800d6ea:	220c      	movs	r2, #12
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	f7fe fec9 	bl	800c484 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800d6f2:	7dfb      	ldrb	r3, [r7, #23]
 800d6f4:	f003 0301 	and.w	r3, r3, #1
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d032      	beq.n	800d762 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	2240      	movs	r2, #64	; 0x40
 800d700:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800d704:	2301      	movs	r3, #1
 800d706:	62bb      	str	r3, [r7, #40]	; 0x28
 800d708:	e016      	b.n	800d738 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800d710:	69fb      	ldr	r3, [r7, #28]
 800d712:	68da      	ldr	r2, [r3, #12]
 800d714:	f107 010c 	add.w	r1, r7, #12
 800d718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d71a:	f7ff fe51 	bl	800d3c0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800d71e:	6878      	ldr	r0, [r7, #4]
 800d720:	f7ff feff 	bl	800d522 <dir_find>
 800d724:	4603      	mov	r3, r0
 800d726:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800d72a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d106      	bne.n	800d740 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800d732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d734:	3301      	adds	r3, #1
 800d736:	62bb      	str	r3, [r7, #40]	; 0x28
 800d738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d73a:	2b63      	cmp	r3, #99	; 0x63
 800d73c:	d9e5      	bls.n	800d70a <dir_register+0x66>
 800d73e:	e000      	b.n	800d742 <dir_register+0x9e>
			if (res != FR_OK) break;
 800d740:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800d742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d744:	2b64      	cmp	r3, #100	; 0x64
 800d746:	d101      	bne.n	800d74c <dir_register+0xa8>
 800d748:	2307      	movs	r3, #7
 800d74a:	e09c      	b.n	800d886 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800d74c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d750:	2b04      	cmp	r3, #4
 800d752:	d002      	beq.n	800d75a <dir_register+0xb6>
 800d754:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d758:	e095      	b.n	800d886 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800d75a:	7dfa      	ldrb	r2, [r7, #23]
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800d762:	7dfb      	ldrb	r3, [r7, #23]
 800d764:	f003 0302 	and.w	r3, r3, #2
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d007      	beq.n	800d77c <dir_register+0xd8>
 800d76c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d76e:	330c      	adds	r3, #12
 800d770:	4a47      	ldr	r2, [pc, #284]	; (800d890 <dir_register+0x1ec>)
 800d772:	fba2 2303 	umull	r2, r3, r2, r3
 800d776:	089b      	lsrs	r3, r3, #2
 800d778:	3301      	adds	r3, #1
 800d77a:	e000      	b.n	800d77e <dir_register+0xda>
 800d77c:	2301      	movs	r3, #1
 800d77e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800d780:	6a39      	ldr	r1, [r7, #32]
 800d782:	6878      	ldr	r0, [r7, #4]
 800d784:	f7ff fcbe 	bl	800d104 <dir_alloc>
 800d788:	4603      	mov	r3, r0
 800d78a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800d78e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d792:	2b00      	cmp	r3, #0
 800d794:	d148      	bne.n	800d828 <dir_register+0x184>
 800d796:	6a3b      	ldr	r3, [r7, #32]
 800d798:	3b01      	subs	r3, #1
 800d79a:	623b      	str	r3, [r7, #32]
 800d79c:	6a3b      	ldr	r3, [r7, #32]
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d042      	beq.n	800d828 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	695a      	ldr	r2, [r3, #20]
 800d7a6:	6a3b      	ldr	r3, [r7, #32]
 800d7a8:	015b      	lsls	r3, r3, #5
 800d7aa:	1ad3      	subs	r3, r2, r3
 800d7ac:	4619      	mov	r1, r3
 800d7ae:	6878      	ldr	r0, [r7, #4]
 800d7b0:	f7ff fb68 	bl	800ce84 <dir_sdi>
 800d7b4:	4603      	mov	r3, r0
 800d7b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800d7ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d132      	bne.n	800d828 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	3324      	adds	r3, #36	; 0x24
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	f7ff fe8a 	bl	800d4e0 <sum_sfn>
 800d7cc:	4603      	mov	r3, r0
 800d7ce:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	69db      	ldr	r3, [r3, #28]
 800d7d4:	4619      	mov	r1, r3
 800d7d6:	69f8      	ldr	r0, [r7, #28]
 800d7d8:	f7ff f846 	bl	800c868 <move_window>
 800d7dc:	4603      	mov	r3, r0
 800d7de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800d7e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d11d      	bne.n	800d826 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800d7ea:	69fb      	ldr	r3, [r7, #28]
 800d7ec:	68d8      	ldr	r0, [r3, #12]
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	6a19      	ldr	r1, [r3, #32]
 800d7f2:	6a3b      	ldr	r3, [r7, #32]
 800d7f4:	b2da      	uxtb	r2, r3
 800d7f6:	7efb      	ldrb	r3, [r7, #27]
 800d7f8:	f7ff fd7a 	bl	800d2f0 <put_lfn>
				fs->wflag = 1;
 800d7fc:	69fb      	ldr	r3, [r7, #28]
 800d7fe:	2201      	movs	r2, #1
 800d800:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800d802:	2100      	movs	r1, #0
 800d804:	6878      	ldr	r0, [r7, #4]
 800d806:	f7ff fbb8 	bl	800cf7a <dir_next>
 800d80a:	4603      	mov	r3, r0
 800d80c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800d810:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d814:	2b00      	cmp	r3, #0
 800d816:	d107      	bne.n	800d828 <dir_register+0x184>
 800d818:	6a3b      	ldr	r3, [r7, #32]
 800d81a:	3b01      	subs	r3, #1
 800d81c:	623b      	str	r3, [r7, #32]
 800d81e:	6a3b      	ldr	r3, [r7, #32]
 800d820:	2b00      	cmp	r3, #0
 800d822:	d1d5      	bne.n	800d7d0 <dir_register+0x12c>
 800d824:	e000      	b.n	800d828 <dir_register+0x184>
				if (res != FR_OK) break;
 800d826:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d828:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d128      	bne.n	800d882 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	69db      	ldr	r3, [r3, #28]
 800d834:	4619      	mov	r1, r3
 800d836:	69f8      	ldr	r0, [r7, #28]
 800d838:	f7ff f816 	bl	800c868 <move_window>
 800d83c:	4603      	mov	r3, r0
 800d83e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800d842:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d846:	2b00      	cmp	r3, #0
 800d848:	d11b      	bne.n	800d882 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	6a1b      	ldr	r3, [r3, #32]
 800d84e:	2220      	movs	r2, #32
 800d850:	2100      	movs	r1, #0
 800d852:	4618      	mov	r0, r3
 800d854:	f7fe fe37 	bl	800c4c6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	6a18      	ldr	r0, [r3, #32]
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	3324      	adds	r3, #36	; 0x24
 800d860:	220b      	movs	r2, #11
 800d862:	4619      	mov	r1, r3
 800d864:	f7fe fe0e 	bl	800c484 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	6a1b      	ldr	r3, [r3, #32]
 800d872:	330c      	adds	r3, #12
 800d874:	f002 0218 	and.w	r2, r2, #24
 800d878:	b2d2      	uxtb	r2, r2
 800d87a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800d87c:	69fb      	ldr	r3, [r7, #28]
 800d87e:	2201      	movs	r2, #1
 800d880:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d882:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d886:	4618      	mov	r0, r3
 800d888:	3730      	adds	r7, #48	; 0x30
 800d88a:	46bd      	mov	sp, r7
 800d88c:	bd80      	pop	{r7, pc}
 800d88e:	bf00      	nop
 800d890:	4ec4ec4f 	.word	0x4ec4ec4f

0800d894 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d894:	b580      	push	{r7, lr}
 800d896:	b08a      	sub	sp, #40	; 0x28
 800d898:	af00      	add	r7, sp, #0
 800d89a:	6078      	str	r0, [r7, #4]
 800d89c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800d89e:	683b      	ldr	r3, [r7, #0]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	613b      	str	r3, [r7, #16]
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	68db      	ldr	r3, [r3, #12]
 800d8aa:	60fb      	str	r3, [r7, #12]
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	617b      	str	r3, [r7, #20]
 800d8b0:	697b      	ldr	r3, [r7, #20]
 800d8b2:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800d8b4:	69bb      	ldr	r3, [r7, #24]
 800d8b6:	1c5a      	adds	r2, r3, #1
 800d8b8:	61ba      	str	r2, [r7, #24]
 800d8ba:	693a      	ldr	r2, [r7, #16]
 800d8bc:	4413      	add	r3, r2
 800d8be:	781b      	ldrb	r3, [r3, #0]
 800d8c0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800d8c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d8c4:	2b1f      	cmp	r3, #31
 800d8c6:	d940      	bls.n	800d94a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800d8c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d8ca:	2b2f      	cmp	r3, #47	; 0x2f
 800d8cc:	d006      	beq.n	800d8dc <create_name+0x48>
 800d8ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d8d0:	2b5c      	cmp	r3, #92	; 0x5c
 800d8d2:	d110      	bne.n	800d8f6 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d8d4:	e002      	b.n	800d8dc <create_name+0x48>
 800d8d6:	69bb      	ldr	r3, [r7, #24]
 800d8d8:	3301      	adds	r3, #1
 800d8da:	61bb      	str	r3, [r7, #24]
 800d8dc:	693a      	ldr	r2, [r7, #16]
 800d8de:	69bb      	ldr	r3, [r7, #24]
 800d8e0:	4413      	add	r3, r2
 800d8e2:	781b      	ldrb	r3, [r3, #0]
 800d8e4:	2b2f      	cmp	r3, #47	; 0x2f
 800d8e6:	d0f6      	beq.n	800d8d6 <create_name+0x42>
 800d8e8:	693a      	ldr	r2, [r7, #16]
 800d8ea:	69bb      	ldr	r3, [r7, #24]
 800d8ec:	4413      	add	r3, r2
 800d8ee:	781b      	ldrb	r3, [r3, #0]
 800d8f0:	2b5c      	cmp	r3, #92	; 0x5c
 800d8f2:	d0f0      	beq.n	800d8d6 <create_name+0x42>
			break;
 800d8f4:	e02a      	b.n	800d94c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800d8f6:	697b      	ldr	r3, [r7, #20]
 800d8f8:	2bfe      	cmp	r3, #254	; 0xfe
 800d8fa:	d901      	bls.n	800d900 <create_name+0x6c>
 800d8fc:	2306      	movs	r3, #6
 800d8fe:	e177      	b.n	800dbf0 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800d900:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d902:	b2db      	uxtb	r3, r3
 800d904:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800d906:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d908:	2101      	movs	r1, #1
 800d90a:	4618      	mov	r0, r3
 800d90c:	f001 fd8e 	bl	800f42c <ff_convert>
 800d910:	4603      	mov	r3, r0
 800d912:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800d914:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d916:	2b00      	cmp	r3, #0
 800d918:	d101      	bne.n	800d91e <create_name+0x8a>
 800d91a:	2306      	movs	r3, #6
 800d91c:	e168      	b.n	800dbf0 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800d91e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d920:	2b7f      	cmp	r3, #127	; 0x7f
 800d922:	d809      	bhi.n	800d938 <create_name+0xa4>
 800d924:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d926:	4619      	mov	r1, r3
 800d928:	48b3      	ldr	r0, [pc, #716]	; (800dbf8 <create_name+0x364>)
 800d92a:	f7fe fe0d 	bl	800c548 <chk_chr>
 800d92e:	4603      	mov	r3, r0
 800d930:	2b00      	cmp	r3, #0
 800d932:	d001      	beq.n	800d938 <create_name+0xa4>
 800d934:	2306      	movs	r3, #6
 800d936:	e15b      	b.n	800dbf0 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800d938:	697b      	ldr	r3, [r7, #20]
 800d93a:	1c5a      	adds	r2, r3, #1
 800d93c:	617a      	str	r2, [r7, #20]
 800d93e:	005b      	lsls	r3, r3, #1
 800d940:	68fa      	ldr	r2, [r7, #12]
 800d942:	4413      	add	r3, r2
 800d944:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d946:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800d948:	e7b4      	b.n	800d8b4 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800d94a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800d94c:	693a      	ldr	r2, [r7, #16]
 800d94e:	69bb      	ldr	r3, [r7, #24]
 800d950:	441a      	add	r2, r3
 800d952:	683b      	ldr	r3, [r7, #0]
 800d954:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d956:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d958:	2b1f      	cmp	r3, #31
 800d95a:	d801      	bhi.n	800d960 <create_name+0xcc>
 800d95c:	2304      	movs	r3, #4
 800d95e:	e000      	b.n	800d962 <create_name+0xce>
 800d960:	2300      	movs	r3, #0
 800d962:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d966:	e011      	b.n	800d98c <create_name+0xf8>
		w = lfn[di - 1];
 800d968:	697a      	ldr	r2, [r7, #20]
 800d96a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800d96e:	4413      	add	r3, r2
 800d970:	005b      	lsls	r3, r3, #1
 800d972:	68fa      	ldr	r2, [r7, #12]
 800d974:	4413      	add	r3, r2
 800d976:	881b      	ldrh	r3, [r3, #0]
 800d978:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800d97a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d97c:	2b20      	cmp	r3, #32
 800d97e:	d002      	beq.n	800d986 <create_name+0xf2>
 800d980:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d982:	2b2e      	cmp	r3, #46	; 0x2e
 800d984:	d106      	bne.n	800d994 <create_name+0x100>
		di--;
 800d986:	697b      	ldr	r3, [r7, #20]
 800d988:	3b01      	subs	r3, #1
 800d98a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d98c:	697b      	ldr	r3, [r7, #20]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d1ea      	bne.n	800d968 <create_name+0xd4>
 800d992:	e000      	b.n	800d996 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800d994:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800d996:	697b      	ldr	r3, [r7, #20]
 800d998:	005b      	lsls	r3, r3, #1
 800d99a:	68fa      	ldr	r2, [r7, #12]
 800d99c:	4413      	add	r3, r2
 800d99e:	2200      	movs	r2, #0
 800d9a0:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800d9a2:	697b      	ldr	r3, [r7, #20]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d101      	bne.n	800d9ac <create_name+0x118>
 800d9a8:	2306      	movs	r3, #6
 800d9aa:	e121      	b.n	800dbf0 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	3324      	adds	r3, #36	; 0x24
 800d9b0:	220b      	movs	r2, #11
 800d9b2:	2120      	movs	r1, #32
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	f7fe fd86 	bl	800c4c6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800d9ba:	2300      	movs	r3, #0
 800d9bc:	61bb      	str	r3, [r7, #24]
 800d9be:	e002      	b.n	800d9c6 <create_name+0x132>
 800d9c0:	69bb      	ldr	r3, [r7, #24]
 800d9c2:	3301      	adds	r3, #1
 800d9c4:	61bb      	str	r3, [r7, #24]
 800d9c6:	69bb      	ldr	r3, [r7, #24]
 800d9c8:	005b      	lsls	r3, r3, #1
 800d9ca:	68fa      	ldr	r2, [r7, #12]
 800d9cc:	4413      	add	r3, r2
 800d9ce:	881b      	ldrh	r3, [r3, #0]
 800d9d0:	2b20      	cmp	r3, #32
 800d9d2:	d0f5      	beq.n	800d9c0 <create_name+0x12c>
 800d9d4:	69bb      	ldr	r3, [r7, #24]
 800d9d6:	005b      	lsls	r3, r3, #1
 800d9d8:	68fa      	ldr	r2, [r7, #12]
 800d9da:	4413      	add	r3, r2
 800d9dc:	881b      	ldrh	r3, [r3, #0]
 800d9de:	2b2e      	cmp	r3, #46	; 0x2e
 800d9e0:	d0ee      	beq.n	800d9c0 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800d9e2:	69bb      	ldr	r3, [r7, #24]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d009      	beq.n	800d9fc <create_name+0x168>
 800d9e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d9ec:	f043 0303 	orr.w	r3, r3, #3
 800d9f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800d9f4:	e002      	b.n	800d9fc <create_name+0x168>
 800d9f6:	697b      	ldr	r3, [r7, #20]
 800d9f8:	3b01      	subs	r3, #1
 800d9fa:	617b      	str	r3, [r7, #20]
 800d9fc:	697b      	ldr	r3, [r7, #20]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d009      	beq.n	800da16 <create_name+0x182>
 800da02:	697a      	ldr	r2, [r7, #20]
 800da04:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800da08:	4413      	add	r3, r2
 800da0a:	005b      	lsls	r3, r3, #1
 800da0c:	68fa      	ldr	r2, [r7, #12]
 800da0e:	4413      	add	r3, r2
 800da10:	881b      	ldrh	r3, [r3, #0]
 800da12:	2b2e      	cmp	r3, #46	; 0x2e
 800da14:	d1ef      	bne.n	800d9f6 <create_name+0x162>

	i = b = 0; ni = 8;
 800da16:	2300      	movs	r3, #0
 800da18:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800da1c:	2300      	movs	r3, #0
 800da1e:	623b      	str	r3, [r7, #32]
 800da20:	2308      	movs	r3, #8
 800da22:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800da24:	69bb      	ldr	r3, [r7, #24]
 800da26:	1c5a      	adds	r2, r3, #1
 800da28:	61ba      	str	r2, [r7, #24]
 800da2a:	005b      	lsls	r3, r3, #1
 800da2c:	68fa      	ldr	r2, [r7, #12]
 800da2e:	4413      	add	r3, r2
 800da30:	881b      	ldrh	r3, [r3, #0]
 800da32:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800da34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da36:	2b00      	cmp	r3, #0
 800da38:	f000 8090 	beq.w	800db5c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800da3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da3e:	2b20      	cmp	r3, #32
 800da40:	d006      	beq.n	800da50 <create_name+0x1bc>
 800da42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da44:	2b2e      	cmp	r3, #46	; 0x2e
 800da46:	d10a      	bne.n	800da5e <create_name+0x1ca>
 800da48:	69ba      	ldr	r2, [r7, #24]
 800da4a:	697b      	ldr	r3, [r7, #20]
 800da4c:	429a      	cmp	r2, r3
 800da4e:	d006      	beq.n	800da5e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800da50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da54:	f043 0303 	orr.w	r3, r3, #3
 800da58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800da5c:	e07d      	b.n	800db5a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800da5e:	6a3a      	ldr	r2, [r7, #32]
 800da60:	69fb      	ldr	r3, [r7, #28]
 800da62:	429a      	cmp	r2, r3
 800da64:	d203      	bcs.n	800da6e <create_name+0x1da>
 800da66:	69ba      	ldr	r2, [r7, #24]
 800da68:	697b      	ldr	r3, [r7, #20]
 800da6a:	429a      	cmp	r2, r3
 800da6c:	d123      	bne.n	800dab6 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800da6e:	69fb      	ldr	r3, [r7, #28]
 800da70:	2b0b      	cmp	r3, #11
 800da72:	d106      	bne.n	800da82 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800da74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da78:	f043 0303 	orr.w	r3, r3, #3
 800da7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800da80:	e06f      	b.n	800db62 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800da82:	69ba      	ldr	r2, [r7, #24]
 800da84:	697b      	ldr	r3, [r7, #20]
 800da86:	429a      	cmp	r2, r3
 800da88:	d005      	beq.n	800da96 <create_name+0x202>
 800da8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da8e:	f043 0303 	orr.w	r3, r3, #3
 800da92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800da96:	69ba      	ldr	r2, [r7, #24]
 800da98:	697b      	ldr	r3, [r7, #20]
 800da9a:	429a      	cmp	r2, r3
 800da9c:	d860      	bhi.n	800db60 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800da9e:	697b      	ldr	r3, [r7, #20]
 800daa0:	61bb      	str	r3, [r7, #24]
 800daa2:	2308      	movs	r3, #8
 800daa4:	623b      	str	r3, [r7, #32]
 800daa6:	230b      	movs	r3, #11
 800daa8:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800daaa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800daae:	009b      	lsls	r3, r3, #2
 800dab0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800dab4:	e051      	b.n	800db5a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800dab6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dab8:	2b7f      	cmp	r3, #127	; 0x7f
 800daba:	d914      	bls.n	800dae6 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800dabc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dabe:	2100      	movs	r1, #0
 800dac0:	4618      	mov	r0, r3
 800dac2:	f001 fcb3 	bl	800f42c <ff_convert>
 800dac6:	4603      	mov	r3, r0
 800dac8:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800daca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d004      	beq.n	800dada <create_name+0x246>
 800dad0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dad2:	3b80      	subs	r3, #128	; 0x80
 800dad4:	4a49      	ldr	r2, [pc, #292]	; (800dbfc <create_name+0x368>)
 800dad6:	5cd3      	ldrb	r3, [r2, r3]
 800dad8:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800dada:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dade:	f043 0302 	orr.w	r3, r3, #2
 800dae2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800dae6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d007      	beq.n	800dafc <create_name+0x268>
 800daec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800daee:	4619      	mov	r1, r3
 800daf0:	4843      	ldr	r0, [pc, #268]	; (800dc00 <create_name+0x36c>)
 800daf2:	f7fe fd29 	bl	800c548 <chk_chr>
 800daf6:	4603      	mov	r3, r0
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d008      	beq.n	800db0e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800dafc:	235f      	movs	r3, #95	; 0x5f
 800dafe:	84bb      	strh	r3, [r7, #36]	; 0x24
 800db00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db04:	f043 0303 	orr.w	r3, r3, #3
 800db08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800db0c:	e01b      	b.n	800db46 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800db0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db10:	2b40      	cmp	r3, #64	; 0x40
 800db12:	d909      	bls.n	800db28 <create_name+0x294>
 800db14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db16:	2b5a      	cmp	r3, #90	; 0x5a
 800db18:	d806      	bhi.n	800db28 <create_name+0x294>
					b |= 2;
 800db1a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800db1e:	f043 0302 	orr.w	r3, r3, #2
 800db22:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800db26:	e00e      	b.n	800db46 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800db28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db2a:	2b60      	cmp	r3, #96	; 0x60
 800db2c:	d90b      	bls.n	800db46 <create_name+0x2b2>
 800db2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db30:	2b7a      	cmp	r3, #122	; 0x7a
 800db32:	d808      	bhi.n	800db46 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800db34:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800db38:	f043 0301 	orr.w	r3, r3, #1
 800db3c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800db40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db42:	3b20      	subs	r3, #32
 800db44:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800db46:	6a3b      	ldr	r3, [r7, #32]
 800db48:	1c5a      	adds	r2, r3, #1
 800db4a:	623a      	str	r2, [r7, #32]
 800db4c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800db4e:	b2d1      	uxtb	r1, r2
 800db50:	687a      	ldr	r2, [r7, #4]
 800db52:	4413      	add	r3, r2
 800db54:	460a      	mov	r2, r1
 800db56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800db5a:	e763      	b.n	800da24 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800db5c:	bf00      	nop
 800db5e:	e000      	b.n	800db62 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800db60:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800db68:	2be5      	cmp	r3, #229	; 0xe5
 800db6a:	d103      	bne.n	800db74 <create_name+0x2e0>
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	2205      	movs	r2, #5
 800db70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800db74:	69fb      	ldr	r3, [r7, #28]
 800db76:	2b08      	cmp	r3, #8
 800db78:	d104      	bne.n	800db84 <create_name+0x2f0>
 800db7a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800db7e:	009b      	lsls	r3, r3, #2
 800db80:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800db84:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800db88:	f003 030c 	and.w	r3, r3, #12
 800db8c:	2b0c      	cmp	r3, #12
 800db8e:	d005      	beq.n	800db9c <create_name+0x308>
 800db90:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800db94:	f003 0303 	and.w	r3, r3, #3
 800db98:	2b03      	cmp	r3, #3
 800db9a:	d105      	bne.n	800dba8 <create_name+0x314>
 800db9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dba0:	f043 0302 	orr.w	r3, r3, #2
 800dba4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800dba8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dbac:	f003 0302 	and.w	r3, r3, #2
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d117      	bne.n	800dbe4 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800dbb4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dbb8:	f003 0303 	and.w	r3, r3, #3
 800dbbc:	2b01      	cmp	r3, #1
 800dbbe:	d105      	bne.n	800dbcc <create_name+0x338>
 800dbc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dbc4:	f043 0310 	orr.w	r3, r3, #16
 800dbc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800dbcc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dbd0:	f003 030c 	and.w	r3, r3, #12
 800dbd4:	2b04      	cmp	r3, #4
 800dbd6:	d105      	bne.n	800dbe4 <create_name+0x350>
 800dbd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dbdc:	f043 0308 	orr.w	r3, r3, #8
 800dbe0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800dbea:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800dbee:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	3728      	adds	r7, #40	; 0x28
 800dbf4:	46bd      	mov	sp, r7
 800dbf6:	bd80      	pop	{r7, pc}
 800dbf8:	0801309c 	.word	0x0801309c
 800dbfc:	08013104 	.word	0x08013104
 800dc00:	080130a8 	.word	0x080130a8

0800dc04 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800dc04:	b580      	push	{r7, lr}
 800dc06:	b086      	sub	sp, #24
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	6078      	str	r0, [r7, #4]
 800dc0c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800dc12:	693b      	ldr	r3, [r7, #16]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800dc18:	e002      	b.n	800dc20 <follow_path+0x1c>
 800dc1a:	683b      	ldr	r3, [r7, #0]
 800dc1c:	3301      	adds	r3, #1
 800dc1e:	603b      	str	r3, [r7, #0]
 800dc20:	683b      	ldr	r3, [r7, #0]
 800dc22:	781b      	ldrb	r3, [r3, #0]
 800dc24:	2b2f      	cmp	r3, #47	; 0x2f
 800dc26:	d0f8      	beq.n	800dc1a <follow_path+0x16>
 800dc28:	683b      	ldr	r3, [r7, #0]
 800dc2a:	781b      	ldrb	r3, [r3, #0]
 800dc2c:	2b5c      	cmp	r3, #92	; 0x5c
 800dc2e:	d0f4      	beq.n	800dc1a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800dc30:	693b      	ldr	r3, [r7, #16]
 800dc32:	2200      	movs	r2, #0
 800dc34:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800dc36:	683b      	ldr	r3, [r7, #0]
 800dc38:	781b      	ldrb	r3, [r3, #0]
 800dc3a:	2b1f      	cmp	r3, #31
 800dc3c:	d80a      	bhi.n	800dc54 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	2280      	movs	r2, #128	; 0x80
 800dc42:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800dc46:	2100      	movs	r1, #0
 800dc48:	6878      	ldr	r0, [r7, #4]
 800dc4a:	f7ff f91b 	bl	800ce84 <dir_sdi>
 800dc4e:	4603      	mov	r3, r0
 800dc50:	75fb      	strb	r3, [r7, #23]
 800dc52:	e043      	b.n	800dcdc <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800dc54:	463b      	mov	r3, r7
 800dc56:	4619      	mov	r1, r3
 800dc58:	6878      	ldr	r0, [r7, #4]
 800dc5a:	f7ff fe1b 	bl	800d894 <create_name>
 800dc5e:	4603      	mov	r3, r0
 800dc60:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800dc62:	7dfb      	ldrb	r3, [r7, #23]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d134      	bne.n	800dcd2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800dc68:	6878      	ldr	r0, [r7, #4]
 800dc6a:	f7ff fc5a 	bl	800d522 <dir_find>
 800dc6e:	4603      	mov	r3, r0
 800dc70:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800dc78:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800dc7a:	7dfb      	ldrb	r3, [r7, #23]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d00a      	beq.n	800dc96 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800dc80:	7dfb      	ldrb	r3, [r7, #23]
 800dc82:	2b04      	cmp	r3, #4
 800dc84:	d127      	bne.n	800dcd6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800dc86:	7afb      	ldrb	r3, [r7, #11]
 800dc88:	f003 0304 	and.w	r3, r3, #4
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d122      	bne.n	800dcd6 <follow_path+0xd2>
 800dc90:	2305      	movs	r3, #5
 800dc92:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800dc94:	e01f      	b.n	800dcd6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800dc96:	7afb      	ldrb	r3, [r7, #11]
 800dc98:	f003 0304 	and.w	r3, r3, #4
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d11c      	bne.n	800dcda <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800dca0:	693b      	ldr	r3, [r7, #16]
 800dca2:	799b      	ldrb	r3, [r3, #6]
 800dca4:	f003 0310 	and.w	r3, r3, #16
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d102      	bne.n	800dcb2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800dcac:	2305      	movs	r3, #5
 800dcae:	75fb      	strb	r3, [r7, #23]
 800dcb0:	e014      	b.n	800dcdc <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	695b      	ldr	r3, [r3, #20]
 800dcbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800dcc0:	4413      	add	r3, r2
 800dcc2:	4619      	mov	r1, r3
 800dcc4:	68f8      	ldr	r0, [r7, #12]
 800dcc6:	f7ff fa64 	bl	800d192 <ld_clust>
 800dcca:	4602      	mov	r2, r0
 800dccc:	693b      	ldr	r3, [r7, #16]
 800dcce:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800dcd0:	e7c0      	b.n	800dc54 <follow_path+0x50>
			if (res != FR_OK) break;
 800dcd2:	bf00      	nop
 800dcd4:	e002      	b.n	800dcdc <follow_path+0xd8>
				break;
 800dcd6:	bf00      	nop
 800dcd8:	e000      	b.n	800dcdc <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800dcda:	bf00      	nop
			}
		}
	}

	return res;
 800dcdc:	7dfb      	ldrb	r3, [r7, #23]
}
 800dcde:	4618      	mov	r0, r3
 800dce0:	3718      	adds	r7, #24
 800dce2:	46bd      	mov	sp, r7
 800dce4:	bd80      	pop	{r7, pc}

0800dce6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800dce6:	b480      	push	{r7}
 800dce8:	b087      	sub	sp, #28
 800dcea:	af00      	add	r7, sp, #0
 800dcec:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800dcee:	f04f 33ff 	mov.w	r3, #4294967295
 800dcf2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d031      	beq.n	800dd60 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	617b      	str	r3, [r7, #20]
 800dd02:	e002      	b.n	800dd0a <get_ldnumber+0x24>
 800dd04:	697b      	ldr	r3, [r7, #20]
 800dd06:	3301      	adds	r3, #1
 800dd08:	617b      	str	r3, [r7, #20]
 800dd0a:	697b      	ldr	r3, [r7, #20]
 800dd0c:	781b      	ldrb	r3, [r3, #0]
 800dd0e:	2b1f      	cmp	r3, #31
 800dd10:	d903      	bls.n	800dd1a <get_ldnumber+0x34>
 800dd12:	697b      	ldr	r3, [r7, #20]
 800dd14:	781b      	ldrb	r3, [r3, #0]
 800dd16:	2b3a      	cmp	r3, #58	; 0x3a
 800dd18:	d1f4      	bne.n	800dd04 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800dd1a:	697b      	ldr	r3, [r7, #20]
 800dd1c:	781b      	ldrb	r3, [r3, #0]
 800dd1e:	2b3a      	cmp	r3, #58	; 0x3a
 800dd20:	d11c      	bne.n	800dd5c <get_ldnumber+0x76>
			tp = *path;
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	1c5a      	adds	r2, r3, #1
 800dd2c:	60fa      	str	r2, [r7, #12]
 800dd2e:	781b      	ldrb	r3, [r3, #0]
 800dd30:	3b30      	subs	r3, #48	; 0x30
 800dd32:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800dd34:	68bb      	ldr	r3, [r7, #8]
 800dd36:	2b09      	cmp	r3, #9
 800dd38:	d80e      	bhi.n	800dd58 <get_ldnumber+0x72>
 800dd3a:	68fa      	ldr	r2, [r7, #12]
 800dd3c:	697b      	ldr	r3, [r7, #20]
 800dd3e:	429a      	cmp	r2, r3
 800dd40:	d10a      	bne.n	800dd58 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800dd42:	68bb      	ldr	r3, [r7, #8]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d107      	bne.n	800dd58 <get_ldnumber+0x72>
					vol = (int)i;
 800dd48:	68bb      	ldr	r3, [r7, #8]
 800dd4a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800dd4c:	697b      	ldr	r3, [r7, #20]
 800dd4e:	3301      	adds	r3, #1
 800dd50:	617b      	str	r3, [r7, #20]
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	697a      	ldr	r2, [r7, #20]
 800dd56:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800dd58:	693b      	ldr	r3, [r7, #16]
 800dd5a:	e002      	b.n	800dd62 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800dd5c:	2300      	movs	r3, #0
 800dd5e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800dd60:	693b      	ldr	r3, [r7, #16]
}
 800dd62:	4618      	mov	r0, r3
 800dd64:	371c      	adds	r7, #28
 800dd66:	46bd      	mov	sp, r7
 800dd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd6c:	4770      	bx	lr
	...

0800dd70 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800dd70:	b580      	push	{r7, lr}
 800dd72:	b082      	sub	sp, #8
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	6078      	str	r0, [r7, #4]
 800dd78:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	2200      	movs	r2, #0
 800dd7e:	70da      	strb	r2, [r3, #3]
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	f04f 32ff 	mov.w	r2, #4294967295
 800dd86:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800dd88:	6839      	ldr	r1, [r7, #0]
 800dd8a:	6878      	ldr	r0, [r7, #4]
 800dd8c:	f7fe fd6c 	bl	800c868 <move_window>
 800dd90:	4603      	mov	r3, r0
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d001      	beq.n	800dd9a <check_fs+0x2a>
 800dd96:	2304      	movs	r3, #4
 800dd98:	e038      	b.n	800de0c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	3334      	adds	r3, #52	; 0x34
 800dd9e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800dda2:	4618      	mov	r0, r3
 800dda4:	f7fe faec 	bl	800c380 <ld_word>
 800dda8:	4603      	mov	r3, r0
 800ddaa:	461a      	mov	r2, r3
 800ddac:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ddb0:	429a      	cmp	r2, r3
 800ddb2:	d001      	beq.n	800ddb8 <check_fs+0x48>
 800ddb4:	2303      	movs	r3, #3
 800ddb6:	e029      	b.n	800de0c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ddbe:	2be9      	cmp	r3, #233	; 0xe9
 800ddc0:	d009      	beq.n	800ddd6 <check_fs+0x66>
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ddc8:	2beb      	cmp	r3, #235	; 0xeb
 800ddca:	d11e      	bne.n	800de0a <check_fs+0x9a>
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800ddd2:	2b90      	cmp	r3, #144	; 0x90
 800ddd4:	d119      	bne.n	800de0a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	3334      	adds	r3, #52	; 0x34
 800ddda:	3336      	adds	r3, #54	; 0x36
 800dddc:	4618      	mov	r0, r3
 800ddde:	f7fe fae7 	bl	800c3b0 <ld_dword>
 800dde2:	4603      	mov	r3, r0
 800dde4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800dde8:	4a0a      	ldr	r2, [pc, #40]	; (800de14 <check_fs+0xa4>)
 800ddea:	4293      	cmp	r3, r2
 800ddec:	d101      	bne.n	800ddf2 <check_fs+0x82>
 800ddee:	2300      	movs	r3, #0
 800ddf0:	e00c      	b.n	800de0c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	3334      	adds	r3, #52	; 0x34
 800ddf6:	3352      	adds	r3, #82	; 0x52
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	f7fe fad9 	bl	800c3b0 <ld_dword>
 800ddfe:	4602      	mov	r2, r0
 800de00:	4b05      	ldr	r3, [pc, #20]	; (800de18 <check_fs+0xa8>)
 800de02:	429a      	cmp	r2, r3
 800de04:	d101      	bne.n	800de0a <check_fs+0x9a>
 800de06:	2300      	movs	r3, #0
 800de08:	e000      	b.n	800de0c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800de0a:	2302      	movs	r3, #2
}
 800de0c:	4618      	mov	r0, r3
 800de0e:	3708      	adds	r7, #8
 800de10:	46bd      	mov	sp, r7
 800de12:	bd80      	pop	{r7, pc}
 800de14:	00544146 	.word	0x00544146
 800de18:	33544146 	.word	0x33544146

0800de1c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800de1c:	b580      	push	{r7, lr}
 800de1e:	b096      	sub	sp, #88	; 0x58
 800de20:	af00      	add	r7, sp, #0
 800de22:	60f8      	str	r0, [r7, #12]
 800de24:	60b9      	str	r1, [r7, #8]
 800de26:	4613      	mov	r3, r2
 800de28:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800de2a:	68bb      	ldr	r3, [r7, #8]
 800de2c:	2200      	movs	r2, #0
 800de2e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800de30:	68f8      	ldr	r0, [r7, #12]
 800de32:	f7ff ff58 	bl	800dce6 <get_ldnumber>
 800de36:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800de38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	da01      	bge.n	800de42 <find_volume+0x26>
 800de3e:	230b      	movs	r3, #11
 800de40:	e231      	b.n	800e2a6 <find_volume+0x48a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800de42:	4aa8      	ldr	r2, [pc, #672]	; (800e0e4 <find_volume+0x2c8>)
 800de44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800de4a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800de4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d101      	bne.n	800de56 <find_volume+0x3a>
 800de52:	230c      	movs	r3, #12
 800de54:	e227      	b.n	800e2a6 <find_volume+0x48a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800de56:	68bb      	ldr	r3, [r7, #8]
 800de58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800de5a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800de5c:	79fb      	ldrb	r3, [r7, #7]
 800de5e:	f023 0301 	bic.w	r3, r3, #1
 800de62:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800de64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de66:	781b      	ldrb	r3, [r3, #0]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d01a      	beq.n	800dea2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800de6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de6e:	785b      	ldrb	r3, [r3, #1]
 800de70:	4618      	mov	r0, r3
 800de72:	f7fe f9e7 	bl	800c244 <disk_status>
 800de76:	4603      	mov	r3, r0
 800de78:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800de7c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800de80:	f003 0301 	and.w	r3, r3, #1
 800de84:	2b00      	cmp	r3, #0
 800de86:	d10c      	bne.n	800dea2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800de88:	79fb      	ldrb	r3, [r7, #7]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d007      	beq.n	800de9e <find_volume+0x82>
 800de8e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800de92:	f003 0304 	and.w	r3, r3, #4
 800de96:	2b00      	cmp	r3, #0
 800de98:	d001      	beq.n	800de9e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800de9a:	230a      	movs	r3, #10
 800de9c:	e203      	b.n	800e2a6 <find_volume+0x48a>
			}
			return FR_OK;				/* The file system object is valid */
 800de9e:	2300      	movs	r3, #0
 800dea0:	e201      	b.n	800e2a6 <find_volume+0x48a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800dea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dea4:	2200      	movs	r2, #0
 800dea6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800dea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800deaa:	b2da      	uxtb	r2, r3
 800deac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800deae:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800deb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800deb2:	785b      	ldrb	r3, [r3, #1]
 800deb4:	4618      	mov	r0, r3
 800deb6:	f7fe f9df 	bl	800c278 <disk_initialize>
 800deba:	4603      	mov	r3, r0
 800debc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800dec0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dec4:	f003 0301 	and.w	r3, r3, #1
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d001      	beq.n	800ded0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800decc:	2303      	movs	r3, #3
 800dece:	e1ea      	b.n	800e2a6 <find_volume+0x48a>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ded0:	79fb      	ldrb	r3, [r7, #7]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d007      	beq.n	800dee6 <find_volume+0xca>
 800ded6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800deda:	f003 0304 	and.w	r3, r3, #4
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d001      	beq.n	800dee6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800dee2:	230a      	movs	r3, #10
 800dee4:	e1df      	b.n	800e2a6 <find_volume+0x48a>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800dee6:	2300      	movs	r3, #0
 800dee8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800deea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800deec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800deee:	f7ff ff3f 	bl	800dd70 <check_fs>
 800def2:	4603      	mov	r3, r0
 800def4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800def8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800defc:	2b02      	cmp	r3, #2
 800defe:	d14b      	bne.n	800df98 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800df00:	2300      	movs	r3, #0
 800df02:	643b      	str	r3, [r7, #64]	; 0x40
 800df04:	e01f      	b.n	800df46 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800df06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df08:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800df0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df0e:	011b      	lsls	r3, r3, #4
 800df10:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800df14:	4413      	add	r3, r2
 800df16:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800df18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df1a:	3304      	adds	r3, #4
 800df1c:	781b      	ldrb	r3, [r3, #0]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d006      	beq.n	800df30 <find_volume+0x114>
 800df22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df24:	3308      	adds	r3, #8
 800df26:	4618      	mov	r0, r3
 800df28:	f7fe fa42 	bl	800c3b0 <ld_dword>
 800df2c:	4602      	mov	r2, r0
 800df2e:	e000      	b.n	800df32 <find_volume+0x116>
 800df30:	2200      	movs	r2, #0
 800df32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df34:	009b      	lsls	r3, r3, #2
 800df36:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800df3a:	440b      	add	r3, r1
 800df3c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800df40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df42:	3301      	adds	r3, #1
 800df44:	643b      	str	r3, [r7, #64]	; 0x40
 800df46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df48:	2b03      	cmp	r3, #3
 800df4a:	d9dc      	bls.n	800df06 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800df4c:	2300      	movs	r3, #0
 800df4e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800df50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df52:	2b00      	cmp	r3, #0
 800df54:	d002      	beq.n	800df5c <find_volume+0x140>
 800df56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df58:	3b01      	subs	r3, #1
 800df5a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800df5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df5e:	009b      	lsls	r3, r3, #2
 800df60:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800df64:	4413      	add	r3, r2
 800df66:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800df6a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800df6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d005      	beq.n	800df7e <find_volume+0x162>
 800df72:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800df74:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800df76:	f7ff fefb 	bl	800dd70 <check_fs>
 800df7a:	4603      	mov	r3, r0
 800df7c:	e000      	b.n	800df80 <find_volume+0x164>
 800df7e:	2303      	movs	r3, #3
 800df80:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800df84:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800df88:	2b01      	cmp	r3, #1
 800df8a:	d905      	bls.n	800df98 <find_volume+0x17c>
 800df8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df8e:	3301      	adds	r3, #1
 800df90:	643b      	str	r3, [r7, #64]	; 0x40
 800df92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df94:	2b03      	cmp	r3, #3
 800df96:	d9e1      	bls.n	800df5c <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800df98:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800df9c:	2b04      	cmp	r3, #4
 800df9e:	d101      	bne.n	800dfa4 <find_volume+0x188>
 800dfa0:	2301      	movs	r3, #1
 800dfa2:	e180      	b.n	800e2a6 <find_volume+0x48a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800dfa4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dfa8:	2b01      	cmp	r3, #1
 800dfaa:	d901      	bls.n	800dfb0 <find_volume+0x194>
 800dfac:	230d      	movs	r3, #13
 800dfae:	e17a      	b.n	800e2a6 <find_volume+0x48a>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800dfb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfb2:	3334      	adds	r3, #52	; 0x34
 800dfb4:	330b      	adds	r3, #11
 800dfb6:	4618      	mov	r0, r3
 800dfb8:	f7fe f9e2 	bl	800c380 <ld_word>
 800dfbc:	4603      	mov	r3, r0
 800dfbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dfc2:	d001      	beq.n	800dfc8 <find_volume+0x1ac>
 800dfc4:	230d      	movs	r3, #13
 800dfc6:	e16e      	b.n	800e2a6 <find_volume+0x48a>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800dfc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfca:	3334      	adds	r3, #52	; 0x34
 800dfcc:	3316      	adds	r3, #22
 800dfce:	4618      	mov	r0, r3
 800dfd0:	f7fe f9d6 	bl	800c380 <ld_word>
 800dfd4:	4603      	mov	r3, r0
 800dfd6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800dfd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d106      	bne.n	800dfec <find_volume+0x1d0>
 800dfde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfe0:	3334      	adds	r3, #52	; 0x34
 800dfe2:	3324      	adds	r3, #36	; 0x24
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	f7fe f9e3 	bl	800c3b0 <ld_dword>
 800dfea:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800dfec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dff0:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800dff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dff4:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800dff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dffa:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800dffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dffe:	789b      	ldrb	r3, [r3, #2]
 800e000:	2b01      	cmp	r3, #1
 800e002:	d005      	beq.n	800e010 <find_volume+0x1f4>
 800e004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e006:	789b      	ldrb	r3, [r3, #2]
 800e008:	2b02      	cmp	r3, #2
 800e00a:	d001      	beq.n	800e010 <find_volume+0x1f4>
 800e00c:	230d      	movs	r3, #13
 800e00e:	e14a      	b.n	800e2a6 <find_volume+0x48a>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e012:	789b      	ldrb	r3, [r3, #2]
 800e014:	461a      	mov	r2, r3
 800e016:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e018:	fb02 f303 	mul.w	r3, r2, r3
 800e01c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e01e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e020:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e024:	b29a      	uxth	r2, r3
 800e026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e028:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e02a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e02c:	895b      	ldrh	r3, [r3, #10]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d008      	beq.n	800e044 <find_volume+0x228>
 800e032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e034:	895b      	ldrh	r3, [r3, #10]
 800e036:	461a      	mov	r2, r3
 800e038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e03a:	895b      	ldrh	r3, [r3, #10]
 800e03c:	3b01      	subs	r3, #1
 800e03e:	4013      	ands	r3, r2
 800e040:	2b00      	cmp	r3, #0
 800e042:	d001      	beq.n	800e048 <find_volume+0x22c>
 800e044:	230d      	movs	r3, #13
 800e046:	e12e      	b.n	800e2a6 <find_volume+0x48a>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e04a:	3334      	adds	r3, #52	; 0x34
 800e04c:	3311      	adds	r3, #17
 800e04e:	4618      	mov	r0, r3
 800e050:	f7fe f996 	bl	800c380 <ld_word>
 800e054:	4603      	mov	r3, r0
 800e056:	461a      	mov	r2, r3
 800e058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e05a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e05c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e05e:	891b      	ldrh	r3, [r3, #8]
 800e060:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e064:	b29b      	uxth	r3, r3
 800e066:	2b00      	cmp	r3, #0
 800e068:	d001      	beq.n	800e06e <find_volume+0x252>
 800e06a:	230d      	movs	r3, #13
 800e06c:	e11b      	b.n	800e2a6 <find_volume+0x48a>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e06e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e070:	3334      	adds	r3, #52	; 0x34
 800e072:	3313      	adds	r3, #19
 800e074:	4618      	mov	r0, r3
 800e076:	f7fe f983 	bl	800c380 <ld_word>
 800e07a:	4603      	mov	r3, r0
 800e07c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e07e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e080:	2b00      	cmp	r3, #0
 800e082:	d106      	bne.n	800e092 <find_volume+0x276>
 800e084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e086:	3334      	adds	r3, #52	; 0x34
 800e088:	3320      	adds	r3, #32
 800e08a:	4618      	mov	r0, r3
 800e08c:	f7fe f990 	bl	800c3b0 <ld_dword>
 800e090:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e094:	3334      	adds	r3, #52	; 0x34
 800e096:	330e      	adds	r3, #14
 800e098:	4618      	mov	r0, r3
 800e09a:	f7fe f971 	bl	800c380 <ld_word>
 800e09e:	4603      	mov	r3, r0
 800e0a0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e0a2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d101      	bne.n	800e0ac <find_volume+0x290>
 800e0a8:	230d      	movs	r3, #13
 800e0aa:	e0fc      	b.n	800e2a6 <find_volume+0x48a>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e0ac:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e0ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e0b0:	4413      	add	r3, r2
 800e0b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e0b4:	8912      	ldrh	r2, [r2, #8]
 800e0b6:	09d2      	lsrs	r2, r2, #7
 800e0b8:	b292      	uxth	r2, r2
 800e0ba:	4413      	add	r3, r2
 800e0bc:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e0be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e0c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0c2:	429a      	cmp	r2, r3
 800e0c4:	d201      	bcs.n	800e0ca <find_volume+0x2ae>
 800e0c6:	230d      	movs	r3, #13
 800e0c8:	e0ed      	b.n	800e2a6 <find_volume+0x48a>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e0ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e0cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0ce:	1ad3      	subs	r3, r2, r3
 800e0d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e0d2:	8952      	ldrh	r2, [r2, #10]
 800e0d4:	fbb3 f3f2 	udiv	r3, r3, r2
 800e0d8:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e0da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d103      	bne.n	800e0e8 <find_volume+0x2cc>
 800e0e0:	230d      	movs	r3, #13
 800e0e2:	e0e0      	b.n	800e2a6 <find_volume+0x48a>
 800e0e4:	200010d8 	.word	0x200010d8
		fmt = FS_FAT32;
 800e0e8:	2303      	movs	r3, #3
 800e0ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e0ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0f0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800e0f4:	4293      	cmp	r3, r2
 800e0f6:	d802      	bhi.n	800e0fe <find_volume+0x2e2>
 800e0f8:	2302      	movs	r3, #2
 800e0fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e0fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e100:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e104:	4293      	cmp	r3, r2
 800e106:	d802      	bhi.n	800e10e <find_volume+0x2f2>
 800e108:	2301      	movs	r3, #1
 800e10a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e10e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e110:	1c9a      	adds	r2, r3, #2
 800e112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e114:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800e116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e118:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e11a:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e11c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e11e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e120:	441a      	add	r2, r3
 800e122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e124:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800e126:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e12a:	441a      	add	r2, r3
 800e12c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e12e:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800e130:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e134:	2b03      	cmp	r3, #3
 800e136:	d11e      	bne.n	800e176 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e13a:	3334      	adds	r3, #52	; 0x34
 800e13c:	332a      	adds	r3, #42	; 0x2a
 800e13e:	4618      	mov	r0, r3
 800e140:	f7fe f91e 	bl	800c380 <ld_word>
 800e144:	4603      	mov	r3, r0
 800e146:	2b00      	cmp	r3, #0
 800e148:	d001      	beq.n	800e14e <find_volume+0x332>
 800e14a:	230d      	movs	r3, #13
 800e14c:	e0ab      	b.n	800e2a6 <find_volume+0x48a>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e14e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e150:	891b      	ldrh	r3, [r3, #8]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d001      	beq.n	800e15a <find_volume+0x33e>
 800e156:	230d      	movs	r3, #13
 800e158:	e0a5      	b.n	800e2a6 <find_volume+0x48a>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e15a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e15c:	3334      	adds	r3, #52	; 0x34
 800e15e:	332c      	adds	r3, #44	; 0x2c
 800e160:	4618      	mov	r0, r3
 800e162:	f7fe f925 	bl	800c3b0 <ld_dword>
 800e166:	4602      	mov	r2, r0
 800e168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e16a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e16c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e16e:	699b      	ldr	r3, [r3, #24]
 800e170:	009b      	lsls	r3, r3, #2
 800e172:	647b      	str	r3, [r7, #68]	; 0x44
 800e174:	e01f      	b.n	800e1b6 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e178:	891b      	ldrh	r3, [r3, #8]
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d101      	bne.n	800e182 <find_volume+0x366>
 800e17e:	230d      	movs	r3, #13
 800e180:	e091      	b.n	800e2a6 <find_volume+0x48a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e184:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e186:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e188:	441a      	add	r2, r3
 800e18a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e18c:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e18e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e192:	2b02      	cmp	r3, #2
 800e194:	d103      	bne.n	800e19e <find_volume+0x382>
 800e196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e198:	699b      	ldr	r3, [r3, #24]
 800e19a:	005b      	lsls	r3, r3, #1
 800e19c:	e00a      	b.n	800e1b4 <find_volume+0x398>
 800e19e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1a0:	699a      	ldr	r2, [r3, #24]
 800e1a2:	4613      	mov	r3, r2
 800e1a4:	005b      	lsls	r3, r3, #1
 800e1a6:	4413      	add	r3, r2
 800e1a8:	085a      	lsrs	r2, r3, #1
 800e1aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1ac:	699b      	ldr	r3, [r3, #24]
 800e1ae:	f003 0301 	and.w	r3, r3, #1
 800e1b2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e1b4:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e1b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1b8:	69da      	ldr	r2, [r3, #28]
 800e1ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e1bc:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800e1c0:	0b1b      	lsrs	r3, r3, #12
 800e1c2:	429a      	cmp	r2, r3
 800e1c4:	d201      	bcs.n	800e1ca <find_volume+0x3ae>
 800e1c6:	230d      	movs	r3, #13
 800e1c8:	e06d      	b.n	800e2a6 <find_volume+0x48a>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e1ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1cc:	f04f 32ff 	mov.w	r2, #4294967295
 800e1d0:	615a      	str	r2, [r3, #20]
 800e1d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1d4:	695a      	ldr	r2, [r3, #20]
 800e1d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1d8:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800e1da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1dc:	2280      	movs	r2, #128	; 0x80
 800e1de:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e1e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e1e4:	2b03      	cmp	r3, #3
 800e1e6:	d149      	bne.n	800e27c <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e1e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1ea:	3334      	adds	r3, #52	; 0x34
 800e1ec:	3330      	adds	r3, #48	; 0x30
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	f7fe f8c6 	bl	800c380 <ld_word>
 800e1f4:	4603      	mov	r3, r0
 800e1f6:	2b01      	cmp	r3, #1
 800e1f8:	d140      	bne.n	800e27c <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e1fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e1fc:	3301      	adds	r3, #1
 800e1fe:	4619      	mov	r1, r3
 800e200:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e202:	f7fe fb31 	bl	800c868 <move_window>
 800e206:	4603      	mov	r3, r0
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d137      	bne.n	800e27c <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800e20c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e20e:	2200      	movs	r2, #0
 800e210:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e214:	3334      	adds	r3, #52	; 0x34
 800e216:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e21a:	4618      	mov	r0, r3
 800e21c:	f7fe f8b0 	bl	800c380 <ld_word>
 800e220:	4603      	mov	r3, r0
 800e222:	461a      	mov	r2, r3
 800e224:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e228:	429a      	cmp	r2, r3
 800e22a:	d127      	bne.n	800e27c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e22c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e22e:	3334      	adds	r3, #52	; 0x34
 800e230:	4618      	mov	r0, r3
 800e232:	f7fe f8bd 	bl	800c3b0 <ld_dword>
 800e236:	4602      	mov	r2, r0
 800e238:	4b1d      	ldr	r3, [pc, #116]	; (800e2b0 <find_volume+0x494>)
 800e23a:	429a      	cmp	r2, r3
 800e23c:	d11e      	bne.n	800e27c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e23e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e240:	3334      	adds	r3, #52	; 0x34
 800e242:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e246:	4618      	mov	r0, r3
 800e248:	f7fe f8b2 	bl	800c3b0 <ld_dword>
 800e24c:	4602      	mov	r2, r0
 800e24e:	4b19      	ldr	r3, [pc, #100]	; (800e2b4 <find_volume+0x498>)
 800e250:	429a      	cmp	r2, r3
 800e252:	d113      	bne.n	800e27c <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e256:	3334      	adds	r3, #52	; 0x34
 800e258:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800e25c:	4618      	mov	r0, r3
 800e25e:	f7fe f8a7 	bl	800c3b0 <ld_dword>
 800e262:	4602      	mov	r2, r0
 800e264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e266:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e26a:	3334      	adds	r3, #52	; 0x34
 800e26c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800e270:	4618      	mov	r0, r3
 800e272:	f7fe f89d 	bl	800c3b0 <ld_dword>
 800e276:	4602      	mov	r2, r0
 800e278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e27a:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e27c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e27e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800e282:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e284:	4b0c      	ldr	r3, [pc, #48]	; (800e2b8 <find_volume+0x49c>)
 800e286:	881b      	ldrh	r3, [r3, #0]
 800e288:	3301      	adds	r3, #1
 800e28a:	b29a      	uxth	r2, r3
 800e28c:	4b0a      	ldr	r3, [pc, #40]	; (800e2b8 <find_volume+0x49c>)
 800e28e:	801a      	strh	r2, [r3, #0]
 800e290:	4b09      	ldr	r3, [pc, #36]	; (800e2b8 <find_volume+0x49c>)
 800e292:	881a      	ldrh	r2, [r3, #0]
 800e294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e296:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800e298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e29a:	4a08      	ldr	r2, [pc, #32]	; (800e2bc <find_volume+0x4a0>)
 800e29c:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e29e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e2a0:	f7fe fa7a 	bl	800c798 <clear_lock>
#endif
	return FR_OK;
 800e2a4:	2300      	movs	r3, #0
}
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	3758      	adds	r7, #88	; 0x58
 800e2aa:	46bd      	mov	sp, r7
 800e2ac:	bd80      	pop	{r7, pc}
 800e2ae:	bf00      	nop
 800e2b0:	41615252 	.word	0x41615252
 800e2b4:	61417272 	.word	0x61417272
 800e2b8:	200010dc 	.word	0x200010dc
 800e2bc:	20001100 	.word	0x20001100

0800e2c0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e2c0:	b580      	push	{r7, lr}
 800e2c2:	b084      	sub	sp, #16
 800e2c4:	af00      	add	r7, sp, #0
 800e2c6:	6078      	str	r0, [r7, #4]
 800e2c8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e2ca:	2309      	movs	r3, #9
 800e2cc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d01c      	beq.n	800e30e <validate+0x4e>
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d018      	beq.n	800e30e <validate+0x4e>
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	781b      	ldrb	r3, [r3, #0]
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d013      	beq.n	800e30e <validate+0x4e>
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	889a      	ldrh	r2, [r3, #4]
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	88db      	ldrh	r3, [r3, #6]
 800e2f0:	429a      	cmp	r2, r3
 800e2f2:	d10c      	bne.n	800e30e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	785b      	ldrb	r3, [r3, #1]
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	f7fd ffa2 	bl	800c244 <disk_status>
 800e300:	4603      	mov	r3, r0
 800e302:	f003 0301 	and.w	r3, r3, #1
 800e306:	2b00      	cmp	r3, #0
 800e308:	d101      	bne.n	800e30e <validate+0x4e>
			res = FR_OK;
 800e30a:	2300      	movs	r3, #0
 800e30c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e30e:	7bfb      	ldrb	r3, [r7, #15]
 800e310:	2b00      	cmp	r3, #0
 800e312:	d102      	bne.n	800e31a <validate+0x5a>
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	e000      	b.n	800e31c <validate+0x5c>
 800e31a:	2300      	movs	r3, #0
 800e31c:	683a      	ldr	r2, [r7, #0]
 800e31e:	6013      	str	r3, [r2, #0]
	return res;
 800e320:	7bfb      	ldrb	r3, [r7, #15]
}
 800e322:	4618      	mov	r0, r3
 800e324:	3710      	adds	r7, #16
 800e326:	46bd      	mov	sp, r7
 800e328:	bd80      	pop	{r7, pc}
	...

0800e32c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e32c:	b580      	push	{r7, lr}
 800e32e:	b088      	sub	sp, #32
 800e330:	af00      	add	r7, sp, #0
 800e332:	60f8      	str	r0, [r7, #12]
 800e334:	60b9      	str	r1, [r7, #8]
 800e336:	4613      	mov	r3, r2
 800e338:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e33a:	68bb      	ldr	r3, [r7, #8]
 800e33c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e33e:	f107 0310 	add.w	r3, r7, #16
 800e342:	4618      	mov	r0, r3
 800e344:	f7ff fccf 	bl	800dce6 <get_ldnumber>
 800e348:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e34a:	69fb      	ldr	r3, [r7, #28]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	da01      	bge.n	800e354 <f_mount+0x28>
 800e350:	230b      	movs	r3, #11
 800e352:	e02b      	b.n	800e3ac <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e354:	4a17      	ldr	r2, [pc, #92]	; (800e3b4 <f_mount+0x88>)
 800e356:	69fb      	ldr	r3, [r7, #28]
 800e358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e35c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e35e:	69bb      	ldr	r3, [r7, #24]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d005      	beq.n	800e370 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e364:	69b8      	ldr	r0, [r7, #24]
 800e366:	f7fe fa17 	bl	800c798 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e36a:	69bb      	ldr	r3, [r7, #24]
 800e36c:	2200      	movs	r2, #0
 800e36e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	2b00      	cmp	r3, #0
 800e374:	d002      	beq.n	800e37c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	2200      	movs	r2, #0
 800e37a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e37c:	68fa      	ldr	r2, [r7, #12]
 800e37e:	490d      	ldr	r1, [pc, #52]	; (800e3b4 <f_mount+0x88>)
 800e380:	69fb      	ldr	r3, [r7, #28]
 800e382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d002      	beq.n	800e392 <f_mount+0x66>
 800e38c:	79fb      	ldrb	r3, [r7, #7]
 800e38e:	2b01      	cmp	r3, #1
 800e390:	d001      	beq.n	800e396 <f_mount+0x6a>
 800e392:	2300      	movs	r3, #0
 800e394:	e00a      	b.n	800e3ac <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e396:	f107 010c 	add.w	r1, r7, #12
 800e39a:	f107 0308 	add.w	r3, r7, #8
 800e39e:	2200      	movs	r2, #0
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	f7ff fd3b 	bl	800de1c <find_volume>
 800e3a6:	4603      	mov	r3, r0
 800e3a8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e3aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	3720      	adds	r7, #32
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	bd80      	pop	{r7, pc}
 800e3b4:	200010d8 	.word	0x200010d8

0800e3b8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e3b8:	b580      	push	{r7, lr}
 800e3ba:	b09a      	sub	sp, #104	; 0x68
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	60f8      	str	r0, [r7, #12]
 800e3c0:	60b9      	str	r1, [r7, #8]
 800e3c2:	4613      	mov	r3, r2
 800e3c4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d101      	bne.n	800e3d0 <f_open+0x18>
 800e3cc:	2309      	movs	r3, #9
 800e3ce:	e1ad      	b.n	800e72c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e3d0:	79fb      	ldrb	r3, [r7, #7]
 800e3d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e3d6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800e3d8:	79fa      	ldrb	r2, [r7, #7]
 800e3da:	f107 0110 	add.w	r1, r7, #16
 800e3de:	f107 0308 	add.w	r3, r7, #8
 800e3e2:	4618      	mov	r0, r3
 800e3e4:	f7ff fd1a 	bl	800de1c <find_volume>
 800e3e8:	4603      	mov	r3, r0
 800e3ea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800e3ee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	f040 8191 	bne.w	800e71a <f_open+0x362>
		dj.obj.fs = fs;
 800e3f8:	693b      	ldr	r3, [r7, #16]
 800e3fa:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e3fc:	68ba      	ldr	r2, [r7, #8]
 800e3fe:	f107 0314 	add.w	r3, r7, #20
 800e402:	4611      	mov	r1, r2
 800e404:	4618      	mov	r0, r3
 800e406:	f7ff fbfd 	bl	800dc04 <follow_path>
 800e40a:	4603      	mov	r3, r0
 800e40c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e410:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e414:	2b00      	cmp	r3, #0
 800e416:	d11a      	bne.n	800e44e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e418:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e41c:	b25b      	sxtb	r3, r3
 800e41e:	2b00      	cmp	r3, #0
 800e420:	da03      	bge.n	800e42a <f_open+0x72>
				res = FR_INVALID_NAME;
 800e422:	2306      	movs	r3, #6
 800e424:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e428:	e011      	b.n	800e44e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e42a:	79fb      	ldrb	r3, [r7, #7]
 800e42c:	f023 0301 	bic.w	r3, r3, #1
 800e430:	2b00      	cmp	r3, #0
 800e432:	bf14      	ite	ne
 800e434:	2301      	movne	r3, #1
 800e436:	2300      	moveq	r3, #0
 800e438:	b2db      	uxtb	r3, r3
 800e43a:	461a      	mov	r2, r3
 800e43c:	f107 0314 	add.w	r3, r7, #20
 800e440:	4611      	mov	r1, r2
 800e442:	4618      	mov	r0, r3
 800e444:	f7fe f89c 	bl	800c580 <chk_lock>
 800e448:	4603      	mov	r3, r0
 800e44a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e44e:	79fb      	ldrb	r3, [r7, #7]
 800e450:	f003 031c 	and.w	r3, r3, #28
 800e454:	2b00      	cmp	r3, #0
 800e456:	d07f      	beq.n	800e558 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800e458:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d017      	beq.n	800e490 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e460:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e464:	2b04      	cmp	r3, #4
 800e466:	d10e      	bne.n	800e486 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e468:	f7fe f8e6 	bl	800c638 <enq_lock>
 800e46c:	4603      	mov	r3, r0
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d006      	beq.n	800e480 <f_open+0xc8>
 800e472:	f107 0314 	add.w	r3, r7, #20
 800e476:	4618      	mov	r0, r3
 800e478:	f7ff f914 	bl	800d6a4 <dir_register>
 800e47c:	4603      	mov	r3, r0
 800e47e:	e000      	b.n	800e482 <f_open+0xca>
 800e480:	2312      	movs	r3, #18
 800e482:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e486:	79fb      	ldrb	r3, [r7, #7]
 800e488:	f043 0308 	orr.w	r3, r3, #8
 800e48c:	71fb      	strb	r3, [r7, #7]
 800e48e:	e010      	b.n	800e4b2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e490:	7ebb      	ldrb	r3, [r7, #26]
 800e492:	f003 0311 	and.w	r3, r3, #17
 800e496:	2b00      	cmp	r3, #0
 800e498:	d003      	beq.n	800e4a2 <f_open+0xea>
					res = FR_DENIED;
 800e49a:	2307      	movs	r3, #7
 800e49c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e4a0:	e007      	b.n	800e4b2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e4a2:	79fb      	ldrb	r3, [r7, #7]
 800e4a4:	f003 0304 	and.w	r3, r3, #4
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d002      	beq.n	800e4b2 <f_open+0xfa>
 800e4ac:	2308      	movs	r3, #8
 800e4ae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e4b2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d168      	bne.n	800e58c <f_open+0x1d4>
 800e4ba:	79fb      	ldrb	r3, [r7, #7]
 800e4bc:	f003 0308 	and.w	r3, r3, #8
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d063      	beq.n	800e58c <f_open+0x1d4>
				dw = GET_FATTIME();
 800e4c4:	f7f3 ff54 	bl	8002370 <get_fattime>
 800e4c8:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e4ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4cc:	330e      	adds	r3, #14
 800e4ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e4d0:	4618      	mov	r0, r3
 800e4d2:	f7fd ffab 	bl	800c42c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e4d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4d8:	3316      	adds	r3, #22
 800e4da:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e4dc:	4618      	mov	r0, r3
 800e4de:	f7fd ffa5 	bl	800c42c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e4e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4e4:	330b      	adds	r3, #11
 800e4e6:	2220      	movs	r2, #32
 800e4e8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e4ea:	693b      	ldr	r3, [r7, #16]
 800e4ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e4ee:	4611      	mov	r1, r2
 800e4f0:	4618      	mov	r0, r3
 800e4f2:	f7fe fe4e 	bl	800d192 <ld_clust>
 800e4f6:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e4f8:	693b      	ldr	r3, [r7, #16]
 800e4fa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e4fc:	2200      	movs	r2, #0
 800e4fe:	4618      	mov	r0, r3
 800e500:	f7fe fe66 	bl	800d1d0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e506:	331c      	adds	r3, #28
 800e508:	2100      	movs	r1, #0
 800e50a:	4618      	mov	r0, r3
 800e50c:	f7fd ff8e 	bl	800c42c <st_dword>
					fs->wflag = 1;
 800e510:	693b      	ldr	r3, [r7, #16]
 800e512:	2201      	movs	r2, #1
 800e514:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e516:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d037      	beq.n	800e58c <f_open+0x1d4>
						dw = fs->winsect;
 800e51c:	693b      	ldr	r3, [r7, #16]
 800e51e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e520:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800e522:	f107 0314 	add.w	r3, r7, #20
 800e526:	2200      	movs	r2, #0
 800e528:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e52a:	4618      	mov	r0, r3
 800e52c:	f7fe fb79 	bl	800cc22 <remove_chain>
 800e530:	4603      	mov	r3, r0
 800e532:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800e536:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d126      	bne.n	800e58c <f_open+0x1d4>
							res = move_window(fs, dw);
 800e53e:	693b      	ldr	r3, [r7, #16]
 800e540:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e542:	4618      	mov	r0, r3
 800e544:	f7fe f990 	bl	800c868 <move_window>
 800e548:	4603      	mov	r3, r0
 800e54a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e54e:	693b      	ldr	r3, [r7, #16]
 800e550:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e552:	3a01      	subs	r2, #1
 800e554:	611a      	str	r2, [r3, #16]
 800e556:	e019      	b.n	800e58c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e558:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d115      	bne.n	800e58c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e560:	7ebb      	ldrb	r3, [r7, #26]
 800e562:	f003 0310 	and.w	r3, r3, #16
 800e566:	2b00      	cmp	r3, #0
 800e568:	d003      	beq.n	800e572 <f_open+0x1ba>
					res = FR_NO_FILE;
 800e56a:	2304      	movs	r3, #4
 800e56c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e570:	e00c      	b.n	800e58c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e572:	79fb      	ldrb	r3, [r7, #7]
 800e574:	f003 0302 	and.w	r3, r3, #2
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d007      	beq.n	800e58c <f_open+0x1d4>
 800e57c:	7ebb      	ldrb	r3, [r7, #26]
 800e57e:	f003 0301 	and.w	r3, r3, #1
 800e582:	2b00      	cmp	r3, #0
 800e584:	d002      	beq.n	800e58c <f_open+0x1d4>
						res = FR_DENIED;
 800e586:	2307      	movs	r3, #7
 800e588:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800e58c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e590:	2b00      	cmp	r3, #0
 800e592:	d128      	bne.n	800e5e6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e594:	79fb      	ldrb	r3, [r7, #7]
 800e596:	f003 0308 	and.w	r3, r3, #8
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d003      	beq.n	800e5a6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800e59e:	79fb      	ldrb	r3, [r7, #7]
 800e5a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e5a4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e5a6:	693b      	ldr	r3, [r7, #16]
 800e5a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800e5ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e5b4:	79fb      	ldrb	r3, [r7, #7]
 800e5b6:	f023 0301 	bic.w	r3, r3, #1
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	bf14      	ite	ne
 800e5be:	2301      	movne	r3, #1
 800e5c0:	2300      	moveq	r3, #0
 800e5c2:	b2db      	uxtb	r3, r3
 800e5c4:	461a      	mov	r2, r3
 800e5c6:	f107 0314 	add.w	r3, r7, #20
 800e5ca:	4611      	mov	r1, r2
 800e5cc:	4618      	mov	r0, r3
 800e5ce:	f7fe f855 	bl	800c67c <inc_lock>
 800e5d2:	4602      	mov	r2, r0
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	691b      	ldr	r3, [r3, #16]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d102      	bne.n	800e5e6 <f_open+0x22e>
 800e5e0:	2302      	movs	r3, #2
 800e5e2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e5e6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	f040 8095 	bne.w	800e71a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e5f0:	693b      	ldr	r3, [r7, #16]
 800e5f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e5f4:	4611      	mov	r1, r2
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	f7fe fdcb 	bl	800d192 <ld_clust>
 800e5fc:	4602      	mov	r2, r0
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e604:	331c      	adds	r3, #28
 800e606:	4618      	mov	r0, r3
 800e608:	f7fd fed2 	bl	800c3b0 <ld_dword>
 800e60c:	4602      	mov	r2, r0
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	2200      	movs	r2, #0
 800e616:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e618:	693a      	ldr	r2, [r7, #16]
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e61e:	693b      	ldr	r3, [r7, #16]
 800e620:	88da      	ldrh	r2, [r3, #6]
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	79fa      	ldrb	r2, [r7, #7]
 800e62a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	2200      	movs	r2, #0
 800e630:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	2200      	movs	r2, #0
 800e636:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	2200      	movs	r2, #0
 800e63c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	3330      	adds	r3, #48	; 0x30
 800e642:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e646:	2100      	movs	r1, #0
 800e648:	4618      	mov	r0, r3
 800e64a:	f7fd ff3c 	bl	800c4c6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e64e:	79fb      	ldrb	r3, [r7, #7]
 800e650:	f003 0320 	and.w	r3, r3, #32
 800e654:	2b00      	cmp	r3, #0
 800e656:	d060      	beq.n	800e71a <f_open+0x362>
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	68db      	ldr	r3, [r3, #12]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d05c      	beq.n	800e71a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	68da      	ldr	r2, [r3, #12]
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e668:	693b      	ldr	r3, [r7, #16]
 800e66a:	895b      	ldrh	r3, [r3, #10]
 800e66c:	031b      	lsls	r3, r3, #12
 800e66e:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	689b      	ldr	r3, [r3, #8]
 800e674:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	68db      	ldr	r3, [r3, #12]
 800e67a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e67c:	e016      	b.n	800e6ac <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e682:	4618      	mov	r0, r3
 800e684:	f7fe f93c 	bl	800c900 <get_fat>
 800e688:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800e68a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e68c:	2b01      	cmp	r3, #1
 800e68e:	d802      	bhi.n	800e696 <f_open+0x2de>
 800e690:	2302      	movs	r3, #2
 800e692:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e696:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e69c:	d102      	bne.n	800e6a4 <f_open+0x2ec>
 800e69e:	2301      	movs	r3, #1
 800e6a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e6a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e6a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e6a8:	1ad3      	subs	r3, r2, r3
 800e6aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e6ac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d103      	bne.n	800e6bc <f_open+0x304>
 800e6b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e6b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e6b8:	429a      	cmp	r2, r3
 800e6ba:	d8e0      	bhi.n	800e67e <f_open+0x2c6>
				}
				fp->clust = clst;
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e6c0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e6c2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d127      	bne.n	800e71a <f_open+0x362>
 800e6ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e6cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d022      	beq.n	800e71a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e6d4:	693b      	ldr	r3, [r7, #16]
 800e6d6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e6d8:	4618      	mov	r0, r3
 800e6da:	f7fe f8f2 	bl	800c8c2 <clust2sect>
 800e6de:	64f8      	str	r0, [r7, #76]	; 0x4c
 800e6e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d103      	bne.n	800e6ee <f_open+0x336>
						res = FR_INT_ERR;
 800e6e6:	2302      	movs	r3, #2
 800e6e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e6ec:	e015      	b.n	800e71a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e6ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e6f0:	0b1a      	lsrs	r2, r3, #12
 800e6f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e6f4:	441a      	add	r2, r3
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e6fa:	693b      	ldr	r3, [r7, #16]
 800e6fc:	7858      	ldrb	r0, [r3, #1]
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	6a1a      	ldr	r2, [r3, #32]
 800e708:	2301      	movs	r3, #1
 800e70a:	f7fd fddb 	bl	800c2c4 <disk_read>
 800e70e:	4603      	mov	r3, r0
 800e710:	2b00      	cmp	r3, #0
 800e712:	d002      	beq.n	800e71a <f_open+0x362>
 800e714:	2301      	movs	r3, #1
 800e716:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e71a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d002      	beq.n	800e728 <f_open+0x370>
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	2200      	movs	r2, #0
 800e726:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e728:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800e72c:	4618      	mov	r0, r3
 800e72e:	3768      	adds	r7, #104	; 0x68
 800e730:	46bd      	mov	sp, r7
 800e732:	bd80      	pop	{r7, pc}

0800e734 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800e734:	b580      	push	{r7, lr}
 800e736:	b08e      	sub	sp, #56	; 0x38
 800e738:	af00      	add	r7, sp, #0
 800e73a:	60f8      	str	r0, [r7, #12]
 800e73c:	60b9      	str	r1, [r7, #8]
 800e73e:	607a      	str	r2, [r7, #4]
 800e740:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800e742:	68bb      	ldr	r3, [r7, #8]
 800e744:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800e746:	683b      	ldr	r3, [r7, #0]
 800e748:	2200      	movs	r2, #0
 800e74a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	f107 0214 	add.w	r2, r7, #20
 800e752:	4611      	mov	r1, r2
 800e754:	4618      	mov	r0, r3
 800e756:	f7ff fdb3 	bl	800e2c0 <validate>
 800e75a:	4603      	mov	r3, r0
 800e75c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e760:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e764:	2b00      	cmp	r3, #0
 800e766:	d107      	bne.n	800e778 <f_read+0x44>
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	7d5b      	ldrb	r3, [r3, #21]
 800e76c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e770:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e774:	2b00      	cmp	r3, #0
 800e776:	d002      	beq.n	800e77e <f_read+0x4a>
 800e778:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e77c:	e115      	b.n	800e9aa <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	7d1b      	ldrb	r3, [r3, #20]
 800e782:	f003 0301 	and.w	r3, r3, #1
 800e786:	2b00      	cmp	r3, #0
 800e788:	d101      	bne.n	800e78e <f_read+0x5a>
 800e78a:	2307      	movs	r3, #7
 800e78c:	e10d      	b.n	800e9aa <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	68da      	ldr	r2, [r3, #12]
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	699b      	ldr	r3, [r3, #24]
 800e796:	1ad3      	subs	r3, r2, r3
 800e798:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800e79a:	687a      	ldr	r2, [r7, #4]
 800e79c:	6a3b      	ldr	r3, [r7, #32]
 800e79e:	429a      	cmp	r2, r3
 800e7a0:	f240 80fe 	bls.w	800e9a0 <f_read+0x26c>
 800e7a4:	6a3b      	ldr	r3, [r7, #32]
 800e7a6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800e7a8:	e0fa      	b.n	800e9a0 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	699b      	ldr	r3, [r3, #24]
 800e7ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	f040 80c6 	bne.w	800e944 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	699b      	ldr	r3, [r3, #24]
 800e7bc:	0b1b      	lsrs	r3, r3, #12
 800e7be:	697a      	ldr	r2, [r7, #20]
 800e7c0:	8952      	ldrh	r2, [r2, #10]
 800e7c2:	3a01      	subs	r2, #1
 800e7c4:	4013      	ands	r3, r2
 800e7c6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800e7c8:	69fb      	ldr	r3, [r7, #28]
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d12f      	bne.n	800e82e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	699b      	ldr	r3, [r3, #24]
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d103      	bne.n	800e7de <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	689b      	ldr	r3, [r3, #8]
 800e7da:	633b      	str	r3, [r7, #48]	; 0x30
 800e7dc:	e013      	b.n	800e806 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d007      	beq.n	800e7f6 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	699b      	ldr	r3, [r3, #24]
 800e7ea:	4619      	mov	r1, r3
 800e7ec:	68f8      	ldr	r0, [r7, #12]
 800e7ee:	f7fe fb15 	bl	800ce1c <clmt_clust>
 800e7f2:	6338      	str	r0, [r7, #48]	; 0x30
 800e7f4:	e007      	b.n	800e806 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800e7f6:	68fa      	ldr	r2, [r7, #12]
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	69db      	ldr	r3, [r3, #28]
 800e7fc:	4619      	mov	r1, r3
 800e7fe:	4610      	mov	r0, r2
 800e800:	f7fe f87e 	bl	800c900 <get_fat>
 800e804:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800e806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e808:	2b01      	cmp	r3, #1
 800e80a:	d804      	bhi.n	800e816 <f_read+0xe2>
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	2202      	movs	r2, #2
 800e810:	755a      	strb	r2, [r3, #21]
 800e812:	2302      	movs	r3, #2
 800e814:	e0c9      	b.n	800e9aa <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e81c:	d104      	bne.n	800e828 <f_read+0xf4>
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	2201      	movs	r2, #1
 800e822:	755a      	strb	r2, [r3, #21]
 800e824:	2301      	movs	r3, #1
 800e826:	e0c0      	b.n	800e9aa <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e82c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e82e:	697a      	ldr	r2, [r7, #20]
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	69db      	ldr	r3, [r3, #28]
 800e834:	4619      	mov	r1, r3
 800e836:	4610      	mov	r0, r2
 800e838:	f7fe f843 	bl	800c8c2 <clust2sect>
 800e83c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e83e:	69bb      	ldr	r3, [r7, #24]
 800e840:	2b00      	cmp	r3, #0
 800e842:	d104      	bne.n	800e84e <f_read+0x11a>
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	2202      	movs	r2, #2
 800e848:	755a      	strb	r2, [r3, #21]
 800e84a:	2302      	movs	r3, #2
 800e84c:	e0ad      	b.n	800e9aa <f_read+0x276>
			sect += csect;
 800e84e:	69ba      	ldr	r2, [r7, #24]
 800e850:	69fb      	ldr	r3, [r7, #28]
 800e852:	4413      	add	r3, r2
 800e854:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	0b1b      	lsrs	r3, r3, #12
 800e85a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800e85c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d039      	beq.n	800e8d6 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e862:	69fa      	ldr	r2, [r7, #28]
 800e864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e866:	4413      	add	r3, r2
 800e868:	697a      	ldr	r2, [r7, #20]
 800e86a:	8952      	ldrh	r2, [r2, #10]
 800e86c:	4293      	cmp	r3, r2
 800e86e:	d905      	bls.n	800e87c <f_read+0x148>
					cc = fs->csize - csect;
 800e870:	697b      	ldr	r3, [r7, #20]
 800e872:	895b      	ldrh	r3, [r3, #10]
 800e874:	461a      	mov	r2, r3
 800e876:	69fb      	ldr	r3, [r7, #28]
 800e878:	1ad3      	subs	r3, r2, r3
 800e87a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e87c:	697b      	ldr	r3, [r7, #20]
 800e87e:	7858      	ldrb	r0, [r3, #1]
 800e880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e882:	69ba      	ldr	r2, [r7, #24]
 800e884:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e886:	f7fd fd1d 	bl	800c2c4 <disk_read>
 800e88a:	4603      	mov	r3, r0
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d004      	beq.n	800e89a <f_read+0x166>
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	2201      	movs	r2, #1
 800e894:	755a      	strb	r2, [r3, #21]
 800e896:	2301      	movs	r3, #1
 800e898:	e087      	b.n	800e9aa <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	7d1b      	ldrb	r3, [r3, #20]
 800e89e:	b25b      	sxtb	r3, r3
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	da14      	bge.n	800e8ce <f_read+0x19a>
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	6a1a      	ldr	r2, [r3, #32]
 800e8a8:	69bb      	ldr	r3, [r7, #24]
 800e8aa:	1ad3      	subs	r3, r2, r3
 800e8ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e8ae:	429a      	cmp	r2, r3
 800e8b0:	d90d      	bls.n	800e8ce <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	6a1a      	ldr	r2, [r3, #32]
 800e8b6:	69bb      	ldr	r3, [r7, #24]
 800e8b8:	1ad3      	subs	r3, r2, r3
 800e8ba:	031b      	lsls	r3, r3, #12
 800e8bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8be:	18d0      	adds	r0, r2, r3
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	3330      	adds	r3, #48	; 0x30
 800e8c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e8c8:	4619      	mov	r1, r3
 800e8ca:	f7fd fddb 	bl	800c484 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800e8ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8d0:	031b      	lsls	r3, r3, #12
 800e8d2:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800e8d4:	e050      	b.n	800e978 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	6a1b      	ldr	r3, [r3, #32]
 800e8da:	69ba      	ldr	r2, [r7, #24]
 800e8dc:	429a      	cmp	r2, r3
 800e8de:	d02e      	beq.n	800e93e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	7d1b      	ldrb	r3, [r3, #20]
 800e8e4:	b25b      	sxtb	r3, r3
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	da18      	bge.n	800e91c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e8ea:	697b      	ldr	r3, [r7, #20]
 800e8ec:	7858      	ldrb	r0, [r3, #1]
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	6a1a      	ldr	r2, [r3, #32]
 800e8f8:	2301      	movs	r3, #1
 800e8fa:	f7fd fd03 	bl	800c304 <disk_write>
 800e8fe:	4603      	mov	r3, r0
 800e900:	2b00      	cmp	r3, #0
 800e902:	d004      	beq.n	800e90e <f_read+0x1da>
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	2201      	movs	r2, #1
 800e908:	755a      	strb	r2, [r3, #21]
 800e90a:	2301      	movs	r3, #1
 800e90c:	e04d      	b.n	800e9aa <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	7d1b      	ldrb	r3, [r3, #20]
 800e912:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e916:	b2da      	uxtb	r2, r3
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e91c:	697b      	ldr	r3, [r7, #20]
 800e91e:	7858      	ldrb	r0, [r3, #1]
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e926:	2301      	movs	r3, #1
 800e928:	69ba      	ldr	r2, [r7, #24]
 800e92a:	f7fd fccb 	bl	800c2c4 <disk_read>
 800e92e:	4603      	mov	r3, r0
 800e930:	2b00      	cmp	r3, #0
 800e932:	d004      	beq.n	800e93e <f_read+0x20a>
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	2201      	movs	r2, #1
 800e938:	755a      	strb	r2, [r3, #21]
 800e93a:	2301      	movs	r3, #1
 800e93c:	e035      	b.n	800e9aa <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	69ba      	ldr	r2, [r7, #24]
 800e942:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	699b      	ldr	r3, [r3, #24]
 800e948:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e94c:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 800e950:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800e952:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	429a      	cmp	r2, r3
 800e958:	d901      	bls.n	800e95e <f_read+0x22a>
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	699b      	ldr	r3, [r3, #24]
 800e968:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e96c:	4413      	add	r3, r2
 800e96e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e970:	4619      	mov	r1, r3
 800e972:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e974:	f7fd fd86 	bl	800c484 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800e978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e97a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e97c:	4413      	add	r3, r2
 800e97e:	627b      	str	r3, [r7, #36]	; 0x24
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	699a      	ldr	r2, [r3, #24]
 800e984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e986:	441a      	add	r2, r3
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	619a      	str	r2, [r3, #24]
 800e98c:	683b      	ldr	r3, [r7, #0]
 800e98e:	681a      	ldr	r2, [r3, #0]
 800e990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e992:	441a      	add	r2, r3
 800e994:	683b      	ldr	r3, [r7, #0]
 800e996:	601a      	str	r2, [r3, #0]
 800e998:	687a      	ldr	r2, [r7, #4]
 800e99a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e99c:	1ad3      	subs	r3, r2, r3
 800e99e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	f47f af01 	bne.w	800e7aa <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800e9a8:	2300      	movs	r3, #0
}
 800e9aa:	4618      	mov	r0, r3
 800e9ac:	3738      	adds	r7, #56	; 0x38
 800e9ae:	46bd      	mov	sp, r7
 800e9b0:	bd80      	pop	{r7, pc}

0800e9b2 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800e9b2:	b580      	push	{r7, lr}
 800e9b4:	b092      	sub	sp, #72	; 0x48
 800e9b6:	af00      	add	r7, sp, #0
 800e9b8:	60f8      	str	r0, [r7, #12]
 800e9ba:	60b9      	str	r1, [r7, #8]
 800e9bc:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800e9be:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800e9c2:	f107 030c 	add.w	r3, r7, #12
 800e9c6:	2200      	movs	r2, #0
 800e9c8:	4618      	mov	r0, r3
 800e9ca:	f7ff fa27 	bl	800de1c <find_volume>
 800e9ce:	4603      	mov	r3, r0
 800e9d0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800e9d4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	f040 8099 	bne.w	800eb10 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800e9de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800e9e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9e6:	695a      	ldr	r2, [r3, #20]
 800e9e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9ea:	699b      	ldr	r3, [r3, #24]
 800e9ec:	3b02      	subs	r3, #2
 800e9ee:	429a      	cmp	r2, r3
 800e9f0:	d804      	bhi.n	800e9fc <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800e9f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9f4:	695a      	ldr	r2, [r3, #20]
 800e9f6:	68bb      	ldr	r3, [r7, #8]
 800e9f8:	601a      	str	r2, [r3, #0]
 800e9fa:	e089      	b.n	800eb10 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800e9fc:	2300      	movs	r3, #0
 800e9fe:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800ea00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea02:	781b      	ldrb	r3, [r3, #0]
 800ea04:	2b01      	cmp	r3, #1
 800ea06:	d128      	bne.n	800ea5a <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800ea08:	2302      	movs	r3, #2
 800ea0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ea0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea0e:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800ea10:	f107 0314 	add.w	r3, r7, #20
 800ea14:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ea16:	4618      	mov	r0, r3
 800ea18:	f7fd ff72 	bl	800c900 <get_fat>
 800ea1c:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800ea1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea24:	d103      	bne.n	800ea2e <f_getfree+0x7c>
 800ea26:	2301      	movs	r3, #1
 800ea28:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800ea2c:	e063      	b.n	800eaf6 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800ea2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea30:	2b01      	cmp	r3, #1
 800ea32:	d103      	bne.n	800ea3c <f_getfree+0x8a>
 800ea34:	2302      	movs	r3, #2
 800ea36:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800ea3a:	e05c      	b.n	800eaf6 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800ea3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d102      	bne.n	800ea48 <f_getfree+0x96>
 800ea42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea44:	3301      	adds	r3, #1
 800ea46:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800ea48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea4a:	3301      	adds	r3, #1
 800ea4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ea4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea50:	699b      	ldr	r3, [r3, #24]
 800ea52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ea54:	429a      	cmp	r2, r3
 800ea56:	d3db      	bcc.n	800ea10 <f_getfree+0x5e>
 800ea58:	e04d      	b.n	800eaf6 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800ea5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea5c:	699b      	ldr	r3, [r3, #24]
 800ea5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ea60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea64:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800ea66:	2300      	movs	r3, #0
 800ea68:	637b      	str	r3, [r7, #52]	; 0x34
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800ea6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d113      	bne.n	800ea9c <f_getfree+0xea>
							res = move_window(fs, sect++);
 800ea74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ea76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea78:	1c5a      	adds	r2, r3, #1
 800ea7a:	63ba      	str	r2, [r7, #56]	; 0x38
 800ea7c:	4619      	mov	r1, r3
 800ea7e:	f7fd fef3 	bl	800c868 <move_window>
 800ea82:	4603      	mov	r3, r0
 800ea84:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800ea88:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d131      	bne.n	800eaf4 <f_getfree+0x142>
							p = fs->win;
 800ea90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea92:	3334      	adds	r3, #52	; 0x34
 800ea94:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800ea96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ea9a:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800ea9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea9e:	781b      	ldrb	r3, [r3, #0]
 800eaa0:	2b02      	cmp	r3, #2
 800eaa2:	d10f      	bne.n	800eac4 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800eaa4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eaa6:	f7fd fc6b 	bl	800c380 <ld_word>
 800eaaa:	4603      	mov	r3, r0
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d102      	bne.n	800eab6 <f_getfree+0x104>
 800eab0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eab2:	3301      	adds	r3, #1
 800eab4:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800eab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eab8:	3302      	adds	r3, #2
 800eaba:	633b      	str	r3, [r7, #48]	; 0x30
 800eabc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eabe:	3b02      	subs	r3, #2
 800eac0:	637b      	str	r3, [r7, #52]	; 0x34
 800eac2:	e010      	b.n	800eae6 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800eac4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eac6:	f7fd fc73 	bl	800c3b0 <ld_dword>
 800eaca:	4603      	mov	r3, r0
 800eacc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d102      	bne.n	800eada <f_getfree+0x128>
 800ead4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ead6:	3301      	adds	r3, #1
 800ead8:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800eada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eadc:	3304      	adds	r3, #4
 800eade:	633b      	str	r3, [r7, #48]	; 0x30
 800eae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eae2:	3b04      	subs	r3, #4
 800eae4:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800eae6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eae8:	3b01      	subs	r3, #1
 800eaea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eaec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d1bd      	bne.n	800ea6e <f_getfree+0xbc>
 800eaf2:	e000      	b.n	800eaf6 <f_getfree+0x144>
							if (res != FR_OK) break;
 800eaf4:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800eaf6:	68bb      	ldr	r3, [r7, #8]
 800eaf8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800eafa:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800eafc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eafe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800eb00:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800eb02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb04:	791a      	ldrb	r2, [r3, #4]
 800eb06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb08:	f042 0201 	orr.w	r2, r2, #1
 800eb0c:	b2d2      	uxtb	r2, r2
 800eb0e:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800eb10:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800eb14:	4618      	mov	r0, r3
 800eb16:	3748      	adds	r7, #72	; 0x48
 800eb18:	46bd      	mov	sp, r7
 800eb1a:	bd80      	pop	{r7, pc}

0800eb1c <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800eb1c:	b590      	push	{r4, r7, lr}
 800eb1e:	b09d      	sub	sp, #116	; 0x74
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	60f8      	str	r0, [r7, #12]
 800eb24:	607a      	str	r2, [r7, #4]
 800eb26:	603b      	str	r3, [r7, #0]
 800eb28:	460b      	mov	r3, r1
 800eb2a:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800eb2c:	2301      	movs	r3, #1
 800eb2e:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800eb30:	f44f 7300 	mov.w	r3, #512	; 0x200
 800eb34:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800eb36:	f107 030c 	add.w	r3, r7, #12
 800eb3a:	4618      	mov	r0, r3
 800eb3c:	f7ff f8d3 	bl	800dce6 <get_ldnumber>
 800eb40:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800eb42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	da02      	bge.n	800eb4e <f_mkfs+0x32>
 800eb48:	230b      	movs	r3, #11
 800eb4a:	f000 bc0d 	b.w	800f368 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800eb4e:	4a94      	ldr	r2, [pc, #592]	; (800eda0 <f_mkfs+0x284>)
 800eb50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d005      	beq.n	800eb66 <f_mkfs+0x4a>
 800eb5a:	4a91      	ldr	r2, [pc, #580]	; (800eda0 <f_mkfs+0x284>)
 800eb5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb62:	2200      	movs	r2, #0
 800eb64:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800eb66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb68:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800eb6c:	2300      	movs	r3, #0
 800eb6e:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800eb72:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800eb76:	4618      	mov	r0, r3
 800eb78:	f7fd fb7e 	bl	800c278 <disk_initialize>
 800eb7c:	4603      	mov	r3, r0
 800eb7e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800eb82:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800eb86:	f003 0301 	and.w	r3, r3, #1
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d001      	beq.n	800eb92 <f_mkfs+0x76>
 800eb8e:	2303      	movs	r3, #3
 800eb90:	e3ea      	b.n	800f368 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800eb92:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800eb96:	f003 0304 	and.w	r3, r3, #4
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d001      	beq.n	800eba2 <f_mkfs+0x86>
 800eb9e:	230a      	movs	r3, #10
 800eba0:	e3e2      	b.n	800f368 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800eba2:	f107 0214 	add.w	r2, r7, #20
 800eba6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800ebaa:	2103      	movs	r1, #3
 800ebac:	4618      	mov	r0, r3
 800ebae:	f7fd fbc9 	bl	800c344 <disk_ioctl>
 800ebb2:	4603      	mov	r3, r0
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d10c      	bne.n	800ebd2 <f_mkfs+0xb6>
 800ebb8:	697b      	ldr	r3, [r7, #20]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d009      	beq.n	800ebd2 <f_mkfs+0xb6>
 800ebbe:	697b      	ldr	r3, [r7, #20]
 800ebc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ebc4:	d805      	bhi.n	800ebd2 <f_mkfs+0xb6>
 800ebc6:	697b      	ldr	r3, [r7, #20]
 800ebc8:	1e5a      	subs	r2, r3, #1
 800ebca:	697b      	ldr	r3, [r7, #20]
 800ebcc:	4013      	ands	r3, r2
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d001      	beq.n	800ebd6 <f_mkfs+0xba>
 800ebd2:	2301      	movs	r3, #1
 800ebd4:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 800ebd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ebda:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d003      	beq.n	800ebea <f_mkfs+0xce>
 800ebe2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ebe4:	687a      	ldr	r2, [r7, #4]
 800ebe6:	429a      	cmp	r2, r3
 800ebe8:	d309      	bcc.n	800ebfe <f_mkfs+0xe2>
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ebf0:	d805      	bhi.n	800ebfe <f_mkfs+0xe2>
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	1e5a      	subs	r2, r3, #1
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	4013      	ands	r3, r2
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d001      	beq.n	800ec02 <f_mkfs+0xe6>
 800ebfe:	2313      	movs	r3, #19
 800ec00:	e3b2      	b.n	800f368 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 800ec02:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ec04:	687a      	ldr	r2, [r7, #4]
 800ec06:	fbb2 f3f3 	udiv	r3, r2, r3
 800ec0a:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800ec0c:	683b      	ldr	r3, [r7, #0]
 800ec0e:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800ec10:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ec12:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ec16:	fbb2 f3f3 	udiv	r3, r2, r3
 800ec1a:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800ec1c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ec1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec20:	fb02 f303 	mul.w	r3, r2, r3
 800ec24:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 800ec26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d101      	bne.n	800ec30 <f_mkfs+0x114>
 800ec2c:	230e      	movs	r3, #14
 800ec2e:	e39b      	b.n	800f368 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800ec30:	f107 0210 	add.w	r2, r7, #16
 800ec34:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800ec38:	2101      	movs	r1, #1
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	f7fd fb82 	bl	800c344 <disk_ioctl>
 800ec40:	4603      	mov	r3, r0
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d001      	beq.n	800ec4a <f_mkfs+0x12e>
 800ec46:	2301      	movs	r3, #1
 800ec48:	e38e      	b.n	800f368 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800ec4a:	7afb      	ldrb	r3, [r7, #11]
 800ec4c:	f003 0308 	and.w	r3, r3, #8
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d001      	beq.n	800ec58 <f_mkfs+0x13c>
 800ec54:	2300      	movs	r3, #0
 800ec56:	e000      	b.n	800ec5a <f_mkfs+0x13e>
 800ec58:	233f      	movs	r3, #63	; 0x3f
 800ec5a:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800ec5c:	693b      	ldr	r3, [r7, #16]
 800ec5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec60:	429a      	cmp	r2, r3
 800ec62:	d901      	bls.n	800ec68 <f_mkfs+0x14c>
 800ec64:	230e      	movs	r3, #14
 800ec66:	e37f      	b.n	800f368 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 800ec68:	693a      	ldr	r2, [r7, #16]
 800ec6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec6c:	1ad3      	subs	r3, r2, r3
 800ec6e:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800ec70:	693b      	ldr	r3, [r7, #16]
 800ec72:	2b7f      	cmp	r3, #127	; 0x7f
 800ec74:	d801      	bhi.n	800ec7a <f_mkfs+0x15e>
 800ec76:	230e      	movs	r3, #14
 800ec78:	e376      	b.n	800f368 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	2b80      	cmp	r3, #128	; 0x80
 800ec7e:	d901      	bls.n	800ec84 <f_mkfs+0x168>
 800ec80:	2313      	movs	r3, #19
 800ec82:	e371      	b.n	800f368 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800ec84:	7afb      	ldrb	r3, [r7, #11]
 800ec86:	f003 0302 	and.w	r3, r3, #2
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d00d      	beq.n	800ecaa <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800ec8e:	7afb      	ldrb	r3, [r7, #11]
 800ec90:	f003 0307 	and.w	r3, r3, #7
 800ec94:	2b02      	cmp	r3, #2
 800ec96:	d004      	beq.n	800eca2 <f_mkfs+0x186>
 800ec98:	7afb      	ldrb	r3, [r7, #11]
 800ec9a:	f003 0301 	and.w	r3, r3, #1
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d103      	bne.n	800ecaa <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800eca2:	2303      	movs	r3, #3
 800eca4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800eca8:	e009      	b.n	800ecbe <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800ecaa:	7afb      	ldrb	r3, [r7, #11]
 800ecac:	f003 0301 	and.w	r3, r3, #1
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d101      	bne.n	800ecb8 <f_mkfs+0x19c>
 800ecb4:	2313      	movs	r3, #19
 800ecb6:	e357      	b.n	800f368 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 800ecb8:	2302      	movs	r3, #2
 800ecba:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	66fb      	str	r3, [r7, #108]	; 0x6c
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800ecc2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ecc6:	2b03      	cmp	r3, #3
 800ecc8:	d13c      	bne.n	800ed44 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800ecca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d11b      	bne.n	800ed08 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800ecd0:	693b      	ldr	r3, [r7, #16]
 800ecd2:	0c5b      	lsrs	r3, r3, #17
 800ecd4:	663b      	str	r3, [r7, #96]	; 0x60
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800ecd6:	2300      	movs	r3, #0
 800ecd8:	64bb      	str	r3, [r7, #72]	; 0x48
 800ecda:	2301      	movs	r3, #1
 800ecdc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ecde:	e005      	b.n	800ecec <f_mkfs+0x1d0>
 800ece0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ece2:	3301      	adds	r3, #1
 800ece4:	64bb      	str	r3, [r7, #72]	; 0x48
 800ece6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ece8:	005b      	lsls	r3, r3, #1
 800ecea:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ecec:	4a2d      	ldr	r2, [pc, #180]	; (800eda4 <f_mkfs+0x288>)
 800ecee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ecf0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d007      	beq.n	800ed08 <f_mkfs+0x1ec>
 800ecf8:	4a2a      	ldr	r2, [pc, #168]	; (800eda4 <f_mkfs+0x288>)
 800ecfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ecfc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ed00:	461a      	mov	r2, r3
 800ed02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ed04:	4293      	cmp	r3, r2
 800ed06:	d2eb      	bcs.n	800ece0 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800ed08:	693a      	ldr	r2, [r7, #16]
 800ed0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed0c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ed10:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800ed12:	6a3b      	ldr	r3, [r7, #32]
 800ed14:	3302      	adds	r3, #2
 800ed16:	009a      	lsls	r2, r3, #2
 800ed18:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ed1a:	4413      	add	r3, r2
 800ed1c:	1e5a      	subs	r2, r3, #1
 800ed1e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ed20:	fbb2 f3f3 	udiv	r3, r2, r3
 800ed24:	657b      	str	r3, [r7, #84]	; 0x54
				sz_rsv = 32;	/* Number of reserved sectors */
 800ed26:	2320      	movs	r3, #32
 800ed28:	65bb      	str	r3, [r7, #88]	; 0x58
				sz_dir = 0;		/* No static directory */
 800ed2a:	2300      	movs	r3, #0
 800ed2c:	653b      	str	r3, [r7, #80]	; 0x50
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800ed2e:	6a3b      	ldr	r3, [r7, #32]
 800ed30:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ed34:	4293      	cmp	r3, r2
 800ed36:	d903      	bls.n	800ed40 <f_mkfs+0x224>
 800ed38:	6a3b      	ldr	r3, [r7, #32]
 800ed3a:	4a1b      	ldr	r2, [pc, #108]	; (800eda8 <f_mkfs+0x28c>)
 800ed3c:	4293      	cmp	r3, r2
 800ed3e:	d952      	bls.n	800ede6 <f_mkfs+0x2ca>
 800ed40:	230e      	movs	r3, #14
 800ed42:	e311      	b.n	800f368 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800ed44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d11b      	bne.n	800ed82 <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800ed4a:	693b      	ldr	r3, [r7, #16]
 800ed4c:	0b1b      	lsrs	r3, r3, #12
 800ed4e:	663b      	str	r3, [r7, #96]	; 0x60
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800ed50:	2300      	movs	r3, #0
 800ed52:	64bb      	str	r3, [r7, #72]	; 0x48
 800ed54:	2301      	movs	r3, #1
 800ed56:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ed58:	e005      	b.n	800ed66 <f_mkfs+0x24a>
 800ed5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed5c:	3301      	adds	r3, #1
 800ed5e:	64bb      	str	r3, [r7, #72]	; 0x48
 800ed60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed62:	005b      	lsls	r3, r3, #1
 800ed64:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ed66:	4a11      	ldr	r2, [pc, #68]	; (800edac <f_mkfs+0x290>)
 800ed68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d007      	beq.n	800ed82 <f_mkfs+0x266>
 800ed72:	4a0e      	ldr	r2, [pc, #56]	; (800edac <f_mkfs+0x290>)
 800ed74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ed7a:	461a      	mov	r2, r3
 800ed7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ed7e:	4293      	cmp	r3, r2
 800ed80:	d2eb      	bcs.n	800ed5a <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800ed82:	693a      	ldr	r2, [r7, #16]
 800ed84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed86:	fbb2 f3f3 	udiv	r3, r2, r3
 800ed8a:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 800ed8c:	6a3b      	ldr	r3, [r7, #32]
 800ed8e:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ed92:	4293      	cmp	r3, r2
 800ed94:	d90c      	bls.n	800edb0 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800ed96:	6a3b      	ldr	r3, [r7, #32]
 800ed98:	3302      	adds	r3, #2
 800ed9a:	005b      	lsls	r3, r3, #1
 800ed9c:	663b      	str	r3, [r7, #96]	; 0x60
 800ed9e:	e012      	b.n	800edc6 <f_mkfs+0x2aa>
 800eda0:	200010d8 	.word	0x200010d8
 800eda4:	08013194 	.word	0x08013194
 800eda8:	0ffffff5 	.word	0x0ffffff5
 800edac:	080131a4 	.word	0x080131a4
				} else {
					fmt = FS_FAT12;
 800edb0:	2301      	movs	r3, #1
 800edb2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800edb6:	6a3a      	ldr	r2, [r7, #32]
 800edb8:	4613      	mov	r3, r2
 800edba:	005b      	lsls	r3, r3, #1
 800edbc:	4413      	add	r3, r2
 800edbe:	3301      	adds	r3, #1
 800edc0:	085b      	lsrs	r3, r3, #1
 800edc2:	3303      	adds	r3, #3
 800edc4:	663b      	str	r3, [r7, #96]	; 0x60
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800edc6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800edc8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800edca:	4413      	add	r3, r2
 800edcc:	1e5a      	subs	r2, r3, #1
 800edce:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800edd0:	fbb2 f3f3 	udiv	r3, r2, r3
 800edd4:	657b      	str	r3, [r7, #84]	; 0x54
				sz_rsv = 1;						/* Number of reserved sectors */
 800edd6:	2301      	movs	r3, #1
 800edd8:	65bb      	str	r3, [r7, #88]	; 0x58
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800edda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eddc:	015a      	lsls	r2, r3, #5
 800edde:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ede0:	fbb2 f3f3 	udiv	r3, r2, r3
 800ede4:	653b      	str	r3, [r7, #80]	; 0x50
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800ede6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ede8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800edea:	4413      	add	r3, r2
 800edec:	65fb      	str	r3, [r7, #92]	; 0x5c
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800edee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800edf0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800edf2:	fb02 f203 	mul.w	r2, r2, r3
 800edf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800edf8:	4413      	add	r3, r2
 800edfa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800edfc:	4413      	add	r3, r2
 800edfe:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800ee00:	697a      	ldr	r2, [r7, #20]
 800ee02:	69fb      	ldr	r3, [r7, #28]
 800ee04:	4413      	add	r3, r2
 800ee06:	1e5a      	subs	r2, r3, #1
 800ee08:	697b      	ldr	r3, [r7, #20]
 800ee0a:	425b      	negs	r3, r3
 800ee0c:	401a      	ands	r2, r3
 800ee0e:	69fb      	ldr	r3, [r7, #28]
 800ee10:	1ad3      	subs	r3, r2, r3
 800ee12:	663b      	str	r3, [r7, #96]	; 0x60
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800ee14:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ee18:	2b03      	cmp	r3, #3
 800ee1a:	d108      	bne.n	800ee2e <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800ee1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ee1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ee20:	4413      	add	r3, r2
 800ee22:	65bb      	str	r3, [r7, #88]	; 0x58
 800ee24:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ee26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ee28:	4413      	add	r3, r2
 800ee2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ee2c:	e006      	b.n	800ee3c <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800ee2e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ee30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee32:	fbb2 f3f3 	udiv	r3, r2, r3
 800ee36:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ee38:	4413      	add	r3, r2
 800ee3a:	657b      	str	r3, [r7, #84]	; 0x54
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800ee3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee3e:	011a      	lsls	r2, r3, #4
 800ee40:	69fb      	ldr	r3, [r7, #28]
 800ee42:	441a      	add	r2, r3
 800ee44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee46:	1ad2      	subs	r2, r2, r3
 800ee48:	693b      	ldr	r3, [r7, #16]
 800ee4a:	429a      	cmp	r2, r3
 800ee4c:	d901      	bls.n	800ee52 <f_mkfs+0x336>
 800ee4e:	230e      	movs	r3, #14
 800ee50:	e28a      	b.n	800f368 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800ee52:	693a      	ldr	r2, [r7, #16]
 800ee54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ee56:	1ad2      	subs	r2, r2, r3
 800ee58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ee5a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ee5c:	fb01 f303 	mul.w	r3, r1, r3
 800ee60:	1ad2      	subs	r2, r2, r3
 800ee62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee64:	1ad2      	subs	r2, r2, r3
 800ee66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee68:	fbb2 f3f3 	udiv	r3, r2, r3
 800ee6c:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800ee6e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ee72:	2b03      	cmp	r3, #3
 800ee74:	d10f      	bne.n	800ee96 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800ee76:	6a3b      	ldr	r3, [r7, #32]
 800ee78:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ee7c:	4293      	cmp	r3, r2
 800ee7e:	d80a      	bhi.n	800ee96 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d105      	bne.n	800ee92 <f_mkfs+0x376>
 800ee86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee88:	085b      	lsrs	r3, r3, #1
 800ee8a:	607b      	str	r3, [r7, #4]
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d144      	bne.n	800ef1c <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800ee92:	230e      	movs	r3, #14
 800ee94:	e268      	b.n	800f368 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 800ee96:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ee9a:	2b02      	cmp	r3, #2
 800ee9c:	d133      	bne.n	800ef06 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800ee9e:	6a3b      	ldr	r3, [r7, #32]
 800eea0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800eea4:	4293      	cmp	r3, r2
 800eea6:	d91e      	bls.n	800eee6 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d107      	bne.n	800eebe <f_mkfs+0x3a2>
 800eeae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eeb0:	005b      	lsls	r3, r3, #1
 800eeb2:	2b40      	cmp	r3, #64	; 0x40
 800eeb4:	d803      	bhi.n	800eebe <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800eeb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eeb8:	005b      	lsls	r3, r3, #1
 800eeba:	607b      	str	r3, [r7, #4]
 800eebc:	e033      	b.n	800ef26 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 800eebe:	7afb      	ldrb	r3, [r7, #11]
 800eec0:	f003 0302 	and.w	r3, r3, #2
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d003      	beq.n	800eed0 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800eec8:	2303      	movs	r3, #3
 800eeca:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800eece:	e02a      	b.n	800ef26 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d105      	bne.n	800eee2 <f_mkfs+0x3c6>
 800eed6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eed8:	005b      	lsls	r3, r3, #1
 800eeda:	607b      	str	r3, [r7, #4]
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	2b80      	cmp	r3, #128	; 0x80
 800eee0:	d91e      	bls.n	800ef20 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 800eee2:	230e      	movs	r3, #14
 800eee4:	e240      	b.n	800f368 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800eee6:	6a3b      	ldr	r3, [r7, #32]
 800eee8:	f640 72f5 	movw	r2, #4085	; 0xff5
 800eeec:	4293      	cmp	r3, r2
 800eeee:	d80a      	bhi.n	800ef06 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d105      	bne.n	800ef02 <f_mkfs+0x3e6>
 800eef6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eef8:	005b      	lsls	r3, r3, #1
 800eefa:	607b      	str	r3, [r7, #4]
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	2b80      	cmp	r3, #128	; 0x80
 800ef00:	d910      	bls.n	800ef24 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 800ef02:	230e      	movs	r3, #14
 800ef04:	e230      	b.n	800f368 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800ef06:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ef0a:	2b01      	cmp	r3, #1
 800ef0c:	d10c      	bne.n	800ef28 <f_mkfs+0x40c>
 800ef0e:	6a3b      	ldr	r3, [r7, #32]
 800ef10:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ef14:	4293      	cmp	r3, r2
 800ef16:	d907      	bls.n	800ef28 <f_mkfs+0x40c>
 800ef18:	230e      	movs	r3, #14
 800ef1a:	e225      	b.n	800f368 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800ef1c:	bf00      	nop
 800ef1e:	e6ce      	b.n	800ecbe <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800ef20:	bf00      	nop
 800ef22:	e6cc      	b.n	800ecbe <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800ef24:	bf00      	nop
			pau = au;
 800ef26:	e6ca      	b.n	800ecbe <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 800ef28:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800ef2a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ef2c:	461a      	mov	r2, r3
 800ef2e:	2100      	movs	r1, #0
 800ef30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ef32:	f7fd fac8 	bl	800c4c6 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800ef36:	220b      	movs	r2, #11
 800ef38:	49bc      	ldr	r1, [pc, #752]	; (800f22c <f_mkfs+0x710>)
 800ef3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ef3c:	f7fd faa2 	bl	800c484 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800ef40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef42:	330b      	adds	r3, #11
 800ef44:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ef46:	4611      	mov	r1, r2
 800ef48:	4618      	mov	r0, r3
 800ef4a:	f7fd fa54 	bl	800c3f6 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800ef4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef50:	330d      	adds	r3, #13
 800ef52:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ef54:	b2d2      	uxtb	r2, r2
 800ef56:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800ef58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef5a:	330e      	adds	r3, #14
 800ef5c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ef5e:	b292      	uxth	r2, r2
 800ef60:	4611      	mov	r1, r2
 800ef62:	4618      	mov	r0, r3
 800ef64:	f7fd fa47 	bl	800c3f6 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800ef68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef6a:	3310      	adds	r3, #16
 800ef6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ef6e:	b2d2      	uxtb	r2, r2
 800ef70:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800ef72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef74:	f103 0211 	add.w	r2, r3, #17
 800ef78:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ef7c:	2b03      	cmp	r3, #3
 800ef7e:	d002      	beq.n	800ef86 <f_mkfs+0x46a>
 800ef80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef82:	b29b      	uxth	r3, r3
 800ef84:	e000      	b.n	800ef88 <f_mkfs+0x46c>
 800ef86:	2300      	movs	r3, #0
 800ef88:	4619      	mov	r1, r3
 800ef8a:	4610      	mov	r0, r2
 800ef8c:	f7fd fa33 	bl	800c3f6 <st_word>
		if (sz_vol < 0x10000) {
 800ef90:	693b      	ldr	r3, [r7, #16]
 800ef92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ef96:	d208      	bcs.n	800efaa <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800ef98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef9a:	3313      	adds	r3, #19
 800ef9c:	693a      	ldr	r2, [r7, #16]
 800ef9e:	b292      	uxth	r2, r2
 800efa0:	4611      	mov	r1, r2
 800efa2:	4618      	mov	r0, r3
 800efa4:	f7fd fa27 	bl	800c3f6 <st_word>
 800efa8:	e006      	b.n	800efb8 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800efaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efac:	3320      	adds	r3, #32
 800efae:	693a      	ldr	r2, [r7, #16]
 800efb0:	4611      	mov	r1, r2
 800efb2:	4618      	mov	r0, r3
 800efb4:	f7fd fa3a 	bl	800c42c <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800efb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efba:	3315      	adds	r3, #21
 800efbc:	22f8      	movs	r2, #248	; 0xf8
 800efbe:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800efc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efc2:	3318      	adds	r3, #24
 800efc4:	213f      	movs	r1, #63	; 0x3f
 800efc6:	4618      	mov	r0, r3
 800efc8:	f7fd fa15 	bl	800c3f6 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800efcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efce:	331a      	adds	r3, #26
 800efd0:	21ff      	movs	r1, #255	; 0xff
 800efd2:	4618      	mov	r0, r3
 800efd4:	f7fd fa0f 	bl	800c3f6 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800efd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efda:	331c      	adds	r3, #28
 800efdc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800efde:	4618      	mov	r0, r3
 800efe0:	f7fd fa24 	bl	800c42c <st_dword>
		if (fmt == FS_FAT32) {
 800efe4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800efe8:	2b03      	cmp	r3, #3
 800efea:	d131      	bne.n	800f050 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800efec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efee:	f103 0443 	add.w	r4, r3, #67	; 0x43
 800eff2:	f7f3 f9bd 	bl	8002370 <get_fattime>
 800eff6:	4603      	mov	r3, r0
 800eff8:	4619      	mov	r1, r3
 800effa:	4620      	mov	r0, r4
 800effc:	f7fd fa16 	bl	800c42c <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800f000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f002:	3324      	adds	r3, #36	; 0x24
 800f004:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f006:	4618      	mov	r0, r3
 800f008:	f7fd fa10 	bl	800c42c <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800f00c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f00e:	332c      	adds	r3, #44	; 0x2c
 800f010:	2102      	movs	r1, #2
 800f012:	4618      	mov	r0, r3
 800f014:	f7fd fa0a 	bl	800c42c <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800f018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f01a:	3330      	adds	r3, #48	; 0x30
 800f01c:	2101      	movs	r1, #1
 800f01e:	4618      	mov	r0, r3
 800f020:	f7fd f9e9 	bl	800c3f6 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800f024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f026:	3332      	adds	r3, #50	; 0x32
 800f028:	2106      	movs	r1, #6
 800f02a:	4618      	mov	r0, r3
 800f02c:	f7fd f9e3 	bl	800c3f6 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800f030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f032:	3340      	adds	r3, #64	; 0x40
 800f034:	2280      	movs	r2, #128	; 0x80
 800f036:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800f038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f03a:	3342      	adds	r3, #66	; 0x42
 800f03c:	2229      	movs	r2, #41	; 0x29
 800f03e:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800f040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f042:	3347      	adds	r3, #71	; 0x47
 800f044:	2213      	movs	r2, #19
 800f046:	497a      	ldr	r1, [pc, #488]	; (800f230 <f_mkfs+0x714>)
 800f048:	4618      	mov	r0, r3
 800f04a:	f7fd fa1b 	bl	800c484 <mem_cpy>
 800f04e:	e020      	b.n	800f092 <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800f050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f052:	f103 0427 	add.w	r4, r3, #39	; 0x27
 800f056:	f7f3 f98b 	bl	8002370 <get_fattime>
 800f05a:	4603      	mov	r3, r0
 800f05c:	4619      	mov	r1, r3
 800f05e:	4620      	mov	r0, r4
 800f060:	f7fd f9e4 	bl	800c42c <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800f064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f066:	3316      	adds	r3, #22
 800f068:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f06a:	b292      	uxth	r2, r2
 800f06c:	4611      	mov	r1, r2
 800f06e:	4618      	mov	r0, r3
 800f070:	f7fd f9c1 	bl	800c3f6 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800f074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f076:	3324      	adds	r3, #36	; 0x24
 800f078:	2280      	movs	r2, #128	; 0x80
 800f07a:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800f07c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f07e:	3326      	adds	r3, #38	; 0x26
 800f080:	2229      	movs	r2, #41	; 0x29
 800f082:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800f084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f086:	332b      	adds	r3, #43	; 0x2b
 800f088:	2213      	movs	r2, #19
 800f08a:	496a      	ldr	r1, [pc, #424]	; (800f234 <f_mkfs+0x718>)
 800f08c:	4618      	mov	r0, r3
 800f08e:	f7fd f9f9 	bl	800c484 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800f092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f094:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f098:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800f09c:	4618      	mov	r0, r3
 800f09e:	f7fd f9aa 	bl	800c3f6 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800f0a2:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800f0a6:	2301      	movs	r3, #1
 800f0a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f0aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f0ac:	f7fd f92a 	bl	800c304 <disk_write>
 800f0b0:	4603      	mov	r3, r0
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d001      	beq.n	800f0ba <f_mkfs+0x59e>
 800f0b6:	2301      	movs	r3, #1
 800f0b8:	e156      	b.n	800f368 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800f0ba:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f0be:	2b03      	cmp	r3, #3
 800f0c0:	d140      	bne.n	800f144 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800f0c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0c4:	1d9a      	adds	r2, r3, #6
 800f0c6:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800f0ca:	2301      	movs	r3, #1
 800f0cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f0ce:	f7fd f919 	bl	800c304 <disk_write>
			mem_set(buf, 0, ss);
 800f0d2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f0d4:	461a      	mov	r2, r3
 800f0d6:	2100      	movs	r1, #0
 800f0d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f0da:	f7fd f9f4 	bl	800c4c6 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800f0de:	4956      	ldr	r1, [pc, #344]	; (800f238 <f_mkfs+0x71c>)
 800f0e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f0e2:	f7fd f9a3 	bl	800c42c <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800f0e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0e8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f0ec:	4953      	ldr	r1, [pc, #332]	; (800f23c <f_mkfs+0x720>)
 800f0ee:	4618      	mov	r0, r3
 800f0f0:	f7fd f99c 	bl	800c42c <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800f0f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0f6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800f0fa:	6a3b      	ldr	r3, [r7, #32]
 800f0fc:	3b01      	subs	r3, #1
 800f0fe:	4619      	mov	r1, r3
 800f100:	4610      	mov	r0, r2
 800f102:	f7fd f993 	bl	800c42c <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800f106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f108:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800f10c:	2102      	movs	r1, #2
 800f10e:	4618      	mov	r0, r3
 800f110:	f7fd f98c 	bl	800c42c <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800f114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f116:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f11a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800f11e:	4618      	mov	r0, r3
 800f120:	f7fd f969 	bl	800c3f6 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800f124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f126:	1dda      	adds	r2, r3, #7
 800f128:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800f12c:	2301      	movs	r3, #1
 800f12e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f130:	f7fd f8e8 	bl	800c304 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800f134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f136:	1c5a      	adds	r2, r3, #1
 800f138:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800f13c:	2301      	movs	r3, #1
 800f13e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f140:	f7fd f8e0 	bl	800c304 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800f144:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f146:	2100      	movs	r1, #0
 800f148:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f14a:	f7fd f9bc 	bl	800c4c6 <mem_set>
		sect = b_fat;		/* FAT start sector */
 800f14e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f150:	66bb      	str	r3, [r7, #104]	; 0x68
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800f152:	2300      	movs	r3, #0
 800f154:	64bb      	str	r3, [r7, #72]	; 0x48
 800f156:	e04b      	b.n	800f1f0 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 800f158:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f15c:	2b03      	cmp	r3, #3
 800f15e:	d113      	bne.n	800f188 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800f160:	f06f 0107 	mvn.w	r1, #7
 800f164:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f166:	f7fd f961 	bl	800c42c <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800f16a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f16c:	3304      	adds	r3, #4
 800f16e:	f04f 31ff 	mov.w	r1, #4294967295
 800f172:	4618      	mov	r0, r3
 800f174:	f7fd f95a 	bl	800c42c <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800f178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f17a:	3308      	adds	r3, #8
 800f17c:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800f180:	4618      	mov	r0, r3
 800f182:	f7fd f953 	bl	800c42c <st_dword>
 800f186:	e00b      	b.n	800f1a0 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800f188:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f18c:	2b01      	cmp	r3, #1
 800f18e:	d101      	bne.n	800f194 <f_mkfs+0x678>
 800f190:	4b2b      	ldr	r3, [pc, #172]	; (800f240 <f_mkfs+0x724>)
 800f192:	e001      	b.n	800f198 <f_mkfs+0x67c>
 800f194:	f06f 0307 	mvn.w	r3, #7
 800f198:	4619      	mov	r1, r3
 800f19a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f19c:	f7fd f946 	bl	800c42c <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800f1a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f1a2:	667b      	str	r3, [r7, #100]	; 0x64
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800f1a4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f1a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1a8:	4293      	cmp	r3, r2
 800f1aa:	bf28      	it	cs
 800f1ac:	4613      	movcs	r3, r2
 800f1ae:	663b      	str	r3, [r7, #96]	; 0x60
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800f1b0:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800f1b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f1b6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f1b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f1ba:	f7fd f8a3 	bl	800c304 <disk_write>
 800f1be:	4603      	mov	r3, r0
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d001      	beq.n	800f1c8 <f_mkfs+0x6ac>
 800f1c4:	2301      	movs	r3, #1
 800f1c6:	e0cf      	b.n	800f368 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 800f1c8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f1ca:	461a      	mov	r2, r3
 800f1cc:	2100      	movs	r1, #0
 800f1ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f1d0:	f7fd f979 	bl	800c4c6 <mem_set>
				sect += n; nsect -= n;
 800f1d4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f1d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f1d8:	4413      	add	r3, r2
 800f1da:	66bb      	str	r3, [r7, #104]	; 0x68
 800f1dc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f1de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f1e0:	1ad3      	subs	r3, r2, r3
 800f1e2:	667b      	str	r3, [r7, #100]	; 0x64
			} while (nsect);
 800f1e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d1dc      	bne.n	800f1a4 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800f1ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f1ec:	3301      	adds	r3, #1
 800f1ee:	64bb      	str	r3, [r7, #72]	; 0x48
 800f1f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f1f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f1f4:	429a      	cmp	r2, r3
 800f1f6:	d3af      	bcc.n	800f158 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800f1f8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f1fc:	2b03      	cmp	r3, #3
 800f1fe:	d101      	bne.n	800f204 <f_mkfs+0x6e8>
 800f200:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f202:	e000      	b.n	800f206 <f_mkfs+0x6ea>
 800f204:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f206:	667b      	str	r3, [r7, #100]	; 0x64
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800f208:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f20a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f20c:	4293      	cmp	r3, r2
 800f20e:	bf28      	it	cs
 800f210:	4613      	movcs	r3, r2
 800f212:	663b      	str	r3, [r7, #96]	; 0x60
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800f214:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800f218:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f21a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f21c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f21e:	f7fd f871 	bl	800c304 <disk_write>
 800f222:	4603      	mov	r3, r0
 800f224:	2b00      	cmp	r3, #0
 800f226:	d00d      	beq.n	800f244 <f_mkfs+0x728>
 800f228:	2301      	movs	r3, #1
 800f22a:	e09d      	b.n	800f368 <f_mkfs+0x84c>
 800f22c:	080130b0 	.word	0x080130b0
 800f230:	080130bc 	.word	0x080130bc
 800f234:	080130d0 	.word	0x080130d0
 800f238:	41615252 	.word	0x41615252
 800f23c:	61417272 	.word	0x61417272
 800f240:	00fffff8 	.word	0x00fffff8
			sect += n; nsect -= n;
 800f244:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f246:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f248:	4413      	add	r3, r2
 800f24a:	66bb      	str	r3, [r7, #104]	; 0x68
 800f24c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f24e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f250:	1ad3      	subs	r3, r2, r3
 800f252:	667b      	str	r3, [r7, #100]	; 0x64
		} while (nsect);
 800f254:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f256:	2b00      	cmp	r3, #0
 800f258:	d1d6      	bne.n	800f208 <f_mkfs+0x6ec>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800f25a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f25e:	2b03      	cmp	r3, #3
 800f260:	d103      	bne.n	800f26a <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 800f262:	230c      	movs	r3, #12
 800f264:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800f268:	e010      	b.n	800f28c <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 800f26a:	693b      	ldr	r3, [r7, #16]
 800f26c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f270:	d303      	bcc.n	800f27a <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800f272:	2306      	movs	r3, #6
 800f274:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800f278:	e008      	b.n	800f28c <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800f27a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f27e:	2b02      	cmp	r3, #2
 800f280:	d101      	bne.n	800f286 <f_mkfs+0x76a>
 800f282:	2304      	movs	r3, #4
 800f284:	e000      	b.n	800f288 <f_mkfs+0x76c>
 800f286:	2301      	movs	r3, #1
 800f288:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800f28c:	7afb      	ldrb	r3, [r7, #11]
 800f28e:	f003 0308 	and.w	r3, r3, #8
 800f292:	2b00      	cmp	r3, #0
 800f294:	d15b      	bne.n	800f34e <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 800f296:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f298:	461a      	mov	r2, r3
 800f29a:	2100      	movs	r1, #0
 800f29c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f29e:	f7fd f912 	bl	800c4c6 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800f2a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2a4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f2a8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800f2ac:	4618      	mov	r0, r3
 800f2ae:	f7fd f8a2 	bl	800c3f6 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800f2b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2b4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800f2b8:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800f2ba:	69bb      	ldr	r3, [r7, #24]
 800f2bc:	2200      	movs	r2, #0
 800f2be:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800f2c0:	69bb      	ldr	r3, [r7, #24]
 800f2c2:	3301      	adds	r3, #1
 800f2c4:	2201      	movs	r2, #1
 800f2c6:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800f2c8:	69bb      	ldr	r3, [r7, #24]
 800f2ca:	3302      	adds	r3, #2
 800f2cc:	2201      	movs	r2, #1
 800f2ce:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800f2d0:	69bb      	ldr	r3, [r7, #24]
 800f2d2:	3303      	adds	r3, #3
 800f2d4:	2200      	movs	r2, #0
 800f2d6:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800f2d8:	69bb      	ldr	r3, [r7, #24]
 800f2da:	3304      	adds	r3, #4
 800f2dc:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800f2e0:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800f2e2:	693a      	ldr	r2, [r7, #16]
 800f2e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2e6:	441a      	add	r2, r3
 800f2e8:	4b21      	ldr	r3, [pc, #132]	; (800f370 <f_mkfs+0x854>)
 800f2ea:	fba3 1302 	umull	r1, r3, r3, r2
 800f2ee:	1ad2      	subs	r2, r2, r3
 800f2f0:	0852      	lsrs	r2, r2, #1
 800f2f2:	4413      	add	r3, r2
 800f2f4:	0b5b      	lsrs	r3, r3, #13
 800f2f6:	663b      	str	r3, [r7, #96]	; 0x60
			pte[PTE_EdHead] = 254;				/* End head */
 800f2f8:	69bb      	ldr	r3, [r7, #24]
 800f2fa:	3305      	adds	r3, #5
 800f2fc:	22fe      	movs	r2, #254	; 0xfe
 800f2fe:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800f300:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f302:	089b      	lsrs	r3, r3, #2
 800f304:	b2da      	uxtb	r2, r3
 800f306:	69bb      	ldr	r3, [r7, #24]
 800f308:	3306      	adds	r3, #6
 800f30a:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800f30e:	b2d2      	uxtb	r2, r2
 800f310:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800f312:	69bb      	ldr	r3, [r7, #24]
 800f314:	3307      	adds	r3, #7
 800f316:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f318:	b2d2      	uxtb	r2, r2
 800f31a:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800f31c:	69bb      	ldr	r3, [r7, #24]
 800f31e:	3308      	adds	r3, #8
 800f320:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f322:	4618      	mov	r0, r3
 800f324:	f7fd f882 	bl	800c42c <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800f328:	69bb      	ldr	r3, [r7, #24]
 800f32a:	330c      	adds	r3, #12
 800f32c:	693a      	ldr	r2, [r7, #16]
 800f32e:	4611      	mov	r1, r2
 800f330:	4618      	mov	r0, r3
 800f332:	f7fd f87b 	bl	800c42c <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800f336:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800f33a:	2301      	movs	r3, #1
 800f33c:	2200      	movs	r2, #0
 800f33e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f340:	f7fc ffe0 	bl	800c304 <disk_write>
 800f344:	4603      	mov	r3, r0
 800f346:	2b00      	cmp	r3, #0
 800f348:	d001      	beq.n	800f34e <f_mkfs+0x832>
 800f34a:	2301      	movs	r3, #1
 800f34c:	e00c      	b.n	800f368 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800f34e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f352:	2200      	movs	r2, #0
 800f354:	2100      	movs	r1, #0
 800f356:	4618      	mov	r0, r3
 800f358:	f7fc fff4 	bl	800c344 <disk_ioctl>
 800f35c:	4603      	mov	r3, r0
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d001      	beq.n	800f366 <f_mkfs+0x84a>
 800f362:	2301      	movs	r3, #1
 800f364:	e000      	b.n	800f368 <f_mkfs+0x84c>

	return FR_OK;
 800f366:	2300      	movs	r3, #0
}
 800f368:	4618      	mov	r0, r3
 800f36a:	3774      	adds	r7, #116	; 0x74
 800f36c:	46bd      	mov	sp, r7
 800f36e:	bd90      	pop	{r4, r7, pc}
 800f370:	0515565b 	.word	0x0515565b

0800f374 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f374:	b480      	push	{r7}
 800f376:	b087      	sub	sp, #28
 800f378:	af00      	add	r7, sp, #0
 800f37a:	60f8      	str	r0, [r7, #12]
 800f37c:	60b9      	str	r1, [r7, #8]
 800f37e:	4613      	mov	r3, r2
 800f380:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f382:	2301      	movs	r3, #1
 800f384:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f386:	2300      	movs	r3, #0
 800f388:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f38a:	4b1f      	ldr	r3, [pc, #124]	; (800f408 <FATFS_LinkDriverEx+0x94>)
 800f38c:	7a5b      	ldrb	r3, [r3, #9]
 800f38e:	b2db      	uxtb	r3, r3
 800f390:	2b00      	cmp	r3, #0
 800f392:	d131      	bne.n	800f3f8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f394:	4b1c      	ldr	r3, [pc, #112]	; (800f408 <FATFS_LinkDriverEx+0x94>)
 800f396:	7a5b      	ldrb	r3, [r3, #9]
 800f398:	b2db      	uxtb	r3, r3
 800f39a:	461a      	mov	r2, r3
 800f39c:	4b1a      	ldr	r3, [pc, #104]	; (800f408 <FATFS_LinkDriverEx+0x94>)
 800f39e:	2100      	movs	r1, #0
 800f3a0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f3a2:	4b19      	ldr	r3, [pc, #100]	; (800f408 <FATFS_LinkDriverEx+0x94>)
 800f3a4:	7a5b      	ldrb	r3, [r3, #9]
 800f3a6:	b2db      	uxtb	r3, r3
 800f3a8:	4a17      	ldr	r2, [pc, #92]	; (800f408 <FATFS_LinkDriverEx+0x94>)
 800f3aa:	009b      	lsls	r3, r3, #2
 800f3ac:	4413      	add	r3, r2
 800f3ae:	68fa      	ldr	r2, [r7, #12]
 800f3b0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f3b2:	4b15      	ldr	r3, [pc, #84]	; (800f408 <FATFS_LinkDriverEx+0x94>)
 800f3b4:	7a5b      	ldrb	r3, [r3, #9]
 800f3b6:	b2db      	uxtb	r3, r3
 800f3b8:	461a      	mov	r2, r3
 800f3ba:	4b13      	ldr	r3, [pc, #76]	; (800f408 <FATFS_LinkDriverEx+0x94>)
 800f3bc:	4413      	add	r3, r2
 800f3be:	79fa      	ldrb	r2, [r7, #7]
 800f3c0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f3c2:	4b11      	ldr	r3, [pc, #68]	; (800f408 <FATFS_LinkDriverEx+0x94>)
 800f3c4:	7a5b      	ldrb	r3, [r3, #9]
 800f3c6:	b2db      	uxtb	r3, r3
 800f3c8:	1c5a      	adds	r2, r3, #1
 800f3ca:	b2d1      	uxtb	r1, r2
 800f3cc:	4a0e      	ldr	r2, [pc, #56]	; (800f408 <FATFS_LinkDriverEx+0x94>)
 800f3ce:	7251      	strb	r1, [r2, #9]
 800f3d0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f3d2:	7dbb      	ldrb	r3, [r7, #22]
 800f3d4:	3330      	adds	r3, #48	; 0x30
 800f3d6:	b2da      	uxtb	r2, r3
 800f3d8:	68bb      	ldr	r3, [r7, #8]
 800f3da:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f3dc:	68bb      	ldr	r3, [r7, #8]
 800f3de:	3301      	adds	r3, #1
 800f3e0:	223a      	movs	r2, #58	; 0x3a
 800f3e2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f3e4:	68bb      	ldr	r3, [r7, #8]
 800f3e6:	3302      	adds	r3, #2
 800f3e8:	222f      	movs	r2, #47	; 0x2f
 800f3ea:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f3ec:	68bb      	ldr	r3, [r7, #8]
 800f3ee:	3303      	adds	r3, #3
 800f3f0:	2200      	movs	r2, #0
 800f3f2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f3f4:	2300      	movs	r3, #0
 800f3f6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f3f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800f3fa:	4618      	mov	r0, r3
 800f3fc:	371c      	adds	r7, #28
 800f3fe:	46bd      	mov	sp, r7
 800f400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f404:	4770      	bx	lr
 800f406:	bf00      	nop
 800f408:	20001300 	.word	0x20001300

0800f40c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f40c:	b580      	push	{r7, lr}
 800f40e:	b082      	sub	sp, #8
 800f410:	af00      	add	r7, sp, #0
 800f412:	6078      	str	r0, [r7, #4]
 800f414:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f416:	2200      	movs	r2, #0
 800f418:	6839      	ldr	r1, [r7, #0]
 800f41a:	6878      	ldr	r0, [r7, #4]
 800f41c:	f7ff ffaa 	bl	800f374 <FATFS_LinkDriverEx>
 800f420:	4603      	mov	r3, r0
}
 800f422:	4618      	mov	r0, r3
 800f424:	3708      	adds	r7, #8
 800f426:	46bd      	mov	sp, r7
 800f428:	bd80      	pop	{r7, pc}
	...

0800f42c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800f42c:	b480      	push	{r7}
 800f42e:	b085      	sub	sp, #20
 800f430:	af00      	add	r7, sp, #0
 800f432:	4603      	mov	r3, r0
 800f434:	6039      	str	r1, [r7, #0]
 800f436:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800f438:	88fb      	ldrh	r3, [r7, #6]
 800f43a:	2b7f      	cmp	r3, #127	; 0x7f
 800f43c:	d802      	bhi.n	800f444 <ff_convert+0x18>
		c = chr;
 800f43e:	88fb      	ldrh	r3, [r7, #6]
 800f440:	81fb      	strh	r3, [r7, #14]
 800f442:	e025      	b.n	800f490 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800f444:	683b      	ldr	r3, [r7, #0]
 800f446:	2b00      	cmp	r3, #0
 800f448:	d00b      	beq.n	800f462 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800f44a:	88fb      	ldrh	r3, [r7, #6]
 800f44c:	2bff      	cmp	r3, #255	; 0xff
 800f44e:	d805      	bhi.n	800f45c <ff_convert+0x30>
 800f450:	88fb      	ldrh	r3, [r7, #6]
 800f452:	3b80      	subs	r3, #128	; 0x80
 800f454:	4a12      	ldr	r2, [pc, #72]	; (800f4a0 <ff_convert+0x74>)
 800f456:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f45a:	e000      	b.n	800f45e <ff_convert+0x32>
 800f45c:	2300      	movs	r3, #0
 800f45e:	81fb      	strh	r3, [r7, #14]
 800f460:	e016      	b.n	800f490 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800f462:	2300      	movs	r3, #0
 800f464:	81fb      	strh	r3, [r7, #14]
 800f466:	e009      	b.n	800f47c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800f468:	89fb      	ldrh	r3, [r7, #14]
 800f46a:	4a0d      	ldr	r2, [pc, #52]	; (800f4a0 <ff_convert+0x74>)
 800f46c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f470:	88fa      	ldrh	r2, [r7, #6]
 800f472:	429a      	cmp	r2, r3
 800f474:	d006      	beq.n	800f484 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800f476:	89fb      	ldrh	r3, [r7, #14]
 800f478:	3301      	adds	r3, #1
 800f47a:	81fb      	strh	r3, [r7, #14]
 800f47c:	89fb      	ldrh	r3, [r7, #14]
 800f47e:	2b7f      	cmp	r3, #127	; 0x7f
 800f480:	d9f2      	bls.n	800f468 <ff_convert+0x3c>
 800f482:	e000      	b.n	800f486 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800f484:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800f486:	89fb      	ldrh	r3, [r7, #14]
 800f488:	3380      	adds	r3, #128	; 0x80
 800f48a:	b29b      	uxth	r3, r3
 800f48c:	b2db      	uxtb	r3, r3
 800f48e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800f490:	89fb      	ldrh	r3, [r7, #14]
}
 800f492:	4618      	mov	r0, r3
 800f494:	3714      	adds	r7, #20
 800f496:	46bd      	mov	sp, r7
 800f498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f49c:	4770      	bx	lr
 800f49e:	bf00      	nop
 800f4a0:	080131b4 	.word	0x080131b4

0800f4a4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800f4a4:	b480      	push	{r7}
 800f4a6:	b087      	sub	sp, #28
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	4603      	mov	r3, r0
 800f4ac:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800f4ae:	88fb      	ldrh	r3, [r7, #6]
 800f4b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f4b4:	d201      	bcs.n	800f4ba <ff_wtoupper+0x16>
 800f4b6:	4b3e      	ldr	r3, [pc, #248]	; (800f5b0 <ff_wtoupper+0x10c>)
 800f4b8:	e000      	b.n	800f4bc <ff_wtoupper+0x18>
 800f4ba:	4b3e      	ldr	r3, [pc, #248]	; (800f5b4 <ff_wtoupper+0x110>)
 800f4bc:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800f4be:	697b      	ldr	r3, [r7, #20]
 800f4c0:	1c9a      	adds	r2, r3, #2
 800f4c2:	617a      	str	r2, [r7, #20]
 800f4c4:	881b      	ldrh	r3, [r3, #0]
 800f4c6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800f4c8:	8a7b      	ldrh	r3, [r7, #18]
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d068      	beq.n	800f5a0 <ff_wtoupper+0xfc>
 800f4ce:	88fa      	ldrh	r2, [r7, #6]
 800f4d0:	8a7b      	ldrh	r3, [r7, #18]
 800f4d2:	429a      	cmp	r2, r3
 800f4d4:	d364      	bcc.n	800f5a0 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800f4d6:	697b      	ldr	r3, [r7, #20]
 800f4d8:	1c9a      	adds	r2, r3, #2
 800f4da:	617a      	str	r2, [r7, #20]
 800f4dc:	881b      	ldrh	r3, [r3, #0]
 800f4de:	823b      	strh	r3, [r7, #16]
 800f4e0:	8a3b      	ldrh	r3, [r7, #16]
 800f4e2:	0a1b      	lsrs	r3, r3, #8
 800f4e4:	81fb      	strh	r3, [r7, #14]
 800f4e6:	8a3b      	ldrh	r3, [r7, #16]
 800f4e8:	b2db      	uxtb	r3, r3
 800f4ea:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800f4ec:	88fa      	ldrh	r2, [r7, #6]
 800f4ee:	8a79      	ldrh	r1, [r7, #18]
 800f4f0:	8a3b      	ldrh	r3, [r7, #16]
 800f4f2:	440b      	add	r3, r1
 800f4f4:	429a      	cmp	r2, r3
 800f4f6:	da49      	bge.n	800f58c <ff_wtoupper+0xe8>
			switch (cmd) {
 800f4f8:	89fb      	ldrh	r3, [r7, #14]
 800f4fa:	2b08      	cmp	r3, #8
 800f4fc:	d84f      	bhi.n	800f59e <ff_wtoupper+0xfa>
 800f4fe:	a201      	add	r2, pc, #4	; (adr r2, 800f504 <ff_wtoupper+0x60>)
 800f500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f504:	0800f529 	.word	0x0800f529
 800f508:	0800f53b 	.word	0x0800f53b
 800f50c:	0800f551 	.word	0x0800f551
 800f510:	0800f559 	.word	0x0800f559
 800f514:	0800f561 	.word	0x0800f561
 800f518:	0800f569 	.word	0x0800f569
 800f51c:	0800f571 	.word	0x0800f571
 800f520:	0800f579 	.word	0x0800f579
 800f524:	0800f581 	.word	0x0800f581
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800f528:	88fa      	ldrh	r2, [r7, #6]
 800f52a:	8a7b      	ldrh	r3, [r7, #18]
 800f52c:	1ad3      	subs	r3, r2, r3
 800f52e:	005b      	lsls	r3, r3, #1
 800f530:	697a      	ldr	r2, [r7, #20]
 800f532:	4413      	add	r3, r2
 800f534:	881b      	ldrh	r3, [r3, #0]
 800f536:	80fb      	strh	r3, [r7, #6]
 800f538:	e027      	b.n	800f58a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800f53a:	88fa      	ldrh	r2, [r7, #6]
 800f53c:	8a7b      	ldrh	r3, [r7, #18]
 800f53e:	1ad3      	subs	r3, r2, r3
 800f540:	b29b      	uxth	r3, r3
 800f542:	f003 0301 	and.w	r3, r3, #1
 800f546:	b29b      	uxth	r3, r3
 800f548:	88fa      	ldrh	r2, [r7, #6]
 800f54a:	1ad3      	subs	r3, r2, r3
 800f54c:	80fb      	strh	r3, [r7, #6]
 800f54e:	e01c      	b.n	800f58a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800f550:	88fb      	ldrh	r3, [r7, #6]
 800f552:	3b10      	subs	r3, #16
 800f554:	80fb      	strh	r3, [r7, #6]
 800f556:	e018      	b.n	800f58a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800f558:	88fb      	ldrh	r3, [r7, #6]
 800f55a:	3b20      	subs	r3, #32
 800f55c:	80fb      	strh	r3, [r7, #6]
 800f55e:	e014      	b.n	800f58a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800f560:	88fb      	ldrh	r3, [r7, #6]
 800f562:	3b30      	subs	r3, #48	; 0x30
 800f564:	80fb      	strh	r3, [r7, #6]
 800f566:	e010      	b.n	800f58a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800f568:	88fb      	ldrh	r3, [r7, #6]
 800f56a:	3b1a      	subs	r3, #26
 800f56c:	80fb      	strh	r3, [r7, #6]
 800f56e:	e00c      	b.n	800f58a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800f570:	88fb      	ldrh	r3, [r7, #6]
 800f572:	3308      	adds	r3, #8
 800f574:	80fb      	strh	r3, [r7, #6]
 800f576:	e008      	b.n	800f58a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800f578:	88fb      	ldrh	r3, [r7, #6]
 800f57a:	3b50      	subs	r3, #80	; 0x50
 800f57c:	80fb      	strh	r3, [r7, #6]
 800f57e:	e004      	b.n	800f58a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800f580:	88fb      	ldrh	r3, [r7, #6]
 800f582:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800f586:	80fb      	strh	r3, [r7, #6]
 800f588:	bf00      	nop
			}
			break;
 800f58a:	e008      	b.n	800f59e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800f58c:	89fb      	ldrh	r3, [r7, #14]
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d195      	bne.n	800f4be <ff_wtoupper+0x1a>
 800f592:	8a3b      	ldrh	r3, [r7, #16]
 800f594:	005b      	lsls	r3, r3, #1
 800f596:	697a      	ldr	r2, [r7, #20]
 800f598:	4413      	add	r3, r2
 800f59a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800f59c:	e78f      	b.n	800f4be <ff_wtoupper+0x1a>
			break;
 800f59e:	bf00      	nop
	}

	return chr;
 800f5a0:	88fb      	ldrh	r3, [r7, #6]
}
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	371c      	adds	r7, #28
 800f5a6:	46bd      	mov	sp, r7
 800f5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ac:	4770      	bx	lr
 800f5ae:	bf00      	nop
 800f5b0:	080132b4 	.word	0x080132b4
 800f5b4:	080134a8 	.word	0x080134a8

0800f5b8 <__errno>:
 800f5b8:	4b01      	ldr	r3, [pc, #4]	; (800f5c0 <__errno+0x8>)
 800f5ba:	6818      	ldr	r0, [r3, #0]
 800f5bc:	4770      	bx	lr
 800f5be:	bf00      	nop
 800f5c0:	20000044 	.word	0x20000044

0800f5c4 <__libc_init_array>:
 800f5c4:	b570      	push	{r4, r5, r6, lr}
 800f5c6:	4e0d      	ldr	r6, [pc, #52]	; (800f5fc <__libc_init_array+0x38>)
 800f5c8:	4c0d      	ldr	r4, [pc, #52]	; (800f600 <__libc_init_array+0x3c>)
 800f5ca:	1ba4      	subs	r4, r4, r6
 800f5cc:	10a4      	asrs	r4, r4, #2
 800f5ce:	2500      	movs	r5, #0
 800f5d0:	42a5      	cmp	r5, r4
 800f5d2:	d109      	bne.n	800f5e8 <__libc_init_array+0x24>
 800f5d4:	4e0b      	ldr	r6, [pc, #44]	; (800f604 <__libc_init_array+0x40>)
 800f5d6:	4c0c      	ldr	r4, [pc, #48]	; (800f608 <__libc_init_array+0x44>)
 800f5d8:	f003 fcc2 	bl	8012f60 <_init>
 800f5dc:	1ba4      	subs	r4, r4, r6
 800f5de:	10a4      	asrs	r4, r4, #2
 800f5e0:	2500      	movs	r5, #0
 800f5e2:	42a5      	cmp	r5, r4
 800f5e4:	d105      	bne.n	800f5f2 <__libc_init_array+0x2e>
 800f5e6:	bd70      	pop	{r4, r5, r6, pc}
 800f5e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f5ec:	4798      	blx	r3
 800f5ee:	3501      	adds	r5, #1
 800f5f0:	e7ee      	b.n	800f5d0 <__libc_init_array+0xc>
 800f5f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f5f6:	4798      	blx	r3
 800f5f8:	3501      	adds	r5, #1
 800f5fa:	e7f2      	b.n	800f5e2 <__libc_init_array+0x1e>
 800f5fc:	08013820 	.word	0x08013820
 800f600:	08013820 	.word	0x08013820
 800f604:	08013820 	.word	0x08013820
 800f608:	08013824 	.word	0x08013824

0800f60c <memcpy>:
 800f60c:	b510      	push	{r4, lr}
 800f60e:	1e43      	subs	r3, r0, #1
 800f610:	440a      	add	r2, r1
 800f612:	4291      	cmp	r1, r2
 800f614:	d100      	bne.n	800f618 <memcpy+0xc>
 800f616:	bd10      	pop	{r4, pc}
 800f618:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f61c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f620:	e7f7      	b.n	800f612 <memcpy+0x6>

0800f622 <memset>:
 800f622:	4402      	add	r2, r0
 800f624:	4603      	mov	r3, r0
 800f626:	4293      	cmp	r3, r2
 800f628:	d100      	bne.n	800f62c <memset+0xa>
 800f62a:	4770      	bx	lr
 800f62c:	f803 1b01 	strb.w	r1, [r3], #1
 800f630:	e7f9      	b.n	800f626 <memset+0x4>

0800f632 <__cvt>:
 800f632:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f634:	ed2d 8b02 	vpush	{d8}
 800f638:	eeb0 8b40 	vmov.f64	d8, d0
 800f63c:	b085      	sub	sp, #20
 800f63e:	4617      	mov	r7, r2
 800f640:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800f642:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800f644:	ee18 2a90 	vmov	r2, s17
 800f648:	f025 0520 	bic.w	r5, r5, #32
 800f64c:	2a00      	cmp	r2, #0
 800f64e:	bfb6      	itet	lt
 800f650:	222d      	movlt	r2, #45	; 0x2d
 800f652:	2200      	movge	r2, #0
 800f654:	eeb1 8b40 	vneglt.f64	d8, d0
 800f658:	2d46      	cmp	r5, #70	; 0x46
 800f65a:	460c      	mov	r4, r1
 800f65c:	701a      	strb	r2, [r3, #0]
 800f65e:	d004      	beq.n	800f66a <__cvt+0x38>
 800f660:	2d45      	cmp	r5, #69	; 0x45
 800f662:	d100      	bne.n	800f666 <__cvt+0x34>
 800f664:	3401      	adds	r4, #1
 800f666:	2102      	movs	r1, #2
 800f668:	e000      	b.n	800f66c <__cvt+0x3a>
 800f66a:	2103      	movs	r1, #3
 800f66c:	ab03      	add	r3, sp, #12
 800f66e:	9301      	str	r3, [sp, #4]
 800f670:	ab02      	add	r3, sp, #8
 800f672:	9300      	str	r3, [sp, #0]
 800f674:	4622      	mov	r2, r4
 800f676:	4633      	mov	r3, r6
 800f678:	eeb0 0b48 	vmov.f64	d0, d8
 800f67c:	f001 fd50 	bl	8011120 <_dtoa_r>
 800f680:	2d47      	cmp	r5, #71	; 0x47
 800f682:	d101      	bne.n	800f688 <__cvt+0x56>
 800f684:	07fb      	lsls	r3, r7, #31
 800f686:	d51e      	bpl.n	800f6c6 <__cvt+0x94>
 800f688:	2d46      	cmp	r5, #70	; 0x46
 800f68a:	eb00 0304 	add.w	r3, r0, r4
 800f68e:	d10c      	bne.n	800f6aa <__cvt+0x78>
 800f690:	7802      	ldrb	r2, [r0, #0]
 800f692:	2a30      	cmp	r2, #48	; 0x30
 800f694:	d107      	bne.n	800f6a6 <__cvt+0x74>
 800f696:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f69a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f69e:	bf1c      	itt	ne
 800f6a0:	f1c4 0401 	rsbne	r4, r4, #1
 800f6a4:	6034      	strne	r4, [r6, #0]
 800f6a6:	6832      	ldr	r2, [r6, #0]
 800f6a8:	4413      	add	r3, r2
 800f6aa:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f6ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6b2:	d007      	beq.n	800f6c4 <__cvt+0x92>
 800f6b4:	2130      	movs	r1, #48	; 0x30
 800f6b6:	9a03      	ldr	r2, [sp, #12]
 800f6b8:	429a      	cmp	r2, r3
 800f6ba:	d204      	bcs.n	800f6c6 <__cvt+0x94>
 800f6bc:	1c54      	adds	r4, r2, #1
 800f6be:	9403      	str	r4, [sp, #12]
 800f6c0:	7011      	strb	r1, [r2, #0]
 800f6c2:	e7f8      	b.n	800f6b6 <__cvt+0x84>
 800f6c4:	9303      	str	r3, [sp, #12]
 800f6c6:	9b03      	ldr	r3, [sp, #12]
 800f6c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f6ca:	1a1b      	subs	r3, r3, r0
 800f6cc:	6013      	str	r3, [r2, #0]
 800f6ce:	b005      	add	sp, #20
 800f6d0:	ecbd 8b02 	vpop	{d8}
 800f6d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f6d6 <__exponent>:
 800f6d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f6d8:	2900      	cmp	r1, #0
 800f6da:	4604      	mov	r4, r0
 800f6dc:	bfba      	itte	lt
 800f6de:	4249      	neglt	r1, r1
 800f6e0:	232d      	movlt	r3, #45	; 0x2d
 800f6e2:	232b      	movge	r3, #43	; 0x2b
 800f6e4:	2909      	cmp	r1, #9
 800f6e6:	f804 2b02 	strb.w	r2, [r4], #2
 800f6ea:	7043      	strb	r3, [r0, #1]
 800f6ec:	dd20      	ble.n	800f730 <__exponent+0x5a>
 800f6ee:	f10d 0307 	add.w	r3, sp, #7
 800f6f2:	461f      	mov	r7, r3
 800f6f4:	260a      	movs	r6, #10
 800f6f6:	fb91 f5f6 	sdiv	r5, r1, r6
 800f6fa:	fb06 1115 	mls	r1, r6, r5, r1
 800f6fe:	3130      	adds	r1, #48	; 0x30
 800f700:	2d09      	cmp	r5, #9
 800f702:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f706:	f103 32ff 	add.w	r2, r3, #4294967295
 800f70a:	4629      	mov	r1, r5
 800f70c:	dc09      	bgt.n	800f722 <__exponent+0x4c>
 800f70e:	3130      	adds	r1, #48	; 0x30
 800f710:	3b02      	subs	r3, #2
 800f712:	f802 1c01 	strb.w	r1, [r2, #-1]
 800f716:	42bb      	cmp	r3, r7
 800f718:	4622      	mov	r2, r4
 800f71a:	d304      	bcc.n	800f726 <__exponent+0x50>
 800f71c:	1a10      	subs	r0, r2, r0
 800f71e:	b003      	add	sp, #12
 800f720:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f722:	4613      	mov	r3, r2
 800f724:	e7e7      	b.n	800f6f6 <__exponent+0x20>
 800f726:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f72a:	f804 2b01 	strb.w	r2, [r4], #1
 800f72e:	e7f2      	b.n	800f716 <__exponent+0x40>
 800f730:	2330      	movs	r3, #48	; 0x30
 800f732:	4419      	add	r1, r3
 800f734:	7083      	strb	r3, [r0, #2]
 800f736:	1d02      	adds	r2, r0, #4
 800f738:	70c1      	strb	r1, [r0, #3]
 800f73a:	e7ef      	b.n	800f71c <__exponent+0x46>
 800f73c:	0000      	movs	r0, r0
	...

0800f740 <_printf_float>:
 800f740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f744:	b08d      	sub	sp, #52	; 0x34
 800f746:	460c      	mov	r4, r1
 800f748:	4616      	mov	r6, r2
 800f74a:	461f      	mov	r7, r3
 800f74c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800f750:	4605      	mov	r5, r0
 800f752:	f002 fd5d 	bl	8012210 <_localeconv_r>
 800f756:	f8d0 b000 	ldr.w	fp, [r0]
 800f75a:	4658      	mov	r0, fp
 800f75c:	f7f0 fd7a 	bl	8000254 <strlen>
 800f760:	2300      	movs	r3, #0
 800f762:	930a      	str	r3, [sp, #40]	; 0x28
 800f764:	f8d8 3000 	ldr.w	r3, [r8]
 800f768:	9005      	str	r0, [sp, #20]
 800f76a:	3307      	adds	r3, #7
 800f76c:	f023 0307 	bic.w	r3, r3, #7
 800f770:	f103 0108 	add.w	r1, r3, #8
 800f774:	f894 9018 	ldrb.w	r9, [r4, #24]
 800f778:	6822      	ldr	r2, [r4, #0]
 800f77a:	f8c8 1000 	str.w	r1, [r8]
 800f77e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f782:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800f786:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 800fa10 <_printf_float+0x2d0>
 800f78a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800f78e:	eeb0 6bc0 	vabs.f64	d6, d0
 800f792:	eeb4 6b47 	vcmp.f64	d6, d7
 800f796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f79a:	dd24      	ble.n	800f7e6 <_printf_float+0xa6>
 800f79c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f7a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7a4:	d502      	bpl.n	800f7ac <_printf_float+0x6c>
 800f7a6:	232d      	movs	r3, #45	; 0x2d
 800f7a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f7ac:	499a      	ldr	r1, [pc, #616]	; (800fa18 <_printf_float+0x2d8>)
 800f7ae:	4b9b      	ldr	r3, [pc, #620]	; (800fa1c <_printf_float+0x2dc>)
 800f7b0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800f7b4:	bf8c      	ite	hi
 800f7b6:	4688      	movhi	r8, r1
 800f7b8:	4698      	movls	r8, r3
 800f7ba:	f022 0204 	bic.w	r2, r2, #4
 800f7be:	2303      	movs	r3, #3
 800f7c0:	6123      	str	r3, [r4, #16]
 800f7c2:	6022      	str	r2, [r4, #0]
 800f7c4:	f04f 0a00 	mov.w	sl, #0
 800f7c8:	9700      	str	r7, [sp, #0]
 800f7ca:	4633      	mov	r3, r6
 800f7cc:	aa0b      	add	r2, sp, #44	; 0x2c
 800f7ce:	4621      	mov	r1, r4
 800f7d0:	4628      	mov	r0, r5
 800f7d2:	f000 f9e1 	bl	800fb98 <_printf_common>
 800f7d6:	3001      	adds	r0, #1
 800f7d8:	f040 8089 	bne.w	800f8ee <_printf_float+0x1ae>
 800f7dc:	f04f 30ff 	mov.w	r0, #4294967295
 800f7e0:	b00d      	add	sp, #52	; 0x34
 800f7e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7e6:	eeb4 0b40 	vcmp.f64	d0, d0
 800f7ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7ee:	d702      	bvc.n	800f7f6 <_printf_float+0xb6>
 800f7f0:	498b      	ldr	r1, [pc, #556]	; (800fa20 <_printf_float+0x2e0>)
 800f7f2:	4b8c      	ldr	r3, [pc, #560]	; (800fa24 <_printf_float+0x2e4>)
 800f7f4:	e7dc      	b.n	800f7b0 <_printf_float+0x70>
 800f7f6:	6861      	ldr	r1, [r4, #4]
 800f7f8:	1c4b      	adds	r3, r1, #1
 800f7fa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f7fe:	ab0a      	add	r3, sp, #40	; 0x28
 800f800:	a809      	add	r0, sp, #36	; 0x24
 800f802:	d13b      	bne.n	800f87c <_printf_float+0x13c>
 800f804:	2106      	movs	r1, #6
 800f806:	6061      	str	r1, [r4, #4]
 800f808:	f04f 0c00 	mov.w	ip, #0
 800f80c:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800f810:	e9cd 0900 	strd	r0, r9, [sp]
 800f814:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f818:	6022      	str	r2, [r4, #0]
 800f81a:	6861      	ldr	r1, [r4, #4]
 800f81c:	4628      	mov	r0, r5
 800f81e:	f7ff ff08 	bl	800f632 <__cvt>
 800f822:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 800f826:	2b47      	cmp	r3, #71	; 0x47
 800f828:	4680      	mov	r8, r0
 800f82a:	d109      	bne.n	800f840 <_printf_float+0x100>
 800f82c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f82e:	1cd8      	adds	r0, r3, #3
 800f830:	db02      	blt.n	800f838 <_printf_float+0xf8>
 800f832:	6862      	ldr	r2, [r4, #4]
 800f834:	4293      	cmp	r3, r2
 800f836:	dd47      	ble.n	800f8c8 <_printf_float+0x188>
 800f838:	f1a9 0902 	sub.w	r9, r9, #2
 800f83c:	fa5f f989 	uxtb.w	r9, r9
 800f840:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800f844:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f846:	d824      	bhi.n	800f892 <_printf_float+0x152>
 800f848:	3901      	subs	r1, #1
 800f84a:	464a      	mov	r2, r9
 800f84c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f850:	9109      	str	r1, [sp, #36]	; 0x24
 800f852:	f7ff ff40 	bl	800f6d6 <__exponent>
 800f856:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f858:	1813      	adds	r3, r2, r0
 800f85a:	2a01      	cmp	r2, #1
 800f85c:	4682      	mov	sl, r0
 800f85e:	6123      	str	r3, [r4, #16]
 800f860:	dc02      	bgt.n	800f868 <_printf_float+0x128>
 800f862:	6822      	ldr	r2, [r4, #0]
 800f864:	07d1      	lsls	r1, r2, #31
 800f866:	d501      	bpl.n	800f86c <_printf_float+0x12c>
 800f868:	3301      	adds	r3, #1
 800f86a:	6123      	str	r3, [r4, #16]
 800f86c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f870:	2b00      	cmp	r3, #0
 800f872:	d0a9      	beq.n	800f7c8 <_printf_float+0x88>
 800f874:	232d      	movs	r3, #45	; 0x2d
 800f876:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f87a:	e7a5      	b.n	800f7c8 <_printf_float+0x88>
 800f87c:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 800f880:	f000 8178 	beq.w	800fb74 <_printf_float+0x434>
 800f884:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800f888:	d1be      	bne.n	800f808 <_printf_float+0xc8>
 800f88a:	2900      	cmp	r1, #0
 800f88c:	d1bc      	bne.n	800f808 <_printf_float+0xc8>
 800f88e:	2101      	movs	r1, #1
 800f890:	e7b9      	b.n	800f806 <_printf_float+0xc6>
 800f892:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800f896:	d119      	bne.n	800f8cc <_printf_float+0x18c>
 800f898:	2900      	cmp	r1, #0
 800f89a:	6863      	ldr	r3, [r4, #4]
 800f89c:	dd0c      	ble.n	800f8b8 <_printf_float+0x178>
 800f89e:	6121      	str	r1, [r4, #16]
 800f8a0:	b913      	cbnz	r3, 800f8a8 <_printf_float+0x168>
 800f8a2:	6822      	ldr	r2, [r4, #0]
 800f8a4:	07d2      	lsls	r2, r2, #31
 800f8a6:	d502      	bpl.n	800f8ae <_printf_float+0x16e>
 800f8a8:	3301      	adds	r3, #1
 800f8aa:	440b      	add	r3, r1
 800f8ac:	6123      	str	r3, [r4, #16]
 800f8ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f8b0:	65a3      	str	r3, [r4, #88]	; 0x58
 800f8b2:	f04f 0a00 	mov.w	sl, #0
 800f8b6:	e7d9      	b.n	800f86c <_printf_float+0x12c>
 800f8b8:	b913      	cbnz	r3, 800f8c0 <_printf_float+0x180>
 800f8ba:	6822      	ldr	r2, [r4, #0]
 800f8bc:	07d0      	lsls	r0, r2, #31
 800f8be:	d501      	bpl.n	800f8c4 <_printf_float+0x184>
 800f8c0:	3302      	adds	r3, #2
 800f8c2:	e7f3      	b.n	800f8ac <_printf_float+0x16c>
 800f8c4:	2301      	movs	r3, #1
 800f8c6:	e7f1      	b.n	800f8ac <_printf_float+0x16c>
 800f8c8:	f04f 0967 	mov.w	r9, #103	; 0x67
 800f8cc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f8d0:	4293      	cmp	r3, r2
 800f8d2:	db05      	blt.n	800f8e0 <_printf_float+0x1a0>
 800f8d4:	6822      	ldr	r2, [r4, #0]
 800f8d6:	6123      	str	r3, [r4, #16]
 800f8d8:	07d1      	lsls	r1, r2, #31
 800f8da:	d5e8      	bpl.n	800f8ae <_printf_float+0x16e>
 800f8dc:	3301      	adds	r3, #1
 800f8de:	e7e5      	b.n	800f8ac <_printf_float+0x16c>
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	bfd4      	ite	le
 800f8e4:	f1c3 0302 	rsble	r3, r3, #2
 800f8e8:	2301      	movgt	r3, #1
 800f8ea:	4413      	add	r3, r2
 800f8ec:	e7de      	b.n	800f8ac <_printf_float+0x16c>
 800f8ee:	6823      	ldr	r3, [r4, #0]
 800f8f0:	055a      	lsls	r2, r3, #21
 800f8f2:	d407      	bmi.n	800f904 <_printf_float+0x1c4>
 800f8f4:	6923      	ldr	r3, [r4, #16]
 800f8f6:	4642      	mov	r2, r8
 800f8f8:	4631      	mov	r1, r6
 800f8fa:	4628      	mov	r0, r5
 800f8fc:	47b8      	blx	r7
 800f8fe:	3001      	adds	r0, #1
 800f900:	d12a      	bne.n	800f958 <_printf_float+0x218>
 800f902:	e76b      	b.n	800f7dc <_printf_float+0x9c>
 800f904:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800f908:	f240 80de 	bls.w	800fac8 <_printf_float+0x388>
 800f90c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800f910:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f918:	d133      	bne.n	800f982 <_printf_float+0x242>
 800f91a:	2301      	movs	r3, #1
 800f91c:	4a42      	ldr	r2, [pc, #264]	; (800fa28 <_printf_float+0x2e8>)
 800f91e:	4631      	mov	r1, r6
 800f920:	4628      	mov	r0, r5
 800f922:	47b8      	blx	r7
 800f924:	3001      	adds	r0, #1
 800f926:	f43f af59 	beq.w	800f7dc <_printf_float+0x9c>
 800f92a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f92e:	429a      	cmp	r2, r3
 800f930:	db02      	blt.n	800f938 <_printf_float+0x1f8>
 800f932:	6823      	ldr	r3, [r4, #0]
 800f934:	07d8      	lsls	r0, r3, #31
 800f936:	d50f      	bpl.n	800f958 <_printf_float+0x218>
 800f938:	9b05      	ldr	r3, [sp, #20]
 800f93a:	465a      	mov	r2, fp
 800f93c:	4631      	mov	r1, r6
 800f93e:	4628      	mov	r0, r5
 800f940:	47b8      	blx	r7
 800f942:	3001      	adds	r0, #1
 800f944:	f43f af4a 	beq.w	800f7dc <_printf_float+0x9c>
 800f948:	f04f 0800 	mov.w	r8, #0
 800f94c:	f104 091a 	add.w	r9, r4, #26
 800f950:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f952:	3b01      	subs	r3, #1
 800f954:	4543      	cmp	r3, r8
 800f956:	dc09      	bgt.n	800f96c <_printf_float+0x22c>
 800f958:	6823      	ldr	r3, [r4, #0]
 800f95a:	079b      	lsls	r3, r3, #30
 800f95c:	f100 8105 	bmi.w	800fb6a <_printf_float+0x42a>
 800f960:	68e0      	ldr	r0, [r4, #12]
 800f962:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f964:	4298      	cmp	r0, r3
 800f966:	bfb8      	it	lt
 800f968:	4618      	movlt	r0, r3
 800f96a:	e739      	b.n	800f7e0 <_printf_float+0xa0>
 800f96c:	2301      	movs	r3, #1
 800f96e:	464a      	mov	r2, r9
 800f970:	4631      	mov	r1, r6
 800f972:	4628      	mov	r0, r5
 800f974:	47b8      	blx	r7
 800f976:	3001      	adds	r0, #1
 800f978:	f43f af30 	beq.w	800f7dc <_printf_float+0x9c>
 800f97c:	f108 0801 	add.w	r8, r8, #1
 800f980:	e7e6      	b.n	800f950 <_printf_float+0x210>
 800f982:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f984:	2b00      	cmp	r3, #0
 800f986:	dc2b      	bgt.n	800f9e0 <_printf_float+0x2a0>
 800f988:	2301      	movs	r3, #1
 800f98a:	4a27      	ldr	r2, [pc, #156]	; (800fa28 <_printf_float+0x2e8>)
 800f98c:	4631      	mov	r1, r6
 800f98e:	4628      	mov	r0, r5
 800f990:	47b8      	blx	r7
 800f992:	3001      	adds	r0, #1
 800f994:	f43f af22 	beq.w	800f7dc <_printf_float+0x9c>
 800f998:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f99a:	b923      	cbnz	r3, 800f9a6 <_printf_float+0x266>
 800f99c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f99e:	b913      	cbnz	r3, 800f9a6 <_printf_float+0x266>
 800f9a0:	6823      	ldr	r3, [r4, #0]
 800f9a2:	07d9      	lsls	r1, r3, #31
 800f9a4:	d5d8      	bpl.n	800f958 <_printf_float+0x218>
 800f9a6:	9b05      	ldr	r3, [sp, #20]
 800f9a8:	465a      	mov	r2, fp
 800f9aa:	4631      	mov	r1, r6
 800f9ac:	4628      	mov	r0, r5
 800f9ae:	47b8      	blx	r7
 800f9b0:	3001      	adds	r0, #1
 800f9b2:	f43f af13 	beq.w	800f7dc <_printf_float+0x9c>
 800f9b6:	f04f 0900 	mov.w	r9, #0
 800f9ba:	f104 0a1a 	add.w	sl, r4, #26
 800f9be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f9c0:	425b      	negs	r3, r3
 800f9c2:	454b      	cmp	r3, r9
 800f9c4:	dc01      	bgt.n	800f9ca <_printf_float+0x28a>
 800f9c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f9c8:	e795      	b.n	800f8f6 <_printf_float+0x1b6>
 800f9ca:	2301      	movs	r3, #1
 800f9cc:	4652      	mov	r2, sl
 800f9ce:	4631      	mov	r1, r6
 800f9d0:	4628      	mov	r0, r5
 800f9d2:	47b8      	blx	r7
 800f9d4:	3001      	adds	r0, #1
 800f9d6:	f43f af01 	beq.w	800f7dc <_printf_float+0x9c>
 800f9da:	f109 0901 	add.w	r9, r9, #1
 800f9de:	e7ee      	b.n	800f9be <_printf_float+0x27e>
 800f9e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f9e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f9e4:	429a      	cmp	r2, r3
 800f9e6:	bfa8      	it	ge
 800f9e8:	461a      	movge	r2, r3
 800f9ea:	2a00      	cmp	r2, #0
 800f9ec:	4691      	mov	r9, r2
 800f9ee:	dd07      	ble.n	800fa00 <_printf_float+0x2c0>
 800f9f0:	4613      	mov	r3, r2
 800f9f2:	4631      	mov	r1, r6
 800f9f4:	4642      	mov	r2, r8
 800f9f6:	4628      	mov	r0, r5
 800f9f8:	47b8      	blx	r7
 800f9fa:	3001      	adds	r0, #1
 800f9fc:	f43f aeee 	beq.w	800f7dc <_printf_float+0x9c>
 800fa00:	f104 031a 	add.w	r3, r4, #26
 800fa04:	f04f 0a00 	mov.w	sl, #0
 800fa08:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fa0c:	9307      	str	r3, [sp, #28]
 800fa0e:	e017      	b.n	800fa40 <_printf_float+0x300>
 800fa10:	ffffffff 	.word	0xffffffff
 800fa14:	7fefffff 	.word	0x7fefffff
 800fa18:	08013568 	.word	0x08013568
 800fa1c:	08013564 	.word	0x08013564
 800fa20:	08013570 	.word	0x08013570
 800fa24:	0801356c 	.word	0x0801356c
 800fa28:	08013574 	.word	0x08013574
 800fa2c:	2301      	movs	r3, #1
 800fa2e:	9a07      	ldr	r2, [sp, #28]
 800fa30:	4631      	mov	r1, r6
 800fa32:	4628      	mov	r0, r5
 800fa34:	47b8      	blx	r7
 800fa36:	3001      	adds	r0, #1
 800fa38:	f43f aed0 	beq.w	800f7dc <_printf_float+0x9c>
 800fa3c:	f10a 0a01 	add.w	sl, sl, #1
 800fa40:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fa42:	9306      	str	r3, [sp, #24]
 800fa44:	eba3 0309 	sub.w	r3, r3, r9
 800fa48:	4553      	cmp	r3, sl
 800fa4a:	dcef      	bgt.n	800fa2c <_printf_float+0x2ec>
 800fa4c:	9b06      	ldr	r3, [sp, #24]
 800fa4e:	4498      	add	r8, r3
 800fa50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fa54:	429a      	cmp	r2, r3
 800fa56:	db15      	blt.n	800fa84 <_printf_float+0x344>
 800fa58:	6823      	ldr	r3, [r4, #0]
 800fa5a:	07da      	lsls	r2, r3, #31
 800fa5c:	d412      	bmi.n	800fa84 <_printf_float+0x344>
 800fa5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa60:	9a06      	ldr	r2, [sp, #24]
 800fa62:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fa64:	1a9a      	subs	r2, r3, r2
 800fa66:	eba3 0a01 	sub.w	sl, r3, r1
 800fa6a:	4592      	cmp	sl, r2
 800fa6c:	bfa8      	it	ge
 800fa6e:	4692      	movge	sl, r2
 800fa70:	f1ba 0f00 	cmp.w	sl, #0
 800fa74:	dc0e      	bgt.n	800fa94 <_printf_float+0x354>
 800fa76:	f04f 0800 	mov.w	r8, #0
 800fa7a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fa7e:	f104 091a 	add.w	r9, r4, #26
 800fa82:	e019      	b.n	800fab8 <_printf_float+0x378>
 800fa84:	9b05      	ldr	r3, [sp, #20]
 800fa86:	465a      	mov	r2, fp
 800fa88:	4631      	mov	r1, r6
 800fa8a:	4628      	mov	r0, r5
 800fa8c:	47b8      	blx	r7
 800fa8e:	3001      	adds	r0, #1
 800fa90:	d1e5      	bne.n	800fa5e <_printf_float+0x31e>
 800fa92:	e6a3      	b.n	800f7dc <_printf_float+0x9c>
 800fa94:	4653      	mov	r3, sl
 800fa96:	4642      	mov	r2, r8
 800fa98:	4631      	mov	r1, r6
 800fa9a:	4628      	mov	r0, r5
 800fa9c:	47b8      	blx	r7
 800fa9e:	3001      	adds	r0, #1
 800faa0:	d1e9      	bne.n	800fa76 <_printf_float+0x336>
 800faa2:	e69b      	b.n	800f7dc <_printf_float+0x9c>
 800faa4:	2301      	movs	r3, #1
 800faa6:	464a      	mov	r2, r9
 800faa8:	4631      	mov	r1, r6
 800faaa:	4628      	mov	r0, r5
 800faac:	47b8      	blx	r7
 800faae:	3001      	adds	r0, #1
 800fab0:	f43f ae94 	beq.w	800f7dc <_printf_float+0x9c>
 800fab4:	f108 0801 	add.w	r8, r8, #1
 800fab8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fabc:	1a9b      	subs	r3, r3, r2
 800fabe:	eba3 030a 	sub.w	r3, r3, sl
 800fac2:	4543      	cmp	r3, r8
 800fac4:	dcee      	bgt.n	800faa4 <_printf_float+0x364>
 800fac6:	e747      	b.n	800f958 <_printf_float+0x218>
 800fac8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800faca:	2a01      	cmp	r2, #1
 800facc:	dc01      	bgt.n	800fad2 <_printf_float+0x392>
 800face:	07db      	lsls	r3, r3, #31
 800fad0:	d539      	bpl.n	800fb46 <_printf_float+0x406>
 800fad2:	2301      	movs	r3, #1
 800fad4:	4642      	mov	r2, r8
 800fad6:	4631      	mov	r1, r6
 800fad8:	4628      	mov	r0, r5
 800fada:	47b8      	blx	r7
 800fadc:	3001      	adds	r0, #1
 800fade:	f43f ae7d 	beq.w	800f7dc <_printf_float+0x9c>
 800fae2:	9b05      	ldr	r3, [sp, #20]
 800fae4:	465a      	mov	r2, fp
 800fae6:	4631      	mov	r1, r6
 800fae8:	4628      	mov	r0, r5
 800faea:	47b8      	blx	r7
 800faec:	3001      	adds	r0, #1
 800faee:	f108 0801 	add.w	r8, r8, #1
 800faf2:	f43f ae73 	beq.w	800f7dc <_printf_float+0x9c>
 800faf6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800fafa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fafc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fb00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb04:	f103 33ff 	add.w	r3, r3, #4294967295
 800fb08:	d018      	beq.n	800fb3c <_printf_float+0x3fc>
 800fb0a:	4642      	mov	r2, r8
 800fb0c:	4631      	mov	r1, r6
 800fb0e:	4628      	mov	r0, r5
 800fb10:	47b8      	blx	r7
 800fb12:	3001      	adds	r0, #1
 800fb14:	d10e      	bne.n	800fb34 <_printf_float+0x3f4>
 800fb16:	e661      	b.n	800f7dc <_printf_float+0x9c>
 800fb18:	2301      	movs	r3, #1
 800fb1a:	464a      	mov	r2, r9
 800fb1c:	4631      	mov	r1, r6
 800fb1e:	4628      	mov	r0, r5
 800fb20:	47b8      	blx	r7
 800fb22:	3001      	adds	r0, #1
 800fb24:	f43f ae5a 	beq.w	800f7dc <_printf_float+0x9c>
 800fb28:	f108 0801 	add.w	r8, r8, #1
 800fb2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fb2e:	3b01      	subs	r3, #1
 800fb30:	4543      	cmp	r3, r8
 800fb32:	dcf1      	bgt.n	800fb18 <_printf_float+0x3d8>
 800fb34:	4653      	mov	r3, sl
 800fb36:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800fb3a:	e6dd      	b.n	800f8f8 <_printf_float+0x1b8>
 800fb3c:	f04f 0800 	mov.w	r8, #0
 800fb40:	f104 091a 	add.w	r9, r4, #26
 800fb44:	e7f2      	b.n	800fb2c <_printf_float+0x3ec>
 800fb46:	2301      	movs	r3, #1
 800fb48:	e7df      	b.n	800fb0a <_printf_float+0x3ca>
 800fb4a:	2301      	movs	r3, #1
 800fb4c:	464a      	mov	r2, r9
 800fb4e:	4631      	mov	r1, r6
 800fb50:	4628      	mov	r0, r5
 800fb52:	47b8      	blx	r7
 800fb54:	3001      	adds	r0, #1
 800fb56:	f43f ae41 	beq.w	800f7dc <_printf_float+0x9c>
 800fb5a:	f108 0801 	add.w	r8, r8, #1
 800fb5e:	68e3      	ldr	r3, [r4, #12]
 800fb60:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fb62:	1a9b      	subs	r3, r3, r2
 800fb64:	4543      	cmp	r3, r8
 800fb66:	dcf0      	bgt.n	800fb4a <_printf_float+0x40a>
 800fb68:	e6fa      	b.n	800f960 <_printf_float+0x220>
 800fb6a:	f04f 0800 	mov.w	r8, #0
 800fb6e:	f104 0919 	add.w	r9, r4, #25
 800fb72:	e7f4      	b.n	800fb5e <_printf_float+0x41e>
 800fb74:	2900      	cmp	r1, #0
 800fb76:	f43f ae8a 	beq.w	800f88e <_printf_float+0x14e>
 800fb7a:	f04f 0c00 	mov.w	ip, #0
 800fb7e:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800fb82:	e9cd 0900 	strd	r0, r9, [sp]
 800fb86:	6022      	str	r2, [r4, #0]
 800fb88:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800fb8c:	4628      	mov	r0, r5
 800fb8e:	f7ff fd50 	bl	800f632 <__cvt>
 800fb92:	4680      	mov	r8, r0
 800fb94:	e64a      	b.n	800f82c <_printf_float+0xec>
 800fb96:	bf00      	nop

0800fb98 <_printf_common>:
 800fb98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb9c:	4691      	mov	r9, r2
 800fb9e:	461f      	mov	r7, r3
 800fba0:	688a      	ldr	r2, [r1, #8]
 800fba2:	690b      	ldr	r3, [r1, #16]
 800fba4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fba8:	4293      	cmp	r3, r2
 800fbaa:	bfb8      	it	lt
 800fbac:	4613      	movlt	r3, r2
 800fbae:	f8c9 3000 	str.w	r3, [r9]
 800fbb2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fbb6:	4606      	mov	r6, r0
 800fbb8:	460c      	mov	r4, r1
 800fbba:	b112      	cbz	r2, 800fbc2 <_printf_common+0x2a>
 800fbbc:	3301      	adds	r3, #1
 800fbbe:	f8c9 3000 	str.w	r3, [r9]
 800fbc2:	6823      	ldr	r3, [r4, #0]
 800fbc4:	0699      	lsls	r1, r3, #26
 800fbc6:	bf42      	ittt	mi
 800fbc8:	f8d9 3000 	ldrmi.w	r3, [r9]
 800fbcc:	3302      	addmi	r3, #2
 800fbce:	f8c9 3000 	strmi.w	r3, [r9]
 800fbd2:	6825      	ldr	r5, [r4, #0]
 800fbd4:	f015 0506 	ands.w	r5, r5, #6
 800fbd8:	d107      	bne.n	800fbea <_printf_common+0x52>
 800fbda:	f104 0a19 	add.w	sl, r4, #25
 800fbde:	68e3      	ldr	r3, [r4, #12]
 800fbe0:	f8d9 2000 	ldr.w	r2, [r9]
 800fbe4:	1a9b      	subs	r3, r3, r2
 800fbe6:	42ab      	cmp	r3, r5
 800fbe8:	dc28      	bgt.n	800fc3c <_printf_common+0xa4>
 800fbea:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800fbee:	6822      	ldr	r2, [r4, #0]
 800fbf0:	3300      	adds	r3, #0
 800fbf2:	bf18      	it	ne
 800fbf4:	2301      	movne	r3, #1
 800fbf6:	0692      	lsls	r2, r2, #26
 800fbf8:	d42d      	bmi.n	800fc56 <_printf_common+0xbe>
 800fbfa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fbfe:	4639      	mov	r1, r7
 800fc00:	4630      	mov	r0, r6
 800fc02:	47c0      	blx	r8
 800fc04:	3001      	adds	r0, #1
 800fc06:	d020      	beq.n	800fc4a <_printf_common+0xb2>
 800fc08:	6823      	ldr	r3, [r4, #0]
 800fc0a:	68e5      	ldr	r5, [r4, #12]
 800fc0c:	f8d9 2000 	ldr.w	r2, [r9]
 800fc10:	f003 0306 	and.w	r3, r3, #6
 800fc14:	2b04      	cmp	r3, #4
 800fc16:	bf08      	it	eq
 800fc18:	1aad      	subeq	r5, r5, r2
 800fc1a:	68a3      	ldr	r3, [r4, #8]
 800fc1c:	6922      	ldr	r2, [r4, #16]
 800fc1e:	bf0c      	ite	eq
 800fc20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fc24:	2500      	movne	r5, #0
 800fc26:	4293      	cmp	r3, r2
 800fc28:	bfc4      	itt	gt
 800fc2a:	1a9b      	subgt	r3, r3, r2
 800fc2c:	18ed      	addgt	r5, r5, r3
 800fc2e:	f04f 0900 	mov.w	r9, #0
 800fc32:	341a      	adds	r4, #26
 800fc34:	454d      	cmp	r5, r9
 800fc36:	d11a      	bne.n	800fc6e <_printf_common+0xd6>
 800fc38:	2000      	movs	r0, #0
 800fc3a:	e008      	b.n	800fc4e <_printf_common+0xb6>
 800fc3c:	2301      	movs	r3, #1
 800fc3e:	4652      	mov	r2, sl
 800fc40:	4639      	mov	r1, r7
 800fc42:	4630      	mov	r0, r6
 800fc44:	47c0      	blx	r8
 800fc46:	3001      	adds	r0, #1
 800fc48:	d103      	bne.n	800fc52 <_printf_common+0xba>
 800fc4a:	f04f 30ff 	mov.w	r0, #4294967295
 800fc4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc52:	3501      	adds	r5, #1
 800fc54:	e7c3      	b.n	800fbde <_printf_common+0x46>
 800fc56:	18e1      	adds	r1, r4, r3
 800fc58:	1c5a      	adds	r2, r3, #1
 800fc5a:	2030      	movs	r0, #48	; 0x30
 800fc5c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fc60:	4422      	add	r2, r4
 800fc62:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fc66:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fc6a:	3302      	adds	r3, #2
 800fc6c:	e7c5      	b.n	800fbfa <_printf_common+0x62>
 800fc6e:	2301      	movs	r3, #1
 800fc70:	4622      	mov	r2, r4
 800fc72:	4639      	mov	r1, r7
 800fc74:	4630      	mov	r0, r6
 800fc76:	47c0      	blx	r8
 800fc78:	3001      	adds	r0, #1
 800fc7a:	d0e6      	beq.n	800fc4a <_printf_common+0xb2>
 800fc7c:	f109 0901 	add.w	r9, r9, #1
 800fc80:	e7d8      	b.n	800fc34 <_printf_common+0x9c>
	...

0800fc84 <_printf_i>:
 800fc84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fc88:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800fc8c:	460c      	mov	r4, r1
 800fc8e:	7e09      	ldrb	r1, [r1, #24]
 800fc90:	b085      	sub	sp, #20
 800fc92:	296e      	cmp	r1, #110	; 0x6e
 800fc94:	4617      	mov	r7, r2
 800fc96:	4606      	mov	r6, r0
 800fc98:	4698      	mov	r8, r3
 800fc9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fc9c:	f000 80b3 	beq.w	800fe06 <_printf_i+0x182>
 800fca0:	d822      	bhi.n	800fce8 <_printf_i+0x64>
 800fca2:	2963      	cmp	r1, #99	; 0x63
 800fca4:	d036      	beq.n	800fd14 <_printf_i+0x90>
 800fca6:	d80a      	bhi.n	800fcbe <_printf_i+0x3a>
 800fca8:	2900      	cmp	r1, #0
 800fcaa:	f000 80b9 	beq.w	800fe20 <_printf_i+0x19c>
 800fcae:	2958      	cmp	r1, #88	; 0x58
 800fcb0:	f000 8083 	beq.w	800fdba <_printf_i+0x136>
 800fcb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fcb8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800fcbc:	e032      	b.n	800fd24 <_printf_i+0xa0>
 800fcbe:	2964      	cmp	r1, #100	; 0x64
 800fcc0:	d001      	beq.n	800fcc6 <_printf_i+0x42>
 800fcc2:	2969      	cmp	r1, #105	; 0x69
 800fcc4:	d1f6      	bne.n	800fcb4 <_printf_i+0x30>
 800fcc6:	6820      	ldr	r0, [r4, #0]
 800fcc8:	6813      	ldr	r3, [r2, #0]
 800fcca:	0605      	lsls	r5, r0, #24
 800fccc:	f103 0104 	add.w	r1, r3, #4
 800fcd0:	d52a      	bpl.n	800fd28 <_printf_i+0xa4>
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	6011      	str	r1, [r2, #0]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	da03      	bge.n	800fce2 <_printf_i+0x5e>
 800fcda:	222d      	movs	r2, #45	; 0x2d
 800fcdc:	425b      	negs	r3, r3
 800fcde:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800fce2:	486f      	ldr	r0, [pc, #444]	; (800fea0 <_printf_i+0x21c>)
 800fce4:	220a      	movs	r2, #10
 800fce6:	e039      	b.n	800fd5c <_printf_i+0xd8>
 800fce8:	2973      	cmp	r1, #115	; 0x73
 800fcea:	f000 809d 	beq.w	800fe28 <_printf_i+0x1a4>
 800fcee:	d808      	bhi.n	800fd02 <_printf_i+0x7e>
 800fcf0:	296f      	cmp	r1, #111	; 0x6f
 800fcf2:	d020      	beq.n	800fd36 <_printf_i+0xb2>
 800fcf4:	2970      	cmp	r1, #112	; 0x70
 800fcf6:	d1dd      	bne.n	800fcb4 <_printf_i+0x30>
 800fcf8:	6823      	ldr	r3, [r4, #0]
 800fcfa:	f043 0320 	orr.w	r3, r3, #32
 800fcfe:	6023      	str	r3, [r4, #0]
 800fd00:	e003      	b.n	800fd0a <_printf_i+0x86>
 800fd02:	2975      	cmp	r1, #117	; 0x75
 800fd04:	d017      	beq.n	800fd36 <_printf_i+0xb2>
 800fd06:	2978      	cmp	r1, #120	; 0x78
 800fd08:	d1d4      	bne.n	800fcb4 <_printf_i+0x30>
 800fd0a:	2378      	movs	r3, #120	; 0x78
 800fd0c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fd10:	4864      	ldr	r0, [pc, #400]	; (800fea4 <_printf_i+0x220>)
 800fd12:	e055      	b.n	800fdc0 <_printf_i+0x13c>
 800fd14:	6813      	ldr	r3, [r2, #0]
 800fd16:	1d19      	adds	r1, r3, #4
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	6011      	str	r1, [r2, #0]
 800fd1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fd20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fd24:	2301      	movs	r3, #1
 800fd26:	e08c      	b.n	800fe42 <_printf_i+0x1be>
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	6011      	str	r1, [r2, #0]
 800fd2c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fd30:	bf18      	it	ne
 800fd32:	b21b      	sxthne	r3, r3
 800fd34:	e7cf      	b.n	800fcd6 <_printf_i+0x52>
 800fd36:	6813      	ldr	r3, [r2, #0]
 800fd38:	6825      	ldr	r5, [r4, #0]
 800fd3a:	1d18      	adds	r0, r3, #4
 800fd3c:	6010      	str	r0, [r2, #0]
 800fd3e:	0628      	lsls	r0, r5, #24
 800fd40:	d501      	bpl.n	800fd46 <_printf_i+0xc2>
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	e002      	b.n	800fd4c <_printf_i+0xc8>
 800fd46:	0668      	lsls	r0, r5, #25
 800fd48:	d5fb      	bpl.n	800fd42 <_printf_i+0xbe>
 800fd4a:	881b      	ldrh	r3, [r3, #0]
 800fd4c:	4854      	ldr	r0, [pc, #336]	; (800fea0 <_printf_i+0x21c>)
 800fd4e:	296f      	cmp	r1, #111	; 0x6f
 800fd50:	bf14      	ite	ne
 800fd52:	220a      	movne	r2, #10
 800fd54:	2208      	moveq	r2, #8
 800fd56:	2100      	movs	r1, #0
 800fd58:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fd5c:	6865      	ldr	r5, [r4, #4]
 800fd5e:	60a5      	str	r5, [r4, #8]
 800fd60:	2d00      	cmp	r5, #0
 800fd62:	f2c0 8095 	blt.w	800fe90 <_printf_i+0x20c>
 800fd66:	6821      	ldr	r1, [r4, #0]
 800fd68:	f021 0104 	bic.w	r1, r1, #4
 800fd6c:	6021      	str	r1, [r4, #0]
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d13d      	bne.n	800fdee <_printf_i+0x16a>
 800fd72:	2d00      	cmp	r5, #0
 800fd74:	f040 808e 	bne.w	800fe94 <_printf_i+0x210>
 800fd78:	4665      	mov	r5, ip
 800fd7a:	2a08      	cmp	r2, #8
 800fd7c:	d10b      	bne.n	800fd96 <_printf_i+0x112>
 800fd7e:	6823      	ldr	r3, [r4, #0]
 800fd80:	07db      	lsls	r3, r3, #31
 800fd82:	d508      	bpl.n	800fd96 <_printf_i+0x112>
 800fd84:	6923      	ldr	r3, [r4, #16]
 800fd86:	6862      	ldr	r2, [r4, #4]
 800fd88:	429a      	cmp	r2, r3
 800fd8a:	bfde      	ittt	le
 800fd8c:	2330      	movle	r3, #48	; 0x30
 800fd8e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fd92:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fd96:	ebac 0305 	sub.w	r3, ip, r5
 800fd9a:	6123      	str	r3, [r4, #16]
 800fd9c:	f8cd 8000 	str.w	r8, [sp]
 800fda0:	463b      	mov	r3, r7
 800fda2:	aa03      	add	r2, sp, #12
 800fda4:	4621      	mov	r1, r4
 800fda6:	4630      	mov	r0, r6
 800fda8:	f7ff fef6 	bl	800fb98 <_printf_common>
 800fdac:	3001      	adds	r0, #1
 800fdae:	d14d      	bne.n	800fe4c <_printf_i+0x1c8>
 800fdb0:	f04f 30ff 	mov.w	r0, #4294967295
 800fdb4:	b005      	add	sp, #20
 800fdb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fdba:	4839      	ldr	r0, [pc, #228]	; (800fea0 <_printf_i+0x21c>)
 800fdbc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800fdc0:	6813      	ldr	r3, [r2, #0]
 800fdc2:	6821      	ldr	r1, [r4, #0]
 800fdc4:	1d1d      	adds	r5, r3, #4
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	6015      	str	r5, [r2, #0]
 800fdca:	060a      	lsls	r2, r1, #24
 800fdcc:	d50b      	bpl.n	800fde6 <_printf_i+0x162>
 800fdce:	07ca      	lsls	r2, r1, #31
 800fdd0:	bf44      	itt	mi
 800fdd2:	f041 0120 	orrmi.w	r1, r1, #32
 800fdd6:	6021      	strmi	r1, [r4, #0]
 800fdd8:	b91b      	cbnz	r3, 800fde2 <_printf_i+0x15e>
 800fdda:	6822      	ldr	r2, [r4, #0]
 800fddc:	f022 0220 	bic.w	r2, r2, #32
 800fde0:	6022      	str	r2, [r4, #0]
 800fde2:	2210      	movs	r2, #16
 800fde4:	e7b7      	b.n	800fd56 <_printf_i+0xd2>
 800fde6:	064d      	lsls	r5, r1, #25
 800fde8:	bf48      	it	mi
 800fdea:	b29b      	uxthmi	r3, r3
 800fdec:	e7ef      	b.n	800fdce <_printf_i+0x14a>
 800fdee:	4665      	mov	r5, ip
 800fdf0:	fbb3 f1f2 	udiv	r1, r3, r2
 800fdf4:	fb02 3311 	mls	r3, r2, r1, r3
 800fdf8:	5cc3      	ldrb	r3, [r0, r3]
 800fdfa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800fdfe:	460b      	mov	r3, r1
 800fe00:	2900      	cmp	r1, #0
 800fe02:	d1f5      	bne.n	800fdf0 <_printf_i+0x16c>
 800fe04:	e7b9      	b.n	800fd7a <_printf_i+0xf6>
 800fe06:	6813      	ldr	r3, [r2, #0]
 800fe08:	6825      	ldr	r5, [r4, #0]
 800fe0a:	6961      	ldr	r1, [r4, #20]
 800fe0c:	1d18      	adds	r0, r3, #4
 800fe0e:	6010      	str	r0, [r2, #0]
 800fe10:	0628      	lsls	r0, r5, #24
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	d501      	bpl.n	800fe1a <_printf_i+0x196>
 800fe16:	6019      	str	r1, [r3, #0]
 800fe18:	e002      	b.n	800fe20 <_printf_i+0x19c>
 800fe1a:	066a      	lsls	r2, r5, #25
 800fe1c:	d5fb      	bpl.n	800fe16 <_printf_i+0x192>
 800fe1e:	8019      	strh	r1, [r3, #0]
 800fe20:	2300      	movs	r3, #0
 800fe22:	6123      	str	r3, [r4, #16]
 800fe24:	4665      	mov	r5, ip
 800fe26:	e7b9      	b.n	800fd9c <_printf_i+0x118>
 800fe28:	6813      	ldr	r3, [r2, #0]
 800fe2a:	1d19      	adds	r1, r3, #4
 800fe2c:	6011      	str	r1, [r2, #0]
 800fe2e:	681d      	ldr	r5, [r3, #0]
 800fe30:	6862      	ldr	r2, [r4, #4]
 800fe32:	2100      	movs	r1, #0
 800fe34:	4628      	mov	r0, r5
 800fe36:	f7f0 fa1b 	bl	8000270 <memchr>
 800fe3a:	b108      	cbz	r0, 800fe40 <_printf_i+0x1bc>
 800fe3c:	1b40      	subs	r0, r0, r5
 800fe3e:	6060      	str	r0, [r4, #4]
 800fe40:	6863      	ldr	r3, [r4, #4]
 800fe42:	6123      	str	r3, [r4, #16]
 800fe44:	2300      	movs	r3, #0
 800fe46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fe4a:	e7a7      	b.n	800fd9c <_printf_i+0x118>
 800fe4c:	6923      	ldr	r3, [r4, #16]
 800fe4e:	462a      	mov	r2, r5
 800fe50:	4639      	mov	r1, r7
 800fe52:	4630      	mov	r0, r6
 800fe54:	47c0      	blx	r8
 800fe56:	3001      	adds	r0, #1
 800fe58:	d0aa      	beq.n	800fdb0 <_printf_i+0x12c>
 800fe5a:	6823      	ldr	r3, [r4, #0]
 800fe5c:	079b      	lsls	r3, r3, #30
 800fe5e:	d413      	bmi.n	800fe88 <_printf_i+0x204>
 800fe60:	68e0      	ldr	r0, [r4, #12]
 800fe62:	9b03      	ldr	r3, [sp, #12]
 800fe64:	4298      	cmp	r0, r3
 800fe66:	bfb8      	it	lt
 800fe68:	4618      	movlt	r0, r3
 800fe6a:	e7a3      	b.n	800fdb4 <_printf_i+0x130>
 800fe6c:	2301      	movs	r3, #1
 800fe6e:	464a      	mov	r2, r9
 800fe70:	4639      	mov	r1, r7
 800fe72:	4630      	mov	r0, r6
 800fe74:	47c0      	blx	r8
 800fe76:	3001      	adds	r0, #1
 800fe78:	d09a      	beq.n	800fdb0 <_printf_i+0x12c>
 800fe7a:	3501      	adds	r5, #1
 800fe7c:	68e3      	ldr	r3, [r4, #12]
 800fe7e:	9a03      	ldr	r2, [sp, #12]
 800fe80:	1a9b      	subs	r3, r3, r2
 800fe82:	42ab      	cmp	r3, r5
 800fe84:	dcf2      	bgt.n	800fe6c <_printf_i+0x1e8>
 800fe86:	e7eb      	b.n	800fe60 <_printf_i+0x1dc>
 800fe88:	2500      	movs	r5, #0
 800fe8a:	f104 0919 	add.w	r9, r4, #25
 800fe8e:	e7f5      	b.n	800fe7c <_printf_i+0x1f8>
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d1ac      	bne.n	800fdee <_printf_i+0x16a>
 800fe94:	7803      	ldrb	r3, [r0, #0]
 800fe96:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fe9a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fe9e:	e76c      	b.n	800fd7a <_printf_i+0xf6>
 800fea0:	08013576 	.word	0x08013576
 800fea4:	08013587 	.word	0x08013587

0800fea8 <_scanf_float>:
 800fea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800feac:	469a      	mov	sl, r3
 800feae:	688b      	ldr	r3, [r1, #8]
 800feb0:	4616      	mov	r6, r2
 800feb2:	1e5a      	subs	r2, r3, #1
 800feb4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800feb8:	b087      	sub	sp, #28
 800feba:	bf83      	ittte	hi
 800febc:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800fec0:	189b      	addhi	r3, r3, r2
 800fec2:	9301      	strhi	r3, [sp, #4]
 800fec4:	2300      	movls	r3, #0
 800fec6:	bf86      	itte	hi
 800fec8:	f240 135d 	movwhi	r3, #349	; 0x15d
 800fecc:	608b      	strhi	r3, [r1, #8]
 800fece:	9301      	strls	r3, [sp, #4]
 800fed0:	680b      	ldr	r3, [r1, #0]
 800fed2:	4688      	mov	r8, r1
 800fed4:	f04f 0b00 	mov.w	fp, #0
 800fed8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800fedc:	f848 3b1c 	str.w	r3, [r8], #28
 800fee0:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800fee4:	4607      	mov	r7, r0
 800fee6:	460c      	mov	r4, r1
 800fee8:	4645      	mov	r5, r8
 800feea:	465a      	mov	r2, fp
 800feec:	46d9      	mov	r9, fp
 800feee:	f8cd b008 	str.w	fp, [sp, #8]
 800fef2:	68a1      	ldr	r1, [r4, #8]
 800fef4:	b181      	cbz	r1, 800ff18 <_scanf_float+0x70>
 800fef6:	6833      	ldr	r3, [r6, #0]
 800fef8:	781b      	ldrb	r3, [r3, #0]
 800fefa:	2b49      	cmp	r3, #73	; 0x49
 800fefc:	d071      	beq.n	800ffe2 <_scanf_float+0x13a>
 800fefe:	d84d      	bhi.n	800ff9c <_scanf_float+0xf4>
 800ff00:	2b39      	cmp	r3, #57	; 0x39
 800ff02:	d840      	bhi.n	800ff86 <_scanf_float+0xde>
 800ff04:	2b31      	cmp	r3, #49	; 0x31
 800ff06:	f080 8088 	bcs.w	801001a <_scanf_float+0x172>
 800ff0a:	2b2d      	cmp	r3, #45	; 0x2d
 800ff0c:	f000 8090 	beq.w	8010030 <_scanf_float+0x188>
 800ff10:	d815      	bhi.n	800ff3e <_scanf_float+0x96>
 800ff12:	2b2b      	cmp	r3, #43	; 0x2b
 800ff14:	f000 808c 	beq.w	8010030 <_scanf_float+0x188>
 800ff18:	f1b9 0f00 	cmp.w	r9, #0
 800ff1c:	d003      	beq.n	800ff26 <_scanf_float+0x7e>
 800ff1e:	6823      	ldr	r3, [r4, #0]
 800ff20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ff24:	6023      	str	r3, [r4, #0]
 800ff26:	3a01      	subs	r2, #1
 800ff28:	2a01      	cmp	r2, #1
 800ff2a:	f200 80ea 	bhi.w	8010102 <_scanf_float+0x25a>
 800ff2e:	4545      	cmp	r5, r8
 800ff30:	f200 80dc 	bhi.w	80100ec <_scanf_float+0x244>
 800ff34:	2601      	movs	r6, #1
 800ff36:	4630      	mov	r0, r6
 800ff38:	b007      	add	sp, #28
 800ff3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff3e:	2b2e      	cmp	r3, #46	; 0x2e
 800ff40:	f000 809f 	beq.w	8010082 <_scanf_float+0x1da>
 800ff44:	2b30      	cmp	r3, #48	; 0x30
 800ff46:	d1e7      	bne.n	800ff18 <_scanf_float+0x70>
 800ff48:	6820      	ldr	r0, [r4, #0]
 800ff4a:	f410 7f80 	tst.w	r0, #256	; 0x100
 800ff4e:	d064      	beq.n	801001a <_scanf_float+0x172>
 800ff50:	9b01      	ldr	r3, [sp, #4]
 800ff52:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800ff56:	6020      	str	r0, [r4, #0]
 800ff58:	f109 0901 	add.w	r9, r9, #1
 800ff5c:	b11b      	cbz	r3, 800ff66 <_scanf_float+0xbe>
 800ff5e:	3b01      	subs	r3, #1
 800ff60:	3101      	adds	r1, #1
 800ff62:	9301      	str	r3, [sp, #4]
 800ff64:	60a1      	str	r1, [r4, #8]
 800ff66:	68a3      	ldr	r3, [r4, #8]
 800ff68:	3b01      	subs	r3, #1
 800ff6a:	60a3      	str	r3, [r4, #8]
 800ff6c:	6923      	ldr	r3, [r4, #16]
 800ff6e:	3301      	adds	r3, #1
 800ff70:	6123      	str	r3, [r4, #16]
 800ff72:	6873      	ldr	r3, [r6, #4]
 800ff74:	3b01      	subs	r3, #1
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	6073      	str	r3, [r6, #4]
 800ff7a:	f340 80ac 	ble.w	80100d6 <_scanf_float+0x22e>
 800ff7e:	6833      	ldr	r3, [r6, #0]
 800ff80:	3301      	adds	r3, #1
 800ff82:	6033      	str	r3, [r6, #0]
 800ff84:	e7b5      	b.n	800fef2 <_scanf_float+0x4a>
 800ff86:	2b45      	cmp	r3, #69	; 0x45
 800ff88:	f000 8085 	beq.w	8010096 <_scanf_float+0x1ee>
 800ff8c:	2b46      	cmp	r3, #70	; 0x46
 800ff8e:	d06a      	beq.n	8010066 <_scanf_float+0x1be>
 800ff90:	2b41      	cmp	r3, #65	; 0x41
 800ff92:	d1c1      	bne.n	800ff18 <_scanf_float+0x70>
 800ff94:	2a01      	cmp	r2, #1
 800ff96:	d1bf      	bne.n	800ff18 <_scanf_float+0x70>
 800ff98:	2202      	movs	r2, #2
 800ff9a:	e046      	b.n	801002a <_scanf_float+0x182>
 800ff9c:	2b65      	cmp	r3, #101	; 0x65
 800ff9e:	d07a      	beq.n	8010096 <_scanf_float+0x1ee>
 800ffa0:	d818      	bhi.n	800ffd4 <_scanf_float+0x12c>
 800ffa2:	2b54      	cmp	r3, #84	; 0x54
 800ffa4:	d066      	beq.n	8010074 <_scanf_float+0x1cc>
 800ffa6:	d811      	bhi.n	800ffcc <_scanf_float+0x124>
 800ffa8:	2b4e      	cmp	r3, #78	; 0x4e
 800ffaa:	d1b5      	bne.n	800ff18 <_scanf_float+0x70>
 800ffac:	2a00      	cmp	r2, #0
 800ffae:	d146      	bne.n	801003e <_scanf_float+0x196>
 800ffb0:	f1b9 0f00 	cmp.w	r9, #0
 800ffb4:	d145      	bne.n	8010042 <_scanf_float+0x19a>
 800ffb6:	6821      	ldr	r1, [r4, #0]
 800ffb8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800ffbc:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800ffc0:	d13f      	bne.n	8010042 <_scanf_float+0x19a>
 800ffc2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800ffc6:	6021      	str	r1, [r4, #0]
 800ffc8:	2201      	movs	r2, #1
 800ffca:	e02e      	b.n	801002a <_scanf_float+0x182>
 800ffcc:	2b59      	cmp	r3, #89	; 0x59
 800ffce:	d01e      	beq.n	801000e <_scanf_float+0x166>
 800ffd0:	2b61      	cmp	r3, #97	; 0x61
 800ffd2:	e7de      	b.n	800ff92 <_scanf_float+0xea>
 800ffd4:	2b6e      	cmp	r3, #110	; 0x6e
 800ffd6:	d0e9      	beq.n	800ffac <_scanf_float+0x104>
 800ffd8:	d815      	bhi.n	8010006 <_scanf_float+0x15e>
 800ffda:	2b66      	cmp	r3, #102	; 0x66
 800ffdc:	d043      	beq.n	8010066 <_scanf_float+0x1be>
 800ffde:	2b69      	cmp	r3, #105	; 0x69
 800ffe0:	d19a      	bne.n	800ff18 <_scanf_float+0x70>
 800ffe2:	f1bb 0f00 	cmp.w	fp, #0
 800ffe6:	d138      	bne.n	801005a <_scanf_float+0x1b2>
 800ffe8:	f1b9 0f00 	cmp.w	r9, #0
 800ffec:	d197      	bne.n	800ff1e <_scanf_float+0x76>
 800ffee:	6821      	ldr	r1, [r4, #0]
 800fff0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800fff4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800fff8:	d195      	bne.n	800ff26 <_scanf_float+0x7e>
 800fffa:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800fffe:	6021      	str	r1, [r4, #0]
 8010000:	f04f 0b01 	mov.w	fp, #1
 8010004:	e011      	b.n	801002a <_scanf_float+0x182>
 8010006:	2b74      	cmp	r3, #116	; 0x74
 8010008:	d034      	beq.n	8010074 <_scanf_float+0x1cc>
 801000a:	2b79      	cmp	r3, #121	; 0x79
 801000c:	d184      	bne.n	800ff18 <_scanf_float+0x70>
 801000e:	f1bb 0f07 	cmp.w	fp, #7
 8010012:	d181      	bne.n	800ff18 <_scanf_float+0x70>
 8010014:	f04f 0b08 	mov.w	fp, #8
 8010018:	e007      	b.n	801002a <_scanf_float+0x182>
 801001a:	eb12 0f0b 	cmn.w	r2, fp
 801001e:	f47f af7b 	bne.w	800ff18 <_scanf_float+0x70>
 8010022:	6821      	ldr	r1, [r4, #0]
 8010024:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8010028:	6021      	str	r1, [r4, #0]
 801002a:	702b      	strb	r3, [r5, #0]
 801002c:	3501      	adds	r5, #1
 801002e:	e79a      	b.n	800ff66 <_scanf_float+0xbe>
 8010030:	6821      	ldr	r1, [r4, #0]
 8010032:	0608      	lsls	r0, r1, #24
 8010034:	f57f af70 	bpl.w	800ff18 <_scanf_float+0x70>
 8010038:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801003c:	e7f4      	b.n	8010028 <_scanf_float+0x180>
 801003e:	2a02      	cmp	r2, #2
 8010040:	d047      	beq.n	80100d2 <_scanf_float+0x22a>
 8010042:	f1bb 0f01 	cmp.w	fp, #1
 8010046:	d003      	beq.n	8010050 <_scanf_float+0x1a8>
 8010048:	f1bb 0f04 	cmp.w	fp, #4
 801004c:	f47f af64 	bne.w	800ff18 <_scanf_float+0x70>
 8010050:	f10b 0b01 	add.w	fp, fp, #1
 8010054:	fa5f fb8b 	uxtb.w	fp, fp
 8010058:	e7e7      	b.n	801002a <_scanf_float+0x182>
 801005a:	f1bb 0f03 	cmp.w	fp, #3
 801005e:	d0f7      	beq.n	8010050 <_scanf_float+0x1a8>
 8010060:	f1bb 0f05 	cmp.w	fp, #5
 8010064:	e7f2      	b.n	801004c <_scanf_float+0x1a4>
 8010066:	f1bb 0f02 	cmp.w	fp, #2
 801006a:	f47f af55 	bne.w	800ff18 <_scanf_float+0x70>
 801006e:	f04f 0b03 	mov.w	fp, #3
 8010072:	e7da      	b.n	801002a <_scanf_float+0x182>
 8010074:	f1bb 0f06 	cmp.w	fp, #6
 8010078:	f47f af4e 	bne.w	800ff18 <_scanf_float+0x70>
 801007c:	f04f 0b07 	mov.w	fp, #7
 8010080:	e7d3      	b.n	801002a <_scanf_float+0x182>
 8010082:	6821      	ldr	r1, [r4, #0]
 8010084:	0588      	lsls	r0, r1, #22
 8010086:	f57f af47 	bpl.w	800ff18 <_scanf_float+0x70>
 801008a:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 801008e:	6021      	str	r1, [r4, #0]
 8010090:	f8cd 9008 	str.w	r9, [sp, #8]
 8010094:	e7c9      	b.n	801002a <_scanf_float+0x182>
 8010096:	6821      	ldr	r1, [r4, #0]
 8010098:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 801009c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80100a0:	d006      	beq.n	80100b0 <_scanf_float+0x208>
 80100a2:	0548      	lsls	r0, r1, #21
 80100a4:	f57f af38 	bpl.w	800ff18 <_scanf_float+0x70>
 80100a8:	f1b9 0f00 	cmp.w	r9, #0
 80100ac:	f43f af3b 	beq.w	800ff26 <_scanf_float+0x7e>
 80100b0:	0588      	lsls	r0, r1, #22
 80100b2:	bf58      	it	pl
 80100b4:	9802      	ldrpl	r0, [sp, #8]
 80100b6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80100ba:	bf58      	it	pl
 80100bc:	eba9 0000 	subpl.w	r0, r9, r0
 80100c0:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80100c4:	bf58      	it	pl
 80100c6:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80100ca:	6021      	str	r1, [r4, #0]
 80100cc:	f04f 0900 	mov.w	r9, #0
 80100d0:	e7ab      	b.n	801002a <_scanf_float+0x182>
 80100d2:	2203      	movs	r2, #3
 80100d4:	e7a9      	b.n	801002a <_scanf_float+0x182>
 80100d6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80100da:	9205      	str	r2, [sp, #20]
 80100dc:	4631      	mov	r1, r6
 80100de:	4638      	mov	r0, r7
 80100e0:	4798      	blx	r3
 80100e2:	9a05      	ldr	r2, [sp, #20]
 80100e4:	2800      	cmp	r0, #0
 80100e6:	f43f af04 	beq.w	800fef2 <_scanf_float+0x4a>
 80100ea:	e715      	b.n	800ff18 <_scanf_float+0x70>
 80100ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80100f0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80100f4:	4632      	mov	r2, r6
 80100f6:	4638      	mov	r0, r7
 80100f8:	4798      	blx	r3
 80100fa:	6923      	ldr	r3, [r4, #16]
 80100fc:	3b01      	subs	r3, #1
 80100fe:	6123      	str	r3, [r4, #16]
 8010100:	e715      	b.n	800ff2e <_scanf_float+0x86>
 8010102:	f10b 33ff 	add.w	r3, fp, #4294967295
 8010106:	2b06      	cmp	r3, #6
 8010108:	d80a      	bhi.n	8010120 <_scanf_float+0x278>
 801010a:	f1bb 0f02 	cmp.w	fp, #2
 801010e:	d966      	bls.n	80101de <_scanf_float+0x336>
 8010110:	f1ab 0b03 	sub.w	fp, fp, #3
 8010114:	fa5f fb8b 	uxtb.w	fp, fp
 8010118:	eba5 0b0b 	sub.w	fp, r5, fp
 801011c:	455d      	cmp	r5, fp
 801011e:	d149      	bne.n	80101b4 <_scanf_float+0x30c>
 8010120:	6823      	ldr	r3, [r4, #0]
 8010122:	05da      	lsls	r2, r3, #23
 8010124:	d51f      	bpl.n	8010166 <_scanf_float+0x2be>
 8010126:	055b      	lsls	r3, r3, #21
 8010128:	d466      	bmi.n	80101f8 <_scanf_float+0x350>
 801012a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801012e:	6923      	ldr	r3, [r4, #16]
 8010130:	2965      	cmp	r1, #101	; 0x65
 8010132:	f103 33ff 	add.w	r3, r3, #4294967295
 8010136:	f105 3bff 	add.w	fp, r5, #4294967295
 801013a:	6123      	str	r3, [r4, #16]
 801013c:	d00d      	beq.n	801015a <_scanf_float+0x2b2>
 801013e:	2945      	cmp	r1, #69	; 0x45
 8010140:	d00b      	beq.n	801015a <_scanf_float+0x2b2>
 8010142:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010146:	4632      	mov	r2, r6
 8010148:	4638      	mov	r0, r7
 801014a:	4798      	blx	r3
 801014c:	6923      	ldr	r3, [r4, #16]
 801014e:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8010152:	3b01      	subs	r3, #1
 8010154:	f1a5 0b02 	sub.w	fp, r5, #2
 8010158:	6123      	str	r3, [r4, #16]
 801015a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801015e:	4632      	mov	r2, r6
 8010160:	4638      	mov	r0, r7
 8010162:	4798      	blx	r3
 8010164:	465d      	mov	r5, fp
 8010166:	6826      	ldr	r6, [r4, #0]
 8010168:	f016 0610 	ands.w	r6, r6, #16
 801016c:	d170      	bne.n	8010250 <_scanf_float+0x3a8>
 801016e:	702e      	strb	r6, [r5, #0]
 8010170:	6823      	ldr	r3, [r4, #0]
 8010172:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8010176:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801017a:	d140      	bne.n	80101fe <_scanf_float+0x356>
 801017c:	9b02      	ldr	r3, [sp, #8]
 801017e:	eba9 0303 	sub.w	r3, r9, r3
 8010182:	425a      	negs	r2, r3
 8010184:	2b00      	cmp	r3, #0
 8010186:	d147      	bne.n	8010218 <_scanf_float+0x370>
 8010188:	2200      	movs	r2, #0
 801018a:	4638      	mov	r0, r7
 801018c:	4641      	mov	r1, r8
 801018e:	f000 fe9b 	bl	8010ec8 <_strtod_r>
 8010192:	6820      	ldr	r0, [r4, #0]
 8010194:	f8da 3000 	ldr.w	r3, [sl]
 8010198:	f010 0f02 	tst.w	r0, #2
 801019c:	f103 0204 	add.w	r2, r3, #4
 80101a0:	f8ca 2000 	str.w	r2, [sl]
 80101a4:	d043      	beq.n	801022e <_scanf_float+0x386>
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	ed83 0b00 	vstr	d0, [r3]
 80101ac:	68e3      	ldr	r3, [r4, #12]
 80101ae:	3301      	adds	r3, #1
 80101b0:	60e3      	str	r3, [r4, #12]
 80101b2:	e6c0      	b.n	800ff36 <_scanf_float+0x8e>
 80101b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80101b8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80101bc:	4632      	mov	r2, r6
 80101be:	4638      	mov	r0, r7
 80101c0:	4798      	blx	r3
 80101c2:	6923      	ldr	r3, [r4, #16]
 80101c4:	3b01      	subs	r3, #1
 80101c6:	6123      	str	r3, [r4, #16]
 80101c8:	e7a8      	b.n	801011c <_scanf_float+0x274>
 80101ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80101ce:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80101d2:	4632      	mov	r2, r6
 80101d4:	4638      	mov	r0, r7
 80101d6:	4798      	blx	r3
 80101d8:	6923      	ldr	r3, [r4, #16]
 80101da:	3b01      	subs	r3, #1
 80101dc:	6123      	str	r3, [r4, #16]
 80101de:	4545      	cmp	r5, r8
 80101e0:	d8f3      	bhi.n	80101ca <_scanf_float+0x322>
 80101e2:	e6a7      	b.n	800ff34 <_scanf_float+0x8c>
 80101e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80101e8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80101ec:	4632      	mov	r2, r6
 80101ee:	4638      	mov	r0, r7
 80101f0:	4798      	blx	r3
 80101f2:	6923      	ldr	r3, [r4, #16]
 80101f4:	3b01      	subs	r3, #1
 80101f6:	6123      	str	r3, [r4, #16]
 80101f8:	4545      	cmp	r5, r8
 80101fa:	d8f3      	bhi.n	80101e4 <_scanf_float+0x33c>
 80101fc:	e69a      	b.n	800ff34 <_scanf_float+0x8c>
 80101fe:	9b03      	ldr	r3, [sp, #12]
 8010200:	2b00      	cmp	r3, #0
 8010202:	d0c1      	beq.n	8010188 <_scanf_float+0x2e0>
 8010204:	9904      	ldr	r1, [sp, #16]
 8010206:	230a      	movs	r3, #10
 8010208:	4632      	mov	r2, r6
 801020a:	3101      	adds	r1, #1
 801020c:	4638      	mov	r0, r7
 801020e:	f000 fee7 	bl	8010fe0 <_strtol_r>
 8010212:	9b03      	ldr	r3, [sp, #12]
 8010214:	9d04      	ldr	r5, [sp, #16]
 8010216:	1ac2      	subs	r2, r0, r3
 8010218:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801021c:	429d      	cmp	r5, r3
 801021e:	bf28      	it	cs
 8010220:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8010224:	490b      	ldr	r1, [pc, #44]	; (8010254 <_scanf_float+0x3ac>)
 8010226:	4628      	mov	r0, r5
 8010228:	f000 f81c 	bl	8010264 <siprintf>
 801022c:	e7ac      	b.n	8010188 <_scanf_float+0x2e0>
 801022e:	f010 0004 	ands.w	r0, r0, #4
 8010232:	d1b8      	bne.n	80101a6 <_scanf_float+0x2fe>
 8010234:	eeb4 0b40 	vcmp.f64	d0, d0
 8010238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801023c:	681d      	ldr	r5, [r3, #0]
 801023e:	d704      	bvc.n	801024a <_scanf_float+0x3a2>
 8010240:	f000 f80a 	bl	8010258 <nanf>
 8010244:	ed85 0a00 	vstr	s0, [r5]
 8010248:	e7b0      	b.n	80101ac <_scanf_float+0x304>
 801024a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801024e:	e7f9      	b.n	8010244 <_scanf_float+0x39c>
 8010250:	2600      	movs	r6, #0
 8010252:	e670      	b.n	800ff36 <_scanf_float+0x8e>
 8010254:	08013598 	.word	0x08013598

08010258 <nanf>:
 8010258:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8010260 <nanf+0x8>
 801025c:	4770      	bx	lr
 801025e:	bf00      	nop
 8010260:	7fc00000 	.word	0x7fc00000

08010264 <siprintf>:
 8010264:	b40e      	push	{r1, r2, r3}
 8010266:	b500      	push	{lr}
 8010268:	b09c      	sub	sp, #112	; 0x70
 801026a:	ab1d      	add	r3, sp, #116	; 0x74
 801026c:	9002      	str	r0, [sp, #8]
 801026e:	9006      	str	r0, [sp, #24]
 8010270:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010274:	4809      	ldr	r0, [pc, #36]	; (801029c <siprintf+0x38>)
 8010276:	9107      	str	r1, [sp, #28]
 8010278:	9104      	str	r1, [sp, #16]
 801027a:	4909      	ldr	r1, [pc, #36]	; (80102a0 <siprintf+0x3c>)
 801027c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010280:	9105      	str	r1, [sp, #20]
 8010282:	6800      	ldr	r0, [r0, #0]
 8010284:	9301      	str	r3, [sp, #4]
 8010286:	a902      	add	r1, sp, #8
 8010288:	f002 fcfa 	bl	8012c80 <_svfiprintf_r>
 801028c:	9b02      	ldr	r3, [sp, #8]
 801028e:	2200      	movs	r2, #0
 8010290:	701a      	strb	r2, [r3, #0]
 8010292:	b01c      	add	sp, #112	; 0x70
 8010294:	f85d eb04 	ldr.w	lr, [sp], #4
 8010298:	b003      	add	sp, #12
 801029a:	4770      	bx	lr
 801029c:	20000044 	.word	0x20000044
 80102a0:	ffff0208 	.word	0xffff0208

080102a4 <strncpy>:
 80102a4:	b570      	push	{r4, r5, r6, lr}
 80102a6:	3901      	subs	r1, #1
 80102a8:	4604      	mov	r4, r0
 80102aa:	b902      	cbnz	r2, 80102ae <strncpy+0xa>
 80102ac:	bd70      	pop	{r4, r5, r6, pc}
 80102ae:	4623      	mov	r3, r4
 80102b0:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 80102b4:	f803 5b01 	strb.w	r5, [r3], #1
 80102b8:	1e56      	subs	r6, r2, #1
 80102ba:	b92d      	cbnz	r5, 80102c8 <strncpy+0x24>
 80102bc:	4414      	add	r4, r2
 80102be:	42a3      	cmp	r3, r4
 80102c0:	d0f4      	beq.n	80102ac <strncpy+0x8>
 80102c2:	f803 5b01 	strb.w	r5, [r3], #1
 80102c6:	e7fa      	b.n	80102be <strncpy+0x1a>
 80102c8:	461c      	mov	r4, r3
 80102ca:	4632      	mov	r2, r6
 80102cc:	e7ed      	b.n	80102aa <strncpy+0x6>

080102ce <strstr>:
 80102ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80102d0:	7803      	ldrb	r3, [r0, #0]
 80102d2:	b17b      	cbz	r3, 80102f4 <strstr+0x26>
 80102d4:	4604      	mov	r4, r0
 80102d6:	7823      	ldrb	r3, [r4, #0]
 80102d8:	4620      	mov	r0, r4
 80102da:	1c66      	adds	r6, r4, #1
 80102dc:	b17b      	cbz	r3, 80102fe <strstr+0x30>
 80102de:	1e4a      	subs	r2, r1, #1
 80102e0:	1e63      	subs	r3, r4, #1
 80102e2:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 80102e6:	b14d      	cbz	r5, 80102fc <strstr+0x2e>
 80102e8:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80102ec:	42af      	cmp	r7, r5
 80102ee:	4634      	mov	r4, r6
 80102f0:	d0f7      	beq.n	80102e2 <strstr+0x14>
 80102f2:	e7f0      	b.n	80102d6 <strstr+0x8>
 80102f4:	780b      	ldrb	r3, [r1, #0]
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	bf18      	it	ne
 80102fa:	2000      	movne	r0, #0
 80102fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80102fe:	4618      	mov	r0, r3
 8010300:	e7fc      	b.n	80102fc <strstr+0x2e>

08010302 <sulp>:
 8010302:	b570      	push	{r4, r5, r6, lr}
 8010304:	4604      	mov	r4, r0
 8010306:	460d      	mov	r5, r1
 8010308:	4616      	mov	r6, r2
 801030a:	ec45 4b10 	vmov	d0, r4, r5
 801030e:	f002 fa73 	bl	80127f8 <__ulp>
 8010312:	b17e      	cbz	r6, 8010334 <sulp+0x32>
 8010314:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010318:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801031c:	2b00      	cmp	r3, #0
 801031e:	dd09      	ble.n	8010334 <sulp+0x32>
 8010320:	051b      	lsls	r3, r3, #20
 8010322:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8010326:	2000      	movs	r0, #0
 8010328:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 801032c:	ec41 0b17 	vmov	d7, r0, r1
 8010330:	ee20 0b07 	vmul.f64	d0, d0, d7
 8010334:	bd70      	pop	{r4, r5, r6, pc}
	...

08010338 <_strtod_l>:
 8010338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801033c:	ed2d 8b0c 	vpush	{d8-d13}
 8010340:	4698      	mov	r8, r3
 8010342:	b09d      	sub	sp, #116	; 0x74
 8010344:	2300      	movs	r3, #0
 8010346:	4604      	mov	r4, r0
 8010348:	4640      	mov	r0, r8
 801034a:	460e      	mov	r6, r1
 801034c:	9214      	str	r2, [sp, #80]	; 0x50
 801034e:	9318      	str	r3, [sp, #96]	; 0x60
 8010350:	f001 ff5b 	bl	801220a <__localeconv_l>
 8010354:	4681      	mov	r9, r0
 8010356:	6800      	ldr	r0, [r0, #0]
 8010358:	f7ef ff7c 	bl	8000254 <strlen>
 801035c:	f04f 0a00 	mov.w	sl, #0
 8010360:	4607      	mov	r7, r0
 8010362:	f04f 0b00 	mov.w	fp, #0
 8010366:	9617      	str	r6, [sp, #92]	; 0x5c
 8010368:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801036a:	781a      	ldrb	r2, [r3, #0]
 801036c:	2a0d      	cmp	r2, #13
 801036e:	d834      	bhi.n	80103da <_strtod_l+0xa2>
 8010370:	2a09      	cmp	r2, #9
 8010372:	d238      	bcs.n	80103e6 <_strtod_l+0xae>
 8010374:	2a00      	cmp	r2, #0
 8010376:	d040      	beq.n	80103fa <_strtod_l+0xc2>
 8010378:	2300      	movs	r3, #0
 801037a:	930d      	str	r3, [sp, #52]	; 0x34
 801037c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 801037e:	782b      	ldrb	r3, [r5, #0]
 8010380:	2b30      	cmp	r3, #48	; 0x30
 8010382:	f040 80b3 	bne.w	80104ec <_strtod_l+0x1b4>
 8010386:	786b      	ldrb	r3, [r5, #1]
 8010388:	2b58      	cmp	r3, #88	; 0x58
 801038a:	d001      	beq.n	8010390 <_strtod_l+0x58>
 801038c:	2b78      	cmp	r3, #120	; 0x78
 801038e:	d169      	bne.n	8010464 <_strtod_l+0x12c>
 8010390:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010392:	9301      	str	r3, [sp, #4]
 8010394:	ab18      	add	r3, sp, #96	; 0x60
 8010396:	9300      	str	r3, [sp, #0]
 8010398:	f8cd 8008 	str.w	r8, [sp, #8]
 801039c:	ab19      	add	r3, sp, #100	; 0x64
 801039e:	4a8f      	ldr	r2, [pc, #572]	; (80105dc <_strtod_l+0x2a4>)
 80103a0:	a917      	add	r1, sp, #92	; 0x5c
 80103a2:	4620      	mov	r0, r4
 80103a4:	f001 fc57 	bl	8011c56 <__gethex>
 80103a8:	f010 0607 	ands.w	r6, r0, #7
 80103ac:	4607      	mov	r7, r0
 80103ae:	d005      	beq.n	80103bc <_strtod_l+0x84>
 80103b0:	2e06      	cmp	r6, #6
 80103b2:	d12c      	bne.n	801040e <_strtod_l+0xd6>
 80103b4:	3501      	adds	r5, #1
 80103b6:	2300      	movs	r3, #0
 80103b8:	9517      	str	r5, [sp, #92]	; 0x5c
 80103ba:	930d      	str	r3, [sp, #52]	; 0x34
 80103bc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80103be:	2b00      	cmp	r3, #0
 80103c0:	f040 855e 	bne.w	8010e80 <_strtod_l+0xb48>
 80103c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80103c6:	b1eb      	cbz	r3, 8010404 <_strtod_l+0xcc>
 80103c8:	ec4b ab17 	vmov	d7, sl, fp
 80103cc:	eeb1 0b47 	vneg.f64	d0, d7
 80103d0:	b01d      	add	sp, #116	; 0x74
 80103d2:	ecbd 8b0c 	vpop	{d8-d13}
 80103d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103da:	2a2b      	cmp	r2, #43	; 0x2b
 80103dc:	d015      	beq.n	801040a <_strtod_l+0xd2>
 80103de:	2a2d      	cmp	r2, #45	; 0x2d
 80103e0:	d004      	beq.n	80103ec <_strtod_l+0xb4>
 80103e2:	2a20      	cmp	r2, #32
 80103e4:	d1c8      	bne.n	8010378 <_strtod_l+0x40>
 80103e6:	3301      	adds	r3, #1
 80103e8:	9317      	str	r3, [sp, #92]	; 0x5c
 80103ea:	e7bd      	b.n	8010368 <_strtod_l+0x30>
 80103ec:	2201      	movs	r2, #1
 80103ee:	920d      	str	r2, [sp, #52]	; 0x34
 80103f0:	1c5a      	adds	r2, r3, #1
 80103f2:	9217      	str	r2, [sp, #92]	; 0x5c
 80103f4:	785b      	ldrb	r3, [r3, #1]
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d1c0      	bne.n	801037c <_strtod_l+0x44>
 80103fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80103fc:	9617      	str	r6, [sp, #92]	; 0x5c
 80103fe:	2b00      	cmp	r3, #0
 8010400:	f040 853c 	bne.w	8010e7c <_strtod_l+0xb44>
 8010404:	ec4b ab10 	vmov	d0, sl, fp
 8010408:	e7e2      	b.n	80103d0 <_strtod_l+0x98>
 801040a:	2200      	movs	r2, #0
 801040c:	e7ef      	b.n	80103ee <_strtod_l+0xb6>
 801040e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010410:	b13a      	cbz	r2, 8010422 <_strtod_l+0xea>
 8010412:	2135      	movs	r1, #53	; 0x35
 8010414:	a81a      	add	r0, sp, #104	; 0x68
 8010416:	f002 fae8 	bl	80129ea <__copybits>
 801041a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801041c:	4620      	mov	r0, r4
 801041e:	f001 ff53 	bl	80122c8 <_Bfree>
 8010422:	3e01      	subs	r6, #1
 8010424:	2e04      	cmp	r6, #4
 8010426:	d806      	bhi.n	8010436 <_strtod_l+0xfe>
 8010428:	e8df f006 	tbb	[pc, r6]
 801042c:	1714030a 	.word	0x1714030a
 8010430:	0a          	.byte	0x0a
 8010431:	00          	.byte	0x00
 8010432:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8010436:	073b      	lsls	r3, r7, #28
 8010438:	d5c0      	bpl.n	80103bc <_strtod_l+0x84>
 801043a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801043e:	e7bd      	b.n	80103bc <_strtod_l+0x84>
 8010440:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8010444:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8010446:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801044a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801044e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8010452:	e7f0      	b.n	8010436 <_strtod_l+0xfe>
 8010454:	f8df b188 	ldr.w	fp, [pc, #392]	; 80105e0 <_strtod_l+0x2a8>
 8010458:	e7ed      	b.n	8010436 <_strtod_l+0xfe>
 801045a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801045e:	f04f 3aff 	mov.w	sl, #4294967295
 8010462:	e7e8      	b.n	8010436 <_strtod_l+0xfe>
 8010464:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010466:	1c5a      	adds	r2, r3, #1
 8010468:	9217      	str	r2, [sp, #92]	; 0x5c
 801046a:	785b      	ldrb	r3, [r3, #1]
 801046c:	2b30      	cmp	r3, #48	; 0x30
 801046e:	d0f9      	beq.n	8010464 <_strtod_l+0x12c>
 8010470:	2b00      	cmp	r3, #0
 8010472:	d0a3      	beq.n	80103bc <_strtod_l+0x84>
 8010474:	2301      	movs	r3, #1
 8010476:	930a      	str	r3, [sp, #40]	; 0x28
 8010478:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801047a:	930c      	str	r3, [sp, #48]	; 0x30
 801047c:	2300      	movs	r3, #0
 801047e:	9306      	str	r3, [sp, #24]
 8010480:	9308      	str	r3, [sp, #32]
 8010482:	461d      	mov	r5, r3
 8010484:	220a      	movs	r2, #10
 8010486:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8010488:	f890 8000 	ldrb.w	r8, [r0]
 801048c:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
 8010490:	b2d9      	uxtb	r1, r3
 8010492:	2909      	cmp	r1, #9
 8010494:	d92c      	bls.n	80104f0 <_strtod_l+0x1b8>
 8010496:	463a      	mov	r2, r7
 8010498:	f8d9 1000 	ldr.w	r1, [r9]
 801049c:	f002 fcf8 	bl	8012e90 <strncmp>
 80104a0:	2800      	cmp	r0, #0
 80104a2:	d035      	beq.n	8010510 <_strtod_l+0x1d8>
 80104a4:	2000      	movs	r0, #0
 80104a6:	4642      	mov	r2, r8
 80104a8:	462b      	mov	r3, r5
 80104aa:	4601      	mov	r1, r0
 80104ac:	9004      	str	r0, [sp, #16]
 80104ae:	2a65      	cmp	r2, #101	; 0x65
 80104b0:	d001      	beq.n	80104b6 <_strtod_l+0x17e>
 80104b2:	2a45      	cmp	r2, #69	; 0x45
 80104b4:	d117      	bne.n	80104e6 <_strtod_l+0x1ae>
 80104b6:	b923      	cbnz	r3, 80104c2 <_strtod_l+0x18a>
 80104b8:	b910      	cbnz	r0, 80104c0 <_strtod_l+0x188>
 80104ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d09c      	beq.n	80103fa <_strtod_l+0xc2>
 80104c0:	2300      	movs	r3, #0
 80104c2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80104c4:	1c72      	adds	r2, r6, #1
 80104c6:	9217      	str	r2, [sp, #92]	; 0x5c
 80104c8:	7872      	ldrb	r2, [r6, #1]
 80104ca:	2a2b      	cmp	r2, #43	; 0x2b
 80104cc:	f000 8082 	beq.w	80105d4 <_strtod_l+0x29c>
 80104d0:	2a2d      	cmp	r2, #45	; 0x2d
 80104d2:	d079      	beq.n	80105c8 <_strtod_l+0x290>
 80104d4:	f04f 0e00 	mov.w	lr, #0
 80104d8:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80104dc:	f1bc 0f09 	cmp.w	ip, #9
 80104e0:	f240 8086 	bls.w	80105f0 <_strtod_l+0x2b8>
 80104e4:	9617      	str	r6, [sp, #92]	; 0x5c
 80104e6:	f04f 0800 	mov.w	r8, #0
 80104ea:	e0a8      	b.n	801063e <_strtod_l+0x306>
 80104ec:	2300      	movs	r3, #0
 80104ee:	e7c2      	b.n	8010476 <_strtod_l+0x13e>
 80104f0:	2d08      	cmp	r5, #8
 80104f2:	bfd5      	itete	le
 80104f4:	9908      	ldrle	r1, [sp, #32]
 80104f6:	9906      	ldrgt	r1, [sp, #24]
 80104f8:	fb02 3301 	mlale	r3, r2, r1, r3
 80104fc:	fb02 3301 	mlagt	r3, r2, r1, r3
 8010500:	f100 0001 	add.w	r0, r0, #1
 8010504:	bfd4      	ite	le
 8010506:	9308      	strle	r3, [sp, #32]
 8010508:	9306      	strgt	r3, [sp, #24]
 801050a:	3501      	adds	r5, #1
 801050c:	9017      	str	r0, [sp, #92]	; 0x5c
 801050e:	e7ba      	b.n	8010486 <_strtod_l+0x14e>
 8010510:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010512:	19da      	adds	r2, r3, r7
 8010514:	9217      	str	r2, [sp, #92]	; 0x5c
 8010516:	5dda      	ldrb	r2, [r3, r7]
 8010518:	2d00      	cmp	r5, #0
 801051a:	d038      	beq.n	801058e <_strtod_l+0x256>
 801051c:	4601      	mov	r1, r0
 801051e:	462b      	mov	r3, r5
 8010520:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8010524:	2f09      	cmp	r7, #9
 8010526:	d913      	bls.n	8010550 <_strtod_l+0x218>
 8010528:	2701      	movs	r7, #1
 801052a:	9704      	str	r7, [sp, #16]
 801052c:	e7bf      	b.n	80104ae <_strtod_l+0x176>
 801052e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010530:	1c5a      	adds	r2, r3, #1
 8010532:	9217      	str	r2, [sp, #92]	; 0x5c
 8010534:	785a      	ldrb	r2, [r3, #1]
 8010536:	3001      	adds	r0, #1
 8010538:	2a30      	cmp	r2, #48	; 0x30
 801053a:	d0f8      	beq.n	801052e <_strtod_l+0x1f6>
 801053c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8010540:	2b08      	cmp	r3, #8
 8010542:	f200 84a2 	bhi.w	8010e8a <_strtod_l+0xb52>
 8010546:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010548:	930c      	str	r3, [sp, #48]	; 0x30
 801054a:	4601      	mov	r1, r0
 801054c:	2000      	movs	r0, #0
 801054e:	4603      	mov	r3, r0
 8010550:	f1b2 0830 	subs.w	r8, r2, #48	; 0x30
 8010554:	f100 0701 	add.w	r7, r0, #1
 8010558:	d013      	beq.n	8010582 <_strtod_l+0x24a>
 801055a:	4439      	add	r1, r7
 801055c:	eb00 0e03 	add.w	lr, r0, r3
 8010560:	461f      	mov	r7, r3
 8010562:	f04f 0c0a 	mov.w	ip, #10
 8010566:	45be      	cmp	lr, r7
 8010568:	d113      	bne.n	8010592 <_strtod_l+0x25a>
 801056a:	181f      	adds	r7, r3, r0
 801056c:	2f08      	cmp	r7, #8
 801056e:	f103 0301 	add.w	r3, r3, #1
 8010572:	4403      	add	r3, r0
 8010574:	dc1d      	bgt.n	80105b2 <_strtod_l+0x27a>
 8010576:	9a08      	ldr	r2, [sp, #32]
 8010578:	200a      	movs	r0, #10
 801057a:	fb00 8202 	mla	r2, r0, r2, r8
 801057e:	9208      	str	r2, [sp, #32]
 8010580:	2700      	movs	r7, #0
 8010582:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010584:	1c50      	adds	r0, r2, #1
 8010586:	9017      	str	r0, [sp, #92]	; 0x5c
 8010588:	7852      	ldrb	r2, [r2, #1]
 801058a:	4638      	mov	r0, r7
 801058c:	e7c8      	b.n	8010520 <_strtod_l+0x1e8>
 801058e:	4628      	mov	r0, r5
 8010590:	e7d2      	b.n	8010538 <_strtod_l+0x200>
 8010592:	2f08      	cmp	r7, #8
 8010594:	f107 0701 	add.w	r7, r7, #1
 8010598:	dc04      	bgt.n	80105a4 <_strtod_l+0x26c>
 801059a:	9a08      	ldr	r2, [sp, #32]
 801059c:	fb0c f202 	mul.w	r2, ip, r2
 80105a0:	9208      	str	r2, [sp, #32]
 80105a2:	e7e0      	b.n	8010566 <_strtod_l+0x22e>
 80105a4:	2f10      	cmp	r7, #16
 80105a6:	bfde      	ittt	le
 80105a8:	9a06      	ldrle	r2, [sp, #24]
 80105aa:	fb0c f202 	mulle.w	r2, ip, r2
 80105ae:	9206      	strle	r2, [sp, #24]
 80105b0:	e7d9      	b.n	8010566 <_strtod_l+0x22e>
 80105b2:	2b10      	cmp	r3, #16
 80105b4:	bfdf      	itttt	le
 80105b6:	9a06      	ldrle	r2, [sp, #24]
 80105b8:	200a      	movle	r0, #10
 80105ba:	fb00 8202 	mlale	r2, r0, r2, r8
 80105be:	9206      	strle	r2, [sp, #24]
 80105c0:	e7de      	b.n	8010580 <_strtod_l+0x248>
 80105c2:	2301      	movs	r3, #1
 80105c4:	9304      	str	r3, [sp, #16]
 80105c6:	e777      	b.n	80104b8 <_strtod_l+0x180>
 80105c8:	f04f 0e01 	mov.w	lr, #1
 80105cc:	1cb2      	adds	r2, r6, #2
 80105ce:	9217      	str	r2, [sp, #92]	; 0x5c
 80105d0:	78b2      	ldrb	r2, [r6, #2]
 80105d2:	e781      	b.n	80104d8 <_strtod_l+0x1a0>
 80105d4:	f04f 0e00 	mov.w	lr, #0
 80105d8:	e7f8      	b.n	80105cc <_strtod_l+0x294>
 80105da:	bf00      	nop
 80105dc:	080135a0 	.word	0x080135a0
 80105e0:	7ff00000 	.word	0x7ff00000
 80105e4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80105e6:	f102 0c01 	add.w	ip, r2, #1
 80105ea:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 80105ee:	7852      	ldrb	r2, [r2, #1]
 80105f0:	2a30      	cmp	r2, #48	; 0x30
 80105f2:	d0f7      	beq.n	80105e4 <_strtod_l+0x2ac>
 80105f4:	f1a2 0c31 	sub.w	ip, r2, #49	; 0x31
 80105f8:	f1bc 0f08 	cmp.w	ip, #8
 80105fc:	f63f af73 	bhi.w	80104e6 <_strtod_l+0x1ae>
 8010600:	f1a2 0830 	sub.w	r8, r2, #48	; 0x30
 8010604:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010606:	920e      	str	r2, [sp, #56]	; 0x38
 8010608:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801060a:	f102 0c01 	add.w	ip, r2, #1
 801060e:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 8010612:	7852      	ldrb	r2, [r2, #1]
 8010614:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 8010618:	f1b9 0f09 	cmp.w	r9, #9
 801061c:	d939      	bls.n	8010692 <_strtod_l+0x35a>
 801061e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8010620:	ebac 0c07 	sub.w	ip, ip, r7
 8010624:	f1bc 0f08 	cmp.w	ip, #8
 8010628:	f644 6c1f 	movw	ip, #19999	; 0x4e1f
 801062c:	dc37      	bgt.n	801069e <_strtod_l+0x366>
 801062e:	45e0      	cmp	r8, ip
 8010630:	bfa8      	it	ge
 8010632:	46e0      	movge	r8, ip
 8010634:	f1be 0f00 	cmp.w	lr, #0
 8010638:	d001      	beq.n	801063e <_strtod_l+0x306>
 801063a:	f1c8 0800 	rsb	r8, r8, #0
 801063e:	2b00      	cmp	r3, #0
 8010640:	d151      	bne.n	80106e6 <_strtod_l+0x3ae>
 8010642:	2800      	cmp	r0, #0
 8010644:	f47f aeba 	bne.w	80103bc <_strtod_l+0x84>
 8010648:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801064a:	2b00      	cmp	r3, #0
 801064c:	f47f aeb6 	bne.w	80103bc <_strtod_l+0x84>
 8010650:	9b04      	ldr	r3, [sp, #16]
 8010652:	2b00      	cmp	r3, #0
 8010654:	f47f aed1 	bne.w	80103fa <_strtod_l+0xc2>
 8010658:	2a4e      	cmp	r2, #78	; 0x4e
 801065a:	d027      	beq.n	80106ac <_strtod_l+0x374>
 801065c:	dc21      	bgt.n	80106a2 <_strtod_l+0x36a>
 801065e:	2a49      	cmp	r2, #73	; 0x49
 8010660:	f47f aecb 	bne.w	80103fa <_strtod_l+0xc2>
 8010664:	499a      	ldr	r1, [pc, #616]	; (80108d0 <_strtod_l+0x598>)
 8010666:	a817      	add	r0, sp, #92	; 0x5c
 8010668:	f001 fd28 	bl	80120bc <__match>
 801066c:	2800      	cmp	r0, #0
 801066e:	f43f aec4 	beq.w	80103fa <_strtod_l+0xc2>
 8010672:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010674:	4997      	ldr	r1, [pc, #604]	; (80108d4 <_strtod_l+0x59c>)
 8010676:	3b01      	subs	r3, #1
 8010678:	a817      	add	r0, sp, #92	; 0x5c
 801067a:	9317      	str	r3, [sp, #92]	; 0x5c
 801067c:	f001 fd1e 	bl	80120bc <__match>
 8010680:	b910      	cbnz	r0, 8010688 <_strtod_l+0x350>
 8010682:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010684:	3301      	adds	r3, #1
 8010686:	9317      	str	r3, [sp, #92]	; 0x5c
 8010688:	f8df b260 	ldr.w	fp, [pc, #608]	; 80108ec <_strtod_l+0x5b4>
 801068c:	f04f 0a00 	mov.w	sl, #0
 8010690:	e694      	b.n	80103bc <_strtod_l+0x84>
 8010692:	270a      	movs	r7, #10
 8010694:	fb07 2808 	mla	r8, r7, r8, r2
 8010698:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 801069c:	e7b4      	b.n	8010608 <_strtod_l+0x2d0>
 801069e:	46e0      	mov	r8, ip
 80106a0:	e7c8      	b.n	8010634 <_strtod_l+0x2fc>
 80106a2:	2a69      	cmp	r2, #105	; 0x69
 80106a4:	d0de      	beq.n	8010664 <_strtod_l+0x32c>
 80106a6:	2a6e      	cmp	r2, #110	; 0x6e
 80106a8:	f47f aea7 	bne.w	80103fa <_strtod_l+0xc2>
 80106ac:	498a      	ldr	r1, [pc, #552]	; (80108d8 <_strtod_l+0x5a0>)
 80106ae:	a817      	add	r0, sp, #92	; 0x5c
 80106b0:	f001 fd04 	bl	80120bc <__match>
 80106b4:	2800      	cmp	r0, #0
 80106b6:	f43f aea0 	beq.w	80103fa <_strtod_l+0xc2>
 80106ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80106bc:	781b      	ldrb	r3, [r3, #0]
 80106be:	2b28      	cmp	r3, #40	; 0x28
 80106c0:	d10e      	bne.n	80106e0 <_strtod_l+0x3a8>
 80106c2:	aa1a      	add	r2, sp, #104	; 0x68
 80106c4:	4985      	ldr	r1, [pc, #532]	; (80108dc <_strtod_l+0x5a4>)
 80106c6:	a817      	add	r0, sp, #92	; 0x5c
 80106c8:	f001 fd0c 	bl	80120e4 <__hexnan>
 80106cc:	2805      	cmp	r0, #5
 80106ce:	d107      	bne.n	80106e0 <_strtod_l+0x3a8>
 80106d0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80106d2:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80106d6:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80106da:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80106de:	e66d      	b.n	80103bc <_strtod_l+0x84>
 80106e0:	f8df b20c 	ldr.w	fp, [pc, #524]	; 80108f0 <_strtod_l+0x5b8>
 80106e4:	e7d2      	b.n	801068c <_strtod_l+0x354>
 80106e6:	eddd 7a08 	vldr	s15, [sp, #32]
 80106ea:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80106ee:	eba8 0201 	sub.w	r2, r8, r1
 80106f2:	2d00      	cmp	r5, #0
 80106f4:	bf08      	it	eq
 80106f6:	461d      	moveq	r5, r3
 80106f8:	2b10      	cmp	r3, #16
 80106fa:	9204      	str	r2, [sp, #16]
 80106fc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8010700:	461a      	mov	r2, r3
 8010702:	bfa8      	it	ge
 8010704:	2210      	movge	r2, #16
 8010706:	2b09      	cmp	r3, #9
 8010708:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 801070c:	dc14      	bgt.n	8010738 <_strtod_l+0x400>
 801070e:	9904      	ldr	r1, [sp, #16]
 8010710:	2900      	cmp	r1, #0
 8010712:	f43f ae53 	beq.w	80103bc <_strtod_l+0x84>
 8010716:	9904      	ldr	r1, [sp, #16]
 8010718:	dd72      	ble.n	8010800 <_strtod_l+0x4c8>
 801071a:	2916      	cmp	r1, #22
 801071c:	dc5a      	bgt.n	80107d4 <_strtod_l+0x49c>
 801071e:	4970      	ldr	r1, [pc, #448]	; (80108e0 <_strtod_l+0x5a8>)
 8010720:	9b04      	ldr	r3, [sp, #16]
 8010722:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010726:	ed91 7b00 	vldr	d7, [r1]
 801072a:	ec4b ab16 	vmov	d6, sl, fp
 801072e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010732:	ec5b ab17 	vmov	sl, fp, d7
 8010736:	e641      	b.n	80103bc <_strtod_l+0x84>
 8010738:	4969      	ldr	r1, [pc, #420]	; (80108e0 <_strtod_l+0x5a8>)
 801073a:	eddd 7a06 	vldr	s15, [sp, #24]
 801073e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8010742:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 8010746:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 801074a:	2b0f      	cmp	r3, #15
 801074c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8010750:	eea5 7b06 	vfma.f64	d7, d5, d6
 8010754:	ec5b ab17 	vmov	sl, fp, d7
 8010758:	ddd9      	ble.n	801070e <_strtod_l+0x3d6>
 801075a:	9904      	ldr	r1, [sp, #16]
 801075c:	1a9a      	subs	r2, r3, r2
 801075e:	440a      	add	r2, r1
 8010760:	2a00      	cmp	r2, #0
 8010762:	f340 8096 	ble.w	8010892 <_strtod_l+0x55a>
 8010766:	f012 000f 	ands.w	r0, r2, #15
 801076a:	d00a      	beq.n	8010782 <_strtod_l+0x44a>
 801076c:	495c      	ldr	r1, [pc, #368]	; (80108e0 <_strtod_l+0x5a8>)
 801076e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8010772:	ed91 7b00 	vldr	d7, [r1]
 8010776:	ec4b ab16 	vmov	d6, sl, fp
 801077a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801077e:	ec5b ab17 	vmov	sl, fp, d7
 8010782:	f032 020f 	bics.w	r2, r2, #15
 8010786:	d072      	beq.n	801086e <_strtod_l+0x536>
 8010788:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 801078c:	dd45      	ble.n	801081a <_strtod_l+0x4e2>
 801078e:	2500      	movs	r5, #0
 8010790:	46a8      	mov	r8, r5
 8010792:	9506      	str	r5, [sp, #24]
 8010794:	46a9      	mov	r9, r5
 8010796:	2322      	movs	r3, #34	; 0x22
 8010798:	f8df b150 	ldr.w	fp, [pc, #336]	; 80108ec <_strtod_l+0x5b4>
 801079c:	6023      	str	r3, [r4, #0]
 801079e:	f04f 0a00 	mov.w	sl, #0
 80107a2:	9b06      	ldr	r3, [sp, #24]
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	f43f ae09 	beq.w	80103bc <_strtod_l+0x84>
 80107aa:	9918      	ldr	r1, [sp, #96]	; 0x60
 80107ac:	4620      	mov	r0, r4
 80107ae:	f001 fd8b 	bl	80122c8 <_Bfree>
 80107b2:	4649      	mov	r1, r9
 80107b4:	4620      	mov	r0, r4
 80107b6:	f001 fd87 	bl	80122c8 <_Bfree>
 80107ba:	4641      	mov	r1, r8
 80107bc:	4620      	mov	r0, r4
 80107be:	f001 fd83 	bl	80122c8 <_Bfree>
 80107c2:	9906      	ldr	r1, [sp, #24]
 80107c4:	4620      	mov	r0, r4
 80107c6:	f001 fd7f 	bl	80122c8 <_Bfree>
 80107ca:	4629      	mov	r1, r5
 80107cc:	4620      	mov	r0, r4
 80107ce:	f001 fd7b 	bl	80122c8 <_Bfree>
 80107d2:	e5f3      	b.n	80103bc <_strtod_l+0x84>
 80107d4:	9804      	ldr	r0, [sp, #16]
 80107d6:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 80107da:	4281      	cmp	r1, r0
 80107dc:	dbbd      	blt.n	801075a <_strtod_l+0x422>
 80107de:	4a40      	ldr	r2, [pc, #256]	; (80108e0 <_strtod_l+0x5a8>)
 80107e0:	f1c3 030f 	rsb	r3, r3, #15
 80107e4:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80107e8:	ed91 7b00 	vldr	d7, [r1]
 80107ec:	ec4b ab16 	vmov	d6, sl, fp
 80107f0:	1ac3      	subs	r3, r0, r3
 80107f2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80107f6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80107fa:	ed92 6b00 	vldr	d6, [r2]
 80107fe:	e796      	b.n	801072e <_strtod_l+0x3f6>
 8010800:	3116      	adds	r1, #22
 8010802:	dbaa      	blt.n	801075a <_strtod_l+0x422>
 8010804:	4936      	ldr	r1, [pc, #216]	; (80108e0 <_strtod_l+0x5a8>)
 8010806:	9b04      	ldr	r3, [sp, #16]
 8010808:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
 801080c:	ed91 7b00 	vldr	d7, [r1]
 8010810:	ec4b ab16 	vmov	d6, sl, fp
 8010814:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8010818:	e78b      	b.n	8010732 <_strtod_l+0x3fa>
 801081a:	e9cd ab06 	strd	sl, fp, [sp, #24]
 801081e:	2000      	movs	r0, #0
 8010820:	4e30      	ldr	r6, [pc, #192]	; (80108e4 <_strtod_l+0x5ac>)
 8010822:	1112      	asrs	r2, r2, #4
 8010824:	4601      	mov	r1, r0
 8010826:	2a01      	cmp	r2, #1
 8010828:	dc23      	bgt.n	8010872 <_strtod_l+0x53a>
 801082a:	b108      	cbz	r0, 8010830 <_strtod_l+0x4f8>
 801082c:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8010830:	4a2c      	ldr	r2, [pc, #176]	; (80108e4 <_strtod_l+0x5ac>)
 8010832:	482d      	ldr	r0, [pc, #180]	; (80108e8 <_strtod_l+0x5b0>)
 8010834:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8010838:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801083c:	ed91 7b00 	vldr	d7, [r1]
 8010840:	ec4b ab16 	vmov	d6, sl, fp
 8010844:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010848:	ed8d 7b06 	vstr	d7, [sp, #24]
 801084c:	9907      	ldr	r1, [sp, #28]
 801084e:	4a27      	ldr	r2, [pc, #156]	; (80108ec <_strtod_l+0x5b4>)
 8010850:	400a      	ands	r2, r1
 8010852:	4282      	cmp	r2, r0
 8010854:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8010858:	d899      	bhi.n	801078e <_strtod_l+0x456>
 801085a:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 801085e:	4282      	cmp	r2, r0
 8010860:	bf86      	itte	hi
 8010862:	f8df b090 	ldrhi.w	fp, [pc, #144]	; 80108f4 <_strtod_l+0x5bc>
 8010866:	f04f 3aff 	movhi.w	sl, #4294967295
 801086a:	f101 7b54 	addls.w	fp, r1, #55574528	; 0x3500000
 801086e:	2700      	movs	r7, #0
 8010870:	e070      	b.n	8010954 <_strtod_l+0x61c>
 8010872:	07d7      	lsls	r7, r2, #31
 8010874:	d50a      	bpl.n	801088c <_strtod_l+0x554>
 8010876:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
 801087a:	ed90 7b00 	vldr	d7, [r0]
 801087e:	ed9d 6b06 	vldr	d6, [sp, #24]
 8010882:	ee26 7b07 	vmul.f64	d7, d6, d7
 8010886:	ed8d 7b06 	vstr	d7, [sp, #24]
 801088a:	2001      	movs	r0, #1
 801088c:	3101      	adds	r1, #1
 801088e:	1052      	asrs	r2, r2, #1
 8010890:	e7c9      	b.n	8010826 <_strtod_l+0x4ee>
 8010892:	d0ec      	beq.n	801086e <_strtod_l+0x536>
 8010894:	4252      	negs	r2, r2
 8010896:	f012 000f 	ands.w	r0, r2, #15
 801089a:	d00a      	beq.n	80108b2 <_strtod_l+0x57a>
 801089c:	4910      	ldr	r1, [pc, #64]	; (80108e0 <_strtod_l+0x5a8>)
 801089e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80108a2:	ed91 7b00 	vldr	d7, [r1]
 80108a6:	ec4b ab16 	vmov	d6, sl, fp
 80108aa:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80108ae:	ec5b ab17 	vmov	sl, fp, d7
 80108b2:	1112      	asrs	r2, r2, #4
 80108b4:	d0db      	beq.n	801086e <_strtod_l+0x536>
 80108b6:	2a1f      	cmp	r2, #31
 80108b8:	dd1e      	ble.n	80108f8 <_strtod_l+0x5c0>
 80108ba:	2500      	movs	r5, #0
 80108bc:	46a8      	mov	r8, r5
 80108be:	9506      	str	r5, [sp, #24]
 80108c0:	46a9      	mov	r9, r5
 80108c2:	2322      	movs	r3, #34	; 0x22
 80108c4:	f04f 0a00 	mov.w	sl, #0
 80108c8:	f04f 0b00 	mov.w	fp, #0
 80108cc:	6023      	str	r3, [r4, #0]
 80108ce:	e768      	b.n	80107a2 <_strtod_l+0x46a>
 80108d0:	08013569 	.word	0x08013569
 80108d4:	080135f3 	.word	0x080135f3
 80108d8:	08013571 	.word	0x08013571
 80108dc:	080135b4 	.word	0x080135b4
 80108e0:	08013630 	.word	0x08013630
 80108e4:	08013608 	.word	0x08013608
 80108e8:	7ca00000 	.word	0x7ca00000
 80108ec:	7ff00000 	.word	0x7ff00000
 80108f0:	fff80000 	.word	0xfff80000
 80108f4:	7fefffff 	.word	0x7fefffff
 80108f8:	e9cd ab06 	strd	sl, fp, [sp, #24]
 80108fc:	f012 0710 	ands.w	r7, r2, #16
 8010900:	49ab      	ldr	r1, [pc, #684]	; (8010bb0 <_strtod_l+0x878>)
 8010902:	bf18      	it	ne
 8010904:	276a      	movne	r7, #106	; 0x6a
 8010906:	2000      	movs	r0, #0
 8010908:	2a00      	cmp	r2, #0
 801090a:	f300 8113 	bgt.w	8010b34 <_strtod_l+0x7fc>
 801090e:	b108      	cbz	r0, 8010914 <_strtod_l+0x5dc>
 8010910:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8010914:	b1bf      	cbz	r7, 8010946 <_strtod_l+0x60e>
 8010916:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801091a:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 801091e:	2a00      	cmp	r2, #0
 8010920:	4659      	mov	r1, fp
 8010922:	dd10      	ble.n	8010946 <_strtod_l+0x60e>
 8010924:	2a1f      	cmp	r2, #31
 8010926:	f340 8113 	ble.w	8010b50 <_strtod_l+0x818>
 801092a:	2a34      	cmp	r2, #52	; 0x34
 801092c:	bfde      	ittt	le
 801092e:	3a20      	suble	r2, #32
 8010930:	f04f 30ff 	movle.w	r0, #4294967295
 8010934:	fa00 f202 	lslle.w	r2, r0, r2
 8010938:	f04f 0a00 	mov.w	sl, #0
 801093c:	bfcc      	ite	gt
 801093e:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8010942:	ea02 0b01 	andle.w	fp, r2, r1
 8010946:	ec4b ab17 	vmov	d7, sl, fp
 801094a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801094e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010952:	d0b2      	beq.n	80108ba <_strtod_l+0x582>
 8010954:	9a08      	ldr	r2, [sp, #32]
 8010956:	9200      	str	r2, [sp, #0]
 8010958:	990c      	ldr	r1, [sp, #48]	; 0x30
 801095a:	462a      	mov	r2, r5
 801095c:	4620      	mov	r0, r4
 801095e:	f001 fd05 	bl	801236c <__s2b>
 8010962:	9006      	str	r0, [sp, #24]
 8010964:	2800      	cmp	r0, #0
 8010966:	f43f af12 	beq.w	801078e <_strtod_l+0x456>
 801096a:	9a04      	ldr	r2, [sp, #16]
 801096c:	9b04      	ldr	r3, [sp, #16]
 801096e:	2a00      	cmp	r2, #0
 8010970:	f1c3 0300 	rsb	r3, r3, #0
 8010974:	ed9f 9b88 	vldr	d9, [pc, #544]	; 8010b98 <_strtod_l+0x860>
 8010978:	bfa8      	it	ge
 801097a:	2300      	movge	r3, #0
 801097c:	ed9f ab88 	vldr	d10, [pc, #544]	; 8010ba0 <_strtod_l+0x868>
 8010980:	ed9f bb89 	vldr	d11, [pc, #548]	; 8010ba8 <_strtod_l+0x870>
 8010984:	930e      	str	r3, [sp, #56]	; 0x38
 8010986:	2500      	movs	r5, #0
 8010988:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801098c:	9310      	str	r3, [sp, #64]	; 0x40
 801098e:	46a8      	mov	r8, r5
 8010990:	9b06      	ldr	r3, [sp, #24]
 8010992:	4620      	mov	r0, r4
 8010994:	6859      	ldr	r1, [r3, #4]
 8010996:	f001 fc63 	bl	8012260 <_Balloc>
 801099a:	4681      	mov	r9, r0
 801099c:	2800      	cmp	r0, #0
 801099e:	f43f aefa 	beq.w	8010796 <_strtod_l+0x45e>
 80109a2:	9b06      	ldr	r3, [sp, #24]
 80109a4:	691a      	ldr	r2, [r3, #16]
 80109a6:	3202      	adds	r2, #2
 80109a8:	f103 010c 	add.w	r1, r3, #12
 80109ac:	0092      	lsls	r2, r2, #2
 80109ae:	300c      	adds	r0, #12
 80109b0:	f7fe fe2c 	bl	800f60c <memcpy>
 80109b4:	aa1a      	add	r2, sp, #104	; 0x68
 80109b6:	a919      	add	r1, sp, #100	; 0x64
 80109b8:	ec4b ab10 	vmov	d0, sl, fp
 80109bc:	4620      	mov	r0, r4
 80109be:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80109c2:	f001 ff8f 	bl	80128e4 <__d2b>
 80109c6:	9018      	str	r0, [sp, #96]	; 0x60
 80109c8:	2800      	cmp	r0, #0
 80109ca:	f43f aee4 	beq.w	8010796 <_strtod_l+0x45e>
 80109ce:	2101      	movs	r1, #1
 80109d0:	4620      	mov	r0, r4
 80109d2:	f001 fd57 	bl	8012484 <__i2b>
 80109d6:	4680      	mov	r8, r0
 80109d8:	2800      	cmp	r0, #0
 80109da:	f43f aedc 	beq.w	8010796 <_strtod_l+0x45e>
 80109de:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80109e0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80109e2:	2e00      	cmp	r6, #0
 80109e4:	bfb1      	iteee	lt
 80109e6:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
 80109e8:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80109ea:	9810      	ldrge	r0, [sp, #64]	; 0x40
 80109ec:	18f3      	addge	r3, r6, r3
 80109ee:	bfba      	itte	lt
 80109f0:	1b98      	sublt	r0, r3, r6
 80109f2:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80109f4:	9308      	strge	r3, [sp, #32]
 80109f6:	eba6 0607 	sub.w	r6, r6, r7
 80109fa:	bfb8      	it	lt
 80109fc:	9308      	strlt	r3, [sp, #32]
 80109fe:	4416      	add	r6, r2
 8010a00:	4b6c      	ldr	r3, [pc, #432]	; (8010bb4 <_strtod_l+0x87c>)
 8010a02:	3e01      	subs	r6, #1
 8010a04:	429e      	cmp	r6, r3
 8010a06:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8010a0a:	f280 80b4 	bge.w	8010b76 <_strtod_l+0x83e>
 8010a0e:	1b9b      	subs	r3, r3, r6
 8010a10:	2b1f      	cmp	r3, #31
 8010a12:	eba2 0203 	sub.w	r2, r2, r3
 8010a16:	f04f 0101 	mov.w	r1, #1
 8010a1a:	f300 80a0 	bgt.w	8010b5e <_strtod_l+0x826>
 8010a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8010a22:	9311      	str	r3, [sp, #68]	; 0x44
 8010a24:	2300      	movs	r3, #0
 8010a26:	930f      	str	r3, [sp, #60]	; 0x3c
 8010a28:	9b08      	ldr	r3, [sp, #32]
 8010a2a:	4413      	add	r3, r2
 8010a2c:	4402      	add	r2, r0
 8010a2e:	18be      	adds	r6, r7, r2
 8010a30:	9a08      	ldr	r2, [sp, #32]
 8010a32:	429a      	cmp	r2, r3
 8010a34:	bfa8      	it	ge
 8010a36:	461a      	movge	r2, r3
 8010a38:	42b2      	cmp	r2, r6
 8010a3a:	bfa8      	it	ge
 8010a3c:	4632      	movge	r2, r6
 8010a3e:	2a00      	cmp	r2, #0
 8010a40:	dd04      	ble.n	8010a4c <_strtod_l+0x714>
 8010a42:	9908      	ldr	r1, [sp, #32]
 8010a44:	1a9b      	subs	r3, r3, r2
 8010a46:	1ab6      	subs	r6, r6, r2
 8010a48:	1a8a      	subs	r2, r1, r2
 8010a4a:	9208      	str	r2, [sp, #32]
 8010a4c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010a4e:	b1c2      	cbz	r2, 8010a82 <_strtod_l+0x74a>
 8010a50:	4641      	mov	r1, r8
 8010a52:	4620      	mov	r0, r4
 8010a54:	9315      	str	r3, [sp, #84]	; 0x54
 8010a56:	f001 fdb5 	bl	80125c4 <__pow5mult>
 8010a5a:	4680      	mov	r8, r0
 8010a5c:	2800      	cmp	r0, #0
 8010a5e:	f43f ae9a 	beq.w	8010796 <_strtod_l+0x45e>
 8010a62:	4601      	mov	r1, r0
 8010a64:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010a66:	4620      	mov	r0, r4
 8010a68:	f001 fd15 	bl	8012496 <__multiply>
 8010a6c:	900c      	str	r0, [sp, #48]	; 0x30
 8010a6e:	2800      	cmp	r0, #0
 8010a70:	f43f ae91 	beq.w	8010796 <_strtod_l+0x45e>
 8010a74:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010a76:	4620      	mov	r0, r4
 8010a78:	f001 fc26 	bl	80122c8 <_Bfree>
 8010a7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010a7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010a80:	9218      	str	r2, [sp, #96]	; 0x60
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	dc7c      	bgt.n	8010b80 <_strtod_l+0x848>
 8010a86:	9b04      	ldr	r3, [sp, #16]
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	dd08      	ble.n	8010a9e <_strtod_l+0x766>
 8010a8c:	4649      	mov	r1, r9
 8010a8e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010a90:	4620      	mov	r0, r4
 8010a92:	f001 fd97 	bl	80125c4 <__pow5mult>
 8010a96:	4681      	mov	r9, r0
 8010a98:	2800      	cmp	r0, #0
 8010a9a:	f43f ae7c 	beq.w	8010796 <_strtod_l+0x45e>
 8010a9e:	2e00      	cmp	r6, #0
 8010aa0:	dd08      	ble.n	8010ab4 <_strtod_l+0x77c>
 8010aa2:	4649      	mov	r1, r9
 8010aa4:	4632      	mov	r2, r6
 8010aa6:	4620      	mov	r0, r4
 8010aa8:	f001 fdda 	bl	8012660 <__lshift>
 8010aac:	4681      	mov	r9, r0
 8010aae:	2800      	cmp	r0, #0
 8010ab0:	f43f ae71 	beq.w	8010796 <_strtod_l+0x45e>
 8010ab4:	9b08      	ldr	r3, [sp, #32]
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	dd08      	ble.n	8010acc <_strtod_l+0x794>
 8010aba:	4641      	mov	r1, r8
 8010abc:	461a      	mov	r2, r3
 8010abe:	4620      	mov	r0, r4
 8010ac0:	f001 fdce 	bl	8012660 <__lshift>
 8010ac4:	4680      	mov	r8, r0
 8010ac6:	2800      	cmp	r0, #0
 8010ac8:	f43f ae65 	beq.w	8010796 <_strtod_l+0x45e>
 8010acc:	464a      	mov	r2, r9
 8010ace:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010ad0:	4620      	mov	r0, r4
 8010ad2:	f001 fe33 	bl	801273c <__mdiff>
 8010ad6:	4605      	mov	r5, r0
 8010ad8:	2800      	cmp	r0, #0
 8010ada:	f43f ae5c 	beq.w	8010796 <_strtod_l+0x45e>
 8010ade:	68c3      	ldr	r3, [r0, #12]
 8010ae0:	930c      	str	r3, [sp, #48]	; 0x30
 8010ae2:	2300      	movs	r3, #0
 8010ae4:	60c3      	str	r3, [r0, #12]
 8010ae6:	4641      	mov	r1, r8
 8010ae8:	f001 fe0e 	bl	8012708 <__mcmp>
 8010aec:	2800      	cmp	r0, #0
 8010aee:	da63      	bge.n	8010bb8 <_strtod_l+0x880>
 8010af0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010af2:	b9e3      	cbnz	r3, 8010b2e <_strtod_l+0x7f6>
 8010af4:	f1ba 0f00 	cmp.w	sl, #0
 8010af8:	d119      	bne.n	8010b2e <_strtod_l+0x7f6>
 8010afa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010afe:	b9b3      	cbnz	r3, 8010b2e <_strtod_l+0x7f6>
 8010b00:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010b04:	0d1b      	lsrs	r3, r3, #20
 8010b06:	051b      	lsls	r3, r3, #20
 8010b08:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8010b0c:	d90f      	bls.n	8010b2e <_strtod_l+0x7f6>
 8010b0e:	696b      	ldr	r3, [r5, #20]
 8010b10:	b913      	cbnz	r3, 8010b18 <_strtod_l+0x7e0>
 8010b12:	692b      	ldr	r3, [r5, #16]
 8010b14:	2b01      	cmp	r3, #1
 8010b16:	dd0a      	ble.n	8010b2e <_strtod_l+0x7f6>
 8010b18:	4629      	mov	r1, r5
 8010b1a:	2201      	movs	r2, #1
 8010b1c:	4620      	mov	r0, r4
 8010b1e:	f001 fd9f 	bl	8012660 <__lshift>
 8010b22:	4641      	mov	r1, r8
 8010b24:	4605      	mov	r5, r0
 8010b26:	f001 fdef 	bl	8012708 <__mcmp>
 8010b2a:	2800      	cmp	r0, #0
 8010b2c:	dc75      	bgt.n	8010c1a <_strtod_l+0x8e2>
 8010b2e:	2f00      	cmp	r7, #0
 8010b30:	d17f      	bne.n	8010c32 <_strtod_l+0x8fa>
 8010b32:	e63a      	b.n	80107aa <_strtod_l+0x472>
 8010b34:	07d6      	lsls	r6, r2, #31
 8010b36:	d508      	bpl.n	8010b4a <_strtod_l+0x812>
 8010b38:	ed9d 6b06 	vldr	d6, [sp, #24]
 8010b3c:	ed91 7b00 	vldr	d7, [r1]
 8010b40:	ee26 7b07 	vmul.f64	d7, d6, d7
 8010b44:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010b48:	2001      	movs	r0, #1
 8010b4a:	1052      	asrs	r2, r2, #1
 8010b4c:	3108      	adds	r1, #8
 8010b4e:	e6db      	b.n	8010908 <_strtod_l+0x5d0>
 8010b50:	f04f 31ff 	mov.w	r1, #4294967295
 8010b54:	fa01 f202 	lsl.w	r2, r1, r2
 8010b58:	ea02 0a0a 	and.w	sl, r2, sl
 8010b5c:	e6f3      	b.n	8010946 <_strtod_l+0x60e>
 8010b5e:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8010b62:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8010b66:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8010b6a:	36e2      	adds	r6, #226	; 0xe2
 8010b6c:	fa01 f306 	lsl.w	r3, r1, r6
 8010b70:	930f      	str	r3, [sp, #60]	; 0x3c
 8010b72:	9111      	str	r1, [sp, #68]	; 0x44
 8010b74:	e758      	b.n	8010a28 <_strtod_l+0x6f0>
 8010b76:	2300      	movs	r3, #0
 8010b78:	930f      	str	r3, [sp, #60]	; 0x3c
 8010b7a:	2301      	movs	r3, #1
 8010b7c:	9311      	str	r3, [sp, #68]	; 0x44
 8010b7e:	e753      	b.n	8010a28 <_strtod_l+0x6f0>
 8010b80:	461a      	mov	r2, r3
 8010b82:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010b84:	4620      	mov	r0, r4
 8010b86:	f001 fd6b 	bl	8012660 <__lshift>
 8010b8a:	9018      	str	r0, [sp, #96]	; 0x60
 8010b8c:	2800      	cmp	r0, #0
 8010b8e:	f47f af7a 	bne.w	8010a86 <_strtod_l+0x74e>
 8010b92:	e600      	b.n	8010796 <_strtod_l+0x45e>
 8010b94:	f3af 8000 	nop.w
 8010b98:	94a03595 	.word	0x94a03595
 8010b9c:	3fdfffff 	.word	0x3fdfffff
 8010ba0:	35afe535 	.word	0x35afe535
 8010ba4:	3fe00000 	.word	0x3fe00000
 8010ba8:	94a03595 	.word	0x94a03595
 8010bac:	3fcfffff 	.word	0x3fcfffff
 8010bb0:	080135c8 	.word	0x080135c8
 8010bb4:	fffffc02 	.word	0xfffffc02
 8010bb8:	f8cd b020 	str.w	fp, [sp, #32]
 8010bbc:	f040 8085 	bne.w	8010cca <_strtod_l+0x992>
 8010bc0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010bc2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010bc6:	b322      	cbz	r2, 8010c12 <_strtod_l+0x8da>
 8010bc8:	4ab7      	ldr	r2, [pc, #732]	; (8010ea8 <_strtod_l+0xb70>)
 8010bca:	4293      	cmp	r3, r2
 8010bcc:	d154      	bne.n	8010c78 <_strtod_l+0x940>
 8010bce:	4651      	mov	r1, sl
 8010bd0:	b1e7      	cbz	r7, 8010c0c <_strtod_l+0x8d4>
 8010bd2:	4bb6      	ldr	r3, [pc, #728]	; (8010eac <_strtod_l+0xb74>)
 8010bd4:	465a      	mov	r2, fp
 8010bd6:	4013      	ands	r3, r2
 8010bd8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8010be0:	d803      	bhi.n	8010bea <_strtod_l+0x8b2>
 8010be2:	0d1b      	lsrs	r3, r3, #20
 8010be4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010be8:	409a      	lsls	r2, r3
 8010bea:	4291      	cmp	r1, r2
 8010bec:	d144      	bne.n	8010c78 <_strtod_l+0x940>
 8010bee:	4bb0      	ldr	r3, [pc, #704]	; (8010eb0 <_strtod_l+0xb78>)
 8010bf0:	9a08      	ldr	r2, [sp, #32]
 8010bf2:	429a      	cmp	r2, r3
 8010bf4:	d102      	bne.n	8010bfc <_strtod_l+0x8c4>
 8010bf6:	3101      	adds	r1, #1
 8010bf8:	f43f adcd 	beq.w	8010796 <_strtod_l+0x45e>
 8010bfc:	4bab      	ldr	r3, [pc, #684]	; (8010eac <_strtod_l+0xb74>)
 8010bfe:	9a08      	ldr	r2, [sp, #32]
 8010c00:	401a      	ands	r2, r3
 8010c02:	f502 1b80 	add.w	fp, r2, #1048576	; 0x100000
 8010c06:	f04f 0a00 	mov.w	sl, #0
 8010c0a:	e790      	b.n	8010b2e <_strtod_l+0x7f6>
 8010c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8010c10:	e7eb      	b.n	8010bea <_strtod_l+0x8b2>
 8010c12:	bb8b      	cbnz	r3, 8010c78 <_strtod_l+0x940>
 8010c14:	f1ba 0f00 	cmp.w	sl, #0
 8010c18:	d12e      	bne.n	8010c78 <_strtod_l+0x940>
 8010c1a:	465b      	mov	r3, fp
 8010c1c:	4aa3      	ldr	r2, [pc, #652]	; (8010eac <_strtod_l+0xb74>)
 8010c1e:	b30f      	cbz	r7, 8010c64 <_strtod_l+0x92c>
 8010c20:	ea02 010b 	and.w	r1, r2, fp
 8010c24:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8010c28:	dc1c      	bgt.n	8010c64 <_strtod_l+0x92c>
 8010c2a:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8010c2e:	f77f ae48 	ble.w	80108c2 <_strtod_l+0x58a>
 8010c32:	4aa0      	ldr	r2, [pc, #640]	; (8010eb4 <_strtod_l+0xb7c>)
 8010c34:	2300      	movs	r3, #0
 8010c36:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
 8010c3a:	ed9d 6b12 	vldr	d6, [sp, #72]	; 0x48
 8010c3e:	ec4b ab17 	vmov	d7, sl, fp
 8010c42:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010c46:	ed8d 7b04 	vstr	d7, [sp, #16]
 8010c4a:	9b05      	ldr	r3, [sp, #20]
 8010c4c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	f47f adaa 	bne.w	80107aa <_strtod_l+0x472>
 8010c56:	9b04      	ldr	r3, [sp, #16]
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	f47f ada6 	bne.w	80107aa <_strtod_l+0x472>
 8010c5e:	2322      	movs	r3, #34	; 0x22
 8010c60:	6023      	str	r3, [r4, #0]
 8010c62:	e5a2      	b.n	80107aa <_strtod_l+0x472>
 8010c64:	4013      	ands	r3, r2
 8010c66:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8010c6a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8010c6e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8010c72:	f04f 3aff 	mov.w	sl, #4294967295
 8010c76:	e75a      	b.n	8010b2e <_strtod_l+0x7f6>
 8010c78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010c7a:	b18b      	cbz	r3, 8010ca0 <_strtod_l+0x968>
 8010c7c:	9a08      	ldr	r2, [sp, #32]
 8010c7e:	4213      	tst	r3, r2
 8010c80:	f43f af55 	beq.w	8010b2e <_strtod_l+0x7f6>
 8010c84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010c86:	463a      	mov	r2, r7
 8010c88:	4650      	mov	r0, sl
 8010c8a:	4659      	mov	r1, fp
 8010c8c:	b163      	cbz	r3, 8010ca8 <_strtod_l+0x970>
 8010c8e:	f7ff fb38 	bl	8010302 <sulp>
 8010c92:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8010c96:	ee37 7b00 	vadd.f64	d7, d7, d0
 8010c9a:	ec5b ab17 	vmov	sl, fp, d7
 8010c9e:	e746      	b.n	8010b2e <_strtod_l+0x7f6>
 8010ca0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010ca2:	ea13 0f0a 	tst.w	r3, sl
 8010ca6:	e7eb      	b.n	8010c80 <_strtod_l+0x948>
 8010ca8:	f7ff fb2b 	bl	8010302 <sulp>
 8010cac:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8010cb0:	ee37 7b40 	vsub.f64	d7, d7, d0
 8010cb4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8010cb8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cc0:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8010cc4:	f43f adfd 	beq.w	80108c2 <_strtod_l+0x58a>
 8010cc8:	e731      	b.n	8010b2e <_strtod_l+0x7f6>
 8010cca:	4641      	mov	r1, r8
 8010ccc:	4628      	mov	r0, r5
 8010cce:	f001 fe58 	bl	8012982 <__ratio>
 8010cd2:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8010cd6:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8010cda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cde:	d869      	bhi.n	8010db4 <_strtod_l+0xa7c>
 8010ce0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d045      	beq.n	8010d72 <_strtod_l+0xa3a>
 8010ce6:	4b74      	ldr	r3, [pc, #464]	; (8010eb8 <_strtod_l+0xb80>)
 8010ce8:	2200      	movs	r2, #0
 8010cea:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 8010cee:	9808      	ldr	r0, [sp, #32]
 8010cf0:	496e      	ldr	r1, [pc, #440]	; (8010eac <_strtod_l+0xb74>)
 8010cf2:	ea00 0601 	and.w	r6, r0, r1
 8010cf6:	4871      	ldr	r0, [pc, #452]	; (8010ebc <_strtod_l+0xb84>)
 8010cf8:	4286      	cmp	r6, r0
 8010cfa:	f040 8089 	bne.w	8010e10 <_strtod_l+0xad8>
 8010cfe:	910f      	str	r1, [sp, #60]	; 0x3c
 8010d00:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010d04:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8010d08:	9908      	ldr	r1, [sp, #32]
 8010d0a:	f1a1 7b54 	sub.w	fp, r1, #55574528	; 0x3500000
 8010d0e:	ec4b ab10 	vmov	d0, sl, fp
 8010d12:	ec43 2b1c 	vmov	d12, r2, r3
 8010d16:	f001 fd6f 	bl	80127f8 <__ulp>
 8010d1a:	ec4b ab1d 	vmov	d13, sl, fp
 8010d1e:	eeac db00 	vfma.f64	d13, d12, d0
 8010d22:	ed8d db08 	vstr	d13, [sp, #32]
 8010d26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d28:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010d2a:	4a65      	ldr	r2, [pc, #404]	; (8010ec0 <_strtod_l+0xb88>)
 8010d2c:	4019      	ands	r1, r3
 8010d2e:	4291      	cmp	r1, r2
 8010d30:	e9dd ab08 	ldrd	sl, fp, [sp, #32]
 8010d34:	d948      	bls.n	8010dc8 <_strtod_l+0xa90>
 8010d36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010d38:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8010d3c:	4293      	cmp	r3, r2
 8010d3e:	d103      	bne.n	8010d48 <_strtod_l+0xa10>
 8010d40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d42:	3301      	adds	r3, #1
 8010d44:	f43f ad27 	beq.w	8010796 <_strtod_l+0x45e>
 8010d48:	f8df b164 	ldr.w	fp, [pc, #356]	; 8010eb0 <_strtod_l+0xb78>
 8010d4c:	f04f 3aff 	mov.w	sl, #4294967295
 8010d50:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010d52:	4620      	mov	r0, r4
 8010d54:	f001 fab8 	bl	80122c8 <_Bfree>
 8010d58:	4649      	mov	r1, r9
 8010d5a:	4620      	mov	r0, r4
 8010d5c:	f001 fab4 	bl	80122c8 <_Bfree>
 8010d60:	4641      	mov	r1, r8
 8010d62:	4620      	mov	r0, r4
 8010d64:	f001 fab0 	bl	80122c8 <_Bfree>
 8010d68:	4629      	mov	r1, r5
 8010d6a:	4620      	mov	r0, r4
 8010d6c:	f001 faac 	bl	80122c8 <_Bfree>
 8010d70:	e60e      	b.n	8010990 <_strtod_l+0x658>
 8010d72:	f1ba 0f00 	cmp.w	sl, #0
 8010d76:	d113      	bne.n	8010da0 <_strtod_l+0xa68>
 8010d78:	9b08      	ldr	r3, [sp, #32]
 8010d7a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010d7e:	b9b3      	cbnz	r3, 8010dae <_strtod_l+0xa76>
 8010d80:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8010d84:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8010d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d8c:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8010d90:	d401      	bmi.n	8010d96 <_strtod_l+0xa5e>
 8010d92:	ee20 8b08 	vmul.f64	d8, d0, d8
 8010d96:	eeb1 7b48 	vneg.f64	d7, d8
 8010d9a:	ec53 2b17 	vmov	r2, r3, d7
 8010d9e:	e7a6      	b.n	8010cee <_strtod_l+0x9b6>
 8010da0:	f1ba 0f01 	cmp.w	sl, #1
 8010da4:	d103      	bne.n	8010dae <_strtod_l+0xa76>
 8010da6:	9b08      	ldr	r3, [sp, #32]
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	f43f ad8a 	beq.w	80108c2 <_strtod_l+0x58a>
 8010dae:	2200      	movs	r2, #0
 8010db0:	4b44      	ldr	r3, [pc, #272]	; (8010ec4 <_strtod_l+0xb8c>)
 8010db2:	e79a      	b.n	8010cea <_strtod_l+0x9b2>
 8010db4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010db6:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8010dba:	ee20 8b08 	vmul.f64	d8, d0, d8
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d0e9      	beq.n	8010d96 <_strtod_l+0xa5e>
 8010dc2:	ec53 2b18 	vmov	r2, r3, d8
 8010dc6:	e792      	b.n	8010cee <_strtod_l+0x9b6>
 8010dc8:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8010dcc:	2f00      	cmp	r7, #0
 8010dce:	d1bf      	bne.n	8010d50 <_strtod_l+0xa18>
 8010dd0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010dd4:	0d1b      	lsrs	r3, r3, #20
 8010dd6:	051b      	lsls	r3, r3, #20
 8010dd8:	429e      	cmp	r6, r3
 8010dda:	d1b9      	bne.n	8010d50 <_strtod_l+0xa18>
 8010ddc:	eebd 0bc8 	vcvt.s32.f64	s0, d8
 8010de0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010de2:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 8010de6:	ee38 8b40 	vsub.f64	d8, d8, d0
 8010dea:	b92b      	cbnz	r3, 8010df8 <_strtod_l+0xac0>
 8010dec:	f1ba 0f00 	cmp.w	sl, #0
 8010df0:	d102      	bne.n	8010df8 <_strtod_l+0xac0>
 8010df2:	f3cb 0213 	ubfx	r2, fp, #0, #20
 8010df6:	b3d2      	cbz	r2, 8010e6e <_strtod_l+0xb36>
 8010df8:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8010dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e00:	f53f acd3 	bmi.w	80107aa <_strtod_l+0x472>
 8010e04:	eeb4 8bca 	vcmpe.f64	d8, d10
 8010e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e0c:	dda0      	ble.n	8010d50 <_strtod_l+0xa18>
 8010e0e:	e4cc      	b.n	80107aa <_strtod_l+0x472>
 8010e10:	b1ef      	cbz	r7, 8010e4e <_strtod_l+0xb16>
 8010e12:	f1b6 6fd4 	cmp.w	r6, #111149056	; 0x6a00000
 8010e16:	d81a      	bhi.n	8010e4e <_strtod_l+0xb16>
 8010e18:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8010ea0 <_strtod_l+0xb68>
 8010e1c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8010e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e24:	d810      	bhi.n	8010e48 <_strtod_l+0xb10>
 8010e26:	eefc 7bc8 	vcvt.u32.f64	s15, d8
 8010e2a:	ee17 3a90 	vmov	r3, s15
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	bf08      	it	eq
 8010e32:	2301      	moveq	r3, #1
 8010e34:	ee07 3a90 	vmov	s15, r3
 8010e38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010e3a:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 8010e3e:	b99b      	cbnz	r3, 8010e68 <_strtod_l+0xb30>
 8010e40:	eeb1 7b48 	vneg.f64	d7, d8
 8010e44:	ec53 2b17 	vmov	r2, r3, d7
 8010e48:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 8010e4c:	1b8b      	subs	r3, r1, r6
 8010e4e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8010e52:	ec43 2b1c 	vmov	d12, r2, r3
 8010e56:	f001 fccf 	bl	80127f8 <__ulp>
 8010e5a:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8010e5e:	eeac 7b00 	vfma.f64	d7, d12, d0
 8010e62:	ec5b ab17 	vmov	sl, fp, d7
 8010e66:	e7b1      	b.n	8010dcc <_strtod_l+0xa94>
 8010e68:	ec53 2b18 	vmov	r2, r3, d8
 8010e6c:	e7ec      	b.n	8010e48 <_strtod_l+0xb10>
 8010e6e:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8010e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e76:	f57f af6b 	bpl.w	8010d50 <_strtod_l+0xa18>
 8010e7a:	e496      	b.n	80107aa <_strtod_l+0x472>
 8010e7c:	2300      	movs	r3, #0
 8010e7e:	930d      	str	r3, [sp, #52]	; 0x34
 8010e80:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010e82:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010e84:	6013      	str	r3, [r2, #0]
 8010e86:	f7ff ba9d 	b.w	80103c4 <_strtod_l+0x8c>
 8010e8a:	2a65      	cmp	r2, #101	; 0x65
 8010e8c:	f04f 0100 	mov.w	r1, #0
 8010e90:	f43f ab97 	beq.w	80105c2 <_strtod_l+0x28a>
 8010e94:	2701      	movs	r7, #1
 8010e96:	460b      	mov	r3, r1
 8010e98:	9704      	str	r7, [sp, #16]
 8010e9a:	f7ff bb0a 	b.w	80104b2 <_strtod_l+0x17a>
 8010e9e:	bf00      	nop
 8010ea0:	ffc00000 	.word	0xffc00000
 8010ea4:	41dfffff 	.word	0x41dfffff
 8010ea8:	000fffff 	.word	0x000fffff
 8010eac:	7ff00000 	.word	0x7ff00000
 8010eb0:	7fefffff 	.word	0x7fefffff
 8010eb4:	39500000 	.word	0x39500000
 8010eb8:	3ff00000 	.word	0x3ff00000
 8010ebc:	7fe00000 	.word	0x7fe00000
 8010ec0:	7c9fffff 	.word	0x7c9fffff
 8010ec4:	bff00000 	.word	0xbff00000

08010ec8 <_strtod_r>:
 8010ec8:	4b05      	ldr	r3, [pc, #20]	; (8010ee0 <_strtod_r+0x18>)
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	b410      	push	{r4}
 8010ece:	6a1b      	ldr	r3, [r3, #32]
 8010ed0:	4c04      	ldr	r4, [pc, #16]	; (8010ee4 <_strtod_r+0x1c>)
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	bf08      	it	eq
 8010ed6:	4623      	moveq	r3, r4
 8010ed8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010edc:	f7ff ba2c 	b.w	8010338 <_strtod_l>
 8010ee0:	20000044 	.word	0x20000044
 8010ee4:	200000a8 	.word	0x200000a8

08010ee8 <_strtol_l.isra.0>:
 8010ee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010eec:	4680      	mov	r8, r0
 8010eee:	4689      	mov	r9, r1
 8010ef0:	4692      	mov	sl, r2
 8010ef2:	461e      	mov	r6, r3
 8010ef4:	460f      	mov	r7, r1
 8010ef6:	463d      	mov	r5, r7
 8010ef8:	9808      	ldr	r0, [sp, #32]
 8010efa:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010efe:	f001 f981 	bl	8012204 <__locale_ctype_ptr_l>
 8010f02:	4420      	add	r0, r4
 8010f04:	7843      	ldrb	r3, [r0, #1]
 8010f06:	f013 0308 	ands.w	r3, r3, #8
 8010f0a:	d132      	bne.n	8010f72 <_strtol_l.isra.0+0x8a>
 8010f0c:	2c2d      	cmp	r4, #45	; 0x2d
 8010f0e:	d132      	bne.n	8010f76 <_strtol_l.isra.0+0x8e>
 8010f10:	787c      	ldrb	r4, [r7, #1]
 8010f12:	1cbd      	adds	r5, r7, #2
 8010f14:	2201      	movs	r2, #1
 8010f16:	2e00      	cmp	r6, #0
 8010f18:	d05d      	beq.n	8010fd6 <_strtol_l.isra.0+0xee>
 8010f1a:	2e10      	cmp	r6, #16
 8010f1c:	d109      	bne.n	8010f32 <_strtol_l.isra.0+0x4a>
 8010f1e:	2c30      	cmp	r4, #48	; 0x30
 8010f20:	d107      	bne.n	8010f32 <_strtol_l.isra.0+0x4a>
 8010f22:	782b      	ldrb	r3, [r5, #0]
 8010f24:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010f28:	2b58      	cmp	r3, #88	; 0x58
 8010f2a:	d14f      	bne.n	8010fcc <_strtol_l.isra.0+0xe4>
 8010f2c:	786c      	ldrb	r4, [r5, #1]
 8010f2e:	2610      	movs	r6, #16
 8010f30:	3502      	adds	r5, #2
 8010f32:	2a00      	cmp	r2, #0
 8010f34:	bf14      	ite	ne
 8010f36:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8010f3a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8010f3e:	2700      	movs	r7, #0
 8010f40:	fbb1 fcf6 	udiv	ip, r1, r6
 8010f44:	4638      	mov	r0, r7
 8010f46:	fb06 1e1c 	mls	lr, r6, ip, r1
 8010f4a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8010f4e:	2b09      	cmp	r3, #9
 8010f50:	d817      	bhi.n	8010f82 <_strtol_l.isra.0+0x9a>
 8010f52:	461c      	mov	r4, r3
 8010f54:	42a6      	cmp	r6, r4
 8010f56:	dd23      	ble.n	8010fa0 <_strtol_l.isra.0+0xb8>
 8010f58:	1c7b      	adds	r3, r7, #1
 8010f5a:	d007      	beq.n	8010f6c <_strtol_l.isra.0+0x84>
 8010f5c:	4584      	cmp	ip, r0
 8010f5e:	d31c      	bcc.n	8010f9a <_strtol_l.isra.0+0xb2>
 8010f60:	d101      	bne.n	8010f66 <_strtol_l.isra.0+0x7e>
 8010f62:	45a6      	cmp	lr, r4
 8010f64:	db19      	blt.n	8010f9a <_strtol_l.isra.0+0xb2>
 8010f66:	fb00 4006 	mla	r0, r0, r6, r4
 8010f6a:	2701      	movs	r7, #1
 8010f6c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010f70:	e7eb      	b.n	8010f4a <_strtol_l.isra.0+0x62>
 8010f72:	462f      	mov	r7, r5
 8010f74:	e7bf      	b.n	8010ef6 <_strtol_l.isra.0+0xe>
 8010f76:	2c2b      	cmp	r4, #43	; 0x2b
 8010f78:	bf04      	itt	eq
 8010f7a:	1cbd      	addeq	r5, r7, #2
 8010f7c:	787c      	ldrbeq	r4, [r7, #1]
 8010f7e:	461a      	mov	r2, r3
 8010f80:	e7c9      	b.n	8010f16 <_strtol_l.isra.0+0x2e>
 8010f82:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8010f86:	2b19      	cmp	r3, #25
 8010f88:	d801      	bhi.n	8010f8e <_strtol_l.isra.0+0xa6>
 8010f8a:	3c37      	subs	r4, #55	; 0x37
 8010f8c:	e7e2      	b.n	8010f54 <_strtol_l.isra.0+0x6c>
 8010f8e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8010f92:	2b19      	cmp	r3, #25
 8010f94:	d804      	bhi.n	8010fa0 <_strtol_l.isra.0+0xb8>
 8010f96:	3c57      	subs	r4, #87	; 0x57
 8010f98:	e7dc      	b.n	8010f54 <_strtol_l.isra.0+0x6c>
 8010f9a:	f04f 37ff 	mov.w	r7, #4294967295
 8010f9e:	e7e5      	b.n	8010f6c <_strtol_l.isra.0+0x84>
 8010fa0:	1c7b      	adds	r3, r7, #1
 8010fa2:	d108      	bne.n	8010fb6 <_strtol_l.isra.0+0xce>
 8010fa4:	2322      	movs	r3, #34	; 0x22
 8010fa6:	f8c8 3000 	str.w	r3, [r8]
 8010faa:	4608      	mov	r0, r1
 8010fac:	f1ba 0f00 	cmp.w	sl, #0
 8010fb0:	d107      	bne.n	8010fc2 <_strtol_l.isra.0+0xda>
 8010fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010fb6:	b102      	cbz	r2, 8010fba <_strtol_l.isra.0+0xd2>
 8010fb8:	4240      	negs	r0, r0
 8010fba:	f1ba 0f00 	cmp.w	sl, #0
 8010fbe:	d0f8      	beq.n	8010fb2 <_strtol_l.isra.0+0xca>
 8010fc0:	b10f      	cbz	r7, 8010fc6 <_strtol_l.isra.0+0xde>
 8010fc2:	f105 39ff 	add.w	r9, r5, #4294967295
 8010fc6:	f8ca 9000 	str.w	r9, [sl]
 8010fca:	e7f2      	b.n	8010fb2 <_strtol_l.isra.0+0xca>
 8010fcc:	2430      	movs	r4, #48	; 0x30
 8010fce:	2e00      	cmp	r6, #0
 8010fd0:	d1af      	bne.n	8010f32 <_strtol_l.isra.0+0x4a>
 8010fd2:	2608      	movs	r6, #8
 8010fd4:	e7ad      	b.n	8010f32 <_strtol_l.isra.0+0x4a>
 8010fd6:	2c30      	cmp	r4, #48	; 0x30
 8010fd8:	d0a3      	beq.n	8010f22 <_strtol_l.isra.0+0x3a>
 8010fda:	260a      	movs	r6, #10
 8010fdc:	e7a9      	b.n	8010f32 <_strtol_l.isra.0+0x4a>
	...

08010fe0 <_strtol_r>:
 8010fe0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010fe2:	4c06      	ldr	r4, [pc, #24]	; (8010ffc <_strtol_r+0x1c>)
 8010fe4:	4d06      	ldr	r5, [pc, #24]	; (8011000 <_strtol_r+0x20>)
 8010fe6:	6824      	ldr	r4, [r4, #0]
 8010fe8:	6a24      	ldr	r4, [r4, #32]
 8010fea:	2c00      	cmp	r4, #0
 8010fec:	bf08      	it	eq
 8010fee:	462c      	moveq	r4, r5
 8010ff0:	9400      	str	r4, [sp, #0]
 8010ff2:	f7ff ff79 	bl	8010ee8 <_strtol_l.isra.0>
 8010ff6:	b003      	add	sp, #12
 8010ff8:	bd30      	pop	{r4, r5, pc}
 8010ffa:	bf00      	nop
 8010ffc:	20000044 	.word	0x20000044
 8011000:	200000a8 	.word	0x200000a8

08011004 <quorem>:
 8011004:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011008:	6903      	ldr	r3, [r0, #16]
 801100a:	690c      	ldr	r4, [r1, #16]
 801100c:	42a3      	cmp	r3, r4
 801100e:	4680      	mov	r8, r0
 8011010:	f2c0 8082 	blt.w	8011118 <quorem+0x114>
 8011014:	3c01      	subs	r4, #1
 8011016:	f101 0714 	add.w	r7, r1, #20
 801101a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 801101e:	f100 0614 	add.w	r6, r0, #20
 8011022:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8011026:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801102a:	eb06 030c 	add.w	r3, r6, ip
 801102e:	3501      	adds	r5, #1
 8011030:	eb07 090c 	add.w	r9, r7, ip
 8011034:	9301      	str	r3, [sp, #4]
 8011036:	fbb0 f5f5 	udiv	r5, r0, r5
 801103a:	b395      	cbz	r5, 80110a2 <quorem+0x9e>
 801103c:	f04f 0a00 	mov.w	sl, #0
 8011040:	4638      	mov	r0, r7
 8011042:	46b6      	mov	lr, r6
 8011044:	46d3      	mov	fp, sl
 8011046:	f850 2b04 	ldr.w	r2, [r0], #4
 801104a:	b293      	uxth	r3, r2
 801104c:	fb05 a303 	mla	r3, r5, r3, sl
 8011050:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011054:	b29b      	uxth	r3, r3
 8011056:	ebab 0303 	sub.w	r3, fp, r3
 801105a:	0c12      	lsrs	r2, r2, #16
 801105c:	f8de b000 	ldr.w	fp, [lr]
 8011060:	fb05 a202 	mla	r2, r5, r2, sl
 8011064:	fa13 f38b 	uxtah	r3, r3, fp
 8011068:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 801106c:	fa1f fb82 	uxth.w	fp, r2
 8011070:	f8de 2000 	ldr.w	r2, [lr]
 8011074:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8011078:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801107c:	b29b      	uxth	r3, r3
 801107e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011082:	4581      	cmp	r9, r0
 8011084:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8011088:	f84e 3b04 	str.w	r3, [lr], #4
 801108c:	d2db      	bcs.n	8011046 <quorem+0x42>
 801108e:	f856 300c 	ldr.w	r3, [r6, ip]
 8011092:	b933      	cbnz	r3, 80110a2 <quorem+0x9e>
 8011094:	9b01      	ldr	r3, [sp, #4]
 8011096:	3b04      	subs	r3, #4
 8011098:	429e      	cmp	r6, r3
 801109a:	461a      	mov	r2, r3
 801109c:	d330      	bcc.n	8011100 <quorem+0xfc>
 801109e:	f8c8 4010 	str.w	r4, [r8, #16]
 80110a2:	4640      	mov	r0, r8
 80110a4:	f001 fb30 	bl	8012708 <__mcmp>
 80110a8:	2800      	cmp	r0, #0
 80110aa:	db25      	blt.n	80110f8 <quorem+0xf4>
 80110ac:	3501      	adds	r5, #1
 80110ae:	4630      	mov	r0, r6
 80110b0:	f04f 0c00 	mov.w	ip, #0
 80110b4:	f857 2b04 	ldr.w	r2, [r7], #4
 80110b8:	f8d0 e000 	ldr.w	lr, [r0]
 80110bc:	b293      	uxth	r3, r2
 80110be:	ebac 0303 	sub.w	r3, ip, r3
 80110c2:	0c12      	lsrs	r2, r2, #16
 80110c4:	fa13 f38e 	uxtah	r3, r3, lr
 80110c8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80110cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80110d0:	b29b      	uxth	r3, r3
 80110d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80110d6:	45b9      	cmp	r9, r7
 80110d8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80110dc:	f840 3b04 	str.w	r3, [r0], #4
 80110e0:	d2e8      	bcs.n	80110b4 <quorem+0xb0>
 80110e2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80110e6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80110ea:	b92a      	cbnz	r2, 80110f8 <quorem+0xf4>
 80110ec:	3b04      	subs	r3, #4
 80110ee:	429e      	cmp	r6, r3
 80110f0:	461a      	mov	r2, r3
 80110f2:	d30b      	bcc.n	801110c <quorem+0x108>
 80110f4:	f8c8 4010 	str.w	r4, [r8, #16]
 80110f8:	4628      	mov	r0, r5
 80110fa:	b003      	add	sp, #12
 80110fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011100:	6812      	ldr	r2, [r2, #0]
 8011102:	3b04      	subs	r3, #4
 8011104:	2a00      	cmp	r2, #0
 8011106:	d1ca      	bne.n	801109e <quorem+0x9a>
 8011108:	3c01      	subs	r4, #1
 801110a:	e7c5      	b.n	8011098 <quorem+0x94>
 801110c:	6812      	ldr	r2, [r2, #0]
 801110e:	3b04      	subs	r3, #4
 8011110:	2a00      	cmp	r2, #0
 8011112:	d1ef      	bne.n	80110f4 <quorem+0xf0>
 8011114:	3c01      	subs	r4, #1
 8011116:	e7ea      	b.n	80110ee <quorem+0xea>
 8011118:	2000      	movs	r0, #0
 801111a:	e7ee      	b.n	80110fa <quorem+0xf6>
 801111c:	0000      	movs	r0, r0
	...

08011120 <_dtoa_r>:
 8011120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011124:	ec57 6b10 	vmov	r6, r7, d0
 8011128:	b095      	sub	sp, #84	; 0x54
 801112a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801112c:	9108      	str	r1, [sp, #32]
 801112e:	4604      	mov	r4, r0
 8011130:	920a      	str	r2, [sp, #40]	; 0x28
 8011132:	9311      	str	r3, [sp, #68]	; 0x44
 8011134:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8011138:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801113c:	b93d      	cbnz	r5, 801114e <_dtoa_r+0x2e>
 801113e:	2010      	movs	r0, #16
 8011140:	f001 f874 	bl	801222c <malloc>
 8011144:	6260      	str	r0, [r4, #36]	; 0x24
 8011146:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801114a:	6005      	str	r5, [r0, #0]
 801114c:	60c5      	str	r5, [r0, #12]
 801114e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011150:	6819      	ldr	r1, [r3, #0]
 8011152:	b151      	cbz	r1, 801116a <_dtoa_r+0x4a>
 8011154:	685a      	ldr	r2, [r3, #4]
 8011156:	604a      	str	r2, [r1, #4]
 8011158:	2301      	movs	r3, #1
 801115a:	4093      	lsls	r3, r2
 801115c:	608b      	str	r3, [r1, #8]
 801115e:	4620      	mov	r0, r4
 8011160:	f001 f8b2 	bl	80122c8 <_Bfree>
 8011164:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011166:	2200      	movs	r2, #0
 8011168:	601a      	str	r2, [r3, #0]
 801116a:	1e3b      	subs	r3, r7, #0
 801116c:	bfb9      	ittee	lt
 801116e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8011172:	9303      	strlt	r3, [sp, #12]
 8011174:	2300      	movge	r3, #0
 8011176:	f8c8 3000 	strge.w	r3, [r8]
 801117a:	9d03      	ldr	r5, [sp, #12]
 801117c:	4bac      	ldr	r3, [pc, #688]	; (8011430 <_dtoa_r+0x310>)
 801117e:	bfbc      	itt	lt
 8011180:	2201      	movlt	r2, #1
 8011182:	f8c8 2000 	strlt.w	r2, [r8]
 8011186:	43ab      	bics	r3, r5
 8011188:	d11b      	bne.n	80111c2 <_dtoa_r+0xa2>
 801118a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801118c:	f242 730f 	movw	r3, #9999	; 0x270f
 8011190:	6013      	str	r3, [r2, #0]
 8011192:	9b02      	ldr	r3, [sp, #8]
 8011194:	b923      	cbnz	r3, 80111a0 <_dtoa_r+0x80>
 8011196:	f3c5 0513 	ubfx	r5, r5, #0, #20
 801119a:	2d00      	cmp	r5, #0
 801119c:	f000 84dd 	beq.w	8011b5a <_dtoa_r+0xa3a>
 80111a0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80111a2:	b953      	cbnz	r3, 80111ba <_dtoa_r+0x9a>
 80111a4:	4ba3      	ldr	r3, [pc, #652]	; (8011434 <_dtoa_r+0x314>)
 80111a6:	e020      	b.n	80111ea <_dtoa_r+0xca>
 80111a8:	4ba3      	ldr	r3, [pc, #652]	; (8011438 <_dtoa_r+0x318>)
 80111aa:	9304      	str	r3, [sp, #16]
 80111ac:	3308      	adds	r3, #8
 80111ae:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80111b0:	6013      	str	r3, [r2, #0]
 80111b2:	9804      	ldr	r0, [sp, #16]
 80111b4:	b015      	add	sp, #84	; 0x54
 80111b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111ba:	4b9e      	ldr	r3, [pc, #632]	; (8011434 <_dtoa_r+0x314>)
 80111bc:	9304      	str	r3, [sp, #16]
 80111be:	3303      	adds	r3, #3
 80111c0:	e7f5      	b.n	80111ae <_dtoa_r+0x8e>
 80111c2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80111c6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80111ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111ce:	ed8d 7b04 	vstr	d7, [sp, #16]
 80111d2:	d10c      	bne.n	80111ee <_dtoa_r+0xce>
 80111d4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80111d6:	2301      	movs	r3, #1
 80111d8:	6013      	str	r3, [r2, #0]
 80111da:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80111dc:	2b00      	cmp	r3, #0
 80111de:	f000 84b9 	beq.w	8011b54 <_dtoa_r+0xa34>
 80111e2:	4b96      	ldr	r3, [pc, #600]	; (801143c <_dtoa_r+0x31c>)
 80111e4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80111e6:	6013      	str	r3, [r2, #0]
 80111e8:	3b01      	subs	r3, #1
 80111ea:	9304      	str	r3, [sp, #16]
 80111ec:	e7e1      	b.n	80111b2 <_dtoa_r+0x92>
 80111ee:	a913      	add	r1, sp, #76	; 0x4c
 80111f0:	aa12      	add	r2, sp, #72	; 0x48
 80111f2:	ed9d 0b04 	vldr	d0, [sp, #16]
 80111f6:	4620      	mov	r0, r4
 80111f8:	f001 fb74 	bl	80128e4 <__d2b>
 80111fc:	f3c5 560a 	ubfx	r6, r5, #20, #11
 8011200:	9001      	str	r0, [sp, #4]
 8011202:	9912      	ldr	r1, [sp, #72]	; 0x48
 8011204:	2e00      	cmp	r6, #0
 8011206:	d046      	beq.n	8011296 <_dtoa_r+0x176>
 8011208:	9805      	ldr	r0, [sp, #20]
 801120a:	f3c0 0013 	ubfx	r0, r0, #0, #20
 801120e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011212:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 8011216:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801121a:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 801121e:	2700      	movs	r7, #0
 8011220:	ee07 aa90 	vmov	s15, sl
 8011224:	ec43 2b16 	vmov	d6, r2, r3
 8011228:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801122c:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 8011418 <_dtoa_r+0x2f8>
 8011230:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8011234:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011238:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8011420 <_dtoa_r+0x300>
 801123c:	eea7 6b04 	vfma.f64	d6, d7, d4
 8011240:	eeb0 7b46 	vmov.f64	d7, d6
 8011244:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8011428 <_dtoa_r+0x308>
 8011248:	eea5 7b06 	vfma.f64	d7, d5, d6
 801124c:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8011250:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8011254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011258:	ee16 ba90 	vmov	fp, s13
 801125c:	d508      	bpl.n	8011270 <_dtoa_r+0x150>
 801125e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8011262:	eeb4 6b47 	vcmp.f64	d6, d7
 8011266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801126a:	bf18      	it	ne
 801126c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8011270:	f1bb 0f16 	cmp.w	fp, #22
 8011274:	d834      	bhi.n	80112e0 <_dtoa_r+0x1c0>
 8011276:	4b72      	ldr	r3, [pc, #456]	; (8011440 <_dtoa_r+0x320>)
 8011278:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801127c:	ed93 7b00 	vldr	d7, [r3]
 8011280:	ed9d 6b02 	vldr	d6, [sp, #8]
 8011284:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8011288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801128c:	dd01      	ble.n	8011292 <_dtoa_r+0x172>
 801128e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011292:	2300      	movs	r3, #0
 8011294:	e025      	b.n	80112e2 <_dtoa_r+0x1c2>
 8011296:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011298:	eb01 0a03 	add.w	sl, r1, r3
 801129c:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 80112a0:	2b20      	cmp	r3, #32
 80112a2:	dd17      	ble.n	80112d4 <_dtoa_r+0x1b4>
 80112a4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80112a8:	9a02      	ldr	r2, [sp, #8]
 80112aa:	409d      	lsls	r5, r3
 80112ac:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 80112b0:	fa22 f303 	lsr.w	r3, r2, r3
 80112b4:	432b      	orrs	r3, r5
 80112b6:	ee07 3a90 	vmov	s15, r3
 80112ba:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80112be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80112c2:	ed8d 7b04 	vstr	d7, [sp, #16]
 80112c6:	9805      	ldr	r0, [sp, #20]
 80112c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80112cc:	2701      	movs	r7, #1
 80112ce:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 80112d2:	e7a5      	b.n	8011220 <_dtoa_r+0x100>
 80112d4:	9a02      	ldr	r2, [sp, #8]
 80112d6:	f1c3 0320 	rsb	r3, r3, #32
 80112da:	fa02 f303 	lsl.w	r3, r2, r3
 80112de:	e7ea      	b.n	80112b6 <_dtoa_r+0x196>
 80112e0:	2301      	movs	r3, #1
 80112e2:	eba1 0a0a 	sub.w	sl, r1, sl
 80112e6:	9310      	str	r3, [sp, #64]	; 0x40
 80112e8:	f1ba 0301 	subs.w	r3, sl, #1
 80112ec:	9307      	str	r3, [sp, #28]
 80112ee:	bf43      	ittte	mi
 80112f0:	2300      	movmi	r3, #0
 80112f2:	f1ca 0a01 	rsbmi	sl, sl, #1
 80112f6:	9307      	strmi	r3, [sp, #28]
 80112f8:	f04f 0a00 	movpl.w	sl, #0
 80112fc:	f1bb 0f00 	cmp.w	fp, #0
 8011300:	db19      	blt.n	8011336 <_dtoa_r+0x216>
 8011302:	9b07      	ldr	r3, [sp, #28]
 8011304:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8011308:	445b      	add	r3, fp
 801130a:	9307      	str	r3, [sp, #28]
 801130c:	f04f 0800 	mov.w	r8, #0
 8011310:	9b08      	ldr	r3, [sp, #32]
 8011312:	2b09      	cmp	r3, #9
 8011314:	d866      	bhi.n	80113e4 <_dtoa_r+0x2c4>
 8011316:	2b05      	cmp	r3, #5
 8011318:	bfc4      	itt	gt
 801131a:	3b04      	subgt	r3, #4
 801131c:	9308      	strgt	r3, [sp, #32]
 801131e:	9b08      	ldr	r3, [sp, #32]
 8011320:	f1a3 0302 	sub.w	r3, r3, #2
 8011324:	bfcc      	ite	gt
 8011326:	2500      	movgt	r5, #0
 8011328:	2501      	movle	r5, #1
 801132a:	2b03      	cmp	r3, #3
 801132c:	d866      	bhi.n	80113fc <_dtoa_r+0x2dc>
 801132e:	e8df f003 	tbb	[pc, r3]
 8011332:	5755      	.short	0x5755
 8011334:	4909      	.short	0x4909
 8011336:	2300      	movs	r3, #0
 8011338:	ebaa 0a0b 	sub.w	sl, sl, fp
 801133c:	f1cb 0800 	rsb	r8, fp, #0
 8011340:	930b      	str	r3, [sp, #44]	; 0x2c
 8011342:	e7e5      	b.n	8011310 <_dtoa_r+0x1f0>
 8011344:	2301      	movs	r3, #1
 8011346:	9309      	str	r3, [sp, #36]	; 0x24
 8011348:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801134a:	2b00      	cmp	r3, #0
 801134c:	dd59      	ble.n	8011402 <_dtoa_r+0x2e2>
 801134e:	9306      	str	r3, [sp, #24]
 8011350:	4699      	mov	r9, r3
 8011352:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011354:	2200      	movs	r2, #0
 8011356:	6072      	str	r2, [r6, #4]
 8011358:	2204      	movs	r2, #4
 801135a:	f102 0014 	add.w	r0, r2, #20
 801135e:	4298      	cmp	r0, r3
 8011360:	6871      	ldr	r1, [r6, #4]
 8011362:	d953      	bls.n	801140c <_dtoa_r+0x2ec>
 8011364:	4620      	mov	r0, r4
 8011366:	f000 ff7b 	bl	8012260 <_Balloc>
 801136a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801136c:	6030      	str	r0, [r6, #0]
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	9304      	str	r3, [sp, #16]
 8011372:	f1b9 0f0e 	cmp.w	r9, #14
 8011376:	f200 80c2 	bhi.w	80114fe <_dtoa_r+0x3de>
 801137a:	2d00      	cmp	r5, #0
 801137c:	f000 80bf 	beq.w	80114fe <_dtoa_r+0x3de>
 8011380:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011384:	f1bb 0f00 	cmp.w	fp, #0
 8011388:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 801138c:	f340 80e6 	ble.w	801155c <_dtoa_r+0x43c>
 8011390:	4a2b      	ldr	r2, [pc, #172]	; (8011440 <_dtoa_r+0x320>)
 8011392:	f00b 030f 	and.w	r3, fp, #15
 8011396:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801139a:	ed93 7b00 	vldr	d7, [r3]
 801139e:	ea4f 132b 	mov.w	r3, fp, asr #4
 80113a2:	06da      	lsls	r2, r3, #27
 80113a4:	f140 80d8 	bpl.w	8011558 <_dtoa_r+0x438>
 80113a8:	4a26      	ldr	r2, [pc, #152]	; (8011444 <_dtoa_r+0x324>)
 80113aa:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 80113ae:	ed92 6b08 	vldr	d6, [r2, #32]
 80113b2:	ee85 6b06 	vdiv.f64	d6, d5, d6
 80113b6:	ed8d 6b02 	vstr	d6, [sp, #8]
 80113ba:	f003 030f 	and.w	r3, r3, #15
 80113be:	2203      	movs	r2, #3
 80113c0:	4920      	ldr	r1, [pc, #128]	; (8011444 <_dtoa_r+0x324>)
 80113c2:	e04a      	b.n	801145a <_dtoa_r+0x33a>
 80113c4:	2301      	movs	r3, #1
 80113c6:	9309      	str	r3, [sp, #36]	; 0x24
 80113c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80113ca:	445b      	add	r3, fp
 80113cc:	f103 0901 	add.w	r9, r3, #1
 80113d0:	9306      	str	r3, [sp, #24]
 80113d2:	464b      	mov	r3, r9
 80113d4:	2b01      	cmp	r3, #1
 80113d6:	bfb8      	it	lt
 80113d8:	2301      	movlt	r3, #1
 80113da:	e7ba      	b.n	8011352 <_dtoa_r+0x232>
 80113dc:	2300      	movs	r3, #0
 80113de:	e7b2      	b.n	8011346 <_dtoa_r+0x226>
 80113e0:	2300      	movs	r3, #0
 80113e2:	e7f0      	b.n	80113c6 <_dtoa_r+0x2a6>
 80113e4:	2501      	movs	r5, #1
 80113e6:	2300      	movs	r3, #0
 80113e8:	e9cd 3508 	strd	r3, r5, [sp, #32]
 80113ec:	f04f 33ff 	mov.w	r3, #4294967295
 80113f0:	9306      	str	r3, [sp, #24]
 80113f2:	4699      	mov	r9, r3
 80113f4:	2200      	movs	r2, #0
 80113f6:	2312      	movs	r3, #18
 80113f8:	920a      	str	r2, [sp, #40]	; 0x28
 80113fa:	e7aa      	b.n	8011352 <_dtoa_r+0x232>
 80113fc:	2301      	movs	r3, #1
 80113fe:	9309      	str	r3, [sp, #36]	; 0x24
 8011400:	e7f4      	b.n	80113ec <_dtoa_r+0x2cc>
 8011402:	2301      	movs	r3, #1
 8011404:	9306      	str	r3, [sp, #24]
 8011406:	4699      	mov	r9, r3
 8011408:	461a      	mov	r2, r3
 801140a:	e7f5      	b.n	80113f8 <_dtoa_r+0x2d8>
 801140c:	3101      	adds	r1, #1
 801140e:	6071      	str	r1, [r6, #4]
 8011410:	0052      	lsls	r2, r2, #1
 8011412:	e7a2      	b.n	801135a <_dtoa_r+0x23a>
 8011414:	f3af 8000 	nop.w
 8011418:	636f4361 	.word	0x636f4361
 801141c:	3fd287a7 	.word	0x3fd287a7
 8011420:	8b60c8b3 	.word	0x8b60c8b3
 8011424:	3fc68a28 	.word	0x3fc68a28
 8011428:	509f79fb 	.word	0x509f79fb
 801142c:	3fd34413 	.word	0x3fd34413
 8011430:	7ff00000 	.word	0x7ff00000
 8011434:	080135f9 	.word	0x080135f9
 8011438:	080135f0 	.word	0x080135f0
 801143c:	08013575 	.word	0x08013575
 8011440:	08013630 	.word	0x08013630
 8011444:	08013608 	.word	0x08013608
 8011448:	07de      	lsls	r6, r3, #31
 801144a:	d504      	bpl.n	8011456 <_dtoa_r+0x336>
 801144c:	ed91 6b00 	vldr	d6, [r1]
 8011450:	3201      	adds	r2, #1
 8011452:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011456:	105b      	asrs	r3, r3, #1
 8011458:	3108      	adds	r1, #8
 801145a:	2b00      	cmp	r3, #0
 801145c:	d1f4      	bne.n	8011448 <_dtoa_r+0x328>
 801145e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8011462:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8011466:	ed8d 7b02 	vstr	d7, [sp, #8]
 801146a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801146c:	2b00      	cmp	r3, #0
 801146e:	f000 80a7 	beq.w	80115c0 <_dtoa_r+0x4a0>
 8011472:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8011476:	ed9d 7b02 	vldr	d7, [sp, #8]
 801147a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801147e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011482:	f140 809d 	bpl.w	80115c0 <_dtoa_r+0x4a0>
 8011486:	f1b9 0f00 	cmp.w	r9, #0
 801148a:	f000 8099 	beq.w	80115c0 <_dtoa_r+0x4a0>
 801148e:	9b06      	ldr	r3, [sp, #24]
 8011490:	2b00      	cmp	r3, #0
 8011492:	dd30      	ble.n	80114f6 <_dtoa_r+0x3d6>
 8011494:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8011498:	ee27 7b06 	vmul.f64	d7, d7, d6
 801149c:	ed8d 7b02 	vstr	d7, [sp, #8]
 80114a0:	9d06      	ldr	r5, [sp, #24]
 80114a2:	f10b 33ff 	add.w	r3, fp, #4294967295
 80114a6:	3201      	adds	r2, #1
 80114a8:	ed9d 6b02 	vldr	d6, [sp, #8]
 80114ac:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80114b0:	ee07 2a90 	vmov	s15, r2
 80114b4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80114b8:	eea7 5b06 	vfma.f64	d5, d7, d6
 80114bc:	ed8d 5b02 	vstr	d5, [sp, #8]
 80114c0:	9a03      	ldr	r2, [sp, #12]
 80114c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80114c6:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 80114ca:	2d00      	cmp	r5, #0
 80114cc:	d17b      	bne.n	80115c6 <_dtoa_r+0x4a6>
 80114ce:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80114d2:	ee36 6b47 	vsub.f64	d6, d6, d7
 80114d6:	ec41 0b17 	vmov	d7, r0, r1
 80114da:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80114de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114e2:	f300 8253 	bgt.w	801198c <_dtoa_r+0x86c>
 80114e6:	eeb1 7b47 	vneg.f64	d7, d7
 80114ea:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80114ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114f2:	f100 8249 	bmi.w	8011988 <_dtoa_r+0x868>
 80114f6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80114fa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80114fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011500:	2b00      	cmp	r3, #0
 8011502:	f2c0 8119 	blt.w	8011738 <_dtoa_r+0x618>
 8011506:	f1bb 0f0e 	cmp.w	fp, #14
 801150a:	f300 8115 	bgt.w	8011738 <_dtoa_r+0x618>
 801150e:	4bc3      	ldr	r3, [pc, #780]	; (801181c <_dtoa_r+0x6fc>)
 8011510:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8011514:	ed93 6b00 	vldr	d6, [r3]
 8011518:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801151a:	2b00      	cmp	r3, #0
 801151c:	f280 80ba 	bge.w	8011694 <_dtoa_r+0x574>
 8011520:	f1b9 0f00 	cmp.w	r9, #0
 8011524:	f300 80b6 	bgt.w	8011694 <_dtoa_r+0x574>
 8011528:	f040 822d 	bne.w	8011986 <_dtoa_r+0x866>
 801152c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8011530:	ee26 6b07 	vmul.f64	d6, d6, d7
 8011534:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011538:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801153c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011540:	464d      	mov	r5, r9
 8011542:	464f      	mov	r7, r9
 8011544:	f280 8204 	bge.w	8011950 <_dtoa_r+0x830>
 8011548:	9b04      	ldr	r3, [sp, #16]
 801154a:	9a04      	ldr	r2, [sp, #16]
 801154c:	1c5e      	adds	r6, r3, #1
 801154e:	2331      	movs	r3, #49	; 0x31
 8011550:	7013      	strb	r3, [r2, #0]
 8011552:	f10b 0b01 	add.w	fp, fp, #1
 8011556:	e1ff      	b.n	8011958 <_dtoa_r+0x838>
 8011558:	2202      	movs	r2, #2
 801155a:	e731      	b.n	80113c0 <_dtoa_r+0x2a0>
 801155c:	d02e      	beq.n	80115bc <_dtoa_r+0x49c>
 801155e:	f1cb 0300 	rsb	r3, fp, #0
 8011562:	4aae      	ldr	r2, [pc, #696]	; (801181c <_dtoa_r+0x6fc>)
 8011564:	f003 010f 	and.w	r1, r3, #15
 8011568:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801156c:	ed92 7b00 	vldr	d7, [r2]
 8011570:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 8011574:	ee26 7b07 	vmul.f64	d7, d6, d7
 8011578:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801157c:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8011580:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8011584:	49a6      	ldr	r1, [pc, #664]	; (8011820 <_dtoa_r+0x700>)
 8011586:	111b      	asrs	r3, r3, #4
 8011588:	2000      	movs	r0, #0
 801158a:	2202      	movs	r2, #2
 801158c:	b93b      	cbnz	r3, 801159e <_dtoa_r+0x47e>
 801158e:	2800      	cmp	r0, #0
 8011590:	f43f af6b 	beq.w	801146a <_dtoa_r+0x34a>
 8011594:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011598:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801159c:	e765      	b.n	801146a <_dtoa_r+0x34a>
 801159e:	07dd      	lsls	r5, r3, #31
 80115a0:	d509      	bpl.n	80115b6 <_dtoa_r+0x496>
 80115a2:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 80115a6:	ed91 7b00 	vldr	d7, [r1]
 80115aa:	ee26 7b07 	vmul.f64	d7, d6, d7
 80115ae:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80115b2:	3201      	adds	r2, #1
 80115b4:	2001      	movs	r0, #1
 80115b6:	105b      	asrs	r3, r3, #1
 80115b8:	3108      	adds	r1, #8
 80115ba:	e7e7      	b.n	801158c <_dtoa_r+0x46c>
 80115bc:	2202      	movs	r2, #2
 80115be:	e754      	b.n	801146a <_dtoa_r+0x34a>
 80115c0:	465b      	mov	r3, fp
 80115c2:	464d      	mov	r5, r9
 80115c4:	e770      	b.n	80114a8 <_dtoa_r+0x388>
 80115c6:	4a95      	ldr	r2, [pc, #596]	; (801181c <_dtoa_r+0x6fc>)
 80115c8:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 80115cc:	ed12 4b02 	vldr	d4, [r2, #-8]
 80115d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80115d2:	ec41 0b17 	vmov	d7, r0, r1
 80115d6:	b35a      	cbz	r2, 8011630 <_dtoa_r+0x510>
 80115d8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80115dc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80115e0:	9e04      	ldr	r6, [sp, #16]
 80115e2:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80115e6:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80115ea:	ee35 7b47 	vsub.f64	d7, d5, d7
 80115ee:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80115f2:	ee14 2a90 	vmov	r2, s9
 80115f6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80115fa:	3230      	adds	r2, #48	; 0x30
 80115fc:	ee36 6b45 	vsub.f64	d6, d6, d5
 8011600:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011608:	f806 2b01 	strb.w	r2, [r6], #1
 801160c:	d43b      	bmi.n	8011686 <_dtoa_r+0x566>
 801160e:	ee32 5b46 	vsub.f64	d5, d2, d6
 8011612:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8011616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801161a:	d472      	bmi.n	8011702 <_dtoa_r+0x5e2>
 801161c:	9a04      	ldr	r2, [sp, #16]
 801161e:	1ab2      	subs	r2, r6, r2
 8011620:	4295      	cmp	r5, r2
 8011622:	f77f af68 	ble.w	80114f6 <_dtoa_r+0x3d6>
 8011626:	ee27 7b03 	vmul.f64	d7, d7, d3
 801162a:	ee26 6b03 	vmul.f64	d6, d6, d3
 801162e:	e7de      	b.n	80115ee <_dtoa_r+0x4ce>
 8011630:	9a04      	ldr	r2, [sp, #16]
 8011632:	ee24 7b07 	vmul.f64	d7, d4, d7
 8011636:	1956      	adds	r6, r2, r5
 8011638:	4611      	mov	r1, r2
 801163a:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801163e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8011642:	ee14 2a90 	vmov	r2, s9
 8011646:	3230      	adds	r2, #48	; 0x30
 8011648:	f801 2b01 	strb.w	r2, [r1], #1
 801164c:	42b1      	cmp	r1, r6
 801164e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8011652:	ee36 6b45 	vsub.f64	d6, d6, d5
 8011656:	d11a      	bne.n	801168e <_dtoa_r+0x56e>
 8011658:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801165c:	ee37 4b05 	vadd.f64	d4, d7, d5
 8011660:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8011664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011668:	dc4b      	bgt.n	8011702 <_dtoa_r+0x5e2>
 801166a:	ee35 7b47 	vsub.f64	d7, d5, d7
 801166e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011676:	f57f af3e 	bpl.w	80114f6 <_dtoa_r+0x3d6>
 801167a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801167e:	2a30      	cmp	r2, #48	; 0x30
 8011680:	f106 31ff 	add.w	r1, r6, #4294967295
 8011684:	d001      	beq.n	801168a <_dtoa_r+0x56a>
 8011686:	469b      	mov	fp, r3
 8011688:	e02a      	b.n	80116e0 <_dtoa_r+0x5c0>
 801168a:	460e      	mov	r6, r1
 801168c:	e7f5      	b.n	801167a <_dtoa_r+0x55a>
 801168e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8011692:	e7d4      	b.n	801163e <_dtoa_r+0x51e>
 8011694:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011698:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801169c:	9e04      	ldr	r6, [sp, #16]
 801169e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80116a2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80116a6:	ee15 3a10 	vmov	r3, s10
 80116aa:	3330      	adds	r3, #48	; 0x30
 80116ac:	f806 3b01 	strb.w	r3, [r6], #1
 80116b0:	9b04      	ldr	r3, [sp, #16]
 80116b2:	1af3      	subs	r3, r6, r3
 80116b4:	4599      	cmp	r9, r3
 80116b6:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80116ba:	eea3 7b46 	vfms.f64	d7, d3, d6
 80116be:	d133      	bne.n	8011728 <_dtoa_r+0x608>
 80116c0:	ee37 7b07 	vadd.f64	d7, d7, d7
 80116c4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80116c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116cc:	dc18      	bgt.n	8011700 <_dtoa_r+0x5e0>
 80116ce:	eeb4 7b46 	vcmp.f64	d7, d6
 80116d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116d6:	d103      	bne.n	80116e0 <_dtoa_r+0x5c0>
 80116d8:	ee15 3a10 	vmov	r3, s10
 80116dc:	07db      	lsls	r3, r3, #31
 80116de:	d40f      	bmi.n	8011700 <_dtoa_r+0x5e0>
 80116e0:	9901      	ldr	r1, [sp, #4]
 80116e2:	4620      	mov	r0, r4
 80116e4:	f000 fdf0 	bl	80122c8 <_Bfree>
 80116e8:	2300      	movs	r3, #0
 80116ea:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80116ec:	7033      	strb	r3, [r6, #0]
 80116ee:	f10b 0301 	add.w	r3, fp, #1
 80116f2:	6013      	str	r3, [r2, #0]
 80116f4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	f43f ad5b 	beq.w	80111b2 <_dtoa_r+0x92>
 80116fc:	601e      	str	r6, [r3, #0]
 80116fe:	e558      	b.n	80111b2 <_dtoa_r+0x92>
 8011700:	465b      	mov	r3, fp
 8011702:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8011706:	2939      	cmp	r1, #57	; 0x39
 8011708:	f106 32ff 	add.w	r2, r6, #4294967295
 801170c:	d106      	bne.n	801171c <_dtoa_r+0x5fc>
 801170e:	9904      	ldr	r1, [sp, #16]
 8011710:	4291      	cmp	r1, r2
 8011712:	d107      	bne.n	8011724 <_dtoa_r+0x604>
 8011714:	2230      	movs	r2, #48	; 0x30
 8011716:	700a      	strb	r2, [r1, #0]
 8011718:	3301      	adds	r3, #1
 801171a:	460a      	mov	r2, r1
 801171c:	7811      	ldrb	r1, [r2, #0]
 801171e:	3101      	adds	r1, #1
 8011720:	7011      	strb	r1, [r2, #0]
 8011722:	e7b0      	b.n	8011686 <_dtoa_r+0x566>
 8011724:	4616      	mov	r6, r2
 8011726:	e7ec      	b.n	8011702 <_dtoa_r+0x5e2>
 8011728:	ee27 7b04 	vmul.f64	d7, d7, d4
 801172c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011734:	d1b3      	bne.n	801169e <_dtoa_r+0x57e>
 8011736:	e7d3      	b.n	80116e0 <_dtoa_r+0x5c0>
 8011738:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801173a:	2a00      	cmp	r2, #0
 801173c:	f000 808d 	beq.w	801185a <_dtoa_r+0x73a>
 8011740:	9a08      	ldr	r2, [sp, #32]
 8011742:	2a01      	cmp	r2, #1
 8011744:	dc72      	bgt.n	801182c <_dtoa_r+0x70c>
 8011746:	2f00      	cmp	r7, #0
 8011748:	d06c      	beq.n	8011824 <_dtoa_r+0x704>
 801174a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801174e:	4645      	mov	r5, r8
 8011750:	4656      	mov	r6, sl
 8011752:	9a07      	ldr	r2, [sp, #28]
 8011754:	2101      	movs	r1, #1
 8011756:	441a      	add	r2, r3
 8011758:	4620      	mov	r0, r4
 801175a:	449a      	add	sl, r3
 801175c:	9207      	str	r2, [sp, #28]
 801175e:	f000 fe91 	bl	8012484 <__i2b>
 8011762:	4607      	mov	r7, r0
 8011764:	2e00      	cmp	r6, #0
 8011766:	dd0b      	ble.n	8011780 <_dtoa_r+0x660>
 8011768:	9b07      	ldr	r3, [sp, #28]
 801176a:	2b00      	cmp	r3, #0
 801176c:	dd08      	ble.n	8011780 <_dtoa_r+0x660>
 801176e:	42b3      	cmp	r3, r6
 8011770:	9a07      	ldr	r2, [sp, #28]
 8011772:	bfa8      	it	ge
 8011774:	4633      	movge	r3, r6
 8011776:	ebaa 0a03 	sub.w	sl, sl, r3
 801177a:	1af6      	subs	r6, r6, r3
 801177c:	1ad3      	subs	r3, r2, r3
 801177e:	9307      	str	r3, [sp, #28]
 8011780:	f1b8 0f00 	cmp.w	r8, #0
 8011784:	d01d      	beq.n	80117c2 <_dtoa_r+0x6a2>
 8011786:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011788:	2b00      	cmp	r3, #0
 801178a:	d06a      	beq.n	8011862 <_dtoa_r+0x742>
 801178c:	b18d      	cbz	r5, 80117b2 <_dtoa_r+0x692>
 801178e:	4639      	mov	r1, r7
 8011790:	462a      	mov	r2, r5
 8011792:	4620      	mov	r0, r4
 8011794:	f000 ff16 	bl	80125c4 <__pow5mult>
 8011798:	9a01      	ldr	r2, [sp, #4]
 801179a:	4601      	mov	r1, r0
 801179c:	4607      	mov	r7, r0
 801179e:	4620      	mov	r0, r4
 80117a0:	f000 fe79 	bl	8012496 <__multiply>
 80117a4:	9901      	ldr	r1, [sp, #4]
 80117a6:	900c      	str	r0, [sp, #48]	; 0x30
 80117a8:	4620      	mov	r0, r4
 80117aa:	f000 fd8d 	bl	80122c8 <_Bfree>
 80117ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80117b0:	9301      	str	r3, [sp, #4]
 80117b2:	ebb8 0205 	subs.w	r2, r8, r5
 80117b6:	d004      	beq.n	80117c2 <_dtoa_r+0x6a2>
 80117b8:	9901      	ldr	r1, [sp, #4]
 80117ba:	4620      	mov	r0, r4
 80117bc:	f000 ff02 	bl	80125c4 <__pow5mult>
 80117c0:	9001      	str	r0, [sp, #4]
 80117c2:	2101      	movs	r1, #1
 80117c4:	4620      	mov	r0, r4
 80117c6:	f000 fe5d 	bl	8012484 <__i2b>
 80117ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80117cc:	4605      	mov	r5, r0
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	f000 81ca 	beq.w	8011b68 <_dtoa_r+0xa48>
 80117d4:	461a      	mov	r2, r3
 80117d6:	4601      	mov	r1, r0
 80117d8:	4620      	mov	r0, r4
 80117da:	f000 fef3 	bl	80125c4 <__pow5mult>
 80117de:	9b08      	ldr	r3, [sp, #32]
 80117e0:	2b01      	cmp	r3, #1
 80117e2:	4605      	mov	r5, r0
 80117e4:	dc44      	bgt.n	8011870 <_dtoa_r+0x750>
 80117e6:	9b02      	ldr	r3, [sp, #8]
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d13c      	bne.n	8011866 <_dtoa_r+0x746>
 80117ec:	9b03      	ldr	r3, [sp, #12]
 80117ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d137      	bne.n	8011866 <_dtoa_r+0x746>
 80117f6:	9b03      	ldr	r3, [sp, #12]
 80117f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80117fc:	0d1b      	lsrs	r3, r3, #20
 80117fe:	051b      	lsls	r3, r3, #20
 8011800:	2b00      	cmp	r3, #0
 8011802:	d033      	beq.n	801186c <_dtoa_r+0x74c>
 8011804:	9b07      	ldr	r3, [sp, #28]
 8011806:	3301      	adds	r3, #1
 8011808:	f10a 0a01 	add.w	sl, sl, #1
 801180c:	9307      	str	r3, [sp, #28]
 801180e:	f04f 0801 	mov.w	r8, #1
 8011812:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011814:	bb73      	cbnz	r3, 8011874 <_dtoa_r+0x754>
 8011816:	2001      	movs	r0, #1
 8011818:	e034      	b.n	8011884 <_dtoa_r+0x764>
 801181a:	bf00      	nop
 801181c:	08013630 	.word	0x08013630
 8011820:	08013608 	.word	0x08013608
 8011824:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011826:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801182a:	e790      	b.n	801174e <_dtoa_r+0x62e>
 801182c:	f109 35ff 	add.w	r5, r9, #4294967295
 8011830:	45a8      	cmp	r8, r5
 8011832:	bfbf      	itttt	lt
 8011834:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8011836:	eba5 0808 	sublt.w	r8, r5, r8
 801183a:	4443      	addlt	r3, r8
 801183c:	930b      	strlt	r3, [sp, #44]	; 0x2c
 801183e:	bfb6      	itet	lt
 8011840:	46a8      	movlt	r8, r5
 8011842:	eba8 0505 	subge.w	r5, r8, r5
 8011846:	2500      	movlt	r5, #0
 8011848:	f1b9 0f00 	cmp.w	r9, #0
 801184c:	bfb9      	ittee	lt
 801184e:	ebaa 0609 	sublt.w	r6, sl, r9
 8011852:	2300      	movlt	r3, #0
 8011854:	4656      	movge	r6, sl
 8011856:	464b      	movge	r3, r9
 8011858:	e77b      	b.n	8011752 <_dtoa_r+0x632>
 801185a:	4645      	mov	r5, r8
 801185c:	4656      	mov	r6, sl
 801185e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8011860:	e780      	b.n	8011764 <_dtoa_r+0x644>
 8011862:	4642      	mov	r2, r8
 8011864:	e7a8      	b.n	80117b8 <_dtoa_r+0x698>
 8011866:	f04f 0800 	mov.w	r8, #0
 801186a:	e7d2      	b.n	8011812 <_dtoa_r+0x6f2>
 801186c:	4698      	mov	r8, r3
 801186e:	e7d0      	b.n	8011812 <_dtoa_r+0x6f2>
 8011870:	f04f 0800 	mov.w	r8, #0
 8011874:	692b      	ldr	r3, [r5, #16]
 8011876:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801187a:	6918      	ldr	r0, [r3, #16]
 801187c:	f000 fdb4 	bl	80123e8 <__hi0bits>
 8011880:	f1c0 0020 	rsb	r0, r0, #32
 8011884:	9b07      	ldr	r3, [sp, #28]
 8011886:	4418      	add	r0, r3
 8011888:	f010 001f 	ands.w	r0, r0, #31
 801188c:	d047      	beq.n	801191e <_dtoa_r+0x7fe>
 801188e:	f1c0 0320 	rsb	r3, r0, #32
 8011892:	2b04      	cmp	r3, #4
 8011894:	dd3b      	ble.n	801190e <_dtoa_r+0x7ee>
 8011896:	9b07      	ldr	r3, [sp, #28]
 8011898:	f1c0 001c 	rsb	r0, r0, #28
 801189c:	4482      	add	sl, r0
 801189e:	4406      	add	r6, r0
 80118a0:	4403      	add	r3, r0
 80118a2:	9307      	str	r3, [sp, #28]
 80118a4:	f1ba 0f00 	cmp.w	sl, #0
 80118a8:	dd05      	ble.n	80118b6 <_dtoa_r+0x796>
 80118aa:	4652      	mov	r2, sl
 80118ac:	9901      	ldr	r1, [sp, #4]
 80118ae:	4620      	mov	r0, r4
 80118b0:	f000 fed6 	bl	8012660 <__lshift>
 80118b4:	9001      	str	r0, [sp, #4]
 80118b6:	9b07      	ldr	r3, [sp, #28]
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	dd05      	ble.n	80118c8 <_dtoa_r+0x7a8>
 80118bc:	4629      	mov	r1, r5
 80118be:	461a      	mov	r2, r3
 80118c0:	4620      	mov	r0, r4
 80118c2:	f000 fecd 	bl	8012660 <__lshift>
 80118c6:	4605      	mov	r5, r0
 80118c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80118ca:	b353      	cbz	r3, 8011922 <_dtoa_r+0x802>
 80118cc:	4629      	mov	r1, r5
 80118ce:	9801      	ldr	r0, [sp, #4]
 80118d0:	f000 ff1a 	bl	8012708 <__mcmp>
 80118d4:	2800      	cmp	r0, #0
 80118d6:	da24      	bge.n	8011922 <_dtoa_r+0x802>
 80118d8:	2300      	movs	r3, #0
 80118da:	220a      	movs	r2, #10
 80118dc:	9901      	ldr	r1, [sp, #4]
 80118de:	4620      	mov	r0, r4
 80118e0:	f000 fd09 	bl	80122f6 <__multadd>
 80118e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80118e6:	9001      	str	r0, [sp, #4]
 80118e8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	f000 8142 	beq.w	8011b76 <_dtoa_r+0xa56>
 80118f2:	2300      	movs	r3, #0
 80118f4:	4639      	mov	r1, r7
 80118f6:	220a      	movs	r2, #10
 80118f8:	4620      	mov	r0, r4
 80118fa:	f000 fcfc 	bl	80122f6 <__multadd>
 80118fe:	9b06      	ldr	r3, [sp, #24]
 8011900:	2b00      	cmp	r3, #0
 8011902:	4607      	mov	r7, r0
 8011904:	dc4b      	bgt.n	801199e <_dtoa_r+0x87e>
 8011906:	9b08      	ldr	r3, [sp, #32]
 8011908:	2b02      	cmp	r3, #2
 801190a:	dd48      	ble.n	801199e <_dtoa_r+0x87e>
 801190c:	e011      	b.n	8011932 <_dtoa_r+0x812>
 801190e:	d0c9      	beq.n	80118a4 <_dtoa_r+0x784>
 8011910:	9a07      	ldr	r2, [sp, #28]
 8011912:	331c      	adds	r3, #28
 8011914:	441a      	add	r2, r3
 8011916:	449a      	add	sl, r3
 8011918:	441e      	add	r6, r3
 801191a:	4613      	mov	r3, r2
 801191c:	e7c1      	b.n	80118a2 <_dtoa_r+0x782>
 801191e:	4603      	mov	r3, r0
 8011920:	e7f6      	b.n	8011910 <_dtoa_r+0x7f0>
 8011922:	f1b9 0f00 	cmp.w	r9, #0
 8011926:	dc34      	bgt.n	8011992 <_dtoa_r+0x872>
 8011928:	9b08      	ldr	r3, [sp, #32]
 801192a:	2b02      	cmp	r3, #2
 801192c:	dd31      	ble.n	8011992 <_dtoa_r+0x872>
 801192e:	f8cd 9018 	str.w	r9, [sp, #24]
 8011932:	9b06      	ldr	r3, [sp, #24]
 8011934:	b963      	cbnz	r3, 8011950 <_dtoa_r+0x830>
 8011936:	4629      	mov	r1, r5
 8011938:	2205      	movs	r2, #5
 801193a:	4620      	mov	r0, r4
 801193c:	f000 fcdb 	bl	80122f6 <__multadd>
 8011940:	4601      	mov	r1, r0
 8011942:	4605      	mov	r5, r0
 8011944:	9801      	ldr	r0, [sp, #4]
 8011946:	f000 fedf 	bl	8012708 <__mcmp>
 801194a:	2800      	cmp	r0, #0
 801194c:	f73f adfc 	bgt.w	8011548 <_dtoa_r+0x428>
 8011950:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011952:	9e04      	ldr	r6, [sp, #16]
 8011954:	ea6f 0b03 	mvn.w	fp, r3
 8011958:	f04f 0900 	mov.w	r9, #0
 801195c:	4629      	mov	r1, r5
 801195e:	4620      	mov	r0, r4
 8011960:	f000 fcb2 	bl	80122c8 <_Bfree>
 8011964:	2f00      	cmp	r7, #0
 8011966:	f43f aebb 	beq.w	80116e0 <_dtoa_r+0x5c0>
 801196a:	f1b9 0f00 	cmp.w	r9, #0
 801196e:	d005      	beq.n	801197c <_dtoa_r+0x85c>
 8011970:	45b9      	cmp	r9, r7
 8011972:	d003      	beq.n	801197c <_dtoa_r+0x85c>
 8011974:	4649      	mov	r1, r9
 8011976:	4620      	mov	r0, r4
 8011978:	f000 fca6 	bl	80122c8 <_Bfree>
 801197c:	4639      	mov	r1, r7
 801197e:	4620      	mov	r0, r4
 8011980:	f000 fca2 	bl	80122c8 <_Bfree>
 8011984:	e6ac      	b.n	80116e0 <_dtoa_r+0x5c0>
 8011986:	2500      	movs	r5, #0
 8011988:	462f      	mov	r7, r5
 801198a:	e7e1      	b.n	8011950 <_dtoa_r+0x830>
 801198c:	469b      	mov	fp, r3
 801198e:	462f      	mov	r7, r5
 8011990:	e5da      	b.n	8011548 <_dtoa_r+0x428>
 8011992:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011994:	f8cd 9018 	str.w	r9, [sp, #24]
 8011998:	2b00      	cmp	r3, #0
 801199a:	f000 80f3 	beq.w	8011b84 <_dtoa_r+0xa64>
 801199e:	2e00      	cmp	r6, #0
 80119a0:	dd05      	ble.n	80119ae <_dtoa_r+0x88e>
 80119a2:	4639      	mov	r1, r7
 80119a4:	4632      	mov	r2, r6
 80119a6:	4620      	mov	r0, r4
 80119a8:	f000 fe5a 	bl	8012660 <__lshift>
 80119ac:	4607      	mov	r7, r0
 80119ae:	f1b8 0f00 	cmp.w	r8, #0
 80119b2:	d04c      	beq.n	8011a4e <_dtoa_r+0x92e>
 80119b4:	6879      	ldr	r1, [r7, #4]
 80119b6:	4620      	mov	r0, r4
 80119b8:	f000 fc52 	bl	8012260 <_Balloc>
 80119bc:	693a      	ldr	r2, [r7, #16]
 80119be:	3202      	adds	r2, #2
 80119c0:	4606      	mov	r6, r0
 80119c2:	0092      	lsls	r2, r2, #2
 80119c4:	f107 010c 	add.w	r1, r7, #12
 80119c8:	300c      	adds	r0, #12
 80119ca:	f7fd fe1f 	bl	800f60c <memcpy>
 80119ce:	2201      	movs	r2, #1
 80119d0:	4631      	mov	r1, r6
 80119d2:	4620      	mov	r0, r4
 80119d4:	f000 fe44 	bl	8012660 <__lshift>
 80119d8:	9b02      	ldr	r3, [sp, #8]
 80119da:	f8dd a010 	ldr.w	sl, [sp, #16]
 80119de:	f003 0301 	and.w	r3, r3, #1
 80119e2:	46b9      	mov	r9, r7
 80119e4:	9307      	str	r3, [sp, #28]
 80119e6:	4607      	mov	r7, r0
 80119e8:	4629      	mov	r1, r5
 80119ea:	9801      	ldr	r0, [sp, #4]
 80119ec:	f7ff fb0a 	bl	8011004 <quorem>
 80119f0:	4649      	mov	r1, r9
 80119f2:	4606      	mov	r6, r0
 80119f4:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80119f8:	9801      	ldr	r0, [sp, #4]
 80119fa:	f000 fe85 	bl	8012708 <__mcmp>
 80119fe:	463a      	mov	r2, r7
 8011a00:	9002      	str	r0, [sp, #8]
 8011a02:	4629      	mov	r1, r5
 8011a04:	4620      	mov	r0, r4
 8011a06:	f000 fe99 	bl	801273c <__mdiff>
 8011a0a:	68c3      	ldr	r3, [r0, #12]
 8011a0c:	4602      	mov	r2, r0
 8011a0e:	bb03      	cbnz	r3, 8011a52 <_dtoa_r+0x932>
 8011a10:	4601      	mov	r1, r0
 8011a12:	9009      	str	r0, [sp, #36]	; 0x24
 8011a14:	9801      	ldr	r0, [sp, #4]
 8011a16:	f000 fe77 	bl	8012708 <__mcmp>
 8011a1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011a1c:	4603      	mov	r3, r0
 8011a1e:	4611      	mov	r1, r2
 8011a20:	4620      	mov	r0, r4
 8011a22:	9309      	str	r3, [sp, #36]	; 0x24
 8011a24:	f000 fc50 	bl	80122c8 <_Bfree>
 8011a28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a2a:	b9a3      	cbnz	r3, 8011a56 <_dtoa_r+0x936>
 8011a2c:	9a08      	ldr	r2, [sp, #32]
 8011a2e:	b992      	cbnz	r2, 8011a56 <_dtoa_r+0x936>
 8011a30:	9a07      	ldr	r2, [sp, #28]
 8011a32:	b982      	cbnz	r2, 8011a56 <_dtoa_r+0x936>
 8011a34:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8011a38:	d029      	beq.n	8011a8e <_dtoa_r+0x96e>
 8011a3a:	9b02      	ldr	r3, [sp, #8]
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	dd01      	ble.n	8011a44 <_dtoa_r+0x924>
 8011a40:	f106 0831 	add.w	r8, r6, #49	; 0x31
 8011a44:	f10a 0601 	add.w	r6, sl, #1
 8011a48:	f88a 8000 	strb.w	r8, [sl]
 8011a4c:	e786      	b.n	801195c <_dtoa_r+0x83c>
 8011a4e:	4638      	mov	r0, r7
 8011a50:	e7c2      	b.n	80119d8 <_dtoa_r+0x8b8>
 8011a52:	2301      	movs	r3, #1
 8011a54:	e7e3      	b.n	8011a1e <_dtoa_r+0x8fe>
 8011a56:	9a02      	ldr	r2, [sp, #8]
 8011a58:	2a00      	cmp	r2, #0
 8011a5a:	db04      	blt.n	8011a66 <_dtoa_r+0x946>
 8011a5c:	d124      	bne.n	8011aa8 <_dtoa_r+0x988>
 8011a5e:	9a08      	ldr	r2, [sp, #32]
 8011a60:	bb12      	cbnz	r2, 8011aa8 <_dtoa_r+0x988>
 8011a62:	9a07      	ldr	r2, [sp, #28]
 8011a64:	bb02      	cbnz	r2, 8011aa8 <_dtoa_r+0x988>
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	ddec      	ble.n	8011a44 <_dtoa_r+0x924>
 8011a6a:	2201      	movs	r2, #1
 8011a6c:	9901      	ldr	r1, [sp, #4]
 8011a6e:	4620      	mov	r0, r4
 8011a70:	f000 fdf6 	bl	8012660 <__lshift>
 8011a74:	4629      	mov	r1, r5
 8011a76:	9001      	str	r0, [sp, #4]
 8011a78:	f000 fe46 	bl	8012708 <__mcmp>
 8011a7c:	2800      	cmp	r0, #0
 8011a7e:	dc03      	bgt.n	8011a88 <_dtoa_r+0x968>
 8011a80:	d1e0      	bne.n	8011a44 <_dtoa_r+0x924>
 8011a82:	f018 0f01 	tst.w	r8, #1
 8011a86:	d0dd      	beq.n	8011a44 <_dtoa_r+0x924>
 8011a88:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8011a8c:	d1d8      	bne.n	8011a40 <_dtoa_r+0x920>
 8011a8e:	2339      	movs	r3, #57	; 0x39
 8011a90:	f10a 0601 	add.w	r6, sl, #1
 8011a94:	f88a 3000 	strb.w	r3, [sl]
 8011a98:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011a9c:	2b39      	cmp	r3, #57	; 0x39
 8011a9e:	f106 32ff 	add.w	r2, r6, #4294967295
 8011aa2:	d04c      	beq.n	8011b3e <_dtoa_r+0xa1e>
 8011aa4:	3301      	adds	r3, #1
 8011aa6:	e051      	b.n	8011b4c <_dtoa_r+0xa2c>
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	f10a 0601 	add.w	r6, sl, #1
 8011aae:	dd05      	ble.n	8011abc <_dtoa_r+0x99c>
 8011ab0:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8011ab4:	d0eb      	beq.n	8011a8e <_dtoa_r+0x96e>
 8011ab6:	f108 0801 	add.w	r8, r8, #1
 8011aba:	e7c5      	b.n	8011a48 <_dtoa_r+0x928>
 8011abc:	9b04      	ldr	r3, [sp, #16]
 8011abe:	9a06      	ldr	r2, [sp, #24]
 8011ac0:	f806 8c01 	strb.w	r8, [r6, #-1]
 8011ac4:	1af3      	subs	r3, r6, r3
 8011ac6:	4293      	cmp	r3, r2
 8011ac8:	d021      	beq.n	8011b0e <_dtoa_r+0x9ee>
 8011aca:	2300      	movs	r3, #0
 8011acc:	220a      	movs	r2, #10
 8011ace:	9901      	ldr	r1, [sp, #4]
 8011ad0:	4620      	mov	r0, r4
 8011ad2:	f000 fc10 	bl	80122f6 <__multadd>
 8011ad6:	45b9      	cmp	r9, r7
 8011ad8:	9001      	str	r0, [sp, #4]
 8011ada:	f04f 0300 	mov.w	r3, #0
 8011ade:	f04f 020a 	mov.w	r2, #10
 8011ae2:	4649      	mov	r1, r9
 8011ae4:	4620      	mov	r0, r4
 8011ae6:	d105      	bne.n	8011af4 <_dtoa_r+0x9d4>
 8011ae8:	f000 fc05 	bl	80122f6 <__multadd>
 8011aec:	4681      	mov	r9, r0
 8011aee:	4607      	mov	r7, r0
 8011af0:	46b2      	mov	sl, r6
 8011af2:	e779      	b.n	80119e8 <_dtoa_r+0x8c8>
 8011af4:	f000 fbff 	bl	80122f6 <__multadd>
 8011af8:	4639      	mov	r1, r7
 8011afa:	4681      	mov	r9, r0
 8011afc:	2300      	movs	r3, #0
 8011afe:	220a      	movs	r2, #10
 8011b00:	4620      	mov	r0, r4
 8011b02:	f000 fbf8 	bl	80122f6 <__multadd>
 8011b06:	4607      	mov	r7, r0
 8011b08:	e7f2      	b.n	8011af0 <_dtoa_r+0x9d0>
 8011b0a:	f04f 0900 	mov.w	r9, #0
 8011b0e:	2201      	movs	r2, #1
 8011b10:	9901      	ldr	r1, [sp, #4]
 8011b12:	4620      	mov	r0, r4
 8011b14:	f000 fda4 	bl	8012660 <__lshift>
 8011b18:	4629      	mov	r1, r5
 8011b1a:	9001      	str	r0, [sp, #4]
 8011b1c:	f000 fdf4 	bl	8012708 <__mcmp>
 8011b20:	2800      	cmp	r0, #0
 8011b22:	dcb9      	bgt.n	8011a98 <_dtoa_r+0x978>
 8011b24:	d102      	bne.n	8011b2c <_dtoa_r+0xa0c>
 8011b26:	f018 0f01 	tst.w	r8, #1
 8011b2a:	d1b5      	bne.n	8011a98 <_dtoa_r+0x978>
 8011b2c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011b30:	2b30      	cmp	r3, #48	; 0x30
 8011b32:	f106 32ff 	add.w	r2, r6, #4294967295
 8011b36:	f47f af11 	bne.w	801195c <_dtoa_r+0x83c>
 8011b3a:	4616      	mov	r6, r2
 8011b3c:	e7f6      	b.n	8011b2c <_dtoa_r+0xa0c>
 8011b3e:	9b04      	ldr	r3, [sp, #16]
 8011b40:	4293      	cmp	r3, r2
 8011b42:	d105      	bne.n	8011b50 <_dtoa_r+0xa30>
 8011b44:	9a04      	ldr	r2, [sp, #16]
 8011b46:	f10b 0b01 	add.w	fp, fp, #1
 8011b4a:	2331      	movs	r3, #49	; 0x31
 8011b4c:	7013      	strb	r3, [r2, #0]
 8011b4e:	e705      	b.n	801195c <_dtoa_r+0x83c>
 8011b50:	4616      	mov	r6, r2
 8011b52:	e7a1      	b.n	8011a98 <_dtoa_r+0x978>
 8011b54:	4b16      	ldr	r3, [pc, #88]	; (8011bb0 <_dtoa_r+0xa90>)
 8011b56:	f7ff bb48 	b.w	80111ea <_dtoa_r+0xca>
 8011b5a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	f47f ab23 	bne.w	80111a8 <_dtoa_r+0x88>
 8011b62:	4b14      	ldr	r3, [pc, #80]	; (8011bb4 <_dtoa_r+0xa94>)
 8011b64:	f7ff bb41 	b.w	80111ea <_dtoa_r+0xca>
 8011b68:	9b08      	ldr	r3, [sp, #32]
 8011b6a:	2b01      	cmp	r3, #1
 8011b6c:	f77f ae3b 	ble.w	80117e6 <_dtoa_r+0x6c6>
 8011b70:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8011b74:	e64f      	b.n	8011816 <_dtoa_r+0x6f6>
 8011b76:	9b06      	ldr	r3, [sp, #24]
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	dc03      	bgt.n	8011b84 <_dtoa_r+0xa64>
 8011b7c:	9b08      	ldr	r3, [sp, #32]
 8011b7e:	2b02      	cmp	r3, #2
 8011b80:	f73f aed7 	bgt.w	8011932 <_dtoa_r+0x812>
 8011b84:	9e04      	ldr	r6, [sp, #16]
 8011b86:	9801      	ldr	r0, [sp, #4]
 8011b88:	4629      	mov	r1, r5
 8011b8a:	f7ff fa3b 	bl	8011004 <quorem>
 8011b8e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8011b92:	f806 8b01 	strb.w	r8, [r6], #1
 8011b96:	9b04      	ldr	r3, [sp, #16]
 8011b98:	9a06      	ldr	r2, [sp, #24]
 8011b9a:	1af3      	subs	r3, r6, r3
 8011b9c:	429a      	cmp	r2, r3
 8011b9e:	ddb4      	ble.n	8011b0a <_dtoa_r+0x9ea>
 8011ba0:	2300      	movs	r3, #0
 8011ba2:	220a      	movs	r2, #10
 8011ba4:	9901      	ldr	r1, [sp, #4]
 8011ba6:	4620      	mov	r0, r4
 8011ba8:	f000 fba5 	bl	80122f6 <__multadd>
 8011bac:	9001      	str	r0, [sp, #4]
 8011bae:	e7ea      	b.n	8011b86 <_dtoa_r+0xa66>
 8011bb0:	08013574 	.word	0x08013574
 8011bb4:	080135f0 	.word	0x080135f0

08011bb8 <rshift>:
 8011bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011bba:	6906      	ldr	r6, [r0, #16]
 8011bbc:	114b      	asrs	r3, r1, #5
 8011bbe:	429e      	cmp	r6, r3
 8011bc0:	f100 0414 	add.w	r4, r0, #20
 8011bc4:	dd30      	ble.n	8011c28 <rshift+0x70>
 8011bc6:	f011 011f 	ands.w	r1, r1, #31
 8011bca:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8011bce:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8011bd2:	d108      	bne.n	8011be6 <rshift+0x2e>
 8011bd4:	4621      	mov	r1, r4
 8011bd6:	42b2      	cmp	r2, r6
 8011bd8:	460b      	mov	r3, r1
 8011bda:	d211      	bcs.n	8011c00 <rshift+0x48>
 8011bdc:	f852 3b04 	ldr.w	r3, [r2], #4
 8011be0:	f841 3b04 	str.w	r3, [r1], #4
 8011be4:	e7f7      	b.n	8011bd6 <rshift+0x1e>
 8011be6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8011bea:	f1c1 0c20 	rsb	ip, r1, #32
 8011bee:	40cd      	lsrs	r5, r1
 8011bf0:	3204      	adds	r2, #4
 8011bf2:	4623      	mov	r3, r4
 8011bf4:	42b2      	cmp	r2, r6
 8011bf6:	4617      	mov	r7, r2
 8011bf8:	d30c      	bcc.n	8011c14 <rshift+0x5c>
 8011bfa:	601d      	str	r5, [r3, #0]
 8011bfc:	b105      	cbz	r5, 8011c00 <rshift+0x48>
 8011bfe:	3304      	adds	r3, #4
 8011c00:	1b1a      	subs	r2, r3, r4
 8011c02:	42a3      	cmp	r3, r4
 8011c04:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011c08:	bf08      	it	eq
 8011c0a:	2300      	moveq	r3, #0
 8011c0c:	6102      	str	r2, [r0, #16]
 8011c0e:	bf08      	it	eq
 8011c10:	6143      	streq	r3, [r0, #20]
 8011c12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c14:	683f      	ldr	r7, [r7, #0]
 8011c16:	fa07 f70c 	lsl.w	r7, r7, ip
 8011c1a:	433d      	orrs	r5, r7
 8011c1c:	f843 5b04 	str.w	r5, [r3], #4
 8011c20:	f852 5b04 	ldr.w	r5, [r2], #4
 8011c24:	40cd      	lsrs	r5, r1
 8011c26:	e7e5      	b.n	8011bf4 <rshift+0x3c>
 8011c28:	4623      	mov	r3, r4
 8011c2a:	e7e9      	b.n	8011c00 <rshift+0x48>

08011c2c <__hexdig_fun>:
 8011c2c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8011c30:	2b09      	cmp	r3, #9
 8011c32:	d802      	bhi.n	8011c3a <__hexdig_fun+0xe>
 8011c34:	3820      	subs	r0, #32
 8011c36:	b2c0      	uxtb	r0, r0
 8011c38:	4770      	bx	lr
 8011c3a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8011c3e:	2b05      	cmp	r3, #5
 8011c40:	d801      	bhi.n	8011c46 <__hexdig_fun+0x1a>
 8011c42:	3847      	subs	r0, #71	; 0x47
 8011c44:	e7f7      	b.n	8011c36 <__hexdig_fun+0xa>
 8011c46:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8011c4a:	2b05      	cmp	r3, #5
 8011c4c:	d801      	bhi.n	8011c52 <__hexdig_fun+0x26>
 8011c4e:	3827      	subs	r0, #39	; 0x27
 8011c50:	e7f1      	b.n	8011c36 <__hexdig_fun+0xa>
 8011c52:	2000      	movs	r0, #0
 8011c54:	4770      	bx	lr

08011c56 <__gethex>:
 8011c56:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c5a:	b08b      	sub	sp, #44	; 0x2c
 8011c5c:	468a      	mov	sl, r1
 8011c5e:	9002      	str	r0, [sp, #8]
 8011c60:	9816      	ldr	r0, [sp, #88]	; 0x58
 8011c62:	9306      	str	r3, [sp, #24]
 8011c64:	4690      	mov	r8, r2
 8011c66:	f000 fad0 	bl	801220a <__localeconv_l>
 8011c6a:	6803      	ldr	r3, [r0, #0]
 8011c6c:	9303      	str	r3, [sp, #12]
 8011c6e:	4618      	mov	r0, r3
 8011c70:	f7ee faf0 	bl	8000254 <strlen>
 8011c74:	9b03      	ldr	r3, [sp, #12]
 8011c76:	9001      	str	r0, [sp, #4]
 8011c78:	4403      	add	r3, r0
 8011c7a:	f04f 0b00 	mov.w	fp, #0
 8011c7e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8011c82:	9307      	str	r3, [sp, #28]
 8011c84:	f8da 3000 	ldr.w	r3, [sl]
 8011c88:	3302      	adds	r3, #2
 8011c8a:	461f      	mov	r7, r3
 8011c8c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8011c90:	2830      	cmp	r0, #48	; 0x30
 8011c92:	d06c      	beq.n	8011d6e <__gethex+0x118>
 8011c94:	f7ff ffca 	bl	8011c2c <__hexdig_fun>
 8011c98:	4604      	mov	r4, r0
 8011c9a:	2800      	cmp	r0, #0
 8011c9c:	d16a      	bne.n	8011d74 <__gethex+0x11e>
 8011c9e:	9a01      	ldr	r2, [sp, #4]
 8011ca0:	9903      	ldr	r1, [sp, #12]
 8011ca2:	4638      	mov	r0, r7
 8011ca4:	f001 f8f4 	bl	8012e90 <strncmp>
 8011ca8:	2800      	cmp	r0, #0
 8011caa:	d166      	bne.n	8011d7a <__gethex+0x124>
 8011cac:	9b01      	ldr	r3, [sp, #4]
 8011cae:	5cf8      	ldrb	r0, [r7, r3]
 8011cb0:	18fe      	adds	r6, r7, r3
 8011cb2:	f7ff ffbb 	bl	8011c2c <__hexdig_fun>
 8011cb6:	2800      	cmp	r0, #0
 8011cb8:	d062      	beq.n	8011d80 <__gethex+0x12a>
 8011cba:	4633      	mov	r3, r6
 8011cbc:	7818      	ldrb	r0, [r3, #0]
 8011cbe:	2830      	cmp	r0, #48	; 0x30
 8011cc0:	461f      	mov	r7, r3
 8011cc2:	f103 0301 	add.w	r3, r3, #1
 8011cc6:	d0f9      	beq.n	8011cbc <__gethex+0x66>
 8011cc8:	f7ff ffb0 	bl	8011c2c <__hexdig_fun>
 8011ccc:	fab0 f580 	clz	r5, r0
 8011cd0:	096d      	lsrs	r5, r5, #5
 8011cd2:	4634      	mov	r4, r6
 8011cd4:	f04f 0b01 	mov.w	fp, #1
 8011cd8:	463a      	mov	r2, r7
 8011cda:	4616      	mov	r6, r2
 8011cdc:	3201      	adds	r2, #1
 8011cde:	7830      	ldrb	r0, [r6, #0]
 8011ce0:	f7ff ffa4 	bl	8011c2c <__hexdig_fun>
 8011ce4:	2800      	cmp	r0, #0
 8011ce6:	d1f8      	bne.n	8011cda <__gethex+0x84>
 8011ce8:	9a01      	ldr	r2, [sp, #4]
 8011cea:	9903      	ldr	r1, [sp, #12]
 8011cec:	4630      	mov	r0, r6
 8011cee:	f001 f8cf 	bl	8012e90 <strncmp>
 8011cf2:	b950      	cbnz	r0, 8011d0a <__gethex+0xb4>
 8011cf4:	b954      	cbnz	r4, 8011d0c <__gethex+0xb6>
 8011cf6:	9b01      	ldr	r3, [sp, #4]
 8011cf8:	18f4      	adds	r4, r6, r3
 8011cfa:	4622      	mov	r2, r4
 8011cfc:	4616      	mov	r6, r2
 8011cfe:	3201      	adds	r2, #1
 8011d00:	7830      	ldrb	r0, [r6, #0]
 8011d02:	f7ff ff93 	bl	8011c2c <__hexdig_fun>
 8011d06:	2800      	cmp	r0, #0
 8011d08:	d1f8      	bne.n	8011cfc <__gethex+0xa6>
 8011d0a:	b10c      	cbz	r4, 8011d10 <__gethex+0xba>
 8011d0c:	1ba4      	subs	r4, r4, r6
 8011d0e:	00a4      	lsls	r4, r4, #2
 8011d10:	7833      	ldrb	r3, [r6, #0]
 8011d12:	2b50      	cmp	r3, #80	; 0x50
 8011d14:	d001      	beq.n	8011d1a <__gethex+0xc4>
 8011d16:	2b70      	cmp	r3, #112	; 0x70
 8011d18:	d140      	bne.n	8011d9c <__gethex+0x146>
 8011d1a:	7873      	ldrb	r3, [r6, #1]
 8011d1c:	2b2b      	cmp	r3, #43	; 0x2b
 8011d1e:	d031      	beq.n	8011d84 <__gethex+0x12e>
 8011d20:	2b2d      	cmp	r3, #45	; 0x2d
 8011d22:	d033      	beq.n	8011d8c <__gethex+0x136>
 8011d24:	1c71      	adds	r1, r6, #1
 8011d26:	f04f 0900 	mov.w	r9, #0
 8011d2a:	7808      	ldrb	r0, [r1, #0]
 8011d2c:	f7ff ff7e 	bl	8011c2c <__hexdig_fun>
 8011d30:	1e43      	subs	r3, r0, #1
 8011d32:	b2db      	uxtb	r3, r3
 8011d34:	2b18      	cmp	r3, #24
 8011d36:	d831      	bhi.n	8011d9c <__gethex+0x146>
 8011d38:	f1a0 0210 	sub.w	r2, r0, #16
 8011d3c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011d40:	f7ff ff74 	bl	8011c2c <__hexdig_fun>
 8011d44:	1e43      	subs	r3, r0, #1
 8011d46:	b2db      	uxtb	r3, r3
 8011d48:	2b18      	cmp	r3, #24
 8011d4a:	d922      	bls.n	8011d92 <__gethex+0x13c>
 8011d4c:	f1b9 0f00 	cmp.w	r9, #0
 8011d50:	d000      	beq.n	8011d54 <__gethex+0xfe>
 8011d52:	4252      	negs	r2, r2
 8011d54:	4414      	add	r4, r2
 8011d56:	f8ca 1000 	str.w	r1, [sl]
 8011d5a:	b30d      	cbz	r5, 8011da0 <__gethex+0x14a>
 8011d5c:	f1bb 0f00 	cmp.w	fp, #0
 8011d60:	bf0c      	ite	eq
 8011d62:	2706      	moveq	r7, #6
 8011d64:	2700      	movne	r7, #0
 8011d66:	4638      	mov	r0, r7
 8011d68:	b00b      	add	sp, #44	; 0x2c
 8011d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d6e:	f10b 0b01 	add.w	fp, fp, #1
 8011d72:	e78a      	b.n	8011c8a <__gethex+0x34>
 8011d74:	2500      	movs	r5, #0
 8011d76:	462c      	mov	r4, r5
 8011d78:	e7ae      	b.n	8011cd8 <__gethex+0x82>
 8011d7a:	463e      	mov	r6, r7
 8011d7c:	2501      	movs	r5, #1
 8011d7e:	e7c7      	b.n	8011d10 <__gethex+0xba>
 8011d80:	4604      	mov	r4, r0
 8011d82:	e7fb      	b.n	8011d7c <__gethex+0x126>
 8011d84:	f04f 0900 	mov.w	r9, #0
 8011d88:	1cb1      	adds	r1, r6, #2
 8011d8a:	e7ce      	b.n	8011d2a <__gethex+0xd4>
 8011d8c:	f04f 0901 	mov.w	r9, #1
 8011d90:	e7fa      	b.n	8011d88 <__gethex+0x132>
 8011d92:	230a      	movs	r3, #10
 8011d94:	fb03 0202 	mla	r2, r3, r2, r0
 8011d98:	3a10      	subs	r2, #16
 8011d9a:	e7cf      	b.n	8011d3c <__gethex+0xe6>
 8011d9c:	4631      	mov	r1, r6
 8011d9e:	e7da      	b.n	8011d56 <__gethex+0x100>
 8011da0:	1bf3      	subs	r3, r6, r7
 8011da2:	3b01      	subs	r3, #1
 8011da4:	4629      	mov	r1, r5
 8011da6:	2b07      	cmp	r3, #7
 8011da8:	dc49      	bgt.n	8011e3e <__gethex+0x1e8>
 8011daa:	9802      	ldr	r0, [sp, #8]
 8011dac:	f000 fa58 	bl	8012260 <_Balloc>
 8011db0:	9b01      	ldr	r3, [sp, #4]
 8011db2:	f100 0914 	add.w	r9, r0, #20
 8011db6:	f04f 0b00 	mov.w	fp, #0
 8011dba:	f1c3 0301 	rsb	r3, r3, #1
 8011dbe:	4605      	mov	r5, r0
 8011dc0:	f8cd 9010 	str.w	r9, [sp, #16]
 8011dc4:	46da      	mov	sl, fp
 8011dc6:	9308      	str	r3, [sp, #32]
 8011dc8:	42b7      	cmp	r7, r6
 8011dca:	d33b      	bcc.n	8011e44 <__gethex+0x1ee>
 8011dcc:	9804      	ldr	r0, [sp, #16]
 8011dce:	f840 ab04 	str.w	sl, [r0], #4
 8011dd2:	eba0 0009 	sub.w	r0, r0, r9
 8011dd6:	1080      	asrs	r0, r0, #2
 8011dd8:	6128      	str	r0, [r5, #16]
 8011dda:	0147      	lsls	r7, r0, #5
 8011ddc:	4650      	mov	r0, sl
 8011dde:	f000 fb03 	bl	80123e8 <__hi0bits>
 8011de2:	f8d8 6000 	ldr.w	r6, [r8]
 8011de6:	1a3f      	subs	r7, r7, r0
 8011de8:	42b7      	cmp	r7, r6
 8011dea:	dd64      	ble.n	8011eb6 <__gethex+0x260>
 8011dec:	1bbf      	subs	r7, r7, r6
 8011dee:	4639      	mov	r1, r7
 8011df0:	4628      	mov	r0, r5
 8011df2:	f000 fe14 	bl	8012a1e <__any_on>
 8011df6:	4682      	mov	sl, r0
 8011df8:	b178      	cbz	r0, 8011e1a <__gethex+0x1c4>
 8011dfa:	1e7b      	subs	r3, r7, #1
 8011dfc:	1159      	asrs	r1, r3, #5
 8011dfe:	f003 021f 	and.w	r2, r3, #31
 8011e02:	f04f 0a01 	mov.w	sl, #1
 8011e06:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8011e0a:	fa0a f202 	lsl.w	r2, sl, r2
 8011e0e:	420a      	tst	r2, r1
 8011e10:	d003      	beq.n	8011e1a <__gethex+0x1c4>
 8011e12:	4553      	cmp	r3, sl
 8011e14:	dc46      	bgt.n	8011ea4 <__gethex+0x24e>
 8011e16:	f04f 0a02 	mov.w	sl, #2
 8011e1a:	4639      	mov	r1, r7
 8011e1c:	4628      	mov	r0, r5
 8011e1e:	f7ff fecb 	bl	8011bb8 <rshift>
 8011e22:	443c      	add	r4, r7
 8011e24:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011e28:	42a3      	cmp	r3, r4
 8011e2a:	da52      	bge.n	8011ed2 <__gethex+0x27c>
 8011e2c:	4629      	mov	r1, r5
 8011e2e:	9802      	ldr	r0, [sp, #8]
 8011e30:	f000 fa4a 	bl	80122c8 <_Bfree>
 8011e34:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011e36:	2300      	movs	r3, #0
 8011e38:	6013      	str	r3, [r2, #0]
 8011e3a:	27a3      	movs	r7, #163	; 0xa3
 8011e3c:	e793      	b.n	8011d66 <__gethex+0x110>
 8011e3e:	3101      	adds	r1, #1
 8011e40:	105b      	asrs	r3, r3, #1
 8011e42:	e7b0      	b.n	8011da6 <__gethex+0x150>
 8011e44:	1e73      	subs	r3, r6, #1
 8011e46:	9305      	str	r3, [sp, #20]
 8011e48:	9a07      	ldr	r2, [sp, #28]
 8011e4a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011e4e:	4293      	cmp	r3, r2
 8011e50:	d018      	beq.n	8011e84 <__gethex+0x22e>
 8011e52:	f1bb 0f20 	cmp.w	fp, #32
 8011e56:	d107      	bne.n	8011e68 <__gethex+0x212>
 8011e58:	9b04      	ldr	r3, [sp, #16]
 8011e5a:	f8c3 a000 	str.w	sl, [r3]
 8011e5e:	3304      	adds	r3, #4
 8011e60:	f04f 0a00 	mov.w	sl, #0
 8011e64:	9304      	str	r3, [sp, #16]
 8011e66:	46d3      	mov	fp, sl
 8011e68:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8011e6c:	f7ff fede 	bl	8011c2c <__hexdig_fun>
 8011e70:	f000 000f 	and.w	r0, r0, #15
 8011e74:	fa00 f00b 	lsl.w	r0, r0, fp
 8011e78:	ea4a 0a00 	orr.w	sl, sl, r0
 8011e7c:	f10b 0b04 	add.w	fp, fp, #4
 8011e80:	9b05      	ldr	r3, [sp, #20]
 8011e82:	e00d      	b.n	8011ea0 <__gethex+0x24a>
 8011e84:	9b05      	ldr	r3, [sp, #20]
 8011e86:	9a08      	ldr	r2, [sp, #32]
 8011e88:	4413      	add	r3, r2
 8011e8a:	42bb      	cmp	r3, r7
 8011e8c:	d3e1      	bcc.n	8011e52 <__gethex+0x1fc>
 8011e8e:	4618      	mov	r0, r3
 8011e90:	9a01      	ldr	r2, [sp, #4]
 8011e92:	9903      	ldr	r1, [sp, #12]
 8011e94:	9309      	str	r3, [sp, #36]	; 0x24
 8011e96:	f000 fffb 	bl	8012e90 <strncmp>
 8011e9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e9c:	2800      	cmp	r0, #0
 8011e9e:	d1d8      	bne.n	8011e52 <__gethex+0x1fc>
 8011ea0:	461e      	mov	r6, r3
 8011ea2:	e791      	b.n	8011dc8 <__gethex+0x172>
 8011ea4:	1eb9      	subs	r1, r7, #2
 8011ea6:	4628      	mov	r0, r5
 8011ea8:	f000 fdb9 	bl	8012a1e <__any_on>
 8011eac:	2800      	cmp	r0, #0
 8011eae:	d0b2      	beq.n	8011e16 <__gethex+0x1c0>
 8011eb0:	f04f 0a03 	mov.w	sl, #3
 8011eb4:	e7b1      	b.n	8011e1a <__gethex+0x1c4>
 8011eb6:	da09      	bge.n	8011ecc <__gethex+0x276>
 8011eb8:	1bf7      	subs	r7, r6, r7
 8011eba:	4629      	mov	r1, r5
 8011ebc:	463a      	mov	r2, r7
 8011ebe:	9802      	ldr	r0, [sp, #8]
 8011ec0:	f000 fbce 	bl	8012660 <__lshift>
 8011ec4:	1be4      	subs	r4, r4, r7
 8011ec6:	4605      	mov	r5, r0
 8011ec8:	f100 0914 	add.w	r9, r0, #20
 8011ecc:	f04f 0a00 	mov.w	sl, #0
 8011ed0:	e7a8      	b.n	8011e24 <__gethex+0x1ce>
 8011ed2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8011ed6:	42a0      	cmp	r0, r4
 8011ed8:	dd6a      	ble.n	8011fb0 <__gethex+0x35a>
 8011eda:	1b04      	subs	r4, r0, r4
 8011edc:	42a6      	cmp	r6, r4
 8011ede:	dc2e      	bgt.n	8011f3e <__gethex+0x2e8>
 8011ee0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011ee4:	2b02      	cmp	r3, #2
 8011ee6:	d022      	beq.n	8011f2e <__gethex+0x2d8>
 8011ee8:	2b03      	cmp	r3, #3
 8011eea:	d024      	beq.n	8011f36 <__gethex+0x2e0>
 8011eec:	2b01      	cmp	r3, #1
 8011eee:	d115      	bne.n	8011f1c <__gethex+0x2c6>
 8011ef0:	42a6      	cmp	r6, r4
 8011ef2:	d113      	bne.n	8011f1c <__gethex+0x2c6>
 8011ef4:	2e01      	cmp	r6, #1
 8011ef6:	dc0b      	bgt.n	8011f10 <__gethex+0x2ba>
 8011ef8:	9a06      	ldr	r2, [sp, #24]
 8011efa:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011efe:	6013      	str	r3, [r2, #0]
 8011f00:	2301      	movs	r3, #1
 8011f02:	612b      	str	r3, [r5, #16]
 8011f04:	f8c9 3000 	str.w	r3, [r9]
 8011f08:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011f0a:	2762      	movs	r7, #98	; 0x62
 8011f0c:	601d      	str	r5, [r3, #0]
 8011f0e:	e72a      	b.n	8011d66 <__gethex+0x110>
 8011f10:	1e71      	subs	r1, r6, #1
 8011f12:	4628      	mov	r0, r5
 8011f14:	f000 fd83 	bl	8012a1e <__any_on>
 8011f18:	2800      	cmp	r0, #0
 8011f1a:	d1ed      	bne.n	8011ef8 <__gethex+0x2a2>
 8011f1c:	4629      	mov	r1, r5
 8011f1e:	9802      	ldr	r0, [sp, #8]
 8011f20:	f000 f9d2 	bl	80122c8 <_Bfree>
 8011f24:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011f26:	2300      	movs	r3, #0
 8011f28:	6013      	str	r3, [r2, #0]
 8011f2a:	2750      	movs	r7, #80	; 0x50
 8011f2c:	e71b      	b.n	8011d66 <__gethex+0x110>
 8011f2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d0e1      	beq.n	8011ef8 <__gethex+0x2a2>
 8011f34:	e7f2      	b.n	8011f1c <__gethex+0x2c6>
 8011f36:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	d1dd      	bne.n	8011ef8 <__gethex+0x2a2>
 8011f3c:	e7ee      	b.n	8011f1c <__gethex+0x2c6>
 8011f3e:	1e67      	subs	r7, r4, #1
 8011f40:	f1ba 0f00 	cmp.w	sl, #0
 8011f44:	d131      	bne.n	8011faa <__gethex+0x354>
 8011f46:	b127      	cbz	r7, 8011f52 <__gethex+0x2fc>
 8011f48:	4639      	mov	r1, r7
 8011f4a:	4628      	mov	r0, r5
 8011f4c:	f000 fd67 	bl	8012a1e <__any_on>
 8011f50:	4682      	mov	sl, r0
 8011f52:	117a      	asrs	r2, r7, #5
 8011f54:	2301      	movs	r3, #1
 8011f56:	f007 071f 	and.w	r7, r7, #31
 8011f5a:	fa03 f707 	lsl.w	r7, r3, r7
 8011f5e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8011f62:	4621      	mov	r1, r4
 8011f64:	421f      	tst	r7, r3
 8011f66:	4628      	mov	r0, r5
 8011f68:	bf18      	it	ne
 8011f6a:	f04a 0a02 	orrne.w	sl, sl, #2
 8011f6e:	1b36      	subs	r6, r6, r4
 8011f70:	f7ff fe22 	bl	8011bb8 <rshift>
 8011f74:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8011f78:	2702      	movs	r7, #2
 8011f7a:	f1ba 0f00 	cmp.w	sl, #0
 8011f7e:	d048      	beq.n	8012012 <__gethex+0x3bc>
 8011f80:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011f84:	2b02      	cmp	r3, #2
 8011f86:	d015      	beq.n	8011fb4 <__gethex+0x35e>
 8011f88:	2b03      	cmp	r3, #3
 8011f8a:	d017      	beq.n	8011fbc <__gethex+0x366>
 8011f8c:	2b01      	cmp	r3, #1
 8011f8e:	d109      	bne.n	8011fa4 <__gethex+0x34e>
 8011f90:	f01a 0f02 	tst.w	sl, #2
 8011f94:	d006      	beq.n	8011fa4 <__gethex+0x34e>
 8011f96:	f8d9 3000 	ldr.w	r3, [r9]
 8011f9a:	ea4a 0a03 	orr.w	sl, sl, r3
 8011f9e:	f01a 0f01 	tst.w	sl, #1
 8011fa2:	d10e      	bne.n	8011fc2 <__gethex+0x36c>
 8011fa4:	f047 0710 	orr.w	r7, r7, #16
 8011fa8:	e033      	b.n	8012012 <__gethex+0x3bc>
 8011faa:	f04f 0a01 	mov.w	sl, #1
 8011fae:	e7d0      	b.n	8011f52 <__gethex+0x2fc>
 8011fb0:	2701      	movs	r7, #1
 8011fb2:	e7e2      	b.n	8011f7a <__gethex+0x324>
 8011fb4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011fb6:	f1c3 0301 	rsb	r3, r3, #1
 8011fba:	9315      	str	r3, [sp, #84]	; 0x54
 8011fbc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d0f0      	beq.n	8011fa4 <__gethex+0x34e>
 8011fc2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8011fc6:	f105 0314 	add.w	r3, r5, #20
 8011fca:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8011fce:	eb03 010a 	add.w	r1, r3, sl
 8011fd2:	f04f 0c00 	mov.w	ip, #0
 8011fd6:	4618      	mov	r0, r3
 8011fd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8011fdc:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011fe0:	d01c      	beq.n	801201c <__gethex+0x3c6>
 8011fe2:	3201      	adds	r2, #1
 8011fe4:	6002      	str	r2, [r0, #0]
 8011fe6:	2f02      	cmp	r7, #2
 8011fe8:	f105 0314 	add.w	r3, r5, #20
 8011fec:	d138      	bne.n	8012060 <__gethex+0x40a>
 8011fee:	f8d8 2000 	ldr.w	r2, [r8]
 8011ff2:	3a01      	subs	r2, #1
 8011ff4:	42b2      	cmp	r2, r6
 8011ff6:	d10a      	bne.n	801200e <__gethex+0x3b8>
 8011ff8:	1171      	asrs	r1, r6, #5
 8011ffa:	2201      	movs	r2, #1
 8011ffc:	f006 061f 	and.w	r6, r6, #31
 8012000:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012004:	fa02 f606 	lsl.w	r6, r2, r6
 8012008:	421e      	tst	r6, r3
 801200a:	bf18      	it	ne
 801200c:	4617      	movne	r7, r2
 801200e:	f047 0720 	orr.w	r7, r7, #32
 8012012:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012014:	601d      	str	r5, [r3, #0]
 8012016:	9b06      	ldr	r3, [sp, #24]
 8012018:	601c      	str	r4, [r3, #0]
 801201a:	e6a4      	b.n	8011d66 <__gethex+0x110>
 801201c:	4299      	cmp	r1, r3
 801201e:	f843 cc04 	str.w	ip, [r3, #-4]
 8012022:	d8d8      	bhi.n	8011fd6 <__gethex+0x380>
 8012024:	68ab      	ldr	r3, [r5, #8]
 8012026:	4599      	cmp	r9, r3
 8012028:	db12      	blt.n	8012050 <__gethex+0x3fa>
 801202a:	6869      	ldr	r1, [r5, #4]
 801202c:	9802      	ldr	r0, [sp, #8]
 801202e:	3101      	adds	r1, #1
 8012030:	f000 f916 	bl	8012260 <_Balloc>
 8012034:	692a      	ldr	r2, [r5, #16]
 8012036:	3202      	adds	r2, #2
 8012038:	f105 010c 	add.w	r1, r5, #12
 801203c:	4683      	mov	fp, r0
 801203e:	0092      	lsls	r2, r2, #2
 8012040:	300c      	adds	r0, #12
 8012042:	f7fd fae3 	bl	800f60c <memcpy>
 8012046:	4629      	mov	r1, r5
 8012048:	9802      	ldr	r0, [sp, #8]
 801204a:	f000 f93d 	bl	80122c8 <_Bfree>
 801204e:	465d      	mov	r5, fp
 8012050:	692b      	ldr	r3, [r5, #16]
 8012052:	1c5a      	adds	r2, r3, #1
 8012054:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8012058:	612a      	str	r2, [r5, #16]
 801205a:	2201      	movs	r2, #1
 801205c:	615a      	str	r2, [r3, #20]
 801205e:	e7c2      	b.n	8011fe6 <__gethex+0x390>
 8012060:	692a      	ldr	r2, [r5, #16]
 8012062:	454a      	cmp	r2, r9
 8012064:	dd0b      	ble.n	801207e <__gethex+0x428>
 8012066:	2101      	movs	r1, #1
 8012068:	4628      	mov	r0, r5
 801206a:	f7ff fda5 	bl	8011bb8 <rshift>
 801206e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012072:	3401      	adds	r4, #1
 8012074:	42a3      	cmp	r3, r4
 8012076:	f6ff aed9 	blt.w	8011e2c <__gethex+0x1d6>
 801207a:	2701      	movs	r7, #1
 801207c:	e7c7      	b.n	801200e <__gethex+0x3b8>
 801207e:	f016 061f 	ands.w	r6, r6, #31
 8012082:	d0fa      	beq.n	801207a <__gethex+0x424>
 8012084:	449a      	add	sl, r3
 8012086:	f1c6 0620 	rsb	r6, r6, #32
 801208a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801208e:	f000 f9ab 	bl	80123e8 <__hi0bits>
 8012092:	42b0      	cmp	r0, r6
 8012094:	dbe7      	blt.n	8012066 <__gethex+0x410>
 8012096:	e7f0      	b.n	801207a <__gethex+0x424>

08012098 <L_shift>:
 8012098:	f1c2 0208 	rsb	r2, r2, #8
 801209c:	0092      	lsls	r2, r2, #2
 801209e:	b570      	push	{r4, r5, r6, lr}
 80120a0:	f1c2 0620 	rsb	r6, r2, #32
 80120a4:	6843      	ldr	r3, [r0, #4]
 80120a6:	6804      	ldr	r4, [r0, #0]
 80120a8:	fa03 f506 	lsl.w	r5, r3, r6
 80120ac:	432c      	orrs	r4, r5
 80120ae:	40d3      	lsrs	r3, r2
 80120b0:	6004      	str	r4, [r0, #0]
 80120b2:	f840 3f04 	str.w	r3, [r0, #4]!
 80120b6:	4288      	cmp	r0, r1
 80120b8:	d3f4      	bcc.n	80120a4 <L_shift+0xc>
 80120ba:	bd70      	pop	{r4, r5, r6, pc}

080120bc <__match>:
 80120bc:	b530      	push	{r4, r5, lr}
 80120be:	6803      	ldr	r3, [r0, #0]
 80120c0:	3301      	adds	r3, #1
 80120c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80120c6:	b914      	cbnz	r4, 80120ce <__match+0x12>
 80120c8:	6003      	str	r3, [r0, #0]
 80120ca:	2001      	movs	r0, #1
 80120cc:	bd30      	pop	{r4, r5, pc}
 80120ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80120d2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80120d6:	2d19      	cmp	r5, #25
 80120d8:	bf98      	it	ls
 80120da:	3220      	addls	r2, #32
 80120dc:	42a2      	cmp	r2, r4
 80120de:	d0f0      	beq.n	80120c2 <__match+0x6>
 80120e0:	2000      	movs	r0, #0
 80120e2:	e7f3      	b.n	80120cc <__match+0x10>

080120e4 <__hexnan>:
 80120e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120e8:	680b      	ldr	r3, [r1, #0]
 80120ea:	6801      	ldr	r1, [r0, #0]
 80120ec:	115f      	asrs	r7, r3, #5
 80120ee:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80120f2:	f013 031f 	ands.w	r3, r3, #31
 80120f6:	b087      	sub	sp, #28
 80120f8:	bf18      	it	ne
 80120fa:	3704      	addne	r7, #4
 80120fc:	2500      	movs	r5, #0
 80120fe:	1f3e      	subs	r6, r7, #4
 8012100:	4682      	mov	sl, r0
 8012102:	4690      	mov	r8, r2
 8012104:	9301      	str	r3, [sp, #4]
 8012106:	f847 5c04 	str.w	r5, [r7, #-4]
 801210a:	46b1      	mov	r9, r6
 801210c:	4634      	mov	r4, r6
 801210e:	9502      	str	r5, [sp, #8]
 8012110:	46ab      	mov	fp, r5
 8012112:	784a      	ldrb	r2, [r1, #1]
 8012114:	1c4b      	adds	r3, r1, #1
 8012116:	9303      	str	r3, [sp, #12]
 8012118:	b342      	cbz	r2, 801216c <__hexnan+0x88>
 801211a:	4610      	mov	r0, r2
 801211c:	9105      	str	r1, [sp, #20]
 801211e:	9204      	str	r2, [sp, #16]
 8012120:	f7ff fd84 	bl	8011c2c <__hexdig_fun>
 8012124:	2800      	cmp	r0, #0
 8012126:	d143      	bne.n	80121b0 <__hexnan+0xcc>
 8012128:	9a04      	ldr	r2, [sp, #16]
 801212a:	9905      	ldr	r1, [sp, #20]
 801212c:	2a20      	cmp	r2, #32
 801212e:	d818      	bhi.n	8012162 <__hexnan+0x7e>
 8012130:	9b02      	ldr	r3, [sp, #8]
 8012132:	459b      	cmp	fp, r3
 8012134:	dd13      	ble.n	801215e <__hexnan+0x7a>
 8012136:	454c      	cmp	r4, r9
 8012138:	d206      	bcs.n	8012148 <__hexnan+0x64>
 801213a:	2d07      	cmp	r5, #7
 801213c:	dc04      	bgt.n	8012148 <__hexnan+0x64>
 801213e:	462a      	mov	r2, r5
 8012140:	4649      	mov	r1, r9
 8012142:	4620      	mov	r0, r4
 8012144:	f7ff ffa8 	bl	8012098 <L_shift>
 8012148:	4544      	cmp	r4, r8
 801214a:	d944      	bls.n	80121d6 <__hexnan+0xf2>
 801214c:	2300      	movs	r3, #0
 801214e:	f1a4 0904 	sub.w	r9, r4, #4
 8012152:	f844 3c04 	str.w	r3, [r4, #-4]
 8012156:	f8cd b008 	str.w	fp, [sp, #8]
 801215a:	464c      	mov	r4, r9
 801215c:	461d      	mov	r5, r3
 801215e:	9903      	ldr	r1, [sp, #12]
 8012160:	e7d7      	b.n	8012112 <__hexnan+0x2e>
 8012162:	2a29      	cmp	r2, #41	; 0x29
 8012164:	d14a      	bne.n	80121fc <__hexnan+0x118>
 8012166:	3102      	adds	r1, #2
 8012168:	f8ca 1000 	str.w	r1, [sl]
 801216c:	f1bb 0f00 	cmp.w	fp, #0
 8012170:	d044      	beq.n	80121fc <__hexnan+0x118>
 8012172:	454c      	cmp	r4, r9
 8012174:	d206      	bcs.n	8012184 <__hexnan+0xa0>
 8012176:	2d07      	cmp	r5, #7
 8012178:	dc04      	bgt.n	8012184 <__hexnan+0xa0>
 801217a:	462a      	mov	r2, r5
 801217c:	4649      	mov	r1, r9
 801217e:	4620      	mov	r0, r4
 8012180:	f7ff ff8a 	bl	8012098 <L_shift>
 8012184:	4544      	cmp	r4, r8
 8012186:	d928      	bls.n	80121da <__hexnan+0xf6>
 8012188:	4643      	mov	r3, r8
 801218a:	f854 2b04 	ldr.w	r2, [r4], #4
 801218e:	f843 2b04 	str.w	r2, [r3], #4
 8012192:	42a6      	cmp	r6, r4
 8012194:	d2f9      	bcs.n	801218a <__hexnan+0xa6>
 8012196:	2200      	movs	r2, #0
 8012198:	f843 2b04 	str.w	r2, [r3], #4
 801219c:	429e      	cmp	r6, r3
 801219e:	d2fb      	bcs.n	8012198 <__hexnan+0xb4>
 80121a0:	6833      	ldr	r3, [r6, #0]
 80121a2:	b91b      	cbnz	r3, 80121ac <__hexnan+0xc8>
 80121a4:	4546      	cmp	r6, r8
 80121a6:	d127      	bne.n	80121f8 <__hexnan+0x114>
 80121a8:	2301      	movs	r3, #1
 80121aa:	6033      	str	r3, [r6, #0]
 80121ac:	2005      	movs	r0, #5
 80121ae:	e026      	b.n	80121fe <__hexnan+0x11a>
 80121b0:	3501      	adds	r5, #1
 80121b2:	2d08      	cmp	r5, #8
 80121b4:	f10b 0b01 	add.w	fp, fp, #1
 80121b8:	dd06      	ble.n	80121c8 <__hexnan+0xe4>
 80121ba:	4544      	cmp	r4, r8
 80121bc:	d9cf      	bls.n	801215e <__hexnan+0x7a>
 80121be:	2300      	movs	r3, #0
 80121c0:	f844 3c04 	str.w	r3, [r4, #-4]
 80121c4:	2501      	movs	r5, #1
 80121c6:	3c04      	subs	r4, #4
 80121c8:	6822      	ldr	r2, [r4, #0]
 80121ca:	f000 000f 	and.w	r0, r0, #15
 80121ce:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80121d2:	6020      	str	r0, [r4, #0]
 80121d4:	e7c3      	b.n	801215e <__hexnan+0x7a>
 80121d6:	2508      	movs	r5, #8
 80121d8:	e7c1      	b.n	801215e <__hexnan+0x7a>
 80121da:	9b01      	ldr	r3, [sp, #4]
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d0df      	beq.n	80121a0 <__hexnan+0xbc>
 80121e0:	f04f 32ff 	mov.w	r2, #4294967295
 80121e4:	f1c3 0320 	rsb	r3, r3, #32
 80121e8:	fa22 f303 	lsr.w	r3, r2, r3
 80121ec:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80121f0:	401a      	ands	r2, r3
 80121f2:	f847 2c04 	str.w	r2, [r7, #-4]
 80121f6:	e7d3      	b.n	80121a0 <__hexnan+0xbc>
 80121f8:	3e04      	subs	r6, #4
 80121fa:	e7d1      	b.n	80121a0 <__hexnan+0xbc>
 80121fc:	2004      	movs	r0, #4
 80121fe:	b007      	add	sp, #28
 8012200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012204 <__locale_ctype_ptr_l>:
 8012204:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8012208:	4770      	bx	lr

0801220a <__localeconv_l>:
 801220a:	30f0      	adds	r0, #240	; 0xf0
 801220c:	4770      	bx	lr
	...

08012210 <_localeconv_r>:
 8012210:	4b04      	ldr	r3, [pc, #16]	; (8012224 <_localeconv_r+0x14>)
 8012212:	681b      	ldr	r3, [r3, #0]
 8012214:	6a18      	ldr	r0, [r3, #32]
 8012216:	4b04      	ldr	r3, [pc, #16]	; (8012228 <_localeconv_r+0x18>)
 8012218:	2800      	cmp	r0, #0
 801221a:	bf08      	it	eq
 801221c:	4618      	moveq	r0, r3
 801221e:	30f0      	adds	r0, #240	; 0xf0
 8012220:	4770      	bx	lr
 8012222:	bf00      	nop
 8012224:	20000044 	.word	0x20000044
 8012228:	200000a8 	.word	0x200000a8

0801222c <malloc>:
 801222c:	4b02      	ldr	r3, [pc, #8]	; (8012238 <malloc+0xc>)
 801222e:	4601      	mov	r1, r0
 8012230:	6818      	ldr	r0, [r3, #0]
 8012232:	f000 bc71 	b.w	8012b18 <_malloc_r>
 8012236:	bf00      	nop
 8012238:	20000044 	.word	0x20000044

0801223c <__ascii_mbtowc>:
 801223c:	b082      	sub	sp, #8
 801223e:	b901      	cbnz	r1, 8012242 <__ascii_mbtowc+0x6>
 8012240:	a901      	add	r1, sp, #4
 8012242:	b142      	cbz	r2, 8012256 <__ascii_mbtowc+0x1a>
 8012244:	b14b      	cbz	r3, 801225a <__ascii_mbtowc+0x1e>
 8012246:	7813      	ldrb	r3, [r2, #0]
 8012248:	600b      	str	r3, [r1, #0]
 801224a:	7812      	ldrb	r2, [r2, #0]
 801224c:	1c10      	adds	r0, r2, #0
 801224e:	bf18      	it	ne
 8012250:	2001      	movne	r0, #1
 8012252:	b002      	add	sp, #8
 8012254:	4770      	bx	lr
 8012256:	4610      	mov	r0, r2
 8012258:	e7fb      	b.n	8012252 <__ascii_mbtowc+0x16>
 801225a:	f06f 0001 	mvn.w	r0, #1
 801225e:	e7f8      	b.n	8012252 <__ascii_mbtowc+0x16>

08012260 <_Balloc>:
 8012260:	b570      	push	{r4, r5, r6, lr}
 8012262:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012264:	4604      	mov	r4, r0
 8012266:	460e      	mov	r6, r1
 8012268:	b93d      	cbnz	r5, 801227a <_Balloc+0x1a>
 801226a:	2010      	movs	r0, #16
 801226c:	f7ff ffde 	bl	801222c <malloc>
 8012270:	6260      	str	r0, [r4, #36]	; 0x24
 8012272:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012276:	6005      	str	r5, [r0, #0]
 8012278:	60c5      	str	r5, [r0, #12]
 801227a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801227c:	68eb      	ldr	r3, [r5, #12]
 801227e:	b183      	cbz	r3, 80122a2 <_Balloc+0x42>
 8012280:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012282:	68db      	ldr	r3, [r3, #12]
 8012284:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8012288:	b9b8      	cbnz	r0, 80122ba <_Balloc+0x5a>
 801228a:	2101      	movs	r1, #1
 801228c:	fa01 f506 	lsl.w	r5, r1, r6
 8012290:	1d6a      	adds	r2, r5, #5
 8012292:	0092      	lsls	r2, r2, #2
 8012294:	4620      	mov	r0, r4
 8012296:	f000 fbe3 	bl	8012a60 <_calloc_r>
 801229a:	b160      	cbz	r0, 80122b6 <_Balloc+0x56>
 801229c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80122a0:	e00e      	b.n	80122c0 <_Balloc+0x60>
 80122a2:	2221      	movs	r2, #33	; 0x21
 80122a4:	2104      	movs	r1, #4
 80122a6:	4620      	mov	r0, r4
 80122a8:	f000 fbda 	bl	8012a60 <_calloc_r>
 80122ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80122ae:	60e8      	str	r0, [r5, #12]
 80122b0:	68db      	ldr	r3, [r3, #12]
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	d1e4      	bne.n	8012280 <_Balloc+0x20>
 80122b6:	2000      	movs	r0, #0
 80122b8:	bd70      	pop	{r4, r5, r6, pc}
 80122ba:	6802      	ldr	r2, [r0, #0]
 80122bc:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80122c0:	2300      	movs	r3, #0
 80122c2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80122c6:	e7f7      	b.n	80122b8 <_Balloc+0x58>

080122c8 <_Bfree>:
 80122c8:	b570      	push	{r4, r5, r6, lr}
 80122ca:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80122cc:	4606      	mov	r6, r0
 80122ce:	460d      	mov	r5, r1
 80122d0:	b93c      	cbnz	r4, 80122e2 <_Bfree+0x1a>
 80122d2:	2010      	movs	r0, #16
 80122d4:	f7ff ffaa 	bl	801222c <malloc>
 80122d8:	6270      	str	r0, [r6, #36]	; 0x24
 80122da:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80122de:	6004      	str	r4, [r0, #0]
 80122e0:	60c4      	str	r4, [r0, #12]
 80122e2:	b13d      	cbz	r5, 80122f4 <_Bfree+0x2c>
 80122e4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80122e6:	686a      	ldr	r2, [r5, #4]
 80122e8:	68db      	ldr	r3, [r3, #12]
 80122ea:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80122ee:	6029      	str	r1, [r5, #0]
 80122f0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80122f4:	bd70      	pop	{r4, r5, r6, pc}

080122f6 <__multadd>:
 80122f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122fa:	690d      	ldr	r5, [r1, #16]
 80122fc:	461f      	mov	r7, r3
 80122fe:	4606      	mov	r6, r0
 8012300:	460c      	mov	r4, r1
 8012302:	f101 0c14 	add.w	ip, r1, #20
 8012306:	2300      	movs	r3, #0
 8012308:	f8dc 0000 	ldr.w	r0, [ip]
 801230c:	b281      	uxth	r1, r0
 801230e:	fb02 7101 	mla	r1, r2, r1, r7
 8012312:	0c0f      	lsrs	r7, r1, #16
 8012314:	0c00      	lsrs	r0, r0, #16
 8012316:	fb02 7000 	mla	r0, r2, r0, r7
 801231a:	b289      	uxth	r1, r1
 801231c:	3301      	adds	r3, #1
 801231e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8012322:	429d      	cmp	r5, r3
 8012324:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8012328:	f84c 1b04 	str.w	r1, [ip], #4
 801232c:	dcec      	bgt.n	8012308 <__multadd+0x12>
 801232e:	b1d7      	cbz	r7, 8012366 <__multadd+0x70>
 8012330:	68a3      	ldr	r3, [r4, #8]
 8012332:	42ab      	cmp	r3, r5
 8012334:	dc12      	bgt.n	801235c <__multadd+0x66>
 8012336:	6861      	ldr	r1, [r4, #4]
 8012338:	4630      	mov	r0, r6
 801233a:	3101      	adds	r1, #1
 801233c:	f7ff ff90 	bl	8012260 <_Balloc>
 8012340:	6922      	ldr	r2, [r4, #16]
 8012342:	3202      	adds	r2, #2
 8012344:	f104 010c 	add.w	r1, r4, #12
 8012348:	4680      	mov	r8, r0
 801234a:	0092      	lsls	r2, r2, #2
 801234c:	300c      	adds	r0, #12
 801234e:	f7fd f95d 	bl	800f60c <memcpy>
 8012352:	4621      	mov	r1, r4
 8012354:	4630      	mov	r0, r6
 8012356:	f7ff ffb7 	bl	80122c8 <_Bfree>
 801235a:	4644      	mov	r4, r8
 801235c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012360:	3501      	adds	r5, #1
 8012362:	615f      	str	r7, [r3, #20]
 8012364:	6125      	str	r5, [r4, #16]
 8012366:	4620      	mov	r0, r4
 8012368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801236c <__s2b>:
 801236c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012370:	460c      	mov	r4, r1
 8012372:	4615      	mov	r5, r2
 8012374:	461f      	mov	r7, r3
 8012376:	2209      	movs	r2, #9
 8012378:	3308      	adds	r3, #8
 801237a:	4606      	mov	r6, r0
 801237c:	fb93 f3f2 	sdiv	r3, r3, r2
 8012380:	2100      	movs	r1, #0
 8012382:	2201      	movs	r2, #1
 8012384:	429a      	cmp	r2, r3
 8012386:	db20      	blt.n	80123ca <__s2b+0x5e>
 8012388:	4630      	mov	r0, r6
 801238a:	f7ff ff69 	bl	8012260 <_Balloc>
 801238e:	9b08      	ldr	r3, [sp, #32]
 8012390:	6143      	str	r3, [r0, #20]
 8012392:	2d09      	cmp	r5, #9
 8012394:	f04f 0301 	mov.w	r3, #1
 8012398:	6103      	str	r3, [r0, #16]
 801239a:	dd19      	ble.n	80123d0 <__s2b+0x64>
 801239c:	f104 0809 	add.w	r8, r4, #9
 80123a0:	46c1      	mov	r9, r8
 80123a2:	442c      	add	r4, r5
 80123a4:	f819 3b01 	ldrb.w	r3, [r9], #1
 80123a8:	4601      	mov	r1, r0
 80123aa:	3b30      	subs	r3, #48	; 0x30
 80123ac:	220a      	movs	r2, #10
 80123ae:	4630      	mov	r0, r6
 80123b0:	f7ff ffa1 	bl	80122f6 <__multadd>
 80123b4:	45a1      	cmp	r9, r4
 80123b6:	d1f5      	bne.n	80123a4 <__s2b+0x38>
 80123b8:	eb08 0405 	add.w	r4, r8, r5
 80123bc:	3c08      	subs	r4, #8
 80123be:	1b2d      	subs	r5, r5, r4
 80123c0:	1963      	adds	r3, r4, r5
 80123c2:	42bb      	cmp	r3, r7
 80123c4:	db07      	blt.n	80123d6 <__s2b+0x6a>
 80123c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80123ca:	0052      	lsls	r2, r2, #1
 80123cc:	3101      	adds	r1, #1
 80123ce:	e7d9      	b.n	8012384 <__s2b+0x18>
 80123d0:	340a      	adds	r4, #10
 80123d2:	2509      	movs	r5, #9
 80123d4:	e7f3      	b.n	80123be <__s2b+0x52>
 80123d6:	f814 3b01 	ldrb.w	r3, [r4], #1
 80123da:	4601      	mov	r1, r0
 80123dc:	3b30      	subs	r3, #48	; 0x30
 80123de:	220a      	movs	r2, #10
 80123e0:	4630      	mov	r0, r6
 80123e2:	f7ff ff88 	bl	80122f6 <__multadd>
 80123e6:	e7eb      	b.n	80123c0 <__s2b+0x54>

080123e8 <__hi0bits>:
 80123e8:	0c02      	lsrs	r2, r0, #16
 80123ea:	0412      	lsls	r2, r2, #16
 80123ec:	4603      	mov	r3, r0
 80123ee:	b9b2      	cbnz	r2, 801241e <__hi0bits+0x36>
 80123f0:	0403      	lsls	r3, r0, #16
 80123f2:	2010      	movs	r0, #16
 80123f4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80123f8:	bf04      	itt	eq
 80123fa:	021b      	lsleq	r3, r3, #8
 80123fc:	3008      	addeq	r0, #8
 80123fe:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8012402:	bf04      	itt	eq
 8012404:	011b      	lsleq	r3, r3, #4
 8012406:	3004      	addeq	r0, #4
 8012408:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801240c:	bf04      	itt	eq
 801240e:	009b      	lsleq	r3, r3, #2
 8012410:	3002      	addeq	r0, #2
 8012412:	2b00      	cmp	r3, #0
 8012414:	db06      	blt.n	8012424 <__hi0bits+0x3c>
 8012416:	005b      	lsls	r3, r3, #1
 8012418:	d503      	bpl.n	8012422 <__hi0bits+0x3a>
 801241a:	3001      	adds	r0, #1
 801241c:	4770      	bx	lr
 801241e:	2000      	movs	r0, #0
 8012420:	e7e8      	b.n	80123f4 <__hi0bits+0xc>
 8012422:	2020      	movs	r0, #32
 8012424:	4770      	bx	lr

08012426 <__lo0bits>:
 8012426:	6803      	ldr	r3, [r0, #0]
 8012428:	f013 0207 	ands.w	r2, r3, #7
 801242c:	4601      	mov	r1, r0
 801242e:	d00b      	beq.n	8012448 <__lo0bits+0x22>
 8012430:	07da      	lsls	r2, r3, #31
 8012432:	d423      	bmi.n	801247c <__lo0bits+0x56>
 8012434:	0798      	lsls	r0, r3, #30
 8012436:	bf49      	itett	mi
 8012438:	085b      	lsrmi	r3, r3, #1
 801243a:	089b      	lsrpl	r3, r3, #2
 801243c:	2001      	movmi	r0, #1
 801243e:	600b      	strmi	r3, [r1, #0]
 8012440:	bf5c      	itt	pl
 8012442:	600b      	strpl	r3, [r1, #0]
 8012444:	2002      	movpl	r0, #2
 8012446:	4770      	bx	lr
 8012448:	b298      	uxth	r0, r3
 801244a:	b9a8      	cbnz	r0, 8012478 <__lo0bits+0x52>
 801244c:	0c1b      	lsrs	r3, r3, #16
 801244e:	2010      	movs	r0, #16
 8012450:	f013 0fff 	tst.w	r3, #255	; 0xff
 8012454:	bf04      	itt	eq
 8012456:	0a1b      	lsreq	r3, r3, #8
 8012458:	3008      	addeq	r0, #8
 801245a:	071a      	lsls	r2, r3, #28
 801245c:	bf04      	itt	eq
 801245e:	091b      	lsreq	r3, r3, #4
 8012460:	3004      	addeq	r0, #4
 8012462:	079a      	lsls	r2, r3, #30
 8012464:	bf04      	itt	eq
 8012466:	089b      	lsreq	r3, r3, #2
 8012468:	3002      	addeq	r0, #2
 801246a:	07da      	lsls	r2, r3, #31
 801246c:	d402      	bmi.n	8012474 <__lo0bits+0x4e>
 801246e:	085b      	lsrs	r3, r3, #1
 8012470:	d006      	beq.n	8012480 <__lo0bits+0x5a>
 8012472:	3001      	adds	r0, #1
 8012474:	600b      	str	r3, [r1, #0]
 8012476:	4770      	bx	lr
 8012478:	4610      	mov	r0, r2
 801247a:	e7e9      	b.n	8012450 <__lo0bits+0x2a>
 801247c:	2000      	movs	r0, #0
 801247e:	4770      	bx	lr
 8012480:	2020      	movs	r0, #32
 8012482:	4770      	bx	lr

08012484 <__i2b>:
 8012484:	b510      	push	{r4, lr}
 8012486:	460c      	mov	r4, r1
 8012488:	2101      	movs	r1, #1
 801248a:	f7ff fee9 	bl	8012260 <_Balloc>
 801248e:	2201      	movs	r2, #1
 8012490:	6144      	str	r4, [r0, #20]
 8012492:	6102      	str	r2, [r0, #16]
 8012494:	bd10      	pop	{r4, pc}

08012496 <__multiply>:
 8012496:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801249a:	4614      	mov	r4, r2
 801249c:	690a      	ldr	r2, [r1, #16]
 801249e:	6923      	ldr	r3, [r4, #16]
 80124a0:	429a      	cmp	r2, r3
 80124a2:	bfb8      	it	lt
 80124a4:	460b      	movlt	r3, r1
 80124a6:	4688      	mov	r8, r1
 80124a8:	bfbc      	itt	lt
 80124aa:	46a0      	movlt	r8, r4
 80124ac:	461c      	movlt	r4, r3
 80124ae:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80124b2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80124b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80124ba:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80124be:	eb07 0609 	add.w	r6, r7, r9
 80124c2:	42b3      	cmp	r3, r6
 80124c4:	bfb8      	it	lt
 80124c6:	3101      	addlt	r1, #1
 80124c8:	f7ff feca 	bl	8012260 <_Balloc>
 80124cc:	f100 0514 	add.w	r5, r0, #20
 80124d0:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80124d4:	462b      	mov	r3, r5
 80124d6:	2200      	movs	r2, #0
 80124d8:	4573      	cmp	r3, lr
 80124da:	d316      	bcc.n	801250a <__multiply+0x74>
 80124dc:	f104 0214 	add.w	r2, r4, #20
 80124e0:	f108 0114 	add.w	r1, r8, #20
 80124e4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80124e8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80124ec:	9300      	str	r3, [sp, #0]
 80124ee:	9b00      	ldr	r3, [sp, #0]
 80124f0:	9201      	str	r2, [sp, #4]
 80124f2:	4293      	cmp	r3, r2
 80124f4:	d80c      	bhi.n	8012510 <__multiply+0x7a>
 80124f6:	2e00      	cmp	r6, #0
 80124f8:	dd03      	ble.n	8012502 <__multiply+0x6c>
 80124fa:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80124fe:	2b00      	cmp	r3, #0
 8012500:	d05d      	beq.n	80125be <__multiply+0x128>
 8012502:	6106      	str	r6, [r0, #16]
 8012504:	b003      	add	sp, #12
 8012506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801250a:	f843 2b04 	str.w	r2, [r3], #4
 801250e:	e7e3      	b.n	80124d8 <__multiply+0x42>
 8012510:	f8b2 b000 	ldrh.w	fp, [r2]
 8012514:	f1bb 0f00 	cmp.w	fp, #0
 8012518:	d023      	beq.n	8012562 <__multiply+0xcc>
 801251a:	4689      	mov	r9, r1
 801251c:	46ac      	mov	ip, r5
 801251e:	f04f 0800 	mov.w	r8, #0
 8012522:	f859 4b04 	ldr.w	r4, [r9], #4
 8012526:	f8dc a000 	ldr.w	sl, [ip]
 801252a:	b2a3      	uxth	r3, r4
 801252c:	fa1f fa8a 	uxth.w	sl, sl
 8012530:	fb0b a303 	mla	r3, fp, r3, sl
 8012534:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8012538:	f8dc 4000 	ldr.w	r4, [ip]
 801253c:	4443      	add	r3, r8
 801253e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8012542:	fb0b 840a 	mla	r4, fp, sl, r8
 8012546:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801254a:	46e2      	mov	sl, ip
 801254c:	b29b      	uxth	r3, r3
 801254e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8012552:	454f      	cmp	r7, r9
 8012554:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8012558:	f84a 3b04 	str.w	r3, [sl], #4
 801255c:	d82b      	bhi.n	80125b6 <__multiply+0x120>
 801255e:	f8cc 8004 	str.w	r8, [ip, #4]
 8012562:	9b01      	ldr	r3, [sp, #4]
 8012564:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8012568:	3204      	adds	r2, #4
 801256a:	f1ba 0f00 	cmp.w	sl, #0
 801256e:	d020      	beq.n	80125b2 <__multiply+0x11c>
 8012570:	682b      	ldr	r3, [r5, #0]
 8012572:	4689      	mov	r9, r1
 8012574:	46a8      	mov	r8, r5
 8012576:	f04f 0b00 	mov.w	fp, #0
 801257a:	f8b9 c000 	ldrh.w	ip, [r9]
 801257e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8012582:	fb0a 440c 	mla	r4, sl, ip, r4
 8012586:	445c      	add	r4, fp
 8012588:	46c4      	mov	ip, r8
 801258a:	b29b      	uxth	r3, r3
 801258c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8012590:	f84c 3b04 	str.w	r3, [ip], #4
 8012594:	f859 3b04 	ldr.w	r3, [r9], #4
 8012598:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 801259c:	0c1b      	lsrs	r3, r3, #16
 801259e:	fb0a b303 	mla	r3, sl, r3, fp
 80125a2:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80125a6:	454f      	cmp	r7, r9
 80125a8:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80125ac:	d805      	bhi.n	80125ba <__multiply+0x124>
 80125ae:	f8c8 3004 	str.w	r3, [r8, #4]
 80125b2:	3504      	adds	r5, #4
 80125b4:	e79b      	b.n	80124ee <__multiply+0x58>
 80125b6:	46d4      	mov	ip, sl
 80125b8:	e7b3      	b.n	8012522 <__multiply+0x8c>
 80125ba:	46e0      	mov	r8, ip
 80125bc:	e7dd      	b.n	801257a <__multiply+0xe4>
 80125be:	3e01      	subs	r6, #1
 80125c0:	e799      	b.n	80124f6 <__multiply+0x60>
	...

080125c4 <__pow5mult>:
 80125c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80125c8:	4615      	mov	r5, r2
 80125ca:	f012 0203 	ands.w	r2, r2, #3
 80125ce:	4606      	mov	r6, r0
 80125d0:	460f      	mov	r7, r1
 80125d2:	d007      	beq.n	80125e4 <__pow5mult+0x20>
 80125d4:	3a01      	subs	r2, #1
 80125d6:	4c21      	ldr	r4, [pc, #132]	; (801265c <__pow5mult+0x98>)
 80125d8:	2300      	movs	r3, #0
 80125da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80125de:	f7ff fe8a 	bl	80122f6 <__multadd>
 80125e2:	4607      	mov	r7, r0
 80125e4:	10ad      	asrs	r5, r5, #2
 80125e6:	d035      	beq.n	8012654 <__pow5mult+0x90>
 80125e8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80125ea:	b93c      	cbnz	r4, 80125fc <__pow5mult+0x38>
 80125ec:	2010      	movs	r0, #16
 80125ee:	f7ff fe1d 	bl	801222c <malloc>
 80125f2:	6270      	str	r0, [r6, #36]	; 0x24
 80125f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80125f8:	6004      	str	r4, [r0, #0]
 80125fa:	60c4      	str	r4, [r0, #12]
 80125fc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012600:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012604:	b94c      	cbnz	r4, 801261a <__pow5mult+0x56>
 8012606:	f240 2171 	movw	r1, #625	; 0x271
 801260a:	4630      	mov	r0, r6
 801260c:	f7ff ff3a 	bl	8012484 <__i2b>
 8012610:	2300      	movs	r3, #0
 8012612:	f8c8 0008 	str.w	r0, [r8, #8]
 8012616:	4604      	mov	r4, r0
 8012618:	6003      	str	r3, [r0, #0]
 801261a:	f04f 0800 	mov.w	r8, #0
 801261e:	07eb      	lsls	r3, r5, #31
 8012620:	d50a      	bpl.n	8012638 <__pow5mult+0x74>
 8012622:	4639      	mov	r1, r7
 8012624:	4622      	mov	r2, r4
 8012626:	4630      	mov	r0, r6
 8012628:	f7ff ff35 	bl	8012496 <__multiply>
 801262c:	4639      	mov	r1, r7
 801262e:	4681      	mov	r9, r0
 8012630:	4630      	mov	r0, r6
 8012632:	f7ff fe49 	bl	80122c8 <_Bfree>
 8012636:	464f      	mov	r7, r9
 8012638:	106d      	asrs	r5, r5, #1
 801263a:	d00b      	beq.n	8012654 <__pow5mult+0x90>
 801263c:	6820      	ldr	r0, [r4, #0]
 801263e:	b938      	cbnz	r0, 8012650 <__pow5mult+0x8c>
 8012640:	4622      	mov	r2, r4
 8012642:	4621      	mov	r1, r4
 8012644:	4630      	mov	r0, r6
 8012646:	f7ff ff26 	bl	8012496 <__multiply>
 801264a:	6020      	str	r0, [r4, #0]
 801264c:	f8c0 8000 	str.w	r8, [r0]
 8012650:	4604      	mov	r4, r0
 8012652:	e7e4      	b.n	801261e <__pow5mult+0x5a>
 8012654:	4638      	mov	r0, r7
 8012656:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801265a:	bf00      	nop
 801265c:	080136f8 	.word	0x080136f8

08012660 <__lshift>:
 8012660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012664:	460c      	mov	r4, r1
 8012666:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801266a:	6923      	ldr	r3, [r4, #16]
 801266c:	6849      	ldr	r1, [r1, #4]
 801266e:	eb0a 0903 	add.w	r9, sl, r3
 8012672:	68a3      	ldr	r3, [r4, #8]
 8012674:	4607      	mov	r7, r0
 8012676:	4616      	mov	r6, r2
 8012678:	f109 0501 	add.w	r5, r9, #1
 801267c:	42ab      	cmp	r3, r5
 801267e:	db32      	blt.n	80126e6 <__lshift+0x86>
 8012680:	4638      	mov	r0, r7
 8012682:	f7ff fded 	bl	8012260 <_Balloc>
 8012686:	2300      	movs	r3, #0
 8012688:	4680      	mov	r8, r0
 801268a:	f100 0114 	add.w	r1, r0, #20
 801268e:	461a      	mov	r2, r3
 8012690:	4553      	cmp	r3, sl
 8012692:	db2b      	blt.n	80126ec <__lshift+0x8c>
 8012694:	6920      	ldr	r0, [r4, #16]
 8012696:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801269a:	f104 0314 	add.w	r3, r4, #20
 801269e:	f016 021f 	ands.w	r2, r6, #31
 80126a2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80126a6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80126aa:	d025      	beq.n	80126f8 <__lshift+0x98>
 80126ac:	f1c2 0e20 	rsb	lr, r2, #32
 80126b0:	2000      	movs	r0, #0
 80126b2:	681e      	ldr	r6, [r3, #0]
 80126b4:	468a      	mov	sl, r1
 80126b6:	4096      	lsls	r6, r2
 80126b8:	4330      	orrs	r0, r6
 80126ba:	f84a 0b04 	str.w	r0, [sl], #4
 80126be:	f853 0b04 	ldr.w	r0, [r3], #4
 80126c2:	459c      	cmp	ip, r3
 80126c4:	fa20 f00e 	lsr.w	r0, r0, lr
 80126c8:	d814      	bhi.n	80126f4 <__lshift+0x94>
 80126ca:	6048      	str	r0, [r1, #4]
 80126cc:	b108      	cbz	r0, 80126d2 <__lshift+0x72>
 80126ce:	f109 0502 	add.w	r5, r9, #2
 80126d2:	3d01      	subs	r5, #1
 80126d4:	4638      	mov	r0, r7
 80126d6:	f8c8 5010 	str.w	r5, [r8, #16]
 80126da:	4621      	mov	r1, r4
 80126dc:	f7ff fdf4 	bl	80122c8 <_Bfree>
 80126e0:	4640      	mov	r0, r8
 80126e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80126e6:	3101      	adds	r1, #1
 80126e8:	005b      	lsls	r3, r3, #1
 80126ea:	e7c7      	b.n	801267c <__lshift+0x1c>
 80126ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80126f0:	3301      	adds	r3, #1
 80126f2:	e7cd      	b.n	8012690 <__lshift+0x30>
 80126f4:	4651      	mov	r1, sl
 80126f6:	e7dc      	b.n	80126b2 <__lshift+0x52>
 80126f8:	3904      	subs	r1, #4
 80126fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80126fe:	f841 2f04 	str.w	r2, [r1, #4]!
 8012702:	459c      	cmp	ip, r3
 8012704:	d8f9      	bhi.n	80126fa <__lshift+0x9a>
 8012706:	e7e4      	b.n	80126d2 <__lshift+0x72>

08012708 <__mcmp>:
 8012708:	6903      	ldr	r3, [r0, #16]
 801270a:	690a      	ldr	r2, [r1, #16]
 801270c:	1a9b      	subs	r3, r3, r2
 801270e:	b530      	push	{r4, r5, lr}
 8012710:	d10c      	bne.n	801272c <__mcmp+0x24>
 8012712:	0092      	lsls	r2, r2, #2
 8012714:	3014      	adds	r0, #20
 8012716:	3114      	adds	r1, #20
 8012718:	1884      	adds	r4, r0, r2
 801271a:	4411      	add	r1, r2
 801271c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012720:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012724:	4295      	cmp	r5, r2
 8012726:	d003      	beq.n	8012730 <__mcmp+0x28>
 8012728:	d305      	bcc.n	8012736 <__mcmp+0x2e>
 801272a:	2301      	movs	r3, #1
 801272c:	4618      	mov	r0, r3
 801272e:	bd30      	pop	{r4, r5, pc}
 8012730:	42a0      	cmp	r0, r4
 8012732:	d3f3      	bcc.n	801271c <__mcmp+0x14>
 8012734:	e7fa      	b.n	801272c <__mcmp+0x24>
 8012736:	f04f 33ff 	mov.w	r3, #4294967295
 801273a:	e7f7      	b.n	801272c <__mcmp+0x24>

0801273c <__mdiff>:
 801273c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012740:	460d      	mov	r5, r1
 8012742:	4607      	mov	r7, r0
 8012744:	4611      	mov	r1, r2
 8012746:	4628      	mov	r0, r5
 8012748:	4614      	mov	r4, r2
 801274a:	f7ff ffdd 	bl	8012708 <__mcmp>
 801274e:	1e06      	subs	r6, r0, #0
 8012750:	d108      	bne.n	8012764 <__mdiff+0x28>
 8012752:	4631      	mov	r1, r6
 8012754:	4638      	mov	r0, r7
 8012756:	f7ff fd83 	bl	8012260 <_Balloc>
 801275a:	2301      	movs	r3, #1
 801275c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8012760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012764:	bfa4      	itt	ge
 8012766:	4623      	movge	r3, r4
 8012768:	462c      	movge	r4, r5
 801276a:	4638      	mov	r0, r7
 801276c:	6861      	ldr	r1, [r4, #4]
 801276e:	bfa6      	itte	ge
 8012770:	461d      	movge	r5, r3
 8012772:	2600      	movge	r6, #0
 8012774:	2601      	movlt	r6, #1
 8012776:	f7ff fd73 	bl	8012260 <_Balloc>
 801277a:	692b      	ldr	r3, [r5, #16]
 801277c:	60c6      	str	r6, [r0, #12]
 801277e:	6926      	ldr	r6, [r4, #16]
 8012780:	f105 0914 	add.w	r9, r5, #20
 8012784:	f104 0214 	add.w	r2, r4, #20
 8012788:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 801278c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8012790:	f100 0514 	add.w	r5, r0, #20
 8012794:	f04f 0e00 	mov.w	lr, #0
 8012798:	f852 ab04 	ldr.w	sl, [r2], #4
 801279c:	f859 4b04 	ldr.w	r4, [r9], #4
 80127a0:	fa1e f18a 	uxtah	r1, lr, sl
 80127a4:	b2a3      	uxth	r3, r4
 80127a6:	1ac9      	subs	r1, r1, r3
 80127a8:	0c23      	lsrs	r3, r4, #16
 80127aa:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80127ae:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80127b2:	b289      	uxth	r1, r1
 80127b4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80127b8:	45c8      	cmp	r8, r9
 80127ba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80127be:	4694      	mov	ip, r2
 80127c0:	f845 3b04 	str.w	r3, [r5], #4
 80127c4:	d8e8      	bhi.n	8012798 <__mdiff+0x5c>
 80127c6:	45bc      	cmp	ip, r7
 80127c8:	d304      	bcc.n	80127d4 <__mdiff+0x98>
 80127ca:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80127ce:	b183      	cbz	r3, 80127f2 <__mdiff+0xb6>
 80127d0:	6106      	str	r6, [r0, #16]
 80127d2:	e7c5      	b.n	8012760 <__mdiff+0x24>
 80127d4:	f85c 1b04 	ldr.w	r1, [ip], #4
 80127d8:	fa1e f381 	uxtah	r3, lr, r1
 80127dc:	141a      	asrs	r2, r3, #16
 80127de:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80127e2:	b29b      	uxth	r3, r3
 80127e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80127e8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80127ec:	f845 3b04 	str.w	r3, [r5], #4
 80127f0:	e7e9      	b.n	80127c6 <__mdiff+0x8a>
 80127f2:	3e01      	subs	r6, #1
 80127f4:	e7e9      	b.n	80127ca <__mdiff+0x8e>
	...

080127f8 <__ulp>:
 80127f8:	4b12      	ldr	r3, [pc, #72]	; (8012844 <__ulp+0x4c>)
 80127fa:	ee10 2a90 	vmov	r2, s1
 80127fe:	401a      	ands	r2, r3
 8012800:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8012804:	2b00      	cmp	r3, #0
 8012806:	dd04      	ble.n	8012812 <__ulp+0x1a>
 8012808:	2000      	movs	r0, #0
 801280a:	4619      	mov	r1, r3
 801280c:	ec41 0b10 	vmov	d0, r0, r1
 8012810:	4770      	bx	lr
 8012812:	425b      	negs	r3, r3
 8012814:	151b      	asrs	r3, r3, #20
 8012816:	2b13      	cmp	r3, #19
 8012818:	f04f 0000 	mov.w	r0, #0
 801281c:	f04f 0100 	mov.w	r1, #0
 8012820:	dc04      	bgt.n	801282c <__ulp+0x34>
 8012822:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8012826:	fa42 f103 	asr.w	r1, r2, r3
 801282a:	e7ef      	b.n	801280c <__ulp+0x14>
 801282c:	3b14      	subs	r3, #20
 801282e:	2b1e      	cmp	r3, #30
 8012830:	f04f 0201 	mov.w	r2, #1
 8012834:	bfda      	itte	le
 8012836:	f1c3 031f 	rsble	r3, r3, #31
 801283a:	fa02 f303 	lslle.w	r3, r2, r3
 801283e:	4613      	movgt	r3, r2
 8012840:	4618      	mov	r0, r3
 8012842:	e7e3      	b.n	801280c <__ulp+0x14>
 8012844:	7ff00000 	.word	0x7ff00000

08012848 <__b2d>:
 8012848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801284a:	6905      	ldr	r5, [r0, #16]
 801284c:	f100 0714 	add.w	r7, r0, #20
 8012850:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8012854:	1f2e      	subs	r6, r5, #4
 8012856:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801285a:	4620      	mov	r0, r4
 801285c:	f7ff fdc4 	bl	80123e8 <__hi0bits>
 8012860:	f1c0 0320 	rsb	r3, r0, #32
 8012864:	280a      	cmp	r0, #10
 8012866:	600b      	str	r3, [r1, #0]
 8012868:	f8df c074 	ldr.w	ip, [pc, #116]	; 80128e0 <__b2d+0x98>
 801286c:	dc14      	bgt.n	8012898 <__b2d+0x50>
 801286e:	f1c0 0e0b 	rsb	lr, r0, #11
 8012872:	fa24 f10e 	lsr.w	r1, r4, lr
 8012876:	42b7      	cmp	r7, r6
 8012878:	ea41 030c 	orr.w	r3, r1, ip
 801287c:	bf34      	ite	cc
 801287e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012882:	2100      	movcs	r1, #0
 8012884:	3015      	adds	r0, #21
 8012886:	fa04 f000 	lsl.w	r0, r4, r0
 801288a:	fa21 f10e 	lsr.w	r1, r1, lr
 801288e:	ea40 0201 	orr.w	r2, r0, r1
 8012892:	ec43 2b10 	vmov	d0, r2, r3
 8012896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012898:	42b7      	cmp	r7, r6
 801289a:	bf3a      	itte	cc
 801289c:	f1a5 0608 	subcc.w	r6, r5, #8
 80128a0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80128a4:	2100      	movcs	r1, #0
 80128a6:	380b      	subs	r0, #11
 80128a8:	d015      	beq.n	80128d6 <__b2d+0x8e>
 80128aa:	4084      	lsls	r4, r0
 80128ac:	f1c0 0520 	rsb	r5, r0, #32
 80128b0:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80128b4:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80128b8:	42be      	cmp	r6, r7
 80128ba:	fa21 fc05 	lsr.w	ip, r1, r5
 80128be:	ea44 030c 	orr.w	r3, r4, ip
 80128c2:	bf8c      	ite	hi
 80128c4:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80128c8:	2400      	movls	r4, #0
 80128ca:	fa01 f000 	lsl.w	r0, r1, r0
 80128ce:	40ec      	lsrs	r4, r5
 80128d0:	ea40 0204 	orr.w	r2, r0, r4
 80128d4:	e7dd      	b.n	8012892 <__b2d+0x4a>
 80128d6:	ea44 030c 	orr.w	r3, r4, ip
 80128da:	460a      	mov	r2, r1
 80128dc:	e7d9      	b.n	8012892 <__b2d+0x4a>
 80128de:	bf00      	nop
 80128e0:	3ff00000 	.word	0x3ff00000

080128e4 <__d2b>:
 80128e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80128e8:	460e      	mov	r6, r1
 80128ea:	2101      	movs	r1, #1
 80128ec:	ec59 8b10 	vmov	r8, r9, d0
 80128f0:	4615      	mov	r5, r2
 80128f2:	f7ff fcb5 	bl	8012260 <_Balloc>
 80128f6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80128fa:	4607      	mov	r7, r0
 80128fc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012900:	bb34      	cbnz	r4, 8012950 <__d2b+0x6c>
 8012902:	9301      	str	r3, [sp, #4]
 8012904:	f1b8 0300 	subs.w	r3, r8, #0
 8012908:	d027      	beq.n	801295a <__d2b+0x76>
 801290a:	a802      	add	r0, sp, #8
 801290c:	f840 3d08 	str.w	r3, [r0, #-8]!
 8012910:	f7ff fd89 	bl	8012426 <__lo0bits>
 8012914:	9900      	ldr	r1, [sp, #0]
 8012916:	b1f0      	cbz	r0, 8012956 <__d2b+0x72>
 8012918:	9a01      	ldr	r2, [sp, #4]
 801291a:	f1c0 0320 	rsb	r3, r0, #32
 801291e:	fa02 f303 	lsl.w	r3, r2, r3
 8012922:	430b      	orrs	r3, r1
 8012924:	40c2      	lsrs	r2, r0
 8012926:	617b      	str	r3, [r7, #20]
 8012928:	9201      	str	r2, [sp, #4]
 801292a:	9b01      	ldr	r3, [sp, #4]
 801292c:	61bb      	str	r3, [r7, #24]
 801292e:	2b00      	cmp	r3, #0
 8012930:	bf14      	ite	ne
 8012932:	2102      	movne	r1, #2
 8012934:	2101      	moveq	r1, #1
 8012936:	6139      	str	r1, [r7, #16]
 8012938:	b1c4      	cbz	r4, 801296c <__d2b+0x88>
 801293a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801293e:	4404      	add	r4, r0
 8012940:	6034      	str	r4, [r6, #0]
 8012942:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012946:	6028      	str	r0, [r5, #0]
 8012948:	4638      	mov	r0, r7
 801294a:	b003      	add	sp, #12
 801294c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012950:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012954:	e7d5      	b.n	8012902 <__d2b+0x1e>
 8012956:	6179      	str	r1, [r7, #20]
 8012958:	e7e7      	b.n	801292a <__d2b+0x46>
 801295a:	a801      	add	r0, sp, #4
 801295c:	f7ff fd63 	bl	8012426 <__lo0bits>
 8012960:	9b01      	ldr	r3, [sp, #4]
 8012962:	617b      	str	r3, [r7, #20]
 8012964:	2101      	movs	r1, #1
 8012966:	6139      	str	r1, [r7, #16]
 8012968:	3020      	adds	r0, #32
 801296a:	e7e5      	b.n	8012938 <__d2b+0x54>
 801296c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8012970:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012974:	6030      	str	r0, [r6, #0]
 8012976:	6918      	ldr	r0, [r3, #16]
 8012978:	f7ff fd36 	bl	80123e8 <__hi0bits>
 801297c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8012980:	e7e1      	b.n	8012946 <__d2b+0x62>

08012982 <__ratio>:
 8012982:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012986:	4688      	mov	r8, r1
 8012988:	4669      	mov	r1, sp
 801298a:	4681      	mov	r9, r0
 801298c:	f7ff ff5c 	bl	8012848 <__b2d>
 8012990:	a901      	add	r1, sp, #4
 8012992:	4640      	mov	r0, r8
 8012994:	ec57 6b10 	vmov	r6, r7, d0
 8012998:	ee10 4a10 	vmov	r4, s0
 801299c:	f7ff ff54 	bl	8012848 <__b2d>
 80129a0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80129a4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80129a8:	eba3 0c02 	sub.w	ip, r3, r2
 80129ac:	e9dd 3200 	ldrd	r3, r2, [sp]
 80129b0:	1a9b      	subs	r3, r3, r2
 80129b2:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80129b6:	ec51 0b10 	vmov	r0, r1, d0
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	ee10 aa10 	vmov	sl, s0
 80129c0:	bfce      	itee	gt
 80129c2:	463a      	movgt	r2, r7
 80129c4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80129c8:	460a      	movle	r2, r1
 80129ca:	463d      	mov	r5, r7
 80129cc:	468b      	mov	fp, r1
 80129ce:	bfcc      	ite	gt
 80129d0:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 80129d4:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80129d8:	ec45 4b17 	vmov	d7, r4, r5
 80129dc:	ec4b ab16 	vmov	d6, sl, fp
 80129e0:	ee87 0b06 	vdiv.f64	d0, d7, d6
 80129e4:	b003      	add	sp, #12
 80129e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080129ea <__copybits>:
 80129ea:	3901      	subs	r1, #1
 80129ec:	b510      	push	{r4, lr}
 80129ee:	1149      	asrs	r1, r1, #5
 80129f0:	6914      	ldr	r4, [r2, #16]
 80129f2:	3101      	adds	r1, #1
 80129f4:	f102 0314 	add.w	r3, r2, #20
 80129f8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80129fc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012a00:	42a3      	cmp	r3, r4
 8012a02:	4602      	mov	r2, r0
 8012a04:	d303      	bcc.n	8012a0e <__copybits+0x24>
 8012a06:	2300      	movs	r3, #0
 8012a08:	428a      	cmp	r2, r1
 8012a0a:	d305      	bcc.n	8012a18 <__copybits+0x2e>
 8012a0c:	bd10      	pop	{r4, pc}
 8012a0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012a12:	f840 2b04 	str.w	r2, [r0], #4
 8012a16:	e7f3      	b.n	8012a00 <__copybits+0x16>
 8012a18:	f842 3b04 	str.w	r3, [r2], #4
 8012a1c:	e7f4      	b.n	8012a08 <__copybits+0x1e>

08012a1e <__any_on>:
 8012a1e:	f100 0214 	add.w	r2, r0, #20
 8012a22:	6900      	ldr	r0, [r0, #16]
 8012a24:	114b      	asrs	r3, r1, #5
 8012a26:	4298      	cmp	r0, r3
 8012a28:	b510      	push	{r4, lr}
 8012a2a:	db11      	blt.n	8012a50 <__any_on+0x32>
 8012a2c:	dd0a      	ble.n	8012a44 <__any_on+0x26>
 8012a2e:	f011 011f 	ands.w	r1, r1, #31
 8012a32:	d007      	beq.n	8012a44 <__any_on+0x26>
 8012a34:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012a38:	fa24 f001 	lsr.w	r0, r4, r1
 8012a3c:	fa00 f101 	lsl.w	r1, r0, r1
 8012a40:	428c      	cmp	r4, r1
 8012a42:	d10b      	bne.n	8012a5c <__any_on+0x3e>
 8012a44:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012a48:	4293      	cmp	r3, r2
 8012a4a:	d803      	bhi.n	8012a54 <__any_on+0x36>
 8012a4c:	2000      	movs	r0, #0
 8012a4e:	bd10      	pop	{r4, pc}
 8012a50:	4603      	mov	r3, r0
 8012a52:	e7f7      	b.n	8012a44 <__any_on+0x26>
 8012a54:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012a58:	2900      	cmp	r1, #0
 8012a5a:	d0f5      	beq.n	8012a48 <__any_on+0x2a>
 8012a5c:	2001      	movs	r0, #1
 8012a5e:	e7f6      	b.n	8012a4e <__any_on+0x30>

08012a60 <_calloc_r>:
 8012a60:	b538      	push	{r3, r4, r5, lr}
 8012a62:	fb02 f401 	mul.w	r4, r2, r1
 8012a66:	4621      	mov	r1, r4
 8012a68:	f000 f856 	bl	8012b18 <_malloc_r>
 8012a6c:	4605      	mov	r5, r0
 8012a6e:	b118      	cbz	r0, 8012a78 <_calloc_r+0x18>
 8012a70:	4622      	mov	r2, r4
 8012a72:	2100      	movs	r1, #0
 8012a74:	f7fc fdd5 	bl	800f622 <memset>
 8012a78:	4628      	mov	r0, r5
 8012a7a:	bd38      	pop	{r3, r4, r5, pc}

08012a7c <_free_r>:
 8012a7c:	b538      	push	{r3, r4, r5, lr}
 8012a7e:	4605      	mov	r5, r0
 8012a80:	2900      	cmp	r1, #0
 8012a82:	d045      	beq.n	8012b10 <_free_r+0x94>
 8012a84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012a88:	1f0c      	subs	r4, r1, #4
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	bfb8      	it	lt
 8012a8e:	18e4      	addlt	r4, r4, r3
 8012a90:	f000 fa36 	bl	8012f00 <__malloc_lock>
 8012a94:	4a1f      	ldr	r2, [pc, #124]	; (8012b14 <_free_r+0x98>)
 8012a96:	6813      	ldr	r3, [r2, #0]
 8012a98:	4610      	mov	r0, r2
 8012a9a:	b933      	cbnz	r3, 8012aaa <_free_r+0x2e>
 8012a9c:	6063      	str	r3, [r4, #4]
 8012a9e:	6014      	str	r4, [r2, #0]
 8012aa0:	4628      	mov	r0, r5
 8012aa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012aa6:	f000 ba2c 	b.w	8012f02 <__malloc_unlock>
 8012aaa:	42a3      	cmp	r3, r4
 8012aac:	d90c      	bls.n	8012ac8 <_free_r+0x4c>
 8012aae:	6821      	ldr	r1, [r4, #0]
 8012ab0:	1862      	adds	r2, r4, r1
 8012ab2:	4293      	cmp	r3, r2
 8012ab4:	bf04      	itt	eq
 8012ab6:	681a      	ldreq	r2, [r3, #0]
 8012ab8:	685b      	ldreq	r3, [r3, #4]
 8012aba:	6063      	str	r3, [r4, #4]
 8012abc:	bf04      	itt	eq
 8012abe:	1852      	addeq	r2, r2, r1
 8012ac0:	6022      	streq	r2, [r4, #0]
 8012ac2:	6004      	str	r4, [r0, #0]
 8012ac4:	e7ec      	b.n	8012aa0 <_free_r+0x24>
 8012ac6:	4613      	mov	r3, r2
 8012ac8:	685a      	ldr	r2, [r3, #4]
 8012aca:	b10a      	cbz	r2, 8012ad0 <_free_r+0x54>
 8012acc:	42a2      	cmp	r2, r4
 8012ace:	d9fa      	bls.n	8012ac6 <_free_r+0x4a>
 8012ad0:	6819      	ldr	r1, [r3, #0]
 8012ad2:	1858      	adds	r0, r3, r1
 8012ad4:	42a0      	cmp	r0, r4
 8012ad6:	d10b      	bne.n	8012af0 <_free_r+0x74>
 8012ad8:	6820      	ldr	r0, [r4, #0]
 8012ada:	4401      	add	r1, r0
 8012adc:	1858      	adds	r0, r3, r1
 8012ade:	4282      	cmp	r2, r0
 8012ae0:	6019      	str	r1, [r3, #0]
 8012ae2:	d1dd      	bne.n	8012aa0 <_free_r+0x24>
 8012ae4:	6810      	ldr	r0, [r2, #0]
 8012ae6:	6852      	ldr	r2, [r2, #4]
 8012ae8:	605a      	str	r2, [r3, #4]
 8012aea:	4401      	add	r1, r0
 8012aec:	6019      	str	r1, [r3, #0]
 8012aee:	e7d7      	b.n	8012aa0 <_free_r+0x24>
 8012af0:	d902      	bls.n	8012af8 <_free_r+0x7c>
 8012af2:	230c      	movs	r3, #12
 8012af4:	602b      	str	r3, [r5, #0]
 8012af6:	e7d3      	b.n	8012aa0 <_free_r+0x24>
 8012af8:	6820      	ldr	r0, [r4, #0]
 8012afa:	1821      	adds	r1, r4, r0
 8012afc:	428a      	cmp	r2, r1
 8012afe:	bf04      	itt	eq
 8012b00:	6811      	ldreq	r1, [r2, #0]
 8012b02:	6852      	ldreq	r2, [r2, #4]
 8012b04:	6062      	str	r2, [r4, #4]
 8012b06:	bf04      	itt	eq
 8012b08:	1809      	addeq	r1, r1, r0
 8012b0a:	6021      	streq	r1, [r4, #0]
 8012b0c:	605c      	str	r4, [r3, #4]
 8012b0e:	e7c7      	b.n	8012aa0 <_free_r+0x24>
 8012b10:	bd38      	pop	{r3, r4, r5, pc}
 8012b12:	bf00      	nop
 8012b14:	2000130c 	.word	0x2000130c

08012b18 <_malloc_r>:
 8012b18:	b570      	push	{r4, r5, r6, lr}
 8012b1a:	1ccd      	adds	r5, r1, #3
 8012b1c:	f025 0503 	bic.w	r5, r5, #3
 8012b20:	3508      	adds	r5, #8
 8012b22:	2d0c      	cmp	r5, #12
 8012b24:	bf38      	it	cc
 8012b26:	250c      	movcc	r5, #12
 8012b28:	2d00      	cmp	r5, #0
 8012b2a:	4606      	mov	r6, r0
 8012b2c:	db01      	blt.n	8012b32 <_malloc_r+0x1a>
 8012b2e:	42a9      	cmp	r1, r5
 8012b30:	d903      	bls.n	8012b3a <_malloc_r+0x22>
 8012b32:	230c      	movs	r3, #12
 8012b34:	6033      	str	r3, [r6, #0]
 8012b36:	2000      	movs	r0, #0
 8012b38:	bd70      	pop	{r4, r5, r6, pc}
 8012b3a:	f000 f9e1 	bl	8012f00 <__malloc_lock>
 8012b3e:	4a21      	ldr	r2, [pc, #132]	; (8012bc4 <_malloc_r+0xac>)
 8012b40:	6814      	ldr	r4, [r2, #0]
 8012b42:	4621      	mov	r1, r4
 8012b44:	b991      	cbnz	r1, 8012b6c <_malloc_r+0x54>
 8012b46:	4c20      	ldr	r4, [pc, #128]	; (8012bc8 <_malloc_r+0xb0>)
 8012b48:	6823      	ldr	r3, [r4, #0]
 8012b4a:	b91b      	cbnz	r3, 8012b54 <_malloc_r+0x3c>
 8012b4c:	4630      	mov	r0, r6
 8012b4e:	f000 f98f 	bl	8012e70 <_sbrk_r>
 8012b52:	6020      	str	r0, [r4, #0]
 8012b54:	4629      	mov	r1, r5
 8012b56:	4630      	mov	r0, r6
 8012b58:	f000 f98a 	bl	8012e70 <_sbrk_r>
 8012b5c:	1c43      	adds	r3, r0, #1
 8012b5e:	d124      	bne.n	8012baa <_malloc_r+0x92>
 8012b60:	230c      	movs	r3, #12
 8012b62:	6033      	str	r3, [r6, #0]
 8012b64:	4630      	mov	r0, r6
 8012b66:	f000 f9cc 	bl	8012f02 <__malloc_unlock>
 8012b6a:	e7e4      	b.n	8012b36 <_malloc_r+0x1e>
 8012b6c:	680b      	ldr	r3, [r1, #0]
 8012b6e:	1b5b      	subs	r3, r3, r5
 8012b70:	d418      	bmi.n	8012ba4 <_malloc_r+0x8c>
 8012b72:	2b0b      	cmp	r3, #11
 8012b74:	d90f      	bls.n	8012b96 <_malloc_r+0x7e>
 8012b76:	600b      	str	r3, [r1, #0]
 8012b78:	50cd      	str	r5, [r1, r3]
 8012b7a:	18cc      	adds	r4, r1, r3
 8012b7c:	4630      	mov	r0, r6
 8012b7e:	f000 f9c0 	bl	8012f02 <__malloc_unlock>
 8012b82:	f104 000b 	add.w	r0, r4, #11
 8012b86:	1d23      	adds	r3, r4, #4
 8012b88:	f020 0007 	bic.w	r0, r0, #7
 8012b8c:	1ac3      	subs	r3, r0, r3
 8012b8e:	d0d3      	beq.n	8012b38 <_malloc_r+0x20>
 8012b90:	425a      	negs	r2, r3
 8012b92:	50e2      	str	r2, [r4, r3]
 8012b94:	e7d0      	b.n	8012b38 <_malloc_r+0x20>
 8012b96:	428c      	cmp	r4, r1
 8012b98:	684b      	ldr	r3, [r1, #4]
 8012b9a:	bf16      	itet	ne
 8012b9c:	6063      	strne	r3, [r4, #4]
 8012b9e:	6013      	streq	r3, [r2, #0]
 8012ba0:	460c      	movne	r4, r1
 8012ba2:	e7eb      	b.n	8012b7c <_malloc_r+0x64>
 8012ba4:	460c      	mov	r4, r1
 8012ba6:	6849      	ldr	r1, [r1, #4]
 8012ba8:	e7cc      	b.n	8012b44 <_malloc_r+0x2c>
 8012baa:	1cc4      	adds	r4, r0, #3
 8012bac:	f024 0403 	bic.w	r4, r4, #3
 8012bb0:	42a0      	cmp	r0, r4
 8012bb2:	d005      	beq.n	8012bc0 <_malloc_r+0xa8>
 8012bb4:	1a21      	subs	r1, r4, r0
 8012bb6:	4630      	mov	r0, r6
 8012bb8:	f000 f95a 	bl	8012e70 <_sbrk_r>
 8012bbc:	3001      	adds	r0, #1
 8012bbe:	d0cf      	beq.n	8012b60 <_malloc_r+0x48>
 8012bc0:	6025      	str	r5, [r4, #0]
 8012bc2:	e7db      	b.n	8012b7c <_malloc_r+0x64>
 8012bc4:	2000130c 	.word	0x2000130c
 8012bc8:	20001310 	.word	0x20001310

08012bcc <__ssputs_r>:
 8012bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012bd0:	688e      	ldr	r6, [r1, #8]
 8012bd2:	429e      	cmp	r6, r3
 8012bd4:	4682      	mov	sl, r0
 8012bd6:	460c      	mov	r4, r1
 8012bd8:	4690      	mov	r8, r2
 8012bda:	4699      	mov	r9, r3
 8012bdc:	d837      	bhi.n	8012c4e <__ssputs_r+0x82>
 8012bde:	898a      	ldrh	r2, [r1, #12]
 8012be0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012be4:	d031      	beq.n	8012c4a <__ssputs_r+0x7e>
 8012be6:	6825      	ldr	r5, [r4, #0]
 8012be8:	6909      	ldr	r1, [r1, #16]
 8012bea:	1a6f      	subs	r7, r5, r1
 8012bec:	6965      	ldr	r5, [r4, #20]
 8012bee:	2302      	movs	r3, #2
 8012bf0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012bf4:	fb95 f5f3 	sdiv	r5, r5, r3
 8012bf8:	f109 0301 	add.w	r3, r9, #1
 8012bfc:	443b      	add	r3, r7
 8012bfe:	429d      	cmp	r5, r3
 8012c00:	bf38      	it	cc
 8012c02:	461d      	movcc	r5, r3
 8012c04:	0553      	lsls	r3, r2, #21
 8012c06:	d530      	bpl.n	8012c6a <__ssputs_r+0x9e>
 8012c08:	4629      	mov	r1, r5
 8012c0a:	f7ff ff85 	bl	8012b18 <_malloc_r>
 8012c0e:	4606      	mov	r6, r0
 8012c10:	b950      	cbnz	r0, 8012c28 <__ssputs_r+0x5c>
 8012c12:	230c      	movs	r3, #12
 8012c14:	f8ca 3000 	str.w	r3, [sl]
 8012c18:	89a3      	ldrh	r3, [r4, #12]
 8012c1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012c1e:	81a3      	strh	r3, [r4, #12]
 8012c20:	f04f 30ff 	mov.w	r0, #4294967295
 8012c24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c28:	463a      	mov	r2, r7
 8012c2a:	6921      	ldr	r1, [r4, #16]
 8012c2c:	f7fc fcee 	bl	800f60c <memcpy>
 8012c30:	89a3      	ldrh	r3, [r4, #12]
 8012c32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012c36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012c3a:	81a3      	strh	r3, [r4, #12]
 8012c3c:	6126      	str	r6, [r4, #16]
 8012c3e:	6165      	str	r5, [r4, #20]
 8012c40:	443e      	add	r6, r7
 8012c42:	1bed      	subs	r5, r5, r7
 8012c44:	6026      	str	r6, [r4, #0]
 8012c46:	60a5      	str	r5, [r4, #8]
 8012c48:	464e      	mov	r6, r9
 8012c4a:	454e      	cmp	r6, r9
 8012c4c:	d900      	bls.n	8012c50 <__ssputs_r+0x84>
 8012c4e:	464e      	mov	r6, r9
 8012c50:	4632      	mov	r2, r6
 8012c52:	4641      	mov	r1, r8
 8012c54:	6820      	ldr	r0, [r4, #0]
 8012c56:	f000 f93a 	bl	8012ece <memmove>
 8012c5a:	68a3      	ldr	r3, [r4, #8]
 8012c5c:	1b9b      	subs	r3, r3, r6
 8012c5e:	60a3      	str	r3, [r4, #8]
 8012c60:	6823      	ldr	r3, [r4, #0]
 8012c62:	441e      	add	r6, r3
 8012c64:	6026      	str	r6, [r4, #0]
 8012c66:	2000      	movs	r0, #0
 8012c68:	e7dc      	b.n	8012c24 <__ssputs_r+0x58>
 8012c6a:	462a      	mov	r2, r5
 8012c6c:	f000 f94a 	bl	8012f04 <_realloc_r>
 8012c70:	4606      	mov	r6, r0
 8012c72:	2800      	cmp	r0, #0
 8012c74:	d1e2      	bne.n	8012c3c <__ssputs_r+0x70>
 8012c76:	6921      	ldr	r1, [r4, #16]
 8012c78:	4650      	mov	r0, sl
 8012c7a:	f7ff feff 	bl	8012a7c <_free_r>
 8012c7e:	e7c8      	b.n	8012c12 <__ssputs_r+0x46>

08012c80 <_svfiprintf_r>:
 8012c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c84:	461d      	mov	r5, r3
 8012c86:	898b      	ldrh	r3, [r1, #12]
 8012c88:	061f      	lsls	r7, r3, #24
 8012c8a:	b09d      	sub	sp, #116	; 0x74
 8012c8c:	4680      	mov	r8, r0
 8012c8e:	460c      	mov	r4, r1
 8012c90:	4616      	mov	r6, r2
 8012c92:	d50f      	bpl.n	8012cb4 <_svfiprintf_r+0x34>
 8012c94:	690b      	ldr	r3, [r1, #16]
 8012c96:	b96b      	cbnz	r3, 8012cb4 <_svfiprintf_r+0x34>
 8012c98:	2140      	movs	r1, #64	; 0x40
 8012c9a:	f7ff ff3d 	bl	8012b18 <_malloc_r>
 8012c9e:	6020      	str	r0, [r4, #0]
 8012ca0:	6120      	str	r0, [r4, #16]
 8012ca2:	b928      	cbnz	r0, 8012cb0 <_svfiprintf_r+0x30>
 8012ca4:	230c      	movs	r3, #12
 8012ca6:	f8c8 3000 	str.w	r3, [r8]
 8012caa:	f04f 30ff 	mov.w	r0, #4294967295
 8012cae:	e0c8      	b.n	8012e42 <_svfiprintf_r+0x1c2>
 8012cb0:	2340      	movs	r3, #64	; 0x40
 8012cb2:	6163      	str	r3, [r4, #20]
 8012cb4:	2300      	movs	r3, #0
 8012cb6:	9309      	str	r3, [sp, #36]	; 0x24
 8012cb8:	2320      	movs	r3, #32
 8012cba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012cbe:	2330      	movs	r3, #48	; 0x30
 8012cc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012cc4:	9503      	str	r5, [sp, #12]
 8012cc6:	f04f 0b01 	mov.w	fp, #1
 8012cca:	4637      	mov	r7, r6
 8012ccc:	463d      	mov	r5, r7
 8012cce:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012cd2:	b10b      	cbz	r3, 8012cd8 <_svfiprintf_r+0x58>
 8012cd4:	2b25      	cmp	r3, #37	; 0x25
 8012cd6:	d13e      	bne.n	8012d56 <_svfiprintf_r+0xd6>
 8012cd8:	ebb7 0a06 	subs.w	sl, r7, r6
 8012cdc:	d00b      	beq.n	8012cf6 <_svfiprintf_r+0x76>
 8012cde:	4653      	mov	r3, sl
 8012ce0:	4632      	mov	r2, r6
 8012ce2:	4621      	mov	r1, r4
 8012ce4:	4640      	mov	r0, r8
 8012ce6:	f7ff ff71 	bl	8012bcc <__ssputs_r>
 8012cea:	3001      	adds	r0, #1
 8012cec:	f000 80a4 	beq.w	8012e38 <_svfiprintf_r+0x1b8>
 8012cf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012cf2:	4453      	add	r3, sl
 8012cf4:	9309      	str	r3, [sp, #36]	; 0x24
 8012cf6:	783b      	ldrb	r3, [r7, #0]
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	f000 809d 	beq.w	8012e38 <_svfiprintf_r+0x1b8>
 8012cfe:	2300      	movs	r3, #0
 8012d00:	f04f 32ff 	mov.w	r2, #4294967295
 8012d04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012d08:	9304      	str	r3, [sp, #16]
 8012d0a:	9307      	str	r3, [sp, #28]
 8012d0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012d10:	931a      	str	r3, [sp, #104]	; 0x68
 8012d12:	462f      	mov	r7, r5
 8012d14:	2205      	movs	r2, #5
 8012d16:	f817 1b01 	ldrb.w	r1, [r7], #1
 8012d1a:	4850      	ldr	r0, [pc, #320]	; (8012e5c <_svfiprintf_r+0x1dc>)
 8012d1c:	f7ed faa8 	bl	8000270 <memchr>
 8012d20:	9b04      	ldr	r3, [sp, #16]
 8012d22:	b9d0      	cbnz	r0, 8012d5a <_svfiprintf_r+0xda>
 8012d24:	06d9      	lsls	r1, r3, #27
 8012d26:	bf44      	itt	mi
 8012d28:	2220      	movmi	r2, #32
 8012d2a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012d2e:	071a      	lsls	r2, r3, #28
 8012d30:	bf44      	itt	mi
 8012d32:	222b      	movmi	r2, #43	; 0x2b
 8012d34:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012d38:	782a      	ldrb	r2, [r5, #0]
 8012d3a:	2a2a      	cmp	r2, #42	; 0x2a
 8012d3c:	d015      	beq.n	8012d6a <_svfiprintf_r+0xea>
 8012d3e:	9a07      	ldr	r2, [sp, #28]
 8012d40:	462f      	mov	r7, r5
 8012d42:	2000      	movs	r0, #0
 8012d44:	250a      	movs	r5, #10
 8012d46:	4639      	mov	r1, r7
 8012d48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012d4c:	3b30      	subs	r3, #48	; 0x30
 8012d4e:	2b09      	cmp	r3, #9
 8012d50:	d94d      	bls.n	8012dee <_svfiprintf_r+0x16e>
 8012d52:	b1b8      	cbz	r0, 8012d84 <_svfiprintf_r+0x104>
 8012d54:	e00f      	b.n	8012d76 <_svfiprintf_r+0xf6>
 8012d56:	462f      	mov	r7, r5
 8012d58:	e7b8      	b.n	8012ccc <_svfiprintf_r+0x4c>
 8012d5a:	4a40      	ldr	r2, [pc, #256]	; (8012e5c <_svfiprintf_r+0x1dc>)
 8012d5c:	1a80      	subs	r0, r0, r2
 8012d5e:	fa0b f000 	lsl.w	r0, fp, r0
 8012d62:	4318      	orrs	r0, r3
 8012d64:	9004      	str	r0, [sp, #16]
 8012d66:	463d      	mov	r5, r7
 8012d68:	e7d3      	b.n	8012d12 <_svfiprintf_r+0x92>
 8012d6a:	9a03      	ldr	r2, [sp, #12]
 8012d6c:	1d11      	adds	r1, r2, #4
 8012d6e:	6812      	ldr	r2, [r2, #0]
 8012d70:	9103      	str	r1, [sp, #12]
 8012d72:	2a00      	cmp	r2, #0
 8012d74:	db01      	blt.n	8012d7a <_svfiprintf_r+0xfa>
 8012d76:	9207      	str	r2, [sp, #28]
 8012d78:	e004      	b.n	8012d84 <_svfiprintf_r+0x104>
 8012d7a:	4252      	negs	r2, r2
 8012d7c:	f043 0302 	orr.w	r3, r3, #2
 8012d80:	9207      	str	r2, [sp, #28]
 8012d82:	9304      	str	r3, [sp, #16]
 8012d84:	783b      	ldrb	r3, [r7, #0]
 8012d86:	2b2e      	cmp	r3, #46	; 0x2e
 8012d88:	d10c      	bne.n	8012da4 <_svfiprintf_r+0x124>
 8012d8a:	787b      	ldrb	r3, [r7, #1]
 8012d8c:	2b2a      	cmp	r3, #42	; 0x2a
 8012d8e:	d133      	bne.n	8012df8 <_svfiprintf_r+0x178>
 8012d90:	9b03      	ldr	r3, [sp, #12]
 8012d92:	1d1a      	adds	r2, r3, #4
 8012d94:	681b      	ldr	r3, [r3, #0]
 8012d96:	9203      	str	r2, [sp, #12]
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	bfb8      	it	lt
 8012d9c:	f04f 33ff 	movlt.w	r3, #4294967295
 8012da0:	3702      	adds	r7, #2
 8012da2:	9305      	str	r3, [sp, #20]
 8012da4:	4d2e      	ldr	r5, [pc, #184]	; (8012e60 <_svfiprintf_r+0x1e0>)
 8012da6:	7839      	ldrb	r1, [r7, #0]
 8012da8:	2203      	movs	r2, #3
 8012daa:	4628      	mov	r0, r5
 8012dac:	f7ed fa60 	bl	8000270 <memchr>
 8012db0:	b138      	cbz	r0, 8012dc2 <_svfiprintf_r+0x142>
 8012db2:	2340      	movs	r3, #64	; 0x40
 8012db4:	1b40      	subs	r0, r0, r5
 8012db6:	fa03 f000 	lsl.w	r0, r3, r0
 8012dba:	9b04      	ldr	r3, [sp, #16]
 8012dbc:	4303      	orrs	r3, r0
 8012dbe:	3701      	adds	r7, #1
 8012dc0:	9304      	str	r3, [sp, #16]
 8012dc2:	7839      	ldrb	r1, [r7, #0]
 8012dc4:	4827      	ldr	r0, [pc, #156]	; (8012e64 <_svfiprintf_r+0x1e4>)
 8012dc6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012dca:	2206      	movs	r2, #6
 8012dcc:	1c7e      	adds	r6, r7, #1
 8012dce:	f7ed fa4f 	bl	8000270 <memchr>
 8012dd2:	2800      	cmp	r0, #0
 8012dd4:	d038      	beq.n	8012e48 <_svfiprintf_r+0x1c8>
 8012dd6:	4b24      	ldr	r3, [pc, #144]	; (8012e68 <_svfiprintf_r+0x1e8>)
 8012dd8:	bb13      	cbnz	r3, 8012e20 <_svfiprintf_r+0x1a0>
 8012dda:	9b03      	ldr	r3, [sp, #12]
 8012ddc:	3307      	adds	r3, #7
 8012dde:	f023 0307 	bic.w	r3, r3, #7
 8012de2:	3308      	adds	r3, #8
 8012de4:	9303      	str	r3, [sp, #12]
 8012de6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012de8:	444b      	add	r3, r9
 8012dea:	9309      	str	r3, [sp, #36]	; 0x24
 8012dec:	e76d      	b.n	8012cca <_svfiprintf_r+0x4a>
 8012dee:	fb05 3202 	mla	r2, r5, r2, r3
 8012df2:	2001      	movs	r0, #1
 8012df4:	460f      	mov	r7, r1
 8012df6:	e7a6      	b.n	8012d46 <_svfiprintf_r+0xc6>
 8012df8:	2300      	movs	r3, #0
 8012dfa:	3701      	adds	r7, #1
 8012dfc:	9305      	str	r3, [sp, #20]
 8012dfe:	4619      	mov	r1, r3
 8012e00:	250a      	movs	r5, #10
 8012e02:	4638      	mov	r0, r7
 8012e04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012e08:	3a30      	subs	r2, #48	; 0x30
 8012e0a:	2a09      	cmp	r2, #9
 8012e0c:	d903      	bls.n	8012e16 <_svfiprintf_r+0x196>
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d0c8      	beq.n	8012da4 <_svfiprintf_r+0x124>
 8012e12:	9105      	str	r1, [sp, #20]
 8012e14:	e7c6      	b.n	8012da4 <_svfiprintf_r+0x124>
 8012e16:	fb05 2101 	mla	r1, r5, r1, r2
 8012e1a:	2301      	movs	r3, #1
 8012e1c:	4607      	mov	r7, r0
 8012e1e:	e7f0      	b.n	8012e02 <_svfiprintf_r+0x182>
 8012e20:	ab03      	add	r3, sp, #12
 8012e22:	9300      	str	r3, [sp, #0]
 8012e24:	4622      	mov	r2, r4
 8012e26:	4b11      	ldr	r3, [pc, #68]	; (8012e6c <_svfiprintf_r+0x1ec>)
 8012e28:	a904      	add	r1, sp, #16
 8012e2a:	4640      	mov	r0, r8
 8012e2c:	f7fc fc88 	bl	800f740 <_printf_float>
 8012e30:	f1b0 3fff 	cmp.w	r0, #4294967295
 8012e34:	4681      	mov	r9, r0
 8012e36:	d1d6      	bne.n	8012de6 <_svfiprintf_r+0x166>
 8012e38:	89a3      	ldrh	r3, [r4, #12]
 8012e3a:	065b      	lsls	r3, r3, #25
 8012e3c:	f53f af35 	bmi.w	8012caa <_svfiprintf_r+0x2a>
 8012e40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012e42:	b01d      	add	sp, #116	; 0x74
 8012e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e48:	ab03      	add	r3, sp, #12
 8012e4a:	9300      	str	r3, [sp, #0]
 8012e4c:	4622      	mov	r2, r4
 8012e4e:	4b07      	ldr	r3, [pc, #28]	; (8012e6c <_svfiprintf_r+0x1ec>)
 8012e50:	a904      	add	r1, sp, #16
 8012e52:	4640      	mov	r0, r8
 8012e54:	f7fc ff16 	bl	800fc84 <_printf_i>
 8012e58:	e7ea      	b.n	8012e30 <_svfiprintf_r+0x1b0>
 8012e5a:	bf00      	nop
 8012e5c:	08013704 	.word	0x08013704
 8012e60:	0801370a 	.word	0x0801370a
 8012e64:	0801370e 	.word	0x0801370e
 8012e68:	0800f741 	.word	0x0800f741
 8012e6c:	08012bcd 	.word	0x08012bcd

08012e70 <_sbrk_r>:
 8012e70:	b538      	push	{r3, r4, r5, lr}
 8012e72:	4c06      	ldr	r4, [pc, #24]	; (8012e8c <_sbrk_r+0x1c>)
 8012e74:	2300      	movs	r3, #0
 8012e76:	4605      	mov	r5, r0
 8012e78:	4608      	mov	r0, r1
 8012e7a:	6023      	str	r3, [r4, #0]
 8012e7c:	f7f0 ff16 	bl	8003cac <_sbrk>
 8012e80:	1c43      	adds	r3, r0, #1
 8012e82:	d102      	bne.n	8012e8a <_sbrk_r+0x1a>
 8012e84:	6823      	ldr	r3, [r4, #0]
 8012e86:	b103      	cbz	r3, 8012e8a <_sbrk_r+0x1a>
 8012e88:	602b      	str	r3, [r5, #0]
 8012e8a:	bd38      	pop	{r3, r4, r5, pc}
 8012e8c:	200049c0 	.word	0x200049c0

08012e90 <strncmp>:
 8012e90:	b510      	push	{r4, lr}
 8012e92:	b16a      	cbz	r2, 8012eb0 <strncmp+0x20>
 8012e94:	3901      	subs	r1, #1
 8012e96:	1884      	adds	r4, r0, r2
 8012e98:	f810 3b01 	ldrb.w	r3, [r0], #1
 8012e9c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8012ea0:	4293      	cmp	r3, r2
 8012ea2:	d103      	bne.n	8012eac <strncmp+0x1c>
 8012ea4:	42a0      	cmp	r0, r4
 8012ea6:	d001      	beq.n	8012eac <strncmp+0x1c>
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	d1f5      	bne.n	8012e98 <strncmp+0x8>
 8012eac:	1a98      	subs	r0, r3, r2
 8012eae:	bd10      	pop	{r4, pc}
 8012eb0:	4610      	mov	r0, r2
 8012eb2:	e7fc      	b.n	8012eae <strncmp+0x1e>

08012eb4 <__ascii_wctomb>:
 8012eb4:	b149      	cbz	r1, 8012eca <__ascii_wctomb+0x16>
 8012eb6:	2aff      	cmp	r2, #255	; 0xff
 8012eb8:	bf85      	ittet	hi
 8012eba:	238a      	movhi	r3, #138	; 0x8a
 8012ebc:	6003      	strhi	r3, [r0, #0]
 8012ebe:	700a      	strbls	r2, [r1, #0]
 8012ec0:	f04f 30ff 	movhi.w	r0, #4294967295
 8012ec4:	bf98      	it	ls
 8012ec6:	2001      	movls	r0, #1
 8012ec8:	4770      	bx	lr
 8012eca:	4608      	mov	r0, r1
 8012ecc:	4770      	bx	lr

08012ece <memmove>:
 8012ece:	4288      	cmp	r0, r1
 8012ed0:	b510      	push	{r4, lr}
 8012ed2:	eb01 0302 	add.w	r3, r1, r2
 8012ed6:	d807      	bhi.n	8012ee8 <memmove+0x1a>
 8012ed8:	1e42      	subs	r2, r0, #1
 8012eda:	4299      	cmp	r1, r3
 8012edc:	d00a      	beq.n	8012ef4 <memmove+0x26>
 8012ede:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012ee2:	f802 4f01 	strb.w	r4, [r2, #1]!
 8012ee6:	e7f8      	b.n	8012eda <memmove+0xc>
 8012ee8:	4283      	cmp	r3, r0
 8012eea:	d9f5      	bls.n	8012ed8 <memmove+0xa>
 8012eec:	1881      	adds	r1, r0, r2
 8012eee:	1ad2      	subs	r2, r2, r3
 8012ef0:	42d3      	cmn	r3, r2
 8012ef2:	d100      	bne.n	8012ef6 <memmove+0x28>
 8012ef4:	bd10      	pop	{r4, pc}
 8012ef6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012efa:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8012efe:	e7f7      	b.n	8012ef0 <memmove+0x22>

08012f00 <__malloc_lock>:
 8012f00:	4770      	bx	lr

08012f02 <__malloc_unlock>:
 8012f02:	4770      	bx	lr

08012f04 <_realloc_r>:
 8012f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f06:	4607      	mov	r7, r0
 8012f08:	4614      	mov	r4, r2
 8012f0a:	460e      	mov	r6, r1
 8012f0c:	b921      	cbnz	r1, 8012f18 <_realloc_r+0x14>
 8012f0e:	4611      	mov	r1, r2
 8012f10:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012f14:	f7ff be00 	b.w	8012b18 <_malloc_r>
 8012f18:	b922      	cbnz	r2, 8012f24 <_realloc_r+0x20>
 8012f1a:	f7ff fdaf 	bl	8012a7c <_free_r>
 8012f1e:	4625      	mov	r5, r4
 8012f20:	4628      	mov	r0, r5
 8012f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012f24:	f000 f814 	bl	8012f50 <_malloc_usable_size_r>
 8012f28:	42a0      	cmp	r0, r4
 8012f2a:	d20f      	bcs.n	8012f4c <_realloc_r+0x48>
 8012f2c:	4621      	mov	r1, r4
 8012f2e:	4638      	mov	r0, r7
 8012f30:	f7ff fdf2 	bl	8012b18 <_malloc_r>
 8012f34:	4605      	mov	r5, r0
 8012f36:	2800      	cmp	r0, #0
 8012f38:	d0f2      	beq.n	8012f20 <_realloc_r+0x1c>
 8012f3a:	4631      	mov	r1, r6
 8012f3c:	4622      	mov	r2, r4
 8012f3e:	f7fc fb65 	bl	800f60c <memcpy>
 8012f42:	4631      	mov	r1, r6
 8012f44:	4638      	mov	r0, r7
 8012f46:	f7ff fd99 	bl	8012a7c <_free_r>
 8012f4a:	e7e9      	b.n	8012f20 <_realloc_r+0x1c>
 8012f4c:	4635      	mov	r5, r6
 8012f4e:	e7e7      	b.n	8012f20 <_realloc_r+0x1c>

08012f50 <_malloc_usable_size_r>:
 8012f50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012f54:	1f18      	subs	r0, r3, #4
 8012f56:	2b00      	cmp	r3, #0
 8012f58:	bfbc      	itt	lt
 8012f5a:	580b      	ldrlt	r3, [r1, r0]
 8012f5c:	18c0      	addlt	r0, r0, r3
 8012f5e:	4770      	bx	lr

08012f60 <_init>:
 8012f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f62:	bf00      	nop
 8012f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012f66:	bc08      	pop	{r3}
 8012f68:	469e      	mov	lr, r3
 8012f6a:	4770      	bx	lr

08012f6c <_fini>:
 8012f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f6e:	bf00      	nop
 8012f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012f72:	bc08      	pop	{r3}
 8012f74:	469e      	mov	lr, r3
 8012f76:	4770      	bx	lr
