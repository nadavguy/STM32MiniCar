
MiniCar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013620  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008f0  08013820  08013820  00023820  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014110  08014110  00030224  2**0
                  CONTENTS
  4 .ARM          00000008  08014110  08014110  00024110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014118  08014118  00030224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014118  08014118  00024118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801411c  0801411c  0002411c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000224  20000000  08014120  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000048ac  20000228  08014344  00030228  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20004ad4  08014344  00034ad4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030224  2**0
                  CONTENTS, READONLY
 12 .debug_info   00042d46  00000000  00000000  00030252  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005b28  00000000  00000000  00072f98  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002958  00000000  00000000  00078ac0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000026b0  00000000  00000000  0007b418  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00032846  00000000  00000000  0007dac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000231b8  00000000  00000000  000b030e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0012578a  00000000  00000000  000d34c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001f8c50  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bdec  00000000  00000000  001f8ccc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000228 	.word	0x20000228
 800021c:	00000000 	.word	0x00000000
 8000220:	08013808 	.word	0x08013808

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000022c 	.word	0x2000022c
 800023c:	08013808 	.word	0x08013808

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b972 	b.w	800060c <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9e08      	ldr	r6, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	4688      	mov	r8, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14b      	bne.n	80003e6 <__udivmoddi4+0xa6>
 800034e:	428a      	cmp	r2, r1
 8000350:	4615      	mov	r5, r2
 8000352:	d967      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b14a      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035a:	f1c2 0720 	rsb	r7, r2, #32
 800035e:	fa01 f302 	lsl.w	r3, r1, r2
 8000362:	fa20 f707 	lsr.w	r7, r0, r7
 8000366:	4095      	lsls	r5, r2
 8000368:	ea47 0803 	orr.w	r8, r7, r3
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbb8 f7fe 	udiv	r7, r8, lr
 8000378:	fa1f fc85 	uxth.w	ip, r5
 800037c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000380:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000384:	fb07 f10c 	mul.w	r1, r7, ip
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18eb      	adds	r3, r5, r3
 800038e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000392:	f080 811b 	bcs.w	80005cc <__udivmoddi4+0x28c>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8118 	bls.w	80005cc <__udivmoddi4+0x28c>
 800039c:	3f02      	subs	r7, #2
 800039e:	442b      	add	r3, r5
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80003b4:	45a4      	cmp	ip, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	192c      	adds	r4, r5, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80003be:	f080 8107 	bcs.w	80005d0 <__udivmoddi4+0x290>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	f240 8104 	bls.w	80005d0 <__udivmoddi4+0x290>
 80003c8:	3802      	subs	r0, #2
 80003ca:	442c      	add	r4, r5
 80003cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003d0:	eba4 040c 	sub.w	r4, r4, ip
 80003d4:	2700      	movs	r7, #0
 80003d6:	b11e      	cbz	r6, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c6 4300 	strd	r4, r3, [r6]
 80003e0:	4639      	mov	r1, r7
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0xbe>
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	f000 80eb 	beq.w	80005c6 <__udivmoddi4+0x286>
 80003f0:	2700      	movs	r7, #0
 80003f2:	e9c6 0100 	strd	r0, r1, [r6]
 80003f6:	4638      	mov	r0, r7
 80003f8:	4639      	mov	r1, r7
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f783 	clz	r7, r3
 8000402:	2f00      	cmp	r7, #0
 8000404:	d147      	bne.n	8000496 <__udivmoddi4+0x156>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0xd0>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80fa 	bhi.w	8000604 <__udivmoddi4+0x2c4>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0303 	sbc.w	r3, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	4698      	mov	r8, r3
 800041a:	2e00      	cmp	r6, #0
 800041c:	d0e0      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800041e:	e9c6 4800 	strd	r4, r8, [r6]
 8000422:	e7dd      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000424:	b902      	cbnz	r2, 8000428 <__udivmoddi4+0xe8>
 8000426:	deff      	udf	#255	; 0xff
 8000428:	fab2 f282 	clz	r2, r2
 800042c:	2a00      	cmp	r2, #0
 800042e:	f040 808f 	bne.w	8000550 <__udivmoddi4+0x210>
 8000432:	1b49      	subs	r1, r1, r5
 8000434:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000438:	fa1f f885 	uxth.w	r8, r5
 800043c:	2701      	movs	r7, #1
 800043e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000442:	0c23      	lsrs	r3, r4, #16
 8000444:	fb0e 111c 	mls	r1, lr, ip, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb08 f10c 	mul.w	r1, r8, ip
 8000450:	4299      	cmp	r1, r3
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x124>
 8000454:	18eb      	adds	r3, r5, r3
 8000456:	f10c 30ff 	add.w	r0, ip, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x122>
 800045c:	4299      	cmp	r1, r3
 800045e:	f200 80cd 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 8000462:	4684      	mov	ip, r0
 8000464:	1a59      	subs	r1, r3, r1
 8000466:	b2a3      	uxth	r3, r4
 8000468:	fbb1 f0fe 	udiv	r0, r1, lr
 800046c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000470:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000474:	fb08 f800 	mul.w	r8, r8, r0
 8000478:	45a0      	cmp	r8, r4
 800047a:	d907      	bls.n	800048c <__udivmoddi4+0x14c>
 800047c:	192c      	adds	r4, r5, r4
 800047e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000482:	d202      	bcs.n	800048a <__udivmoddi4+0x14a>
 8000484:	45a0      	cmp	r8, r4
 8000486:	f200 80b6 	bhi.w	80005f6 <__udivmoddi4+0x2b6>
 800048a:	4618      	mov	r0, r3
 800048c:	eba4 0408 	sub.w	r4, r4, r8
 8000490:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000494:	e79f      	b.n	80003d6 <__udivmoddi4+0x96>
 8000496:	f1c7 0c20 	rsb	ip, r7, #32
 800049a:	40bb      	lsls	r3, r7
 800049c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80004a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80004a4:	fa01 f407 	lsl.w	r4, r1, r7
 80004a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80004ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80004b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80004b4:	4325      	orrs	r5, r4
 80004b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80004ba:	0c2c      	lsrs	r4, r5, #16
 80004bc:	fb08 3319 	mls	r3, r8, r9, r3
 80004c0:	fa1f fa8e 	uxth.w	sl, lr
 80004c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004c8:	fb09 f40a 	mul.w	r4, r9, sl
 80004cc:	429c      	cmp	r4, r3
 80004ce:	fa02 f207 	lsl.w	r2, r2, r7
 80004d2:	fa00 f107 	lsl.w	r1, r0, r7
 80004d6:	d90b      	bls.n	80004f0 <__udivmoddi4+0x1b0>
 80004d8:	eb1e 0303 	adds.w	r3, lr, r3
 80004dc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e0:	f080 8087 	bcs.w	80005f2 <__udivmoddi4+0x2b2>
 80004e4:	429c      	cmp	r4, r3
 80004e6:	f240 8084 	bls.w	80005f2 <__udivmoddi4+0x2b2>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4473      	add	r3, lr
 80004f0:	1b1b      	subs	r3, r3, r4
 80004f2:	b2ad      	uxth	r5, r5
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3310 	mls	r3, r8, r0, r3
 80004fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000500:	fb00 fa0a 	mul.w	sl, r0, sl
 8000504:	45a2      	cmp	sl, r4
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x1da>
 8000508:	eb1e 0404 	adds.w	r4, lr, r4
 800050c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000510:	d26b      	bcs.n	80005ea <__udivmoddi4+0x2aa>
 8000512:	45a2      	cmp	sl, r4
 8000514:	d969      	bls.n	80005ea <__udivmoddi4+0x2aa>
 8000516:	3802      	subs	r0, #2
 8000518:	4474      	add	r4, lr
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	fba0 8902 	umull	r8, r9, r0, r2
 8000522:	eba4 040a 	sub.w	r4, r4, sl
 8000526:	454c      	cmp	r4, r9
 8000528:	46c2      	mov	sl, r8
 800052a:	464b      	mov	r3, r9
 800052c:	d354      	bcc.n	80005d8 <__udivmoddi4+0x298>
 800052e:	d051      	beq.n	80005d4 <__udivmoddi4+0x294>
 8000530:	2e00      	cmp	r6, #0
 8000532:	d069      	beq.n	8000608 <__udivmoddi4+0x2c8>
 8000534:	ebb1 050a 	subs.w	r5, r1, sl
 8000538:	eb64 0403 	sbc.w	r4, r4, r3
 800053c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000540:	40fd      	lsrs	r5, r7
 8000542:	40fc      	lsrs	r4, r7
 8000544:	ea4c 0505 	orr.w	r5, ip, r5
 8000548:	e9c6 5400 	strd	r5, r4, [r6]
 800054c:	2700      	movs	r7, #0
 800054e:	e747      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000550:	f1c2 0320 	rsb	r3, r2, #32
 8000554:	fa20 f703 	lsr.w	r7, r0, r3
 8000558:	4095      	lsls	r5, r2
 800055a:	fa01 f002 	lsl.w	r0, r1, r2
 800055e:	fa21 f303 	lsr.w	r3, r1, r3
 8000562:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000566:	4338      	orrs	r0, r7
 8000568:	0c01      	lsrs	r1, r0, #16
 800056a:	fbb3 f7fe 	udiv	r7, r3, lr
 800056e:	fa1f f885 	uxth.w	r8, r5
 8000572:	fb0e 3317 	mls	r3, lr, r7, r3
 8000576:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057a:	fb07 f308 	mul.w	r3, r7, r8
 800057e:	428b      	cmp	r3, r1
 8000580:	fa04 f402 	lsl.w	r4, r4, r2
 8000584:	d907      	bls.n	8000596 <__udivmoddi4+0x256>
 8000586:	1869      	adds	r1, r5, r1
 8000588:	f107 3cff 	add.w	ip, r7, #4294967295
 800058c:	d22f      	bcs.n	80005ee <__udivmoddi4+0x2ae>
 800058e:	428b      	cmp	r3, r1
 8000590:	d92d      	bls.n	80005ee <__udivmoddi4+0x2ae>
 8000592:	3f02      	subs	r7, #2
 8000594:	4429      	add	r1, r5
 8000596:	1acb      	subs	r3, r1, r3
 8000598:	b281      	uxth	r1, r0
 800059a:	fbb3 f0fe 	udiv	r0, r3, lr
 800059e:	fb0e 3310 	mls	r3, lr, r0, r3
 80005a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005a6:	fb00 f308 	mul.w	r3, r0, r8
 80005aa:	428b      	cmp	r3, r1
 80005ac:	d907      	bls.n	80005be <__udivmoddi4+0x27e>
 80005ae:	1869      	adds	r1, r5, r1
 80005b0:	f100 3cff 	add.w	ip, r0, #4294967295
 80005b4:	d217      	bcs.n	80005e6 <__udivmoddi4+0x2a6>
 80005b6:	428b      	cmp	r3, r1
 80005b8:	d915      	bls.n	80005e6 <__udivmoddi4+0x2a6>
 80005ba:	3802      	subs	r0, #2
 80005bc:	4429      	add	r1, r5
 80005be:	1ac9      	subs	r1, r1, r3
 80005c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005c4:	e73b      	b.n	800043e <__udivmoddi4+0xfe>
 80005c6:	4637      	mov	r7, r6
 80005c8:	4630      	mov	r0, r6
 80005ca:	e709      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005cc:	4607      	mov	r7, r0
 80005ce:	e6e7      	b.n	80003a0 <__udivmoddi4+0x60>
 80005d0:	4618      	mov	r0, r3
 80005d2:	e6fb      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d4:	4541      	cmp	r1, r8
 80005d6:	d2ab      	bcs.n	8000530 <__udivmoddi4+0x1f0>
 80005d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005dc:	eb69 020e 	sbc.w	r2, r9, lr
 80005e0:	3801      	subs	r0, #1
 80005e2:	4613      	mov	r3, r2
 80005e4:	e7a4      	b.n	8000530 <__udivmoddi4+0x1f0>
 80005e6:	4660      	mov	r0, ip
 80005e8:	e7e9      	b.n	80005be <__udivmoddi4+0x27e>
 80005ea:	4618      	mov	r0, r3
 80005ec:	e795      	b.n	800051a <__udivmoddi4+0x1da>
 80005ee:	4667      	mov	r7, ip
 80005f0:	e7d1      	b.n	8000596 <__udivmoddi4+0x256>
 80005f2:	4681      	mov	r9, r0
 80005f4:	e77c      	b.n	80004f0 <__udivmoddi4+0x1b0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	442c      	add	r4, r5
 80005fa:	e747      	b.n	800048c <__udivmoddi4+0x14c>
 80005fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000600:	442b      	add	r3, r5
 8000602:	e72f      	b.n	8000464 <__udivmoddi4+0x124>
 8000604:	4638      	mov	r0, r7
 8000606:	e708      	b.n	800041a <__udivmoddi4+0xda>
 8000608:	4637      	mov	r7, r6
 800060a:	e6e9      	b.n	80003e0 <__udivmoddi4+0xa0>

0800060c <__aeabi_idiv0>:
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop

08000610 <start_pwm1>:
 *      Author: raing
 */
#include "main.h"

void start_pwm1(int onTimemSec)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
    TIM2->CCR1 = onTimemSec * 4 / 10;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	009b      	lsls	r3, r3, #2
 800061c:	4a08      	ldr	r2, [pc, #32]	; (8000640 <start_pwm1+0x30>)
 800061e:	fb82 1203 	smull	r1, r2, r2, r3
 8000622:	1092      	asrs	r2, r2, #2
 8000624:	17db      	asrs	r3, r3, #31
 8000626:	1ad2      	subs	r2, r2, r3
 8000628:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800062c:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800062e:	2100      	movs	r1, #0
 8000630:	4804      	ldr	r0, [pc, #16]	; (8000644 <start_pwm1+0x34>)
 8000632:	f009 fb4f 	bl	8009cd4 <HAL_TIM_PWM_Start>
}
 8000636:	bf00      	nop
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	66666667 	.word	0x66666667
 8000644:	2000491c 	.word	0x2000491c

08000648 <start_pwm2>:
{
    HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
}

void start_pwm2(int PercentOn)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
    TIM1->CCR4 = PercentOn;
 8000650:	4a05      	ldr	r2, [pc, #20]	; (8000668 <start_pwm2+0x20>)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000656:	210c      	movs	r1, #12
 8000658:	4804      	ldr	r0, [pc, #16]	; (800066c <start_pwm2+0x24>)
 800065a:	f009 fb3b 	bl	8009cd4 <HAL_TIM_PWM_Start>
}
 800065e:	bf00      	nop
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40010000 	.word	0x40010000
 800066c:	200047f8 	.word	0x200047f8

08000670 <CheckButton>:
uint32_t ButtonPressCycleStart = 0;
uint32_t ButtonPressDurationmSec[5] = {0};
uint8_t ButtonCycle = 0;

void CheckButton(void)
{
 8000670:	b5b0      	push	{r4, r5, r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af02      	add	r7, sp, #8
	PA0PinState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000676:	2101      	movs	r1, #1
 8000678:	4881      	ldr	r0, [pc, #516]	; (8000880 <CheckButton+0x210>)
 800067a:	f005 f9c9 	bl	8005a10 <HAL_GPIO_ReadPin>
 800067e:	4603      	mov	r3, r0
 8000680:	461a      	mov	r2, r3
 8000682:	4b80      	ldr	r3, [pc, #512]	; (8000884 <CheckButton+0x214>)
 8000684:	701a      	strb	r2, [r3, #0]
	if (PA0PinState == GPIO_PIN_RESET)
 8000686:	4b7f      	ldr	r3, [pc, #508]	; (8000884 <CheckButton+0x214>)
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d108      	bne.n	80006a0 <CheckButton+0x30>
	{
		SetRGB(0, 250, 0);
 800068e:	2200      	movs	r2, #0
 8000690:	21fa      	movs	r1, #250	; 0xfa
 8000692:	2000      	movs	r0, #0
 8000694:	f000 fd0c 	bl	80010b0 <SetRGB>
		ButtonIsLow = true;
 8000698:	4b7b      	ldr	r3, [pc, #492]	; (8000888 <CheckButton+0x218>)
 800069a:	2201      	movs	r2, #1
 800069c:	701a      	strb	r2, [r3, #0]
		if (ButtonCycle == 0)
		{
			ButtonPressCycleStart = HAL_GetTick();
		}
	}
}
 800069e:	e0e7      	b.n	8000870 <CheckButton+0x200>
		if (ButtonIsLow)
 80006a0:	4b79      	ldr	r3, [pc, #484]	; (8000888 <CheckButton+0x218>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d045      	beq.n	8000734 <CheckButton+0xc4>
			if (ButtonCycle < 5)
 80006a8:	4b78      	ldr	r3, [pc, #480]	; (800088c <CheckButton+0x21c>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b04      	cmp	r3, #4
 80006ae:	d818      	bhi.n	80006e2 <CheckButton+0x72>
				ButtonPressDurationmSec[ButtonCycle] = ((HAL_GetTick()
 80006b0:	f003 fd10 	bl	80040d4 <HAL_GetTick>
 80006b4:	4602      	mov	r2, r0
						- ButtonPressStart) / 100) * 100;
 80006b6:	4b76      	ldr	r3, [pc, #472]	; (8000890 <CheckButton+0x220>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	1ad3      	subs	r3, r2, r3
 80006bc:	4a75      	ldr	r2, [pc, #468]	; (8000894 <CheckButton+0x224>)
 80006be:	fba2 2303 	umull	r2, r3, r2, r3
 80006c2:	095b      	lsrs	r3, r3, #5
				ButtonPressDurationmSec[ButtonCycle] = ((HAL_GetTick()
 80006c4:	4a71      	ldr	r2, [pc, #452]	; (800088c <CheckButton+0x21c>)
 80006c6:	7812      	ldrb	r2, [r2, #0]
 80006c8:	4611      	mov	r1, r2
						- ButtonPressStart) / 100) * 100;
 80006ca:	2264      	movs	r2, #100	; 0x64
 80006cc:	fb02 f303 	mul.w	r3, r2, r3
				ButtonPressDurationmSec[ButtonCycle] = ((HAL_GetTick()
 80006d0:	4a71      	ldr	r2, [pc, #452]	; (8000898 <CheckButton+0x228>)
 80006d2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
				ButtonCycle++;
 80006d6:	4b6d      	ldr	r3, [pc, #436]	; (800088c <CheckButton+0x21c>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	3301      	adds	r3, #1
 80006dc:	b2da      	uxtb	r2, r3
 80006de:	4b6b      	ldr	r3, [pc, #428]	; (800088c <CheckButton+0x21c>)
 80006e0:	701a      	strb	r2, [r3, #0]
			if (ButtonCycle >= 5)
 80006e2:	4b6a      	ldr	r3, [pc, #424]	; (800088c <CheckButton+0x21c>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	2b04      	cmp	r3, #4
 80006e8:	d907      	bls.n	80006fa <CheckButton+0x8a>
				ButtonCycle = 0;
 80006ea:	4b68      	ldr	r3, [pc, #416]	; (800088c <CheckButton+0x21c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	701a      	strb	r2, [r3, #0]
				memset(ButtonPressDurationmSec, 0, 20);
 80006f0:	2214      	movs	r2, #20
 80006f2:	2100      	movs	r1, #0
 80006f4:	4868      	ldr	r0, [pc, #416]	; (8000898 <CheckButton+0x228>)
 80006f6:	f00f fc02 	bl	800fefe <memset>
			sprintf(USBTXArray, "%6.3f, Button press duration: %6.3f\r\n",
 80006fa:	f002 fe59 	bl	80033b0 <CurrentTime>
 80006fe:	ec55 4b10 	vmov	r4, r5, d0
					CurrentTime(), (HAL_GetTick() - ButtonPressStart) / 1000.0);
 8000702:	f003 fce7 	bl	80040d4 <HAL_GetTick>
 8000706:	4602      	mov	r2, r0
 8000708:	4b61      	ldr	r3, [pc, #388]	; (8000890 <CheckButton+0x220>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	1ad3      	subs	r3, r2, r3
			sprintf(USBTXArray, "%6.3f, Button press duration: %6.3f\r\n",
 800070e:	ee07 3a90 	vmov	s15, r3
 8000712:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000716:	ed9f 5b58 	vldr	d5, [pc, #352]	; 8000878 <CheckButton+0x208>
 800071a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800071e:	ed8d 7b00 	vstr	d7, [sp]
 8000722:	4622      	mov	r2, r4
 8000724:	462b      	mov	r3, r5
 8000726:	495d      	ldr	r1, [pc, #372]	; (800089c <CheckButton+0x22c>)
 8000728:	485d      	ldr	r0, [pc, #372]	; (80008a0 <CheckButton+0x230>)
 800072a:	f010 fa07 	bl	8010b3c <siprintf>
			SendToScreen(false);
 800072e:	2000      	movs	r0, #0
 8000730:	f001 fe1c 	bl	800236c <SendToScreen>
		if (HAL_GetTick() - ButtonPressCycleStart > 3000)
 8000734:	f003 fcce 	bl	80040d4 <HAL_GetTick>
 8000738:	4602      	mov	r2, r0
 800073a:	4b5a      	ldr	r3, [pc, #360]	; (80008a4 <CheckButton+0x234>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	1ad3      	subs	r3, r2, r3
 8000740:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000744:	4293      	cmp	r3, r2
 8000746:	d97a      	bls.n	800083e <CheckButton+0x1ce>
			if (ButtonPressDurationmSec[0] >= 2000)
 8000748:	4b53      	ldr	r3, [pc, #332]	; (8000898 <CheckButton+0x228>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000750:	d30f      	bcc.n	8000772 <CheckButton+0x102>
				sprintf(USBTXArray, "%6.3f, Do this\r\n", CurrentTime());
 8000752:	f002 fe2d 	bl	80033b0 <CurrentTime>
 8000756:	ec54 3b10 	vmov	r3, r4, d0
 800075a:	461a      	mov	r2, r3
 800075c:	4623      	mov	r3, r4
 800075e:	4952      	ldr	r1, [pc, #328]	; (80008a8 <CheckButton+0x238>)
 8000760:	484f      	ldr	r0, [pc, #316]	; (80008a0 <CheckButton+0x230>)
 8000762:	f010 f9eb 	bl	8010b3c <siprintf>
				SendToScreen(false);
 8000766:	2000      	movs	r0, #0
 8000768:	f001 fe00 	bl	800236c <SendToScreen>
				HAL_PWR_EnterSTANDBYMode();
 800076c:	f006 f9ba 	bl	8006ae4 <HAL_PWR_EnterSTANDBYMode>
 8000770:	e05d      	b.n	800082e <CheckButton+0x1be>
			else if ((ButtonPressDurationmSec[0] >= 1000)
 8000772:	4b49      	ldr	r3, [pc, #292]	; (8000898 <CheckButton+0x228>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800077a:	d312      	bcc.n	80007a2 <CheckButton+0x132>
					&& (ButtonPressDurationmSec[1] >= 1000))
 800077c:	4b46      	ldr	r3, [pc, #280]	; (8000898 <CheckButton+0x228>)
 800077e:	685b      	ldr	r3, [r3, #4]
 8000780:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000784:	d30d      	bcc.n	80007a2 <CheckButton+0x132>
				sprintf(USBTXArray, "%6.3f, Do that\r\n", CurrentTime());
 8000786:	f002 fe13 	bl	80033b0 <CurrentTime>
 800078a:	ec54 3b10 	vmov	r3, r4, d0
 800078e:	461a      	mov	r2, r3
 8000790:	4623      	mov	r3, r4
 8000792:	4946      	ldr	r1, [pc, #280]	; (80008ac <CheckButton+0x23c>)
 8000794:	4842      	ldr	r0, [pc, #264]	; (80008a0 <CheckButton+0x230>)
 8000796:	f010 f9d1 	bl	8010b3c <siprintf>
				SendToScreen(false);
 800079a:	2000      	movs	r0, #0
 800079c:	f001 fde6 	bl	800236c <SendToScreen>
 80007a0:	e045      	b.n	800082e <CheckButton+0x1be>
			else if ((ButtonPressDurationmSec[0] >= 1000)
 80007a2:	4b3d      	ldr	r3, [pc, #244]	; (8000898 <CheckButton+0x228>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80007aa:	d311      	bcc.n	80007d0 <CheckButton+0x160>
					&& (ButtonPressDurationmSec[1] == 0))
 80007ac:	4b3a      	ldr	r3, [pc, #232]	; (8000898 <CheckButton+0x228>)
 80007ae:	685b      	ldr	r3, [r3, #4]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d10d      	bne.n	80007d0 <CheckButton+0x160>
				sprintf(USBTXArray, "%6.3f, Do that Single Press\r\n",
 80007b4:	f002 fdfc 	bl	80033b0 <CurrentTime>
 80007b8:	ec54 3b10 	vmov	r3, r4, d0
 80007bc:	461a      	mov	r2, r3
 80007be:	4623      	mov	r3, r4
 80007c0:	493b      	ldr	r1, [pc, #236]	; (80008b0 <CheckButton+0x240>)
 80007c2:	4837      	ldr	r0, [pc, #220]	; (80008a0 <CheckButton+0x230>)
 80007c4:	f010 f9ba 	bl	8010b3c <siprintf>
				SendToScreen(false);
 80007c8:	2000      	movs	r0, #0
 80007ca:	f001 fdcf 	bl	800236c <SendToScreen>
 80007ce:	e02e      	b.n	800082e <CheckButton+0x1be>
			else if ((ButtonPressDurationmSec[0] >= 500)
 80007d0:	4b31      	ldr	r3, [pc, #196]	; (8000898 <CheckButton+0x228>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80007d8:	d312      	bcc.n	8000800 <CheckButton+0x190>
					&& (ButtonPressDurationmSec[1] >= 1000))
 80007da:	4b2f      	ldr	r3, [pc, #188]	; (8000898 <CheckButton+0x228>)
 80007dc:	685b      	ldr	r3, [r3, #4]
 80007de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80007e2:	d30d      	bcc.n	8000800 <CheckButton+0x190>
				sprintf(USBTXArray, "%6.3f, Or maybe this\r\n", CurrentTime());
 80007e4:	f002 fde4 	bl	80033b0 <CurrentTime>
 80007e8:	ec54 3b10 	vmov	r3, r4, d0
 80007ec:	461a      	mov	r2, r3
 80007ee:	4623      	mov	r3, r4
 80007f0:	4930      	ldr	r1, [pc, #192]	; (80008b4 <CheckButton+0x244>)
 80007f2:	482b      	ldr	r0, [pc, #172]	; (80008a0 <CheckButton+0x230>)
 80007f4:	f010 f9a2 	bl	8010b3c <siprintf>
				SendToScreen(false);
 80007f8:	2000      	movs	r0, #0
 80007fa:	f001 fdb7 	bl	800236c <SendToScreen>
 80007fe:	e016      	b.n	800082e <CheckButton+0x1be>
			else if ((ButtonPressDurationmSec[0] >= 500)
 8000800:	4b25      	ldr	r3, [pc, #148]	; (8000898 <CheckButton+0x228>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000808:	d311      	bcc.n	800082e <CheckButton+0x1be>
					&& (ButtonPressDurationmSec[1] >= 500))
 800080a:	4b23      	ldr	r3, [pc, #140]	; (8000898 <CheckButton+0x228>)
 800080c:	685b      	ldr	r3, [r3, #4]
 800080e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000812:	d30c      	bcc.n	800082e <CheckButton+0x1be>
				sprintf(USBTXArray, "%6.3f, Or maybe that\r\n", CurrentTime());
 8000814:	f002 fdcc 	bl	80033b0 <CurrentTime>
 8000818:	ec54 3b10 	vmov	r3, r4, d0
 800081c:	461a      	mov	r2, r3
 800081e:	4623      	mov	r3, r4
 8000820:	4925      	ldr	r1, [pc, #148]	; (80008b8 <CheckButton+0x248>)
 8000822:	481f      	ldr	r0, [pc, #124]	; (80008a0 <CheckButton+0x230>)
 8000824:	f010 f98a 	bl	8010b3c <siprintf>
				SendToScreen(false);
 8000828:	2000      	movs	r0, #0
 800082a:	f001 fd9f 	bl	800236c <SendToScreen>
			ButtonCycle = 0;
 800082e:	4b17      	ldr	r3, [pc, #92]	; (800088c <CheckButton+0x21c>)
 8000830:	2200      	movs	r2, #0
 8000832:	701a      	strb	r2, [r3, #0]
			memset(ButtonPressDurationmSec, 0, 20);
 8000834:	2214      	movs	r2, #20
 8000836:	2100      	movs	r1, #0
 8000838:	4817      	ldr	r0, [pc, #92]	; (8000898 <CheckButton+0x228>)
 800083a:	f00f fb60 	bl	800fefe <memset>
		SetRGB(250, 0, 0);
 800083e:	2200      	movs	r2, #0
 8000840:	2100      	movs	r1, #0
 8000842:	20fa      	movs	r0, #250	; 0xfa
 8000844:	f000 fc34 	bl	80010b0 <SetRGB>
		ButtonIsHigh = true;
 8000848:	4b1c      	ldr	r3, [pc, #112]	; (80008bc <CheckButton+0x24c>)
 800084a:	2201      	movs	r2, #1
 800084c:	701a      	strb	r2, [r3, #0]
		ButtonIsLow = false;
 800084e:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <CheckButton+0x218>)
 8000850:	2200      	movs	r2, #0
 8000852:	701a      	strb	r2, [r3, #0]
		ButtonPressStart = HAL_GetTick();
 8000854:	f003 fc3e 	bl	80040d4 <HAL_GetTick>
 8000858:	4602      	mov	r2, r0
 800085a:	4b0d      	ldr	r3, [pc, #52]	; (8000890 <CheckButton+0x220>)
 800085c:	601a      	str	r2, [r3, #0]
		if (ButtonCycle == 0)
 800085e:	4b0b      	ldr	r3, [pc, #44]	; (800088c <CheckButton+0x21c>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d104      	bne.n	8000870 <CheckButton+0x200>
			ButtonPressCycleStart = HAL_GetTick();
 8000866:	f003 fc35 	bl	80040d4 <HAL_GetTick>
 800086a:	4602      	mov	r2, r0
 800086c:	4b0d      	ldr	r3, [pc, #52]	; (80008a4 <CheckButton+0x234>)
 800086e:	601a      	str	r2, [r3, #0]
}
 8000870:	bf00      	nop
 8000872:	46bd      	mov	sp, r7
 8000874:	bdb0      	pop	{r4, r5, r7, pc}
 8000876:	bf00      	nop
 8000878:	00000000 	.word	0x00000000
 800087c:	408f4000 	.word	0x408f4000
 8000880:	40020000 	.word	0x40020000
 8000884:	20001330 	.word	0x20001330
 8000888:	20000245 	.word	0x20000245
 800088c:	20000264 	.word	0x20000264
 8000890:	20000248 	.word	0x20000248
 8000894:	51eb851f 	.word	0x51eb851f
 8000898:	20000250 	.word	0x20000250
 800089c:	08013820 	.word	0x08013820
 80008a0:	200008c0 	.word	0x200008c0
 80008a4:	2000024c 	.word	0x2000024c
 80008a8:	08013848 	.word	0x08013848
 80008ac:	0801385c 	.word	0x0801385c
 80008b0:	08013870 	.word	0x08013870
 80008b4:	08013890 	.word	0x08013890
 80008b8:	080138a8 	.word	0x080138a8
 80008bc:	20000244 	.word	0x20000244

080008c0 <QSPI_Init>:
  * @brief  QSPI Init
  * @param  None
  * @retval HAL_ERROR or HAL_OK
  */
uint8_t QSPI_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* Configuration of the dummy cycles on QSPI memory side */
  if (QSPI_DummyCyclesCfg(&hqspi) != HAL_OK)
 80008c4:	4805      	ldr	r0, [pc, #20]	; (80008dc <QSPI_Init+0x1c>)
 80008c6:	f000 fb26 	bl	8000f16 <QSPI_DummyCyclesCfg>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <QSPI_Init+0x14>
  {
    return HAL_ERROR;
 80008d0:	2301      	movs	r3, #1
 80008d2:	e000      	b.n	80008d6 <QSPI_Init+0x16>
  }
  return HAL_OK;
 80008d4:	2300      	movs	r3, #0
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	20004a58 	.word	0x20004a58

080008e0 <QSPI_Erase_Sector4K>:
  * @brief  Erases the specified sector of the QSPI memory.
  * @param  SectorAddress: Block address to erase
  * @retval QSPI memory status
  */
uint8_t QSPI_Erase_Sector4K(uint32_t SectorAddress)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b092      	sub	sp, #72	; 0x48
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  uint8_t reg1[6];

  if (QSPI_WriteEnable() != HAL_OK)
 80008e8:	f000 f90e 	bl	8000b08 <QSPI_WriteEnable>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <QSPI_Erase_Sector4K+0x16>
  {
    return HAL_ERROR;
 80008f2:	2301      	movs	r3, #1
 80008f4:	e030      	b.n	8000958 <QSPI_Erase_Sector4K+0x78>
  }

  /* Initialize the erase command */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80008f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008fa:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction = 0x20; //SUBSECTOR_ERASE_4_BYTE_ADDR_CMD;
 80008fc:	2320      	movs	r3, #32
 80008fe:	613b      	str	r3, [r7, #16]
  s_command.AddressMode = QSPI_ADDRESS_1_LINE;
 8000900:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000904:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressSize = QSPI_ADDRESS_24_BITS; //QSPI_ADDRESS_32_BITS;
 8000906:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800090a:	61fb      	str	r3, [r7, #28]
  s_command.Address = SectorAddress;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	617b      	str	r3, [r7, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000910:	2300      	movs	r3, #0
 8000912:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode = QSPI_DATA_NONE;
 8000914:	2300      	movs	r3, #0
 8000916:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles = 0;
 8000918:	2300      	movs	r3, #0
 800091a:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 800091c:	2300      	movs	r3, #0
 800091e:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000920:	2300      	movs	r3, #0
 8000922:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000924:	2300      	movs	r3, #0
 8000926:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000928:	f107 0310 	add.w	r3, r7, #16
 800092c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000930:	4619      	mov	r1, r3
 8000932:	480b      	ldr	r0, [pc, #44]	; (8000960 <QSPI_Erase_Sector4K+0x80>)
 8000934:	f006 fb74 	bl	8007020 <HAL_QSPI_Command>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <QSPI_Erase_Sector4K+0x62>
  {
    return HAL_ERROR;
 800093e:	2301      	movs	r3, #1
 8000940:	e00a      	b.n	8000958 <QSPI_Erase_Sector4K+0x78>
  }

  // -------------------------------------------------------------------------------------

  //  if (QSPI_AutoPolling_Erase_in_progress(&hqspi, QSPI_SUBSECTOR_ERASE_MAX_TIME) != HAL_OK)  {    return HAL_ERROR;  }
  if (QSPI_AutoPolling_Write_in_progress(&hqspi, QSPI_SUBSECTOR_ERASE_MAX_TIME) != HAL_OK)
 8000942:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000946:	4806      	ldr	r0, [pc, #24]	; (8000960 <QSPI_Erase_Sector4K+0x80>)
 8000948:	f000 f96a 	bl	8000c20 <QSPI_AutoPolling_Write_in_progress>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <QSPI_Erase_Sector4K+0x76>
  {
    return HAL_ERROR;
 8000952:	2301      	movs	r3, #1
 8000954:	e000      	b.n	8000958 <QSPI_Erase_Sector4K+0x78>
  }

  return HAL_OK;
 8000956:	2300      	movs	r3, #0
}
 8000958:	4618      	mov	r0, r3
 800095a:	3748      	adds	r7, #72	; 0x48
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	20004a58 	.word	0x20004a58

08000964 <QSPI_Write>:
  * @param  WriteAddr: Write start address
  * @param  Size: Size of data to write
  * @retval QSPI memory status
  */
uint8_t QSPI_Write(uint8_t *pData, uint32_t WriteAddr, uint32_t Size)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b096      	sub	sp, #88	; 0x58
 8000968:	af00      	add	r7, sp, #0
 800096a:	60f8      	str	r0, [r7, #12]
 800096c:	60b9      	str	r1, [r7, #8]
 800096e:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint32_t end_addr = 0, current_size = 0, current_addr = 0;
 8000970:	2300      	movs	r3, #0
 8000972:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000974:	2300      	movs	r3, #0
 8000976:	657b      	str	r3, [r7, #84]	; 0x54
 8000978:	2300      	movs	r3, #0
 800097a:	653b      	str	r3, [r7, #80]	; 0x50
  pData = pData - 1;
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	3b01      	subs	r3, #1
 8000980:	60fb      	str	r3, [r7, #12]
  /* Calculation of the size between the write address and the end of the page */
  current_addr = 0;
 8000982:	2300      	movs	r3, #0
 8000984:	653b      	str	r3, [r7, #80]	; 0x50
  while (current_addr <= WriteAddr)
 8000986:	e003      	b.n	8000990 <QSPI_Write+0x2c>
  {
    current_addr += QSPI_PAGE_SIZE;
 8000988:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800098a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800098e:	653b      	str	r3, [r7, #80]	; 0x50
  while (current_addr <= WriteAddr)
 8000990:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000992:	68bb      	ldr	r3, [r7, #8]
 8000994:	429a      	cmp	r2, r3
 8000996:	d9f7      	bls.n	8000988 <QSPI_Write+0x24>
  }
  current_size = current_addr - WriteAddr;
 8000998:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800099a:	68bb      	ldr	r3, [r7, #8]
 800099c:	1ad3      	subs	r3, r2, r3
 800099e:	657b      	str	r3, [r7, #84]	; 0x54

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 80009a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	d901      	bls.n	80009ac <QSPI_Write+0x48>
  {
    current_size = Size;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	657b      	str	r3, [r7, #84]	; 0x54
  }
  //  wr_time1 = systick_count_up;
  /* Initialize the address variables */
  current_addr = WriteAddr;
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	653b      	str	r3, [r7, #80]	; 0x50
  end_addr = WriteAddr + Size;
 80009b0:	68ba      	ldr	r2, [r7, #8]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4413      	add	r3, r2
 80009b6:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Initialize the program command */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80009b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.Instruction = 0x02; // simple page programm //QPI_PAGE_PROG_4_BYTE_ADDR_CMD;
 80009be:	2302      	movs	r3, #2
 80009c0:	617b      	str	r3, [r7, #20]
  s_command.AddressMode = QSPI_ADDRESS_1_LINE;
 80009c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009c6:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.AddressSize = QSPI_ADDRESS_24_BITS;
 80009c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009cc:	623b      	str	r3, [r7, #32]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80009ce:	2300      	movs	r3, #0
 80009d0:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DataMode = QSPI_DATA_1_LINE;
 80009d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80009d6:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DummyCycles = 0;
 80009d8:	2300      	movs	r3, #0
 80009da:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 80009dc:	2300      	movs	r3, #0
 80009de:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80009e0:	2300      	movs	r3, #0
 80009e2:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80009e4:	2300      	movs	r3, #0
 80009e6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Perform the write page by page */
  do
  {
    /* Enable write operations */
    if (QSPI_WriteEnable() != HAL_OK)
 80009e8:	f000 f88e 	bl	8000b08 <QSPI_WriteEnable>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <QSPI_Write+0x92>
    {
      return HAL_ERROR;
 80009f2:	2301      	movs	r3, #1
 80009f4:	e03f      	b.n	8000a76 <QSPI_Write+0x112>
    }

    /* Configure the command */
    s_command.Address = current_addr;
 80009f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80009f8:	61bb      	str	r3, [r7, #24]
    s_command.NbData = current_size;
 80009fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80009fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80009fe:	f107 0314 	add.w	r3, r7, #20
 8000a02:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a06:	4619      	mov	r1, r3
 8000a08:	481d      	ldr	r0, [pc, #116]	; (8000a80 <QSPI_Write+0x11c>)
 8000a0a:	f006 fb09 	bl	8007020 <HAL_QSPI_Command>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <QSPI_Write+0xb4>
    {
      return HAL_ERROR;
 8000a14:	2301      	movs	r3, #1
 8000a16:	e02e      	b.n	8000a76 <QSPI_Write+0x112>
    }

    /* Transmission of the data */
    if (HAL_QSPI_Transmit(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000a18:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a1c:	68f9      	ldr	r1, [r7, #12]
 8000a1e:	4818      	ldr	r0, [pc, #96]	; (8000a80 <QSPI_Write+0x11c>)
 8000a20:	f006 fb5c 	bl	80070dc <HAL_QSPI_Transmit>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <QSPI_Write+0xca>
    {
      return HAL_ERROR;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	e023      	b.n	8000a76 <QSPI_Write+0x112>
    }

    if (QSPI_AutoPolling_Write_in_progress(&hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000a2e:	f241 3188 	movw	r1, #5000	; 0x1388
 8000a32:	4813      	ldr	r0, [pc, #76]	; (8000a80 <QSPI_Write+0x11c>)
 8000a34:	f000 f8f4 	bl	8000c20 <QSPI_AutoPolling_Write_in_progress>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <QSPI_Write+0xde>
    {
      return HAL_ERROR;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	e019      	b.n	8000a76 <QSPI_Write+0x112>
    }

    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 8000a42:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000a44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000a46:	4413      	add	r3, r2
 8000a48:	653b      	str	r3, [r7, #80]	; 0x50
    pData += current_size;
 8000a4a:	68fa      	ldr	r2, [r7, #12]
 8000a4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000a4e:	4413      	add	r3, r2
 8000a50:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + QSPI_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : QSPI_PAGE_SIZE;
 8000a52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a54:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000a58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000a5a:	429a      	cmp	r2, r3
 8000a5c:	d203      	bcs.n	8000a66 <QSPI_Write+0x102>
 8000a5e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000a60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a62:	1ad3      	subs	r3, r2, r3
 8000a64:	e001      	b.n	8000a6a <QSPI_Write+0x106>
 8000a66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a6a:	657b      	str	r3, [r7, #84]	; 0x54
  } while (current_addr < end_addr);
 8000a6c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000a6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a70:	429a      	cmp	r2, r3
 8000a72:	d3b9      	bcc.n	80009e8 <QSPI_Write+0x84>

  return HAL_OK;
 8000a74:	2300      	movs	r3, #0
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3758      	adds	r7, #88	; 0x58
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20004a58 	.word	0x20004a58

08000a84 <QSPI_Read>:
  * @param  ReadAddr: Read start address
  * @param  Size: Size of data to read
  * @retval QSPI memory status
  */
uint8_t QSPI_Read(uint8_t *pData, uint32_t ReadAddr, uint32_t Size)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b092      	sub	sp, #72	; 0x48
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	60f8      	str	r0, [r7, #12]
 8000a8c:	60b9      	str	r1, [r7, #8]
 8000a8e:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the read command */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000a90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a94:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction = 0x03; // simple data read // QPI_READ_4_BYTE_ADDR_CMD; //
 8000a96:	2303      	movs	r3, #3
 8000a98:	613b      	str	r3, [r7, #16]
  s_command.AddressMode = QSPI_ADDRESS_1_LINE;
 8000a9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressSize = QSPI_ADDRESS_24_BITS;
 8000aa0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aa4:	61fb      	str	r3, [r7, #28]
  s_command.Address = ReadAddr;
 8000aa6:	68bb      	ldr	r3, [r7, #8]
 8000aa8:	617b      	str	r3, [r7, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode = QSPI_DATA_1_LINE;
 8000aae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ab2:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles = QSPI_DUMMY_CYCLES_READ;
 8000ab4:	2308      	movs	r3, #8
 8000ab6:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData = Size;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000abc:	2300      	movs	r3, #0
 8000abe:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000ac8:	f107 0310 	add.w	r3, r7, #16
 8000acc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	480c      	ldr	r0, [pc, #48]	; (8000b04 <QSPI_Read+0x80>)
 8000ad4:	f006 faa4 	bl	8007020 <HAL_QSPI_Command>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <QSPI_Read+0x5e>
  {
    return HAL_ERROR;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	e00b      	b.n	8000afa <QSPI_Read+0x76>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ae6:	68f9      	ldr	r1, [r7, #12]
 8000ae8:	4806      	ldr	r0, [pc, #24]	; (8000b04 <QSPI_Read+0x80>)
 8000aea:	f006 fb89 	bl	8007200 <HAL_QSPI_Receive>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <QSPI_Read+0x74>
  {
    return HAL_ERROR;
 8000af4:	2301      	movs	r3, #1
 8000af6:	e000      	b.n	8000afa <QSPI_Read+0x76>
  }

  return HAL_OK;
 8000af8:	2300      	movs	r3, #0
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3748      	adds	r7, #72	; 0x48
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20004a58 	.word	0x20004a58

08000b08 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
uint8_t QSPI_WriteEnable(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b094      	sub	sp, #80	; 0x50
 8000b0c:	af00      	add	r7, sp, #0
  QSPI_CommandTypeDef s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000b0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b12:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Instruction = WRITE_ENABLE_CMD; // ok
 8000b14:	2306      	movs	r3, #6
 8000b16:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DataMode = QSPI_DATA_NONE;
 8000b20:	2300      	movs	r3, #0
 8000b22:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DummyCycles = 0;
 8000b24:	2300      	movs	r3, #0
 8000b26:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000b30:	2300      	movs	r3, #0
 8000b32:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000b34:	f107 0318 	add.w	r3, r7, #24
 8000b38:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4816      	ldr	r0, [pc, #88]	; (8000b98 <QSPI_WriteEnable+0x90>)
 8000b40:	f006 fa6e 	bl	8007020 <HAL_QSPI_Command>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <QSPI_WriteEnable+0x46>
  {
    return HAL_ERROR;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	e01f      	b.n	8000b8e <QSPI_WriteEnable+0x86>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match = QSPI_SR_WREN;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	603b      	str	r3, [r7, #0]
  s_config.Mask = QSPI_SR_WREN;
 8000b52:	2302      	movs	r3, #2
 8000b54:	607b      	str	r3, [r7, #4]
  s_config.MatchMode = QSPI_MATCH_MODE_AND;
 8000b56:	2300      	movs	r3, #0
 8000b58:	613b      	str	r3, [r7, #16]
  s_config.StatusBytesSize = 1;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	60fb      	str	r3, [r7, #12]
  s_config.Interval = 1;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	60bb      	str	r3, [r7, #8]
  s_config.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8000b62:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b66:	617b      	str	r3, [r7, #20]

  s_command.Instruction = READ_STATUS_REG_CMD;
 8000b68:	2305      	movs	r3, #5
 8000b6a:	61bb      	str	r3, [r7, #24]
  s_command.DataMode = QSPI_DATA_1_LINE;
 8000b6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b70:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_QSPI_AutoPolling(&hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000b72:	463a      	mov	r2, r7
 8000b74:	f107 0118 	add.w	r1, r7, #24
 8000b78:	f241 3388 	movw	r3, #5000	; 0x1388
 8000b7c:	4806      	ldr	r0, [pc, #24]	; (8000b98 <QSPI_WriteEnable+0x90>)
 8000b7e:	f006 fbdc 	bl	800733a <HAL_QSPI_AutoPolling>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <QSPI_WriteEnable+0x84>
  {
    return HAL_ERROR;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	e000      	b.n	8000b8e <QSPI_WriteEnable+0x86>
  }

  return HAL_OK;
 8000b8c:	2300      	movs	r3, #0
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3750      	adds	r7, #80	; 0x50
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20004a58 	.word	0x20004a58

08000b9c <QSPI_READMD>:

uint8_t QSPI_READMD(uint8_t *Mid, uint8_t *Did)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b098      	sub	sp, #96	; 0x60
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000ba6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000baa:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction = 0x90; // ok
 8000bac:	2390      	movs	r3, #144	; 0x90
 8000bae:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataMode = QSPI_DATA_1_LINE;
 8000bb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000bbc:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DummyCycles = 0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.NbData = 5;
 8000bc2:	2305      	movs	r3, #5
 8000bc4:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000bd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8000bda:	4619      	mov	r1, r3
 8000bdc:	480f      	ldr	r0, [pc, #60]	; (8000c1c <QSPI_READMD+0x80>)
 8000bde:	f006 fa1f 	bl	8007020 <HAL_QSPI_Command>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <QSPI_READMD+0x50>
  {
    return HAL_ERROR;
 8000be8:	2301      	movs	r3, #1
 8000bea:	e013      	b.n	8000c14 <QSPI_READMD+0x78>
  }


 uint8_t reg2[6] = {0};
 8000bec:	f107 0308 	add.w	r3, r7, #8
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	809a      	strh	r2, [r3, #4]
 HAL_QSPI_Receive(&hqspi, &(reg2), HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 8000bf6:	f107 0308 	add.w	r3, r7, #8
 8000bfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4806      	ldr	r0, [pc, #24]	; (8000c1c <QSPI_READMD+0x80>)
 8000c02:	f006 fafd 	bl	8007200 <HAL_QSPI_Receive>
 *Mid = reg2[3];
 8000c06:	7afa      	ldrb	r2, [r7, #11]
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	701a      	strb	r2, [r3, #0]
 *Did = reg2[4];
 8000c0c:	7b3a      	ldrb	r2, [r7, #12]
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	701a      	strb	r2, [r3, #0]
//  HAL_QSPI_Receive(&hqspi, &(reg2[2]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
//  HAL_QSPI_Receive(&hqspi, &(reg2[3]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
//  HAL_QSPI_Receive(&hqspi, &(reg2[4]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
//  HAL_QSPI_Receive(&hqspi, &(reg2[5]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE);

  return HAL_OK;
 8000c12:	2300      	movs	r3, #0
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	3760      	adds	r7, #96	; 0x60
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	20004a58 	.word	0x20004a58

08000c20 <QSPI_AutoPolling_Write_in_progress>:
  * @param  hqspi: QSPI handle
  * @param  Timeout
  * @retval None
  */
uint8_t QSPI_AutoPolling_Write_in_progress(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b096      	sub	sp, #88	; 0x58
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000c2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c2e:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction = READ_STATUS_REG_CMD;
 8000c30:	2305      	movs	r3, #5
 8000c32:	623b      	str	r3, [r7, #32]
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 8000c34:	2300      	movs	r3, #0
 8000c36:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode = QSPI_DATA_1_LINE;
 8000c3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c40:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles = 0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000c46:	2300      	movs	r3, #0
 8000c48:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	657b      	str	r3, [r7, #84]	; 0x54

  s_config.Match = 0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	60bb      	str	r3, [r7, #8]
  //  s_config.Mask            = QSPI_SR_WIP;
  s_config.Mask = QSPI_SR_WIP; /*!< Write in progress */
 8000c56:	2301      	movs	r3, #1
 8000c58:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode = QSPI_MATCH_MODE_AND;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	617b      	str	r3, [r7, #20]
  s_config.Interval = 1; //0x10;
 8000c62:	2301      	movs	r3, #1
 8000c64:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8000c66:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c6a:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8000c6c:	f107 0208 	add.w	r2, r7, #8
 8000c70:	f107 0120 	add.w	r1, r7, #32
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	6878      	ldr	r0, [r7, #4]
 8000c78:	f006 fb5f 	bl	800733a <HAL_QSPI_AutoPolling>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <QSPI_AutoPolling_Write_in_progress+0x66>
  {
    return HAL_ERROR;
 8000c82:	2301      	movs	r3, #1
 8000c84:	e000      	b.n	8000c88 <QSPI_AutoPolling_Write_in_progress+0x68>
  }

  return HAL_OK;
 8000c86:	2300      	movs	r3, #0
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3758      	adds	r7, #88	; 0x58
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <QSPI_Read_Status_registers>:
  return HAL_OK;
}

// Read Status Register-1 (05h), Status Register-2 (35h) & Status Register-3 (15h)
uint8_t QSPI_Read_Status_registers(QSPI_HandleTypeDef *hqspi, uint16_t *R1, uint16_t *R2, uint16_t *R3)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b098      	sub	sp, #96	; 0x60
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	60f8      	str	r0, [r7, #12]
 8000c98:	60b9      	str	r1, [r7, #8]
 8000c9a:	607a      	str	r2, [r7, #4]
 8000c9c:	603b      	str	r3, [r7, #0]
  uint8_t reg1[6];
  uint8_t reg2[6];
  uint8_t reg3[6];

  /* Initialize the reading of status register */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE; //QSPI_INSTRUCTION_4_LINES;
 8000c9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ca2:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction = 0x05;
 8000ca4:	2305      	movs	r3, #5
 8000ca6:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000cac:	2300      	movs	r3, #0
 8000cae:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataMode = QSPI_DATA_1_LINE; // QSPI_DATA_4_LINES;
 8000cb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000cb4:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DummyCycles = 0;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.NbData = 1;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000cca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cce:	f241 3288 	movw	r2, #5000	; 0x1388
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	68f8      	ldr	r0, [r7, #12]
 8000cd6:	f006 f9a3 	bl	8007020 <HAL_QSPI_Command>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <QSPI_Read_Status_registers+0x54>
  {
    return HAL_ERROR;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	e079      	b.n	8000dd8 <QSPI_Read_Status_registers+0x148>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, (uint8_t *)reg1, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000ce4:	f107 0320 	add.w	r3, r7, #32
 8000ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000cec:	4619      	mov	r1, r3
 8000cee:	68f8      	ldr	r0, [r7, #12]
 8000cf0:	f006 fa86 	bl	8007200 <HAL_QSPI_Receive>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <QSPI_Read_Status_registers+0x6e>
  {
    return HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e06c      	b.n	8000dd8 <QSPI_Read_Status_registers+0x148>
  }
  *R1 = reg1[0];
 8000cfe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d02:	b29a      	uxth	r2, r3
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	801a      	strh	r2, [r3, #0]
  /* Initialize the reading of status register */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE; //QSPI_INSTRUCTION_4_LINES;
 8000d08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d0c:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction = 0x35;
 8000d0e:	2335      	movs	r3, #53	; 0x35
 8000d10:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 8000d12:	2300      	movs	r3, #0
 8000d14:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000d16:	2300      	movs	r3, #0
 8000d18:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataMode = QSPI_DATA_1_LINE; // QSPI_DATA_4_LINES;
 8000d1a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DummyCycles = 0;
 8000d20:	2300      	movs	r3, #0
 8000d22:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.NbData = 1;
 8000d24:	2301      	movs	r3, #1
 8000d26:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000d30:	2300      	movs	r3, #0
 8000d32:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000d34:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d38:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	68f8      	ldr	r0, [r7, #12]
 8000d40:	f006 f96e 	bl	8007020 <HAL_QSPI_Command>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <QSPI_Read_Status_registers+0xbe>
  {
    return HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e044      	b.n	8000dd8 <QSPI_Read_Status_registers+0x148>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, (uint8_t *)reg2, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000d4e:	f107 0318 	add.w	r3, r7, #24
 8000d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d56:	4619      	mov	r1, r3
 8000d58:	68f8      	ldr	r0, [r7, #12]
 8000d5a:	f006 fa51 	bl	8007200 <HAL_QSPI_Receive>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <QSPI_Read_Status_registers+0xd8>
  {
    return HAL_ERROR;
 8000d64:	2301      	movs	r3, #1
 8000d66:	e037      	b.n	8000dd8 <QSPI_Read_Status_registers+0x148>
  }
  *R2 = reg2[0];
 8000d68:	7e3b      	ldrb	r3, [r7, #24]
 8000d6a:	b29a      	uxth	r2, r3
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	801a      	strh	r2, [r3, #0]
  /* Initialize the reading of status register */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE; //QSPI_INSTRUCTION_4_LINES;
 8000d70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d74:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction = 0x15;
 8000d76:	2315      	movs	r3, #21
 8000d78:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataMode = QSPI_DATA_1_LINE; // QSPI_DATA_4_LINES;
 8000d82:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d86:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DummyCycles = 0;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.NbData = 1;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000d90:	2300      	movs	r3, #0
 8000d92:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000d94:	2300      	movs	r3, #0
 8000d96:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000d9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000da0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000da4:	4619      	mov	r1, r3
 8000da6:	68f8      	ldr	r0, [r7, #12]
 8000da8:	f006 f93a 	bl	8007020 <HAL_QSPI_Command>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <QSPI_Read_Status_registers+0x126>
  {
    return HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
 8000db4:	e010      	b.n	8000dd8 <QSPI_Read_Status_registers+0x148>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, (uint8_t *)reg3, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000db6:	f107 0310 	add.w	r3, r7, #16
 8000dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	68f8      	ldr	r0, [r7, #12]
 8000dc2:	f006 fa1d 	bl	8007200 <HAL_QSPI_Receive>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <QSPI_Read_Status_registers+0x140>
  {
    return HAL_ERROR;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	e003      	b.n	8000dd8 <QSPI_Read_Status_registers+0x148>
  }
  *R3 = reg3[0];
 8000dd0:	7c3b      	ldrb	r3, [r7, #16]
 8000dd2:	b29a      	uxth	r2, r3
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	801a      	strh	r2, [r3, #0]
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3760      	adds	r7, #96	; 0x60
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <QSPI_Reset_Status_registers>:

// Reset Status Register-1 (05h), Status Register-2 (35h) & Status Register-3 (15h)
uint8_t QSPI_Reset_Status_registers(QSPI_HandleTypeDef *hqspi, uint16_t *R1, uint16_t *R2, uint16_t *R3)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b092      	sub	sp, #72	; 0x48
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
 8000dec:	603b      	str	r3, [r7, #0]
  QSPI_CommandTypeDef s_command;

  QSPI_WriteEnable();
 8000dee:	f7ff fe8b 	bl	8000b08 <QSPI_WriteEnable>

  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE; //QSPI_INSTRUCTION_4_LINES;
 8000df2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000df6:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction = 0x01;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	613b      	str	r3, [r7, #16]
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000e00:	2300      	movs	r3, #0
 8000e02:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode = QSPI_DATA_1_LINE; // QSPI_DATA_4_LINES;
 8000e04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e08:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles = 0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData = 1;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000e12:	2300      	movs	r3, #0
 8000e14:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000e16:	2300      	movs	r3, #0
 8000e18:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000e1e:	f107 0310 	add.w	r3, r7, #16
 8000e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e26:	4619      	mov	r1, r3
 8000e28:	68f8      	ldr	r0, [r7, #12]
 8000e2a:	f006 f8f9 	bl	8007020 <HAL_QSPI_Command>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <QSPI_Reset_Status_registers+0x58>
  {
    return HAL_ERROR;
 8000e34:	2301      	movs	r3, #1
 8000e36:	e06a      	b.n	8000f0e <QSPI_Reset_Status_registers+0x12e>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, (uint8_t *)R1, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000e38:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e3c:	68b9      	ldr	r1, [r7, #8]
 8000e3e:	68f8      	ldr	r0, [r7, #12]
 8000e40:	f006 f94c 	bl	80070dc <HAL_QSPI_Transmit>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <QSPI_Reset_Status_registers+0x6e>
  {
    return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e05f      	b.n	8000f0e <QSPI_Reset_Status_registers+0x12e>
  }

  QSPI_WriteEnable();
 8000e4e:	f7ff fe5b 	bl	8000b08 <QSPI_WriteEnable>

  /* Initialize the reading of status register */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE; //QSPI_INSTRUCTION_4_LINES;
 8000e52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e56:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction = 0x31;
 8000e58:	2331      	movs	r3, #49	; 0x31
 8000e5a:	613b      	str	r3, [r7, #16]
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000e60:	2300      	movs	r3, #0
 8000e62:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode = QSPI_DATA_1_LINE; // QSPI_DATA_4_LINES;
 8000e64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e68:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles = 0;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData = 1;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000e72:	2300      	movs	r3, #0
 8000e74:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000e76:	2300      	movs	r3, #0
 8000e78:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000e7e:	f107 0310 	add.w	r3, r7, #16
 8000e82:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e86:	4619      	mov	r1, r3
 8000e88:	68f8      	ldr	r0, [r7, #12]
 8000e8a:	f006 f8c9 	bl	8007020 <HAL_QSPI_Command>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <QSPI_Reset_Status_registers+0xb8>
  {
    return HAL_ERROR;
 8000e94:	2301      	movs	r3, #1
 8000e96:	e03a      	b.n	8000f0e <QSPI_Reset_Status_registers+0x12e>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, (uint8_t *)R2, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000e98:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e9c:	6879      	ldr	r1, [r7, #4]
 8000e9e:	68f8      	ldr	r0, [r7, #12]
 8000ea0:	f006 f91c 	bl	80070dc <HAL_QSPI_Transmit>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <QSPI_Reset_Status_registers+0xce>
  {
    return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e02f      	b.n	8000f0e <QSPI_Reset_Status_registers+0x12e>
  }

  QSPI_WriteEnable();
 8000eae:	f7ff fe2b 	bl	8000b08 <QSPI_WriteEnable>

  /* Initialize the reading of status register */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE; //QSPI_INSTRUCTION_4_LINES;
 8000eb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000eb6:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction = 0x11;
 8000eb8:	2311      	movs	r3, #17
 8000eba:	613b      	str	r3, [r7, #16]
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode = QSPI_DATA_1_LINE; // QSPI_DATA_4_LINES;
 8000ec4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ec8:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles = 0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData = 1;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000eda:	2300      	movs	r3, #0
 8000edc:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000ede:	f107 0310 	add.w	r3, r7, #16
 8000ee2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	68f8      	ldr	r0, [r7, #12]
 8000eea:	f006 f899 	bl	8007020 <HAL_QSPI_Command>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <QSPI_Reset_Status_registers+0x118>
  {
    return HAL_ERROR;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e00a      	b.n	8000f0e <QSPI_Reset_Status_registers+0x12e>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, (uint8_t *)R3, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000ef8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000efc:	6839      	ldr	r1, [r7, #0]
 8000efe:	68f8      	ldr	r0, [r7, #12]
 8000f00:	f006 f8ec 	bl	80070dc <HAL_QSPI_Transmit>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <QSPI_Reset_Status_registers+0x12e>
  {
    return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e7ff      	b.n	8000f0e <QSPI_Reset_Status_registers+0x12e>
  }
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3748      	adds	r7, #72	; 0x48
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <QSPI_DummyCyclesCfg>:
  * @brief  This function configure the dummy cycles on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
uint8_t QSPI_DummyCyclesCfg(QSPI_HandleTypeDef *hqspi)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b094      	sub	sp, #80	; 0x50
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint8_t reg[2];

  /* Initialize the reading of status register */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE; //QSPI_INSTRUCTION_4_LINES;
 8000f1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f22:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction = READ_STATUS_REG_CMD;
 8000f24:	2305      	movs	r3, #5
 8000f26:	613b      	str	r3, [r7, #16]
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode = QSPI_DATA_1_LINE; // QSPI_DATA_4_LINES;
 8000f30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f34:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles = 0;
 8000f36:	2300      	movs	r3, #0
 8000f38:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData = 1;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000f42:	2300      	movs	r3, #0
 8000f44:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000f46:	2300      	movs	r3, #0
 8000f48:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000f4a:	f107 0310 	add.w	r3, r7, #16
 8000f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f52:	4619      	mov	r1, r3
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f006 f863 	bl	8007020 <HAL_QSPI_Command>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <QSPI_DummyCyclesCfg+0x4e>
  {
    return HAL_ERROR;
 8000f60:	2301      	movs	r3, #1
 8000f62:	e08f      	b.n	8001084 <QSPI_DummyCyclesCfg+0x16e>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000f64:	f107 030c 	add.w	r3, r7, #12
 8000f68:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f006 f946 	bl	8007200 <HAL_QSPI_Receive>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <QSPI_DummyCyclesCfg+0x68>
  {
    return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e082      	b.n	8001084 <QSPI_DummyCyclesCfg+0x16e>
  }

  /* Initialize the reading of configuration register */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000f7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f82:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction = READ_CFG_REG_CMD;
 8000f84:	2315      	movs	r3, #21
 8000f86:	613b      	str	r3, [r7, #16]
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode = QSPI_DATA_1_LINE;
 8000f90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f94:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles = 0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData = 1;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000faa:	f107 0310 	add.w	r3, r7, #16
 8000fae:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f006 f833 	bl	8007020 <HAL_QSPI_Command>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <QSPI_DummyCyclesCfg+0xae>
  {
    return HAL_ERROR;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	e05f      	b.n	8001084 <QSPI_DummyCyclesCfg+0x16e>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000fc4:	f107 030c 	add.w	r3, r7, #12
 8000fc8:	3301      	adds	r3, #1
 8000fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fce:	4619      	mov	r1, r3
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f006 f915 	bl	8007200 <HAL_QSPI_Receive>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <QSPI_DummyCyclesCfg+0xca>
  {
    return HAL_ERROR;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e051      	b.n	8001084 <QSPI_DummyCyclesCfg+0x16e>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable() != HAL_OK)
 8000fe0:	f7ff fd92 	bl	8000b08 <QSPI_WriteEnable>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <QSPI_DummyCyclesCfg+0xd8>
  {
    return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e04a      	b.n	8001084 <QSPI_DummyCyclesCfg+0x16e>
  }

  /* Update the configuration register with new dummy cycles */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000fee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ff2:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction = WRITE_STATUS_CFG_REG_CMD;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	613b      	str	r3, [r7, #16]
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode = QSPI_DATA_1_LINE;
 8001000:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001004:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles = 0;
 8001006:	2300      	movs	r3, #0
 8001008:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData = 2;
 800100a:	2302      	movs	r3, #2
 800100c:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 800100e:	2300      	movs	r3, #0
 8001010:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001012:	2300      	movs	r3, #0
 8001014:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001016:	2300      	movs	r3, #0
 8001018:	647b      	str	r3, [r7, #68]	; 0x44

  /* QSPI_DUMMY_CYCLES_READ_QUAD = 3 for 10 cycles in QPI mode */
  //  MODIFY_REG( reg[1], QSPI_CR_NB_DUMMY, (QSPI_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(QSPI_CR_NB_DUMMY)));
  MODIFY_REG(reg[1], QSPI_CR_NB_DUMMY, (QSPI_DUMMY_CYCLES_READ << POSITION_VAL(QSPI_CR_NB_DUMMY)));
 800101a:	7b7b      	ldrb	r3, [r7, #13]
 800101c:	b25b      	sxtb	r3, r3
 800101e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001022:	b25a      	sxtb	r2, r3
 8001024:	23c0      	movs	r3, #192	; 0xc0
 8001026:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001028:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800102a:	fa93 f3a3 	rbit	r3, r3
 800102e:	64bb      	str	r3, [r7, #72]	; 0x48
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001030:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001032:	fab3 f383 	clz	r3, r3
 8001036:	b2db      	uxtb	r3, r3
 8001038:	4619      	mov	r1, r3
 800103a:	2308      	movs	r3, #8
 800103c:	408b      	lsls	r3, r1
 800103e:	b25b      	sxtb	r3, r3
 8001040:	4313      	orrs	r3, r2
 8001042:	b25b      	sxtb	r3, r3
 8001044:	b2db      	uxtb	r3, r3
 8001046:	737b      	strb	r3, [r7, #13]

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001048:	f107 0310 	add.w	r3, r7, #16
 800104c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001050:	4619      	mov	r1, r3
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f005 ffe4 	bl	8007020 <HAL_QSPI_Command>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <QSPI_DummyCyclesCfg+0x14c>
  {
    return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e010      	b.n	8001084 <QSPI_DummyCyclesCfg+0x16e>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001062:	f107 030c 	add.w	r3, r7, #12
 8001066:	f241 3288 	movw	r2, #5000	; 0x1388
 800106a:	4619      	mov	r1, r3
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f006 f835 	bl	80070dc <HAL_QSPI_Transmit>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <QSPI_DummyCyclesCfg+0x166>
  {
    return HAL_ERROR;
 8001078:	2301      	movs	r3, #1
 800107a:	e003      	b.n	8001084 <QSPI_DummyCyclesCfg+0x16e>
  }

  /* 40ms  Write Status/Configuration Register Cycle Time */
  HAL_Delay(40);
 800107c:	2028      	movs	r0, #40	; 0x28
 800107e:	f003 f835 	bl	80040ec <HAL_Delay>

  return HAL_OK;
 8001082:	2300      	movs	r3, #0
}
 8001084:	4618      	mov	r0, r3
 8001086:	3750      	adds	r7, #80	; 0x50
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <led_init>:
 */

#include "main.h"

void led_init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2); //Red LED
 8001090:	2104      	movs	r1, #4
 8001092:	4806      	ldr	r0, [pc, #24]	; (80010ac <led_init+0x20>)
 8001094:	f008 fe1e 	bl	8009cd4 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); //Green LED
 8001098:	2100      	movs	r1, #0
 800109a:	4804      	ldr	r0, [pc, #16]	; (80010ac <led_init+0x20>)
 800109c:	f008 fe1a 	bl	8009cd4 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); //Blue LED
 80010a0:	210c      	movs	r1, #12
 80010a2:	4802      	ldr	r0, [pc, #8]	; (80010ac <led_init+0x20>)
 80010a4:	f008 fe16 	bl	8009cd4 <HAL_TIM_PWM_Start>
}
 80010a8:	bf00      	nop
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	200045a0 	.word	0x200045a0

080010b0 <SetRGB>:
	  HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_4); //Blue LED
}

// Input: 0 to 250
void SetRGB(int Red, int Green, int Blue)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	607a      	str	r2, [r7, #4]
	//  SetRGB(250, 0, 0); // Red
	//  SetRGB(0, 250, 0); // Green
	//  SetRGB(0, 0, 250); // Blue
	//  SetRGB(250, 250, 0);// Yellow
	TIM4->CCR2 = Red * 8000 / 250;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80010c2:	fb02 f303 	mul.w	r3, r2, r3
 80010c6:	4a14      	ldr	r2, [pc, #80]	; (8001118 <SetRGB+0x68>)
 80010c8:	fb82 1203 	smull	r1, r2, r2, r3
 80010cc:	1112      	asrs	r2, r2, #4
 80010ce:	17db      	asrs	r3, r3, #31
 80010d0:	1ad2      	subs	r2, r2, r3
 80010d2:	4b12      	ldr	r3, [pc, #72]	; (800111c <SetRGB+0x6c>)
 80010d4:	639a      	str	r2, [r3, #56]	; 0x38
	TIM4->CCR1 = Green * 8000 / 250;
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80010dc:	fb02 f303 	mul.w	r3, r2, r3
 80010e0:	4a0d      	ldr	r2, [pc, #52]	; (8001118 <SetRGB+0x68>)
 80010e2:	fb82 1203 	smull	r1, r2, r2, r3
 80010e6:	1112      	asrs	r2, r2, #4
 80010e8:	17db      	asrs	r3, r3, #31
 80010ea:	1ad2      	subs	r2, r2, r3
 80010ec:	4b0b      	ldr	r3, [pc, #44]	; (800111c <SetRGB+0x6c>)
 80010ee:	635a      	str	r2, [r3, #52]	; 0x34
	TIM4->CCR4 = Blue * 8000 / 250;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80010f6:	fb02 f303 	mul.w	r3, r2, r3
 80010fa:	4a07      	ldr	r2, [pc, #28]	; (8001118 <SetRGB+0x68>)
 80010fc:	fb82 1203 	smull	r1, r2, r2, r3
 8001100:	1112      	asrs	r2, r2, #4
 8001102:	17db      	asrs	r3, r3, #31
 8001104:	1ad2      	subs	r2, r2, r3
 8001106:	4b05      	ldr	r3, [pc, #20]	; (800111c <SetRGB+0x6c>)
 8001108:	641a      	str	r2, [r3, #64]	; 0x40
}
 800110a:	bf00      	nop
 800110c:	3714      	adds	r7, #20
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	10624dd3 	.word	0x10624dd3
 800111c:	40000800 	.word	0x40000800

08001120 <ParseRFMessage>:

uint8_t GeneralHeader[8] = {'A','B','5','6','F','E','2','1'};
uint8_t LocalUART5RXArray[256] = {0};

uint8_t ParseRFMessage(uint8_t *Angle, uint8_t *Power)
{
 8001120:	b590      	push	{r4, r7, lr}
 8001122:	b091      	sub	sp, #68	; 0x44
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
//	AB56FE21,7,20580,#0,90!~
	int ret = 0;
 800112a:	2300      	movs	r3, #0
 800112c:	617b      	str	r3, [r7, #20]
	int HeaderStartIndex = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	613b      	str	r3, [r7, #16]
	int HeaderStopIndex = 0;
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
	int MessageEndIndex = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	63fb      	str	r3, [r7, #60]	; 0x3c
	int HashTagIndex = 0;
 800113a:	2300      	movs	r3, #0
 800113c:	63bb      	str	r3, [r7, #56]	; 0x38
	int CommaIndex = 0;
 800113e:	2300      	movs	r3, #0
 8001140:	637b      	str	r3, [r7, #52]	; 0x34
	int LocalCounter = 0;
 8001142:	2300      	movs	r3, #0
 8001144:	633b      	str	r3, [r7, #48]	; 0x30
	bool HeaderFound = false;
 8001146:	2300      	movs	r3, #0
 8001148:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	bool MessageEndFound = false;
 800114c:	2300      	movs	r3, #0
 800114e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	bool HashFound = false;
 8001152:	2300      	movs	r3, #0
 8001154:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	bool CommaFound = false;
 8001158:	2300      	movs	r3, #0
 800115a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	*Angle = 90;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	225a      	movs	r2, #90	; 0x5a
 8001162:	701a      	strb	r2, [r3, #0]
	*Power = 0;
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	2200      	movs	r2, #0
 8001168:	701a      	strb	r2, [r3, #0]
	if (strlen(UART5RXArray) > strlen(GeneralHeader))
 800116a:	4889      	ldr	r0, [pc, #548]	; (8001390 <ParseRFMessage+0x270>)
 800116c:	f7ff f872 	bl	8000254 <strlen>
 8001170:	4604      	mov	r4, r0
 8001172:	4888      	ldr	r0, [pc, #544]	; (8001394 <ParseRFMessage+0x274>)
 8001174:	f7ff f86e 	bl	8000254 <strlen>
 8001178:	4603      	mov	r3, r0
 800117a:	429c      	cmp	r4, r3
 800117c:	d94a      	bls.n	8001214 <ParseRFMessage+0xf4>
	{
		for (int i = 0 ; i< strlen(UART5RXArray) - strlen(GeneralHeader); i++ )
 800117e:	2300      	movs	r3, #0
 8001180:	62bb      	str	r3, [r7, #40]	; 0x28
 8001182:	e039      	b.n	80011f8 <ParseRFMessage+0xd8>
		{
			if (HeaderFound)
 8001184:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001188:	2b00      	cmp	r3, #0
 800118a:	d142      	bne.n	8001212 <ParseRFMessage+0xf2>
			{
				break;
			}
			for (int j = 0; j < strlen(GeneralHeader); j++)
 800118c:	2300      	movs	r3, #0
 800118e:	627b      	str	r3, [r7, #36]	; 0x24
 8001190:	e028      	b.n	80011e4 <ParseRFMessage+0xc4>
			{
				if (GeneralHeader[j] == UART5RXArray[j+i])
 8001192:	4a80      	ldr	r2, [pc, #512]	; (8001394 <ParseRFMessage+0x274>)
 8001194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001196:	4413      	add	r3, r2
 8001198:	781a      	ldrb	r2, [r3, #0]
 800119a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800119c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800119e:	440b      	add	r3, r1
 80011a0:	497b      	ldr	r1, [pc, #492]	; (8001390 <ParseRFMessage+0x270>)
 80011a2:	5ccb      	ldrb	r3, [r1, r3]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d10a      	bne.n	80011be <ParseRFMessage+0x9e>
				{
					LocalCounter++;
 80011a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011aa:	3301      	adds	r3, #1
 80011ac:	633b      	str	r3, [r7, #48]	; 0x30
				else
				{
					LocalCounter = 0;
					break;
				}
				if (strlen(GeneralHeader) == LocalCounter)
 80011ae:	4879      	ldr	r0, [pc, #484]	; (8001394 <ParseRFMessage+0x274>)
 80011b0:	f7ff f850 	bl	8000254 <strlen>
 80011b4:	4602      	mov	r2, r0
 80011b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d110      	bne.n	80011de <ParseRFMessage+0xbe>
 80011bc:	e002      	b.n	80011c4 <ParseRFMessage+0xa4>
					LocalCounter = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	633b      	str	r3, [r7, #48]	; 0x30
					break;
 80011c2:	e016      	b.n	80011f2 <ParseRFMessage+0xd2>
				{
					HeaderStartIndex = i;
 80011c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011c6:	613b      	str	r3, [r7, #16]
					HeaderStopIndex = i + strlen(GeneralHeader);
 80011c8:	4872      	ldr	r0, [pc, #456]	; (8001394 <ParseRFMessage+0x274>)
 80011ca:	f7ff f843 	bl	8000254 <strlen>
 80011ce:	4602      	mov	r2, r0
 80011d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011d2:	4413      	add	r3, r2
 80011d4:	60fb      	str	r3, [r7, #12]
					HeaderFound = true;
 80011d6:	2301      	movs	r3, #1
 80011d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					continue;
 80011dc:	bf00      	nop
			for (int j = 0; j < strlen(GeneralHeader); j++)
 80011de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e0:	3301      	adds	r3, #1
 80011e2:	627b      	str	r3, [r7, #36]	; 0x24
 80011e4:	486b      	ldr	r0, [pc, #428]	; (8001394 <ParseRFMessage+0x274>)
 80011e6:	f7ff f835 	bl	8000254 <strlen>
 80011ea:	4602      	mov	r2, r0
 80011ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d8cf      	bhi.n	8001192 <ParseRFMessage+0x72>
		for (int i = 0 ; i< strlen(UART5RXArray) - strlen(GeneralHeader); i++ )
 80011f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011f4:	3301      	adds	r3, #1
 80011f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80011f8:	4865      	ldr	r0, [pc, #404]	; (8001390 <ParseRFMessage+0x270>)
 80011fa:	f7ff f82b 	bl	8000254 <strlen>
 80011fe:	4604      	mov	r4, r0
 8001200:	4864      	ldr	r0, [pc, #400]	; (8001394 <ParseRFMessage+0x274>)
 8001202:	f7ff f827 	bl	8000254 <strlen>
 8001206:	4603      	mov	r3, r0
 8001208:	1ae2      	subs	r2, r4, r3
 800120a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800120c:	429a      	cmp	r2, r3
 800120e:	d8b9      	bhi.n	8001184 <ParseRFMessage+0x64>
 8001210:	e000      	b.n	8001214 <ParseRFMessage+0xf4>
				break;
 8001212:	bf00      	nop
			}
		}
	}


	if (HeaderFound)
 8001214:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001218:	2b00      	cmp	r3, #0
 800121a:	d04a      	beq.n	80012b2 <ParseRFMessage+0x192>
	{
		for (int i = 0 ; i< strlen(UART5RXArray); i++ )
 800121c:	2300      	movs	r3, #0
 800121e:	623b      	str	r3, [r7, #32]
 8001220:	e040      	b.n	80012a4 <ParseRFMessage+0x184>
		{
			if ( (UART5RXArray[i] == '#') && (!HashFound) )
 8001222:	4a5b      	ldr	r2, [pc, #364]	; (8001390 <ParseRFMessage+0x270>)
 8001224:	6a3b      	ldr	r3, [r7, #32]
 8001226:	4413      	add	r3, r2
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	2b23      	cmp	r3, #35	; 0x23
 800122c:	d10b      	bne.n	8001246 <ParseRFMessage+0x126>
 800122e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001232:	f083 0301 	eor.w	r3, r3, #1
 8001236:	b2db      	uxtb	r3, r3
 8001238:	2b00      	cmp	r3, #0
 800123a:	d004      	beq.n	8001246 <ParseRFMessage+0x126>
			{
				HashFound = true;
 800123c:	2301      	movs	r3, #1
 800123e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				HashTagIndex = i;
 8001242:	6a3b      	ldr	r3, [r7, #32]
 8001244:	63bb      	str	r3, [r7, #56]	; 0x38
			}
			if ( (UART5RXArray[i] == ',') && (HashFound) && (!CommaFound))
 8001246:	4a52      	ldr	r2, [pc, #328]	; (8001390 <ParseRFMessage+0x270>)
 8001248:	6a3b      	ldr	r3, [r7, #32]
 800124a:	4413      	add	r3, r2
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	2b2c      	cmp	r3, #44	; 0x2c
 8001250:	d10f      	bne.n	8001272 <ParseRFMessage+0x152>
 8001252:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001256:	2b00      	cmp	r3, #0
 8001258:	d00b      	beq.n	8001272 <ParseRFMessage+0x152>
 800125a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800125e:	f083 0301 	eor.w	r3, r3, #1
 8001262:	b2db      	uxtb	r3, r3
 8001264:	2b00      	cmp	r3, #0
 8001266:	d004      	beq.n	8001272 <ParseRFMessage+0x152>
			{
				CommaFound = true;
 8001268:	2301      	movs	r3, #1
 800126a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				CommaIndex = i;
 800126e:	6a3b      	ldr	r3, [r7, #32]
 8001270:	637b      	str	r3, [r7, #52]	; 0x34
			}
			if ( (UART5RXArray[i] == '!') && (CommaFound) && (!MessageEndFound) )
 8001272:	4a47      	ldr	r2, [pc, #284]	; (8001390 <ParseRFMessage+0x270>)
 8001274:	6a3b      	ldr	r3, [r7, #32]
 8001276:	4413      	add	r3, r2
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b21      	cmp	r3, #33	; 0x21
 800127c:	d10f      	bne.n	800129e <ParseRFMessage+0x17e>
 800127e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001282:	2b00      	cmp	r3, #0
 8001284:	d00b      	beq.n	800129e <ParseRFMessage+0x17e>
 8001286:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800128a:	f083 0301 	eor.w	r3, r3, #1
 800128e:	b2db      	uxtb	r3, r3
 8001290:	2b00      	cmp	r3, #0
 8001292:	d004      	beq.n	800129e <ParseRFMessage+0x17e>
			{
				MessageEndFound = true;
 8001294:	2301      	movs	r3, #1
 8001296:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				MessageEndIndex = i;
 800129a:	6a3b      	ldr	r3, [r7, #32]
 800129c:	63fb      	str	r3, [r7, #60]	; 0x3c
		for (int i = 0 ; i< strlen(UART5RXArray); i++ )
 800129e:	6a3b      	ldr	r3, [r7, #32]
 80012a0:	3301      	adds	r3, #1
 80012a2:	623b      	str	r3, [r7, #32]
 80012a4:	483a      	ldr	r0, [pc, #232]	; (8001390 <ParseRFMessage+0x270>)
 80012a6:	f7fe ffd5 	bl	8000254 <strlen>
 80012aa:	4602      	mov	r2, r0
 80012ac:	6a3b      	ldr	r3, [r7, #32]
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d8b7      	bhi.n	8001222 <ParseRFMessage+0x102>
			}
		}
	}
	if ((HashFound) && (HashFound) && (CommaFound) )
 80012b2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d065      	beq.n	8001386 <ParseRFMessage+0x266>
 80012ba:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d061      	beq.n	8001386 <ParseRFMessage+0x266>
 80012c2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d05d      	beq.n	8001386 <ParseRFMessage+0x266>
	{
		*Angle = 0;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2200      	movs	r2, #0
 80012ce:	701a      	strb	r2, [r3, #0]
		*Power = 0;
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	2200      	movs	r2, #0
 80012d4:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < CommaIndex - HashTagIndex -1 ; i++)
 80012d6:	2300      	movs	r3, #0
 80012d8:	61fb      	str	r3, [r7, #28]
 80012da:	e015      	b.n	8001308 <ParseRFMessage+0x1e8>
		{
			*Power = *Power * 10 + UART5RXArray[HashTagIndex + i + 1] - '0';
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	461a      	mov	r2, r3
 80012e2:	0092      	lsls	r2, r2, #2
 80012e4:	4413      	add	r3, r2
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	b2da      	uxtb	r2, r3
 80012ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	440b      	add	r3, r1
 80012f0:	3301      	adds	r3, #1
 80012f2:	4927      	ldr	r1, [pc, #156]	; (8001390 <ParseRFMessage+0x270>)
 80012f4:	5ccb      	ldrb	r3, [r1, r3]
 80012f6:	4413      	add	r3, r2
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	3b30      	subs	r3, #48	; 0x30
 80012fc:	b2da      	uxtb	r2, r3
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < CommaIndex - HashTagIndex -1 ; i++)
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	3301      	adds	r3, #1
 8001306:	61fb      	str	r3, [r7, #28]
 8001308:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800130a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	3b01      	subs	r3, #1
 8001310:	69fa      	ldr	r2, [r7, #28]
 8001312:	429a      	cmp	r2, r3
 8001314:	dbe2      	blt.n	80012dc <ParseRFMessage+0x1bc>
		}
		for (int i = 0; i < MessageEndIndex - CommaIndex -1; i++)
 8001316:	2300      	movs	r3, #0
 8001318:	61bb      	str	r3, [r7, #24]
 800131a:	e015      	b.n	8001348 <ParseRFMessage+0x228>
		{
			*Angle = *Angle * 10 + UART5RXArray[CommaIndex + i + 1] - '0';
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	461a      	mov	r2, r3
 8001322:	0092      	lsls	r2, r2, #2
 8001324:	4413      	add	r3, r2
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	b2da      	uxtb	r2, r3
 800132a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	440b      	add	r3, r1
 8001330:	3301      	adds	r3, #1
 8001332:	4917      	ldr	r1, [pc, #92]	; (8001390 <ParseRFMessage+0x270>)
 8001334:	5ccb      	ldrb	r3, [r1, r3]
 8001336:	4413      	add	r3, r2
 8001338:	b2db      	uxtb	r3, r3
 800133a:	3b30      	subs	r3, #48	; 0x30
 800133c:	b2da      	uxtb	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < MessageEndIndex - CommaIndex -1; i++)
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	3301      	adds	r3, #1
 8001346:	61bb      	str	r3, [r7, #24]
 8001348:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800134a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	3b01      	subs	r3, #1
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	429a      	cmp	r2, r3
 8001354:	dbe2      	blt.n	800131c <ParseRFMessage+0x1fc>
		}
//		sprintf(USBTXArray, "%6.3f, ",CurrentTime());
//		SendToScreen(false);
//		memcpy(USBTXArray,UART5RXArray,MessageEndIndex);
//		SendToScreen(true);
		memcpy(&UART5RXArray[0],&UART5RXArray[MessageEndIndex+1],255-MessageEndIndex);
 8001356:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001358:	3301      	adds	r3, #1
 800135a:	4a0d      	ldr	r2, [pc, #52]	; (8001390 <ParseRFMessage+0x270>)
 800135c:	1899      	adds	r1, r3, r2
 800135e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001360:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8001364:	461a      	mov	r2, r3
 8001366:	480a      	ldr	r0, [pc, #40]	; (8001390 <ParseRFMessage+0x270>)
 8001368:	f00e fdbe 	bl	800fee8 <memcpy>
		memset(&UART5RXArray[255-MessageEndIndex],0,MessageEndIndex+1);
 800136c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800136e:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8001372:	4a07      	ldr	r2, [pc, #28]	; (8001390 <ParseRFMessage+0x270>)
 8001374:	1898      	adds	r0, r3, r2
 8001376:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001378:	3301      	adds	r3, #1
 800137a:	461a      	mov	r2, r3
 800137c:	2100      	movs	r1, #0
 800137e:	f00e fdbe 	bl	800fefe <memset>
		return 0;
 8001382:	2300      	movs	r3, #0
 8001384:	e000      	b.n	8001388 <ParseRFMessage+0x268>
	}
//	sprintf(USBTXArray, "%6.3f, Error Code",CurrentTime());
//	SendToScreen(false);
	return 1;
 8001386:	2301      	movs	r3, #1
}
 8001388:	4618      	mov	r0, r3
 800138a:	3744      	adds	r7, #68	; 0x44
 800138c:	46bd      	mov	sp, r7
 800138e:	bd90      	pop	{r4, r7, pc}
 8001390:	200007c0 	.word	0x200007c0
 8001394:	20000000 	.word	0x20000000

08001398 <CheckDataFromUART>:
	NumberOfBytesRead = LocalCounter;
	return NumberOfBytesRead;
}

uint32_t CheckDataFromUART(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
	int NumberOfBytesRead = 0;
 800139e:	2300      	movs	r3, #0
 80013a0:	60bb      	str	r3, [r7, #8]
	int LocalCounter = 0;
 80013a2:	2300      	movs	r3, #0
 80013a4:	617b      	str	r3, [r7, #20]
	int StepInc = 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	613b      	str	r3, [r7, #16]
	int ret = 0;
 80013aa:	2300      	movs	r3, #0
 80013ac:	607b      	str	r3, [r7, #4]
	HAL_StatusTypeDef Uart_Ret;
	HAL_UART_Receive_DMA(&huart5, LocalUART5RXArray, 256);
 80013ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013b2:	4927      	ldr	r1, [pc, #156]	; (8001450 <CheckDataFromUART+0xb8>)
 80013b4:	4827      	ldr	r0, [pc, #156]	; (8001454 <CheckDataFromUART+0xbc>)
 80013b6:	f009 fceb 	bl	800ad90 <HAL_UART_Receive_DMA>
	HAL_UART_DMAPause(&huart5);
 80013ba:	4826      	ldr	r0, [pc, #152]	; (8001454 <CheckDataFromUART+0xbc>)
 80013bc:	f009 fd6c 	bl	800ae98 <HAL_UART_DMAPause>
	memcpy(&UART5RXArray, &LocalUART5RXArray,256);
 80013c0:	4a25      	ldr	r2, [pc, #148]	; (8001458 <CheckDataFromUART+0xc0>)
 80013c2:	4b23      	ldr	r3, [pc, #140]	; (8001450 <CheckDataFromUART+0xb8>)
 80013c4:	4610      	mov	r0, r2
 80013c6:	4619      	mov	r1, r3
 80013c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013cc:	461a      	mov	r2, r3
 80013ce:	f00e fd8b 	bl	800fee8 <memcpy>
	memset(LocalUART5RXArray,0,256);
 80013d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013d6:	2100      	movs	r1, #0
 80013d8:	481d      	ldr	r0, [pc, #116]	; (8001450 <CheckDataFromUART+0xb8>)
 80013da:	f00e fd90 	bl	800fefe <memset>
	HAL_UART_DMAResume(&huart5);
 80013de:	481d      	ldr	r0, [pc, #116]	; (8001454 <CheckDataFromUART+0xbc>)
 80013e0:	f009 fdae 	bl	800af40 <HAL_UART_DMAResume>
	for (int i = 0; i<256;i++)
 80013e4:	2300      	movs	r3, #0
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	e01d      	b.n	8001426 <CheckDataFromUART+0x8e>
	{
		if (UART5RXArray[0] == 0)
 80013ea:	4b1b      	ldr	r3, [pc, #108]	; (8001458 <CheckDataFromUART+0xc0>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d113      	bne.n	800141a <CheckDataFromUART+0x82>
		{
			memcpy(&UART5RXArray[StepInc],&UART5RXArray[StepInc+1],255-i);
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	4a18      	ldr	r2, [pc, #96]	; (8001458 <CheckDataFromUART+0xc0>)
 80013f6:	1898      	adds	r0, r3, r2
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	3301      	adds	r3, #1
 80013fc:	4a16      	ldr	r2, [pc, #88]	; (8001458 <CheckDataFromUART+0xc0>)
 80013fe:	1899      	adds	r1, r3, r2
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8001406:	461a      	mov	r2, r3
 8001408:	f00e fd6e 	bl	800fee8 <memcpy>
			UART5RXArray[255 - i] = 0;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8001412:	4a11      	ldr	r2, [pc, #68]	; (8001458 <CheckDataFromUART+0xc0>)
 8001414:	2100      	movs	r1, #0
 8001416:	54d1      	strb	r1, [r2, r3]
 8001418:	e002      	b.n	8001420 <CheckDataFromUART+0x88>
		}
		else
		{
			StepInc++;
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	3301      	adds	r3, #1
 800141e:	613b      	str	r3, [r7, #16]
	for (int i = 0; i<256;i++)
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	3301      	adds	r3, #1
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	2bff      	cmp	r3, #255	; 0xff
 800142a:	ddde      	ble.n	80013ea <CheckDataFromUART+0x52>
		}
	}
	while (UART5RXArray[LocalCounter] != 0)
 800142c:	e002      	b.n	8001434 <CheckDataFromUART+0x9c>
	{
		LocalCounter++;
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	3301      	adds	r3, #1
 8001432:	617b      	str	r3, [r7, #20]
	while (UART5RXArray[LocalCounter] != 0)
 8001434:	4a08      	ldr	r2, [pc, #32]	; (8001458 <CheckDataFromUART+0xc0>)
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	4413      	add	r3, r2
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d1f6      	bne.n	800142e <CheckDataFromUART+0x96>
	}
	NumberOfBytesRead = LocalCounter;
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	60bb      	str	r3, [r7, #8]
	return NumberOfBytesRead;
 8001444:	68bb      	ldr	r3, [r7, #8]
}
 8001446:	4618      	mov	r0, r3
 8001448:	3718      	adds	r7, #24
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	20000268 	.word	0x20000268
 8001454:	200046f0 	.word	0x200046f0
 8001458:	200007c0 	.word	0x200007c0

0800145c <bno055_init>:
 *  make sure your changes will not
 *  affect the reference value of the parameter
 *  (Better case don't change the reference value of the parameter)
 */
BNO055_RETURN_FUNCTION_TYPE bno055_init(struct bno055_t *bno055)
{
 800145c:	b590      	push	{r4, r7, lr}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8001464:	23ff      	movs	r3, #255	; 0xff
 8001466:	73fb      	strb	r3, [r7, #15]
    u8 data_u8 = BNO055_INIT_VALUE;
 8001468:	2300      	movs	r3, #0
 800146a:	73bb      	strb	r3, [r7, #14]
    u8 bno055_page_zero_u8 = BNO055_PAGE_ZERO;
 800146c:	2300      	movs	r3, #0
 800146e:	737b      	strb	r3, [r7, #13]

    /* Array holding the Software revision id
     */
    u8 a_SW_ID_u8[BNO055_REV_ID_SIZE] = { BNO055_INIT_VALUE, BNO055_INIT_VALUE };
 8001470:	2300      	movs	r3, #0
 8001472:	723b      	strb	r3, [r7, #8]
 8001474:	2300      	movs	r3, #0
 8001476:	727b      	strb	r3, [r7, #9]

    /* stuct parameters are assign to bno055*/
    p_bno055 = bno055;
 8001478:	4a58      	ldr	r2, [pc, #352]	; (80015dc <bno055_init+0x180>)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6013      	str	r3, [r2, #0]

    /* Write the default page as zero*/
    com_rslt = p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 800147e:	4b57      	ldr	r3, [pc, #348]	; (80015dc <bno055_init+0x180>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	68dc      	ldr	r4, [r3, #12]
 8001484:	4b55      	ldr	r3, [pc, #340]	; (80015dc <bno055_init+0x180>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	7a58      	ldrb	r0, [r3, #9]
 800148a:	f107 020d 	add.w	r2, r7, #13
 800148e:	2301      	movs	r3, #1
 8001490:	2107      	movs	r1, #7
 8001492:	47a0      	blx	r4
 8001494:	4603      	mov	r3, r0
 8001496:	73fb      	strb	r3, [r7, #15]
                                               &bno055_page_zero_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);

    /* Read the chip id of the sensor from page
     * zero 0x00 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001498:	4b50      	ldr	r3, [pc, #320]	; (80015dc <bno055_init+0x180>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	691c      	ldr	r4, [r3, #16]
 800149e:	4b4f      	ldr	r3, [pc, #316]	; (80015dc <bno055_init+0x180>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	7a58      	ldrb	r0, [r3, #9]
 80014a4:	f107 020e 	add.w	r2, r7, #14
 80014a8:	2301      	movs	r3, #1
 80014aa:	2100      	movs	r1, #0
 80014ac:	47a0      	blx	r4
 80014ae:	4603      	mov	r3, r0
 80014b0:	b2da      	uxtb	r2, r3
 80014b2:	7bfb      	ldrb	r3, [r7, #15]
 80014b4:	4413      	add	r3, r2
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	73fb      	strb	r3, [r7, #15]
                                               BNO055_CHIP_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->chip_id = data_u8;
 80014ba:	4b48      	ldr	r3, [pc, #288]	; (80015dc <bno055_init+0x180>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	7bba      	ldrb	r2, [r7, #14]
 80014c0:	701a      	strb	r2, [r3, #0]

    /* Read the accel revision id from page
     * zero 0x01 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80014c2:	4b46      	ldr	r3, [pc, #280]	; (80015dc <bno055_init+0x180>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	691c      	ldr	r4, [r3, #16]
 80014c8:	4b44      	ldr	r3, [pc, #272]	; (80015dc <bno055_init+0x180>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	7a58      	ldrb	r0, [r3, #9]
 80014ce:	f107 020e 	add.w	r2, r7, #14
 80014d2:	2301      	movs	r3, #1
 80014d4:	2101      	movs	r1, #1
 80014d6:	47a0      	blx	r4
 80014d8:	4603      	mov	r3, r0
 80014da:	b2da      	uxtb	r2, r3
 80014dc:	7bfb      	ldrb	r3, [r7, #15]
 80014de:	4413      	add	r3, r2
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	73fb      	strb	r3, [r7, #15]
                                               BNO055_ACCEL_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->accel_rev_id = data_u8;
 80014e4:	4b3d      	ldr	r3, [pc, #244]	; (80015dc <bno055_init+0x180>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	7bba      	ldrb	r2, [r7, #14]
 80014ea:	715a      	strb	r2, [r3, #5]

    /* Read the mag revision id from page
     * zero 0x02 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80014ec:	4b3b      	ldr	r3, [pc, #236]	; (80015dc <bno055_init+0x180>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	691c      	ldr	r4, [r3, #16]
 80014f2:	4b3a      	ldr	r3, [pc, #232]	; (80015dc <bno055_init+0x180>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	7a58      	ldrb	r0, [r3, #9]
 80014f8:	f107 020e 	add.w	r2, r7, #14
 80014fc:	2301      	movs	r3, #1
 80014fe:	2102      	movs	r1, #2
 8001500:	47a0      	blx	r4
 8001502:	4603      	mov	r3, r0
 8001504:	b2da      	uxtb	r2, r3
 8001506:	7bfb      	ldrb	r3, [r7, #15]
 8001508:	4413      	add	r3, r2
 800150a:	b2db      	uxtb	r3, r3
 800150c:	73fb      	strb	r3, [r7, #15]
                                               BNO055_MAG_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->mag_rev_id = data_u8;
 800150e:	4b33      	ldr	r3, [pc, #204]	; (80015dc <bno055_init+0x180>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	7bba      	ldrb	r2, [r7, #14]
 8001514:	719a      	strb	r2, [r3, #6]

    /* Read the gyro revision id from page
     * zero 0x02 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001516:	4b31      	ldr	r3, [pc, #196]	; (80015dc <bno055_init+0x180>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	691c      	ldr	r4, [r3, #16]
 800151c:	4b2f      	ldr	r3, [pc, #188]	; (80015dc <bno055_init+0x180>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	7a58      	ldrb	r0, [r3, #9]
 8001522:	f107 020e 	add.w	r2, r7, #14
 8001526:	2301      	movs	r3, #1
 8001528:	2103      	movs	r1, #3
 800152a:	47a0      	blx	r4
 800152c:	4603      	mov	r3, r0
 800152e:	b2da      	uxtb	r2, r3
 8001530:	7bfb      	ldrb	r3, [r7, #15]
 8001532:	4413      	add	r3, r2
 8001534:	b2db      	uxtb	r3, r3
 8001536:	73fb      	strb	r3, [r7, #15]
                                               BNO055_GYRO_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->gyro_rev_id = data_u8;
 8001538:	4b28      	ldr	r3, [pc, #160]	; (80015dc <bno055_init+0x180>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	7bba      	ldrb	r2, [r7, #14]
 800153e:	71da      	strb	r2, [r3, #7]

    /* Read the boot loader revision from page
     * zero 0x06 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001540:	4b26      	ldr	r3, [pc, #152]	; (80015dc <bno055_init+0x180>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	691c      	ldr	r4, [r3, #16]
 8001546:	4b25      	ldr	r3, [pc, #148]	; (80015dc <bno055_init+0x180>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	7a58      	ldrb	r0, [r3, #9]
 800154c:	f107 020e 	add.w	r2, r7, #14
 8001550:	2301      	movs	r3, #1
 8001552:	2106      	movs	r1, #6
 8001554:	47a0      	blx	r4
 8001556:	4603      	mov	r3, r0
 8001558:	b2da      	uxtb	r2, r3
 800155a:	7bfb      	ldrb	r3, [r7, #15]
 800155c:	4413      	add	r3, r2
 800155e:	b2db      	uxtb	r3, r3
 8001560:	73fb      	strb	r3, [r7, #15]
                                               BNO055_BL_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->bl_rev_id = data_u8;
 8001562:	4b1e      	ldr	r3, [pc, #120]	; (80015dc <bno055_init+0x180>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	7bba      	ldrb	r2, [r7, #14]
 8001568:	721a      	strb	r2, [r3, #8]

    /* Read the software revision id from page
     * zero 0x04 and 0x05 register( 2 bytes of data)*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 800156a:	4b1c      	ldr	r3, [pc, #112]	; (80015dc <bno055_init+0x180>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	691c      	ldr	r4, [r3, #16]
 8001570:	4b1a      	ldr	r3, [pc, #104]	; (80015dc <bno055_init+0x180>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	7a58      	ldrb	r0, [r3, #9]
 8001576:	f107 0208 	add.w	r2, r7, #8
 800157a:	2302      	movs	r3, #2
 800157c:	2104      	movs	r1, #4
 800157e:	47a0      	blx	r4
 8001580:	4603      	mov	r3, r0
 8001582:	b2da      	uxtb	r2, r3
 8001584:	7bfb      	ldrb	r3, [r7, #15]
 8001586:	4413      	add	r3, r2
 8001588:	b2db      	uxtb	r3, r3
 800158a:	73fb      	strb	r3, [r7, #15]
                                               BNO055_SW_REV_ID_LSB_REG,
                                               a_SW_ID_u8,
                                               BNO055_LSB_MSB_READ_LENGTH);
    a_SW_ID_u8[BNO055_SW_ID_LSB] = BNO055_GET_BITSLICE(a_SW_ID_u8[BNO055_SW_ID_LSB], BNO055_SW_REV_ID_LSB);
 800158c:	7a3b      	ldrb	r3, [r7, #8]
 800158e:	723b      	strb	r3, [r7, #8]
    p_bno055->sw_rev_id =
        (u16)((((u32)((u8)a_SW_ID_u8[BNO055_SW_ID_MSB])) << BNO055_SHIFT_EIGHT_BITS) | (a_SW_ID_u8[BNO055_SW_ID_LSB]));
 8001590:	7a7b      	ldrb	r3, [r7, #9]
 8001592:	b29b      	uxth	r3, r3
 8001594:	021b      	lsls	r3, r3, #8
 8001596:	b299      	uxth	r1, r3
 8001598:	7a3b      	ldrb	r3, [r7, #8]
 800159a:	b29a      	uxth	r2, r3
    p_bno055->sw_rev_id =
 800159c:	4b0f      	ldr	r3, [pc, #60]	; (80015dc <bno055_init+0x180>)
 800159e:	681b      	ldr	r3, [r3, #0]
        (u16)((((u32)((u8)a_SW_ID_u8[BNO055_SW_ID_MSB])) << BNO055_SHIFT_EIGHT_BITS) | (a_SW_ID_u8[BNO055_SW_ID_LSB]));
 80015a0:	430a      	orrs	r2, r1
 80015a2:	b292      	uxth	r2, r2
    p_bno055->sw_rev_id =
 80015a4:	805a      	strh	r2, [r3, #2]

    /* Read the page id from the register 0x07*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80015a6:	4b0d      	ldr	r3, [pc, #52]	; (80015dc <bno055_init+0x180>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	691c      	ldr	r4, [r3, #16]
 80015ac:	4b0b      	ldr	r3, [pc, #44]	; (80015dc <bno055_init+0x180>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	7a58      	ldrb	r0, [r3, #9]
 80015b2:	f107 020e 	add.w	r2, r7, #14
 80015b6:	2301      	movs	r3, #1
 80015b8:	2107      	movs	r1, #7
 80015ba:	47a0      	blx	r4
 80015bc:	4603      	mov	r3, r0
 80015be:	b2da      	uxtb	r2, r3
 80015c0:	7bfb      	ldrb	r3, [r7, #15]
 80015c2:	4413      	add	r3, r2
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	73fb      	strb	r3, [r7, #15]
                                               BNO055_PAGE_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->page_id = data_u8;
 80015c8:	4b04      	ldr	r3, [pc, #16]	; (80015dc <bno055_init+0x180>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	7bba      	ldrb	r2, [r7, #14]
 80015ce:	711a      	strb	r2, [r3, #4]

    return com_rslt;
 80015d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3714      	adds	r7, #20
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd90      	pop	{r4, r7, pc}
 80015dc:	20000368 	.word	0x20000368

080015e0 <bno055_write_register>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_write_register(u8 addr_u8, u8 *data_u8, u8 len_u8)
{
 80015e0:	b590      	push	{r4, r7, lr}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	6039      	str	r1, [r7, #0]
 80015ea:	71fb      	strb	r3, [r7, #7]
 80015ec:	4613      	mov	r3, r2
 80015ee:	71bb      	strb	r3, [r7, #6]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 80015f0:	23ff      	movs	r3, #255	; 0xff
 80015f2:	73fb      	strb	r3, [r7, #15]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 80015f4:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <bno055_write_register+0x48>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d102      	bne.n	8001602 <bno055_write_register+0x22>
    {
        return BNO055_E_NULL_PTR;
 80015fc:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8001600:	e00d      	b.n	800161e <bno055_write_register+0x3e>
    }
    else
    {
        /* Write the values of respective given register */
        com_rslt = p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr, addr_u8, data_u8, len_u8);
 8001602:	4b09      	ldr	r3, [pc, #36]	; (8001628 <bno055_write_register+0x48>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	68dc      	ldr	r4, [r3, #12]
 8001608:	4b07      	ldr	r3, [pc, #28]	; (8001628 <bno055_write_register+0x48>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	7a58      	ldrb	r0, [r3, #9]
 800160e:	79bb      	ldrb	r3, [r7, #6]
 8001610:	79f9      	ldrb	r1, [r7, #7]
 8001612:	683a      	ldr	r2, [r7, #0]
 8001614:	47a0      	blx	r4
 8001616:	4603      	mov	r3, r0
 8001618:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 800161a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800161e:	4618      	mov	r0, r3
 8001620:	3714      	adds	r7, #20
 8001622:	46bd      	mov	sp, r7
 8001624:	bd90      	pop	{r4, r7, pc}
 8001626:	bf00      	nop
 8001628:	20000368 	.word	0x20000368

0800162c <bno055_write_page_id>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_write_page_id(u8 page_id_u8)
{
 800162c:	b590      	push	{r4, r7, lr}
 800162e:	b085      	sub	sp, #20
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	71fb      	strb	r3, [r7, #7]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8001636:	23ff      	movs	r3, #255	; 0xff
 8001638:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 800163a:	2300      	movs	r3, #0
 800163c:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 800163e:	4b1e      	ldr	r3, [pc, #120]	; (80016b8 <bno055_write_page_id+0x8c>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d102      	bne.n	800164c <bno055_write_page_id+0x20>
    {
        return BNO055_E_NULL_PTR;
 8001646:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 800164a:	e030      	b.n	80016ae <bno055_write_page_id+0x82>
    }
    else
    {
        /* Read the current page*/
        com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 800164c:	4b1a      	ldr	r3, [pc, #104]	; (80016b8 <bno055_write_page_id+0x8c>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	691c      	ldr	r4, [r3, #16]
 8001652:	4b19      	ldr	r3, [pc, #100]	; (80016b8 <bno055_write_page_id+0x8c>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	7a58      	ldrb	r0, [r3, #9]
 8001658:	f107 020e 	add.w	r2, r7, #14
 800165c:	2301      	movs	r3, #1
 800165e:	2107      	movs	r1, #7
 8001660:	47a0      	blx	r4
 8001662:	4603      	mov	r3, r0
 8001664:	73fb      	strb	r3, [r7, #15]
                                                  BNO055_PAGE_ID_REG,
                                                  &data_u8r,
                                                  BNO055_GEN_READ_WRITE_LENGTH);

        /* Check condition for communication BNO055_SUCCESS*/
        if (com_rslt == BNO055_SUCCESS)
 8001666:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d11b      	bne.n	80016a6 <bno055_write_page_id+0x7a>
        {
            data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_PAGE_ID, page_id_u8);
 800166e:	79fb      	ldrb	r3, [r7, #7]
 8001670:	73bb      	strb	r3, [r7, #14]

            /* Write the page id*/
            com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8001672:	4b11      	ldr	r3, [pc, #68]	; (80016b8 <bno055_write_page_id+0x8c>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	68dc      	ldr	r4, [r3, #12]
 8001678:	4b0f      	ldr	r3, [pc, #60]	; (80016b8 <bno055_write_page_id+0x8c>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	7a58      	ldrb	r0, [r3, #9]
 800167e:	f107 020e 	add.w	r2, r7, #14
 8001682:	2301      	movs	r3, #1
 8001684:	2107      	movs	r1, #7
 8001686:	47a0      	blx	r4
 8001688:	4603      	mov	r3, r0
 800168a:	b2da      	uxtb	r2, r3
 800168c:	7bfb      	ldrb	r3, [r7, #15]
 800168e:	4413      	add	r3, r2
 8001690:	b2db      	uxtb	r3, r3
 8001692:	73fb      	strb	r3, [r7, #15]
                                                        BNO055_PAGE_ID_REG,
                                                        &data_u8r,
                                                        BNO055_GEN_READ_WRITE_LENGTH);
            if (com_rslt == BNO055_SUCCESS)
 8001694:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d106      	bne.n	80016aa <bno055_write_page_id+0x7e>
            {
                p_bno055->page_id = page_id_u8;
 800169c:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <bno055_write_page_id+0x8c>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	79fa      	ldrb	r2, [r7, #7]
 80016a2:	711a      	strb	r2, [r3, #4]
 80016a4:	e001      	b.n	80016aa <bno055_write_page_id+0x7e>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 80016a6:	23ff      	movs	r3, #255	; 0xff
 80016a8:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 80016aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3714      	adds	r7, #20
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd90      	pop	{r4, r7, pc}
 80016b6:	bf00      	nop
 80016b8:	20000368 	.word	0x20000368

080016bc <bno055_get_operation_mode>:
 *  becomes zero and it is mainly derived
 *  to configure the various settings of the BNO
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_get_operation_mode(u8 *operation_mode_u8)
{
 80016bc:	b590      	push	{r4, r7, lr}
 80016be:	b085      	sub	sp, #20
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 80016c4:	23ff      	movs	r3, #255	; 0xff
 80016c6:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 80016c8:	2300      	movs	r3, #0
 80016ca:	737b      	strb	r3, [r7, #13]
    s8 stat_s8 = BNO055_ERROR;
 80016cc:	23ff      	movs	r3, #255	; 0xff
 80016ce:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 80016d0:	4b1a      	ldr	r3, [pc, #104]	; (800173c <bno055_get_operation_mode+0x80>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d102      	bne.n	80016de <bno055_get_operation_mode+0x22>
    {
        return BNO055_E_NULL_PTR;
 80016d8:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 80016dc:	e02a      	b.n	8001734 <bno055_get_operation_mode+0x78>
    }
    else
    {
        /*condition check for page, operation mode is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 80016de:	4b17      	ldr	r3, [pc, #92]	; (800173c <bno055_get_operation_mode+0x80>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	791b      	ldrb	r3, [r3, #4]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d004      	beq.n	80016f2 <bno055_get_operation_mode+0x36>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 80016e8:	2000      	movs	r0, #0
 80016ea:	f7ff ff9f 	bl	800162c <bno055_write_page_id>
 80016ee:	4603      	mov	r3, r0
 80016f0:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 80016f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d004      	beq.n	8001704 <bno055_get_operation_mode+0x48>
 80016fa:	4b10      	ldr	r3, [pc, #64]	; (800173c <bno055_get_operation_mode+0x80>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	791b      	ldrb	r3, [r3, #4]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d113      	bne.n	800172c <bno055_get_operation_mode+0x70>
        {
            /* Read the value of operation mode*/
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001704:	4b0d      	ldr	r3, [pc, #52]	; (800173c <bno055_get_operation_mode+0x80>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	691c      	ldr	r4, [r3, #16]
 800170a:	4b0c      	ldr	r3, [pc, #48]	; (800173c <bno055_get_operation_mode+0x80>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	7a58      	ldrb	r0, [r3, #9]
 8001710:	f107 020d 	add.w	r2, r7, #13
 8001714:	2301      	movs	r3, #1
 8001716:	213d      	movs	r1, #61	; 0x3d
 8001718:	47a0      	blx	r4
 800171a:	4603      	mov	r3, r0
 800171c:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_OPERATION_MODE_REG,
                                                      &data_u8r,
                                                      BNO055_GEN_READ_WRITE_LENGTH);
            *operation_mode_u8 = BNO055_GET_BITSLICE(data_u8r, BNO055_OPERATION_MODE);
 800171e:	7b7b      	ldrb	r3, [r7, #13]
 8001720:	f003 030f 	and.w	r3, r3, #15
 8001724:	b2da      	uxtb	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	701a      	strb	r2, [r3, #0]
 800172a:	e001      	b.n	8001730 <bno055_get_operation_mode+0x74>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 800172c:	23ff      	movs	r3, #255	; 0xff
 800172e:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8001730:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001734:	4618      	mov	r0, r3
 8001736:	3714      	adds	r7, #20
 8001738:	46bd      	mov	sp, r7
 800173a:	bd90      	pop	{r4, r7, pc}
 800173c:	20000368 	.word	0x20000368

08001740 <bno055_set_operation_mode>:
 *  becomes zero and it is mainly derived
 *  to configure the various settings of the BNO
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_operation_mode(u8 operation_mode_u8)
{
 8001740:	b590      	push	{r4, r7, lr}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 800174a:	23ff      	movs	r3, #255	; 0xff
 800174c:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 800174e:	2300      	movs	r3, #0
 8001750:	737b      	strb	r3, [r7, #13]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 8001752:	2300      	movs	r3, #0
 8001754:	733b      	strb	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 8001756:	23ff      	movs	r3, #255	; 0xff
 8001758:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 800175a:	4b5c      	ldr	r3, [pc, #368]	; (80018cc <bno055_set_operation_mode+0x18c>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d102      	bne.n	8001768 <bno055_set_operation_mode+0x28>
    {
        return BNO055_E_NULL_PTR;
 8001762:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8001766:	e0ac      	b.n	80018c2 <bno055_set_operation_mode+0x182>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 8001768:	f107 030c 	add.w	r3, r7, #12
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff ffa5 	bl	80016bc <bno055_get_operation_mode>
 8001772:	4603      	mov	r3, r0
 8001774:	73bb      	strb	r3, [r7, #14]
        if (stat_s8 == BNO055_SUCCESS)
 8001776:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800177a:	2b00      	cmp	r3, #0
 800177c:	f040 809d 	bne.w	80018ba <bno055_set_operation_mode+0x17a>
        {
            /* If the previous operation mode is config it is
             * directly write the operation mode */
            if (prev_opmode_u8 == BNO055_OPERATION_MODE_CONFIG)
 8001780:	7b3b      	ldrb	r3, [r7, #12]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d137      	bne.n	80017f6 <bno055_set_operation_mode+0xb6>
            {
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001786:	4b51      	ldr	r3, [pc, #324]	; (80018cc <bno055_set_operation_mode+0x18c>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	691c      	ldr	r4, [r3, #16]
 800178c:	4b4f      	ldr	r3, [pc, #316]	; (80018cc <bno055_set_operation_mode+0x18c>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	7a58      	ldrb	r0, [r3, #9]
 8001792:	f107 020d 	add.w	r2, r7, #13
 8001796:	2301      	movs	r3, #1
 8001798:	213d      	movs	r1, #61	; 0x3d
 800179a:	47a0      	blx	r4
 800179c:	4603      	mov	r3, r0
 800179e:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_OPERATION_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 80017a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	f040 808a 	bne.w	80018be <bno055_set_operation_mode+0x17e>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, operation_mode_u8);
 80017aa:	7b7b      	ldrb	r3, [r7, #13]
 80017ac:	b25b      	sxtb	r3, r3
 80017ae:	f023 030f 	bic.w	r3, r3, #15
 80017b2:	b25a      	sxtb	r2, r3
 80017b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b8:	f003 030f 	and.w	r3, r3, #15
 80017bc:	b25b      	sxtb	r3, r3
 80017be:	4313      	orrs	r3, r2
 80017c0:	b25b      	sxtb	r3, r3
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	737b      	strb	r3, [r7, #13]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 80017c6:	4b41      	ldr	r3, [pc, #260]	; (80018cc <bno055_set_operation_mode+0x18c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	68dc      	ldr	r4, [r3, #12]
 80017cc:	4b3f      	ldr	r3, [pc, #252]	; (80018cc <bno055_set_operation_mode+0x18c>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	7a58      	ldrb	r0, [r3, #9]
 80017d2:	f107 020d 	add.w	r2, r7, #13
 80017d6:	2301      	movs	r3, #1
 80017d8:	213d      	movs	r1, #61	; 0x3d
 80017da:	47a0      	blx	r4
 80017dc:	4603      	mov	r3, r0
 80017de:	b2da      	uxtb	r2, r3
 80017e0:	7bfb      	ldrb	r3, [r7, #15]
 80017e2:	4413      	add	r3, r2
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	73fb      	strb	r3, [r7, #15]
                                                                BNO055_GEN_READ_WRITE_LENGTH);

                    /* Config mode to other
                     * operation mode switching
                     * required delay of 600ms*/
                    p_bno055->delay_msec(BNO055_MODE_SWITCHING_DELAY);
 80017e8:	4b38      	ldr	r3, [pc, #224]	; (80018cc <bno055_set_operation_mode+0x18c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	695b      	ldr	r3, [r3, #20]
 80017ee:	f44f 7016 	mov.w	r0, #600	; 0x258
 80017f2:	4798      	blx	r3
 80017f4:	e063      	b.n	80018be <bno055_set_operation_mode+0x17e>
            else
            {
                /* If the previous operation
                 * mode is not config it is
                 * write the config mode */
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80017f6:	4b35      	ldr	r3, [pc, #212]	; (80018cc <bno055_set_operation_mode+0x18c>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	691c      	ldr	r4, [r3, #16]
 80017fc:	4b33      	ldr	r3, [pc, #204]	; (80018cc <bno055_set_operation_mode+0x18c>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	7a58      	ldrb	r0, [r3, #9]
 8001802:	f107 020d 	add.w	r2, r7, #13
 8001806:	2301      	movs	r3, #1
 8001808:	213d      	movs	r1, #61	; 0x3d
 800180a:	47a0      	blx	r4
 800180c:	4603      	mov	r3, r0
 800180e:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_OPERATION_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8001810:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d116      	bne.n	8001846 <bno055_set_operation_mode+0x106>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, BNO055_OPERATION_MODE_CONFIG);
 8001818:	7b7b      	ldrb	r3, [r7, #13]
 800181a:	f023 030f 	bic.w	r3, r3, #15
 800181e:	b2db      	uxtb	r3, r3
 8001820:	737b      	strb	r3, [r7, #13]
                    com_rslt +=
                        bno055_write_register(BNO055_OPERATION_MODE_REG, &data_u8r, BNO055_GEN_READ_WRITE_LENGTH);
 8001822:	f107 030d 	add.w	r3, r7, #13
 8001826:	2201      	movs	r2, #1
 8001828:	4619      	mov	r1, r3
 800182a:	203d      	movs	r0, #61	; 0x3d
 800182c:	f7ff fed8 	bl	80015e0 <bno055_write_register>
 8001830:	4603      	mov	r3, r0
 8001832:	b2da      	uxtb	r2, r3
                    com_rslt +=
 8001834:	7bfb      	ldrb	r3, [r7, #15]
 8001836:	4413      	add	r3, r2
 8001838:	b2db      	uxtb	r3, r3
 800183a:	73fb      	strb	r3, [r7, #15]

                    /* other mode to config mode switching
                     * required delay of 20ms*/
                    p_bno055->delay_msec(BNO055_CONFIG_MODE_SWITCHING_DELAY);
 800183c:	4b23      	ldr	r3, [pc, #140]	; (80018cc <bno055_set_operation_mode+0x18c>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	2014      	movs	r0, #20
 8001844:	4798      	blx	r3
                }

                /* Write the operation mode */
                if (operation_mode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8001846:	79fb      	ldrb	r3, [r7, #7]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d038      	beq.n	80018be <bno055_set_operation_mode+0x17e>
                {
                    com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 800184c:	4b1f      	ldr	r3, [pc, #124]	; (80018cc <bno055_set_operation_mode+0x18c>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	691c      	ldr	r4, [r3, #16]
 8001852:	4b1e      	ldr	r3, [pc, #120]	; (80018cc <bno055_set_operation_mode+0x18c>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	7a58      	ldrb	r0, [r3, #9]
 8001858:	f107 020d 	add.w	r2, r7, #13
 800185c:	2301      	movs	r3, #1
 800185e:	213d      	movs	r1, #61	; 0x3d
 8001860:	47a0      	blx	r4
 8001862:	4603      	mov	r3, r0
 8001864:	73fb      	strb	r3, [r7, #15]
                                                              BNO055_OPERATION_MODE_REG,
                                                              &data_u8r,
                                                              BNO055_GEN_READ_WRITE_LENGTH);
                    if (com_rslt == BNO055_SUCCESS)
 8001866:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d127      	bne.n	80018be <bno055_set_operation_mode+0x17e>
                    {
                        data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, operation_mode_u8);
 800186e:	7b7b      	ldrb	r3, [r7, #13]
 8001870:	b25b      	sxtb	r3, r3
 8001872:	f023 030f 	bic.w	r3, r3, #15
 8001876:	b25a      	sxtb	r2, r3
 8001878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187c:	f003 030f 	and.w	r3, r3, #15
 8001880:	b25b      	sxtb	r3, r3
 8001882:	4313      	orrs	r3, r2
 8001884:	b25b      	sxtb	r3, r3
 8001886:	b2db      	uxtb	r3, r3
 8001888:	737b      	strb	r3, [r7, #13]
                        com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 800188a:	4b10      	ldr	r3, [pc, #64]	; (80018cc <bno055_set_operation_mode+0x18c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	68dc      	ldr	r4, [r3, #12]
 8001890:	4b0e      	ldr	r3, [pc, #56]	; (80018cc <bno055_set_operation_mode+0x18c>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	7a58      	ldrb	r0, [r3, #9]
 8001896:	f107 020d 	add.w	r2, r7, #13
 800189a:	2301      	movs	r3, #1
 800189c:	213d      	movs	r1, #61	; 0x3d
 800189e:	47a0      	blx	r4
 80018a0:	4603      	mov	r3, r0
 80018a2:	b2da      	uxtb	r2, r3
 80018a4:	7bfb      	ldrb	r3, [r7, #15]
 80018a6:	4413      	add	r3, r2
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	73fb      	strb	r3, [r7, #15]
                                                                    BNO055_GEN_READ_WRITE_LENGTH);

                        /* Config mode to other
                         * operation mode switching
                         * required delay of 600ms*/
                        p_bno055->delay_msec(BNO055_MODE_SWITCHING_DELAY);
 80018ac:	4b07      	ldr	r3, [pc, #28]	; (80018cc <bno055_set_operation_mode+0x18c>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	695b      	ldr	r3, [r3, #20]
 80018b2:	f44f 7016 	mov.w	r0, #600	; 0x258
 80018b6:	4798      	blx	r3
 80018b8:	e001      	b.n	80018be <bno055_set_operation_mode+0x17e>
                }
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 80018ba:	23ff      	movs	r3, #255	; 0xff
 80018bc:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 80018be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3714      	adds	r7, #20
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd90      	pop	{r4, r7, pc}
 80018ca:	bf00      	nop
 80018cc:	20000368 	.word	0x20000368

080018d0 <bno055_set_power_mode>:
 *  @note For detailed about LOWPOWER mode
 *  refer data sheet 3.4.2
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_power_mode(u8 power_mode_u8)
{
 80018d0:	b590      	push	{r4, r7, lr}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4603      	mov	r3, r0
 80018d8:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 80018da:	23ff      	movs	r3, #255	; 0xff
 80018dc:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 80018de:	2300      	movs	r3, #0
 80018e0:	737b      	strb	r3, [r7, #13]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 80018e2:	2300      	movs	r3, #0
 80018e4:	733b      	strb	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 80018e6:	23ff      	movs	r3, #255	; 0xff
 80018e8:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 80018ea:	4b35      	ldr	r3, [pc, #212]	; (80019c0 <bno055_set_power_mode+0xf0>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d102      	bne.n	80018f8 <bno055_set_power_mode+0x28>
    {
        return BNO055_E_NULL_PTR;
 80018f2:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 80018f6:	e05f      	b.n	80019b8 <bno055_set_power_mode+0xe8>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 80018f8:	f107 030c 	add.w	r3, r7, #12
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff fedd 	bl	80016bc <bno055_get_operation_mode>
 8001902:	4603      	mov	r3, r0
 8001904:	73bb      	strb	r3, [r7, #14]
        if (stat_s8 == BNO055_SUCCESS)
 8001906:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d143      	bne.n	8001996 <bno055_set_power_mode+0xc6>
        {
            if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 800190e:	7b3b      	ldrb	r3, [r7, #12]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d008      	beq.n	8001926 <bno055_set_power_mode+0x56>
            {
                stat_s8 += bno055_set_operation_mode(BNO055_OPERATION_MODE_CONFIG);
 8001914:	2000      	movs	r0, #0
 8001916:	f7ff ff13 	bl	8001740 <bno055_set_operation_mode>
 800191a:	4603      	mov	r3, r0
 800191c:	b2da      	uxtb	r2, r3
 800191e:	7bbb      	ldrb	r3, [r7, #14]
 8001920:	4413      	add	r3, r2
 8001922:	b2db      	uxtb	r3, r3
 8001924:	73bb      	strb	r3, [r7, #14]
            }
            if (stat_s8 == BNO055_SUCCESS)
 8001926:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d130      	bne.n	8001990 <bno055_set_power_mode+0xc0>
            {
                /* Write the value of power mode */
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 800192e:	4b24      	ldr	r3, [pc, #144]	; (80019c0 <bno055_set_power_mode+0xf0>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	691c      	ldr	r4, [r3, #16]
 8001934:	4b22      	ldr	r3, [pc, #136]	; (80019c0 <bno055_set_power_mode+0xf0>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	7a58      	ldrb	r0, [r3, #9]
 800193a:	f107 020d 	add.w	r2, r7, #13
 800193e:	2301      	movs	r3, #1
 8001940:	213e      	movs	r1, #62	; 0x3e
 8001942:	47a0      	blx	r4
 8001944:	4603      	mov	r3, r0
 8001946:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_POWER_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8001948:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d124      	bne.n	800199a <bno055_set_power_mode+0xca>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_POWER_MODE, power_mode_u8);
 8001950:	7b7b      	ldrb	r3, [r7, #13]
 8001952:	b25b      	sxtb	r3, r3
 8001954:	f023 0303 	bic.w	r3, r3, #3
 8001958:	b25a      	sxtb	r2, r3
 800195a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195e:	f003 0303 	and.w	r3, r3, #3
 8001962:	b25b      	sxtb	r3, r3
 8001964:	4313      	orrs	r3, r2
 8001966:	b25b      	sxtb	r3, r3
 8001968:	b2db      	uxtb	r3, r3
 800196a:	737b      	strb	r3, [r7, #13]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 800196c:	4b14      	ldr	r3, [pc, #80]	; (80019c0 <bno055_set_power_mode+0xf0>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	68dc      	ldr	r4, [r3, #12]
 8001972:	4b13      	ldr	r3, [pc, #76]	; (80019c0 <bno055_set_power_mode+0xf0>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	7a58      	ldrb	r0, [r3, #9]
 8001978:	f107 020d 	add.w	r2, r7, #13
 800197c:	2301      	movs	r3, #1
 800197e:	213e      	movs	r1, #62	; 0x3e
 8001980:	47a0      	blx	r4
 8001982:	4603      	mov	r3, r0
 8001984:	b2da      	uxtb	r2, r3
 8001986:	7bfb      	ldrb	r3, [r7, #15]
 8001988:	4413      	add	r3, r2
 800198a:	b2db      	uxtb	r3, r3
 800198c:	73fb      	strb	r3, [r7, #15]
 800198e:	e004      	b.n	800199a <bno055_set_power_mode+0xca>
                                                                BNO055_GEN_READ_WRITE_LENGTH);
                }
            }
            else
            {
                com_rslt = BNO055_ERROR;
 8001990:	23ff      	movs	r3, #255	; 0xff
 8001992:	73fb      	strb	r3, [r7, #15]
 8001994:	e001      	b.n	800199a <bno055_set_power_mode+0xca>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8001996:	23ff      	movs	r3, #255	; 0xff
 8001998:	73fb      	strb	r3, [r7, #15]
        }
    }
    if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 800199a:	7b3b      	ldrb	r3, [r7, #12]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d009      	beq.n	80019b4 <bno055_set_power_mode+0xe4>
    {
        /* set the operation mode
         * of previous operation mode*/
        com_rslt += bno055_set_operation_mode(prev_opmode_u8);
 80019a0:	7b3b      	ldrb	r3, [r7, #12]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff fecc 	bl	8001740 <bno055_set_operation_mode>
 80019a8:	4603      	mov	r3, r0
 80019aa:	b2da      	uxtb	r2, r3
 80019ac:	7bfb      	ldrb	r3, [r7, #15]
 80019ae:	4413      	add	r3, r2
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 80019b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3714      	adds	r7, #20
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd90      	pop	{r4, r7, pc}
 80019c0:	20000368 	.word	0x20000368

080019c4 <I2C_routine>:
 *  Bus read function pointer: BNO055_RD_FUNC_PTR
 *  Delay function pointer: delay_msec
 *  I2C address: dev_addr
 *--------------------------------------------------------------------------*/
s8 I2C_routine(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
    bno055.bus_write = BNO055_I2C_bus_write;
 80019c8:	4b08      	ldr	r3, [pc, #32]	; (80019ec <I2C_routine+0x28>)
 80019ca:	4a09      	ldr	r2, [pc, #36]	; (80019f0 <I2C_routine+0x2c>)
 80019cc:	60da      	str	r2, [r3, #12]
    bno055.bus_read = BNO055_I2C_bus_read;
 80019ce:	4b07      	ldr	r3, [pc, #28]	; (80019ec <I2C_routine+0x28>)
 80019d0:	4a08      	ldr	r2, [pc, #32]	; (80019f4 <I2C_routine+0x30>)
 80019d2:	611a      	str	r2, [r3, #16]
    bno055.delay_msec = BNO055_delay_msek;
 80019d4:	4b05      	ldr	r3, [pc, #20]	; (80019ec <I2C_routine+0x28>)
 80019d6:	4a08      	ldr	r2, [pc, #32]	; (80019f8 <I2C_routine+0x34>)
 80019d8:	615a      	str	r2, [r3, #20]
    bno055.dev_addr = BNO055_I2C_ADDR2;
 80019da:	4b04      	ldr	r3, [pc, #16]	; (80019ec <I2C_routine+0x28>)
 80019dc:	2229      	movs	r2, #41	; 0x29
 80019de:	725a      	strb	r2, [r3, #9]

    return BNO055_INIT_VALUE;
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	20001334 	.word	0x20001334
 80019f0:	080019fd 	.word	0x080019fd
 80019f4:	08001a75 	.word	0x08001a75
 80019f8:	08001b05 	.word	0x08001b05

080019fc <BNO055_I2C_bus_write>:
 *  \param reg_data : It is a value hold in the array,
 *      will be used for write the value into the register
 *  \param cnt : The no of byte of data to be write
 */
s8 BNO055_I2C_bus_write(u8 dev_addr, u8 reg_addr, u8 *reg_data, u8 cnt)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b088      	sub	sp, #32
 8001a00:	af02      	add	r7, sp, #8
 8001a02:	603a      	str	r2, [r7, #0]
 8001a04:	461a      	mov	r2, r3
 8001a06:	4603      	mov	r3, r0
 8001a08:	71fb      	strb	r3, [r7, #7]
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	71bb      	strb	r3, [r7, #6]
 8001a0e:	4613      	mov	r3, r2
 8001a10:	717b      	strb	r3, [r7, #5]
    s32 BNO055_iERROR = BNO055_INIT_VALUE;
 8001a12:	2300      	movs	r3, #0
 8001a14:	613b      	str	r3, [r7, #16]
    u8 array[I2C_BUFFER_LEN];
    u8 stringpos = BNO055_INIT_VALUE;
 8001a16:	2300      	movs	r3, #0
 8001a18:	75fb      	strb	r3, [r7, #23]

    array[BNO055_INIT_VALUE] = reg_addr;
 8001a1a:	79bb      	ldrb	r3, [r7, #6]
 8001a1c:	723b      	strb	r3, [r7, #8]
    for (stringpos = BNO055_INIT_VALUE; stringpos < cnt; stringpos++)
 8001a1e:	2300      	movs	r3, #0
 8001a20:	75fb      	strb	r3, [r7, #23]
 8001a22:	e00d      	b.n	8001a40 <BNO055_I2C_bus_write+0x44>
    {
        array[stringpos + BNO055_I2C_BUS_WRITE_ARRAY_INDEX] = *(reg_data + stringpos);
 8001a24:	7dfb      	ldrb	r3, [r7, #23]
 8001a26:	683a      	ldr	r2, [r7, #0]
 8001a28:	441a      	add	r2, r3
 8001a2a:	7dfb      	ldrb	r3, [r7, #23]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	7812      	ldrb	r2, [r2, #0]
 8001a30:	f107 0118 	add.w	r1, r7, #24
 8001a34:	440b      	add	r3, r1
 8001a36:	f803 2c10 	strb.w	r2, [r3, #-16]
    for (stringpos = BNO055_INIT_VALUE; stringpos < cnt; stringpos++)
 8001a3a:	7dfb      	ldrb	r3, [r7, #23]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	75fb      	strb	r3, [r7, #23]
 8001a40:	7dfa      	ldrb	r2, [r7, #23]
 8001a42:	797b      	ldrb	r3, [r7, #5]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d3ed      	bcc.n	8001a24 <BNO055_I2C_bus_write+0x28>
    }
    HAL_I2C_Master_Transmit(&hi2c1, 0x29<<1, array, cnt+1, 10);
 8001a48:	797b      	ldrb	r3, [r7, #5]
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	b299      	uxth	r1, r3
 8001a50:	f107 0208 	add.w	r2, r7, #8
 8001a54:	230a      	movs	r3, #10
 8001a56:	9300      	str	r3, [sp, #0]
 8001a58:	460b      	mov	r3, r1
 8001a5a:	2152      	movs	r1, #82	; 0x52
 8001a5c:	4804      	ldr	r0, [pc, #16]	; (8001a70 <BNO055_I2C_bus_write+0x74>)
 8001a5e:	f004 f899 	bl	8005b94 <HAL_I2C_Master_Transmit>
    return (s8)BNO055_iERROR;
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	b25b      	sxtb	r3, r3
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3718      	adds	r7, #24
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	200045e0 	.word	0x200045e0

08001a74 <BNO055_I2C_bus_read>:
 */

uint8_t byte_out[3]={0};
uint8_t byte_in[3]={0};
s8 BNO055_I2C_bus_read(u8 dev_addr, u8 reg_addr, u8 *reg_data, u8 cnt)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b088      	sub	sp, #32
 8001a78:	af02      	add	r7, sp, #8
 8001a7a:	603a      	str	r2, [r7, #0]
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	4603      	mov	r3, r0
 8001a80:	71fb      	strb	r3, [r7, #7]
 8001a82:	460b      	mov	r3, r1
 8001a84:	71bb      	strb	r3, [r7, #6]
 8001a86:	4613      	mov	r3, r2
 8001a88:	717b      	strb	r3, [r7, #5]
    s32 BNO055_iERROR = BNO055_INIT_VALUE;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	613b      	str	r3, [r7, #16]
    u8 array[I2C_BUFFER_LEN] = { BNO055_INIT_VALUE };
 8001a8e:	f107 0308 	add.w	r3, r7, #8
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	605a      	str	r2, [r3, #4]
    u8 stringpos = BNO055_INIT_VALUE;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	75fb      	strb	r3, [r7, #23]

    array[BNO055_INIT_VALUE] = reg_addr;
 8001a9c:	79bb      	ldrb	r3, [r7, #6]
 8001a9e:	723b      	strb	r3, [r7, #8]
//     * BNO055_iERROR is an return value of SPI write API
//     * Please select your valid return value
//     * In the driver BNO055_SUCCESS defined as 0
//     * and FAILURE defined as -1
//     */
    for (stringpos = BNO055_INIT_VALUE; stringpos < cnt; stringpos++)
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	75fb      	strb	r3, [r7, #23]
 8001aa4:	e00c      	b.n	8001ac0 <BNO055_I2C_bus_read+0x4c>
    {
        *(reg_data + stringpos) = array[stringpos];
 8001aa6:	7dfa      	ldrb	r2, [r7, #23]
 8001aa8:	7dfb      	ldrb	r3, [r7, #23]
 8001aaa:	6839      	ldr	r1, [r7, #0]
 8001aac:	440b      	add	r3, r1
 8001aae:	f107 0118 	add.w	r1, r7, #24
 8001ab2:	440a      	add	r2, r1
 8001ab4:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8001ab8:	701a      	strb	r2, [r3, #0]
    for (stringpos = BNO055_INIT_VALUE; stringpos < cnt; stringpos++)
 8001aba:	7dfb      	ldrb	r3, [r7, #23]
 8001abc:	3301      	adds	r3, #1
 8001abe:	75fb      	strb	r3, [r7, #23]
 8001ac0:	7dfa      	ldrb	r2, [r7, #23]
 8001ac2:	797b      	ldrb	r3, [r7, #5]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d3ee      	bcc.n	8001aa6 <BNO055_I2C_bus_read+0x32>
    }
    HAL_I2C_Master_Transmit(&hi2c1, 0x29<<1, array, cnt, 10);
 8001ac8:	797b      	ldrb	r3, [r7, #5]
 8001aca:	b299      	uxth	r1, r3
 8001acc:	f107 0208 	add.w	r2, r7, #8
 8001ad0:	230a      	movs	r3, #10
 8001ad2:	9300      	str	r3, [sp, #0]
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	2152      	movs	r1, #82	; 0x52
 8001ad8:	4809      	ldr	r0, [pc, #36]	; (8001b00 <BNO055_I2C_bus_read+0x8c>)
 8001ada:	f004 f85b 	bl	8005b94 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, 0x29<<1, (uint8_t*)reg_data, cnt, 10);
 8001ade:	797b      	ldrb	r3, [r7, #5]
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	230a      	movs	r3, #10
 8001ae4:	9300      	str	r3, [sp, #0]
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	683a      	ldr	r2, [r7, #0]
 8001aea:	2152      	movs	r1, #82	; 0x52
 8001aec:	4804      	ldr	r0, [pc, #16]	; (8001b00 <BNO055_I2C_bus_read+0x8c>)
 8001aee:	f004 f945 	bl	8005d7c <HAL_I2C_Master_Receive>
//		//    status = HAL_I2C_Master_Receive(&hi2c1,0x29<<1,reg_data ,cnt,10);
//		status = HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) 0x29 << 1,(uint8_t*) byte_out, 1, 10); //!!10
//		status = HAL_I2C_Master_Receive(&hi2c1, (uint16_t) 0x29 << 1,(uint8_t*) reg_data + i, 1, 10); //!!10
//	}

	return (s8) BNO055_iERROR;
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	b25b      	sxtb	r3, r3
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3718      	adds	r7, #24
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	200045e0 	.word	0x200045e0

08001b04 <BNO055_delay_msek>:

/*  Brief : The delay routine
 *  \param : delay in ms
 */
void BNO055_delay_msek(u32 msek)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
    /*Here you can write your own delay routine*/
	HAL_Delay(msek);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f002 faed 	bl	80040ec <HAL_Delay>
}
 8001b12:	bf00      	nop
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
	...

08001b1c <BNOInit>:

void BNOInit(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
	I2C_routine();
 8001b20:	f7ff ff50 	bl	80019c4 <I2C_routine>
	comres = bno055_init(&bno055);
 8001b24:	4810      	ldr	r0, [pc, #64]	; (8001b68 <BNOInit+0x4c>)
 8001b26:	f7ff fc99 	bl	800145c <bno055_init>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	4b0f      	ldr	r3, [pc, #60]	; (8001b6c <BNOInit+0x50>)
 8001b30:	601a      	str	r2, [r3, #0]
    power_mode = BNO055_POWER_MODE_NORMAL;
 8001b32:	4b0f      	ldr	r3, [pc, #60]	; (8001b70 <BNOInit+0x54>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	701a      	strb	r2, [r3, #0]
    comres += bno055_set_power_mode(power_mode);
 8001b38:	4b0d      	ldr	r3, [pc, #52]	; (8001b70 <BNOInit+0x54>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff fec7 	bl	80018d0 <bno055_set_power_mode>
 8001b42:	4603      	mov	r3, r0
 8001b44:	461a      	mov	r2, r3
 8001b46:	4b09      	ldr	r3, [pc, #36]	; (8001b6c <BNOInit+0x50>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	4a07      	ldr	r2, [pc, #28]	; (8001b6c <BNOInit+0x50>)
 8001b4e:	6013      	str	r3, [r2, #0]
    comres += bno055_set_operation_mode(BNO055_OPERATION_MODE_NDOF);
 8001b50:	200c      	movs	r0, #12
 8001b52:	f7ff fdf5 	bl	8001740 <bno055_set_operation_mode>
 8001b56:	4603      	mov	r3, r0
 8001b58:	461a      	mov	r2, r3
 8001b5a:	4b04      	ldr	r3, [pc, #16]	; (8001b6c <BNOInit+0x50>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4413      	add	r3, r2
 8001b60:	4a02      	ldr	r2, [pc, #8]	; (8001b6c <BNOInit+0x50>)
 8001b62:	6013      	str	r3, [r2, #0]
}
 8001b64:	bf00      	nop
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	20001334 	.word	0x20001334
 8001b6c:	20000028 	.word	0x20000028
 8001b70:	200010c0 	.word	0x200010c0

08001b74 <MS56XXReset>:
int64_t OFF = 0;
int64_t SNES = 0;
int32_t P = 0;

void MS56XXReset(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001b78:	2200      	movs	r2, #0
 8001b7a:	2110      	movs	r1, #16
 8001b7c:	480d      	ldr	r0, [pc, #52]	; (8001bb4 <MS56XXReset+0x40>)
 8001b7e:	f003 ff5f 	bl	8005a40 <HAL_GPIO_WritePin>
	SPITX[0] = 0x1E;
 8001b82:	4b0d      	ldr	r3, [pc, #52]	; (8001bb8 <MS56XXReset+0x44>)
 8001b84:	221e      	movs	r2, #30
 8001b86:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, &SPITX[0], 1, HAL_MAX_DELAY);
 8001b88:	f04f 33ff 	mov.w	r3, #4294967295
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	490a      	ldr	r1, [pc, #40]	; (8001bb8 <MS56XXReset+0x44>)
 8001b90:	480a      	ldr	r0, [pc, #40]	; (8001bbc <MS56XXReset+0x48>)
 8001b92:	f007 fa4f 	bl	8009034 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY);
 8001b96:	bf00      	nop
 8001b98:	4808      	ldr	r0, [pc, #32]	; (8001bbc <MS56XXReset+0x48>)
 8001b9a:	f007 feec 	bl	8009976 <HAL_SPI_GetState>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d0f9      	beq.n	8001b98 <MS56XXReset+0x24>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	2110      	movs	r1, #16
 8001ba8:	4802      	ldr	r0, [pc, #8]	; (8001bb4 <MS56XXReset+0x40>)
 8001baa:	f003 ff49 	bl	8005a40 <HAL_GPIO_WritePin>
}
 8001bae:	bf00      	nop
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40020000 	.word	0x40020000
 8001bb8:	2000036c 	.word	0x2000036c
 8001bbc:	200048b8 	.word	0x200048b8

08001bc0 <MS56XXReadProm>:

uint16_t MS56XXReadProm(uint8_t address)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	71fb      	strb	r3, [r7, #7]
	SPITX[0] = address;
 8001bca:	4a1b      	ldr	r2, [pc, #108]	; (8001c38 <MS56XXReadProm+0x78>)
 8001bcc:	79fb      	ldrb	r3, [r7, #7]
 8001bce:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	2110      	movs	r1, #16
 8001bd4:	4819      	ldr	r0, [pc, #100]	; (8001c3c <MS56XXReadProm+0x7c>)
 8001bd6:	f003 ff33 	bl	8005a40 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &SPITX[0], 1, HAL_MAX_DELAY);
 8001bda:	f04f 33ff 	mov.w	r3, #4294967295
 8001bde:	2201      	movs	r2, #1
 8001be0:	4915      	ldr	r1, [pc, #84]	; (8001c38 <MS56XXReadProm+0x78>)
 8001be2:	4817      	ldr	r0, [pc, #92]	; (8001c40 <MS56XXReadProm+0x80>)
 8001be4:	f007 fa26 	bl	8009034 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY);
 8001be8:	bf00      	nop
 8001bea:	4815      	ldr	r0, [pc, #84]	; (8001c40 <MS56XXReadProm+0x80>)
 8001bec:	f007 fec3 	bl	8009976 <HAL_SPI_GetState>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d0f9      	beq.n	8001bea <MS56XXReadProm+0x2a>
	HAL_SPI_Receive(&hspi1, &SPIRX2Byte[0], 1, HAL_MAX_DELAY);
 8001bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	4911      	ldr	r1, [pc, #68]	; (8001c44 <MS56XXReadProm+0x84>)
 8001bfe:	4810      	ldr	r0, [pc, #64]	; (8001c40 <MS56XXReadProm+0x80>)
 8001c00:	f007 fb7e 	bl	8009300 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &SPIRX2Byte[1], 1, HAL_MAX_DELAY);
 8001c04:	f04f 33ff 	mov.w	r3, #4294967295
 8001c08:	2201      	movs	r2, #1
 8001c0a:	490f      	ldr	r1, [pc, #60]	; (8001c48 <MS56XXReadProm+0x88>)
 8001c0c:	480c      	ldr	r0, [pc, #48]	; (8001c40 <MS56XXReadProm+0x80>)
 8001c0e:	f007 fb77 	bl	8009300 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001c12:	2201      	movs	r2, #1
 8001c14:	2110      	movs	r1, #16
 8001c16:	4809      	ldr	r0, [pc, #36]	; (8001c3c <MS56XXReadProm+0x7c>)
 8001c18:	f003 ff12 	bl	8005a40 <HAL_GPIO_WritePin>
	return (SPIRX2Byte[0]<<8) + SPIRX2Byte[1];
 8001c1c:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <MS56XXReadProm+0x84>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	021b      	lsls	r3, r3, #8
 8001c24:	b29a      	uxth	r2, r3
 8001c26:	4b07      	ldr	r3, [pc, #28]	; (8001c44 <MS56XXReadProm+0x84>)
 8001c28:	785b      	ldrb	r3, [r3, #1]
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	4413      	add	r3, r2
 8001c2e:	b29b      	uxth	r3, r3
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	2000036c 	.word	0x2000036c
 8001c3c:	40020000 	.word	0x40020000
 8001c40:	200048b8 	.word	0x200048b8
 8001c44:	20000370 	.word	0x20000370
 8001c48:	20000371 	.word	0x20000371

08001c4c <MS56XXInit>:

void MS56XXInit(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
	MS56XXReset();
 8001c50:	f7ff ff90 	bl	8001b74 <MS56XXReset>
	HAL_Delay(50);
 8001c54:	2032      	movs	r0, #50	; 0x32
 8001c56:	f002 fa49 	bl	80040ec <HAL_Delay>
	MS56XXReadProm(0xA0);
 8001c5a:	20a0      	movs	r0, #160	; 0xa0
 8001c5c:	f7ff ffb0 	bl	8001bc0 <MS56XXReadProm>
	Coeff1 = MS56XXReadProm(0xA2);
 8001c60:	20a2      	movs	r0, #162	; 0xa2
 8001c62:	f7ff ffad 	bl	8001bc0 <MS56XXReadProm>
 8001c66:	4603      	mov	r3, r0
 8001c68:	461a      	mov	r2, r3
 8001c6a:	4b24      	ldr	r3, [pc, #144]	; (8001cfc <MS56XXInit+0xb0>)
 8001c6c:	801a      	strh	r2, [r3, #0]
	Coeff2 = MS56XXReadProm(0xA4);
 8001c6e:	20a4      	movs	r0, #164	; 0xa4
 8001c70:	f7ff ffa6 	bl	8001bc0 <MS56XXReadProm>
 8001c74:	4603      	mov	r3, r0
 8001c76:	461a      	mov	r2, r3
 8001c78:	4b21      	ldr	r3, [pc, #132]	; (8001d00 <MS56XXInit+0xb4>)
 8001c7a:	801a      	strh	r2, [r3, #0]
	Coeff3 = MS56XXReadProm(0xA6);
 8001c7c:	20a6      	movs	r0, #166	; 0xa6
 8001c7e:	f7ff ff9f 	bl	8001bc0 <MS56XXReadProm>
 8001c82:	4603      	mov	r3, r0
 8001c84:	461a      	mov	r2, r3
 8001c86:	4b1f      	ldr	r3, [pc, #124]	; (8001d04 <MS56XXInit+0xb8>)
 8001c88:	801a      	strh	r2, [r3, #0]
	Coeff4 = MS56XXReadProm(0xA8);
 8001c8a:	20a8      	movs	r0, #168	; 0xa8
 8001c8c:	f7ff ff98 	bl	8001bc0 <MS56XXReadProm>
 8001c90:	4603      	mov	r3, r0
 8001c92:	461a      	mov	r2, r3
 8001c94:	4b1c      	ldr	r3, [pc, #112]	; (8001d08 <MS56XXInit+0xbc>)
 8001c96:	801a      	strh	r2, [r3, #0]
	Coeff5 = MS56XXReadProm(0xAA);
 8001c98:	20aa      	movs	r0, #170	; 0xaa
 8001c9a:	f7ff ff91 	bl	8001bc0 <MS56XXReadProm>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	4b1a      	ldr	r3, [pc, #104]	; (8001d0c <MS56XXInit+0xc0>)
 8001ca4:	801a      	strh	r2, [r3, #0]
	Coeff6 = MS56XXReadProm(0xAC);
 8001ca6:	20ac      	movs	r0, #172	; 0xac
 8001ca8:	f7ff ff8a 	bl	8001bc0 <MS56XXReadProm>
 8001cac:	4603      	mov	r3, r0
 8001cae:	461a      	mov	r2, r3
 8001cb0:	4b17      	ldr	r3, [pc, #92]	; (8001d10 <MS56XXInit+0xc4>)
 8001cb2:	801a      	strh	r2, [r3, #0]
	MSCRC = MS56XXReadProm(0xAE);
 8001cb4:	20ae      	movs	r0, #174	; 0xae
 8001cb6:	f7ff ff83 	bl	8001bc0 <MS56XXReadProm>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	4b15      	ldr	r3, [pc, #84]	; (8001d14 <MS56XXInit+0xc8>)
 8001cc0:	801a      	strh	r2, [r3, #0]

	MS56XXSendCmd(0x58);
 8001cc2:	2058      	movs	r0, #88	; 0x58
 8001cc4:	f000 f82c 	bl	8001d20 <MS56XXSendCmd>
	HAL_Delay(9);
 8001cc8:	2009      	movs	r0, #9
 8001cca:	f002 fa0f 	bl	80040ec <HAL_Delay>
	RawTemp = MS56XXRead3Bytes(0);
 8001cce:	2000      	movs	r0, #0
 8001cd0:	f000 f856 	bl	8001d80 <MS56XXRead3Bytes>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	4b10      	ldr	r3, [pc, #64]	; (8001d18 <MS56XXInit+0xcc>)
 8001cd8:	601a      	str	r2, [r3, #0]

	MS56XXSendCmd(0x48);
 8001cda:	2048      	movs	r0, #72	; 0x48
 8001cdc:	f000 f820 	bl	8001d20 <MS56XXSendCmd>
	HAL_Delay(9);
 8001ce0:	2009      	movs	r0, #9
 8001ce2:	f002 fa03 	bl	80040ec <HAL_Delay>
	RawPressure = MS56XXRead3Bytes(0);
 8001ce6:	2000      	movs	r0, #0
 8001ce8:	f000 f84a 	bl	8001d80 <MS56XXRead3Bytes>
 8001cec:	4602      	mov	r2, r0
 8001cee:	4b0b      	ldr	r3, [pc, #44]	; (8001d1c <MS56XXInit+0xd0>)
 8001cf0:	601a      	str	r2, [r3, #0]
	GetAltitudeAndTemp();
 8001cf2:	f000 f899 	bl	8001e28 <GetAltitudeAndTemp>
}
 8001cf6:	bf00      	nop
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	20000378 	.word	0x20000378
 8001d00:	2000037a 	.word	0x2000037a
 8001d04:	2000037c 	.word	0x2000037c
 8001d08:	2000037e 	.word	0x2000037e
 8001d0c:	20000380 	.word	0x20000380
 8001d10:	20000382 	.word	0x20000382
 8001d14:	20000384 	.word	0x20000384
 8001d18:	20000398 	.word	0x20000398
 8001d1c:	2000039c 	.word	0x2000039c

08001d20 <MS56XXSendCmd>:

void MS56XXSendCmd(uint8_t Cmd)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	2110      	movs	r1, #16
 8001d2e:	4810      	ldr	r0, [pc, #64]	; (8001d70 <MS56XXSendCmd+0x50>)
 8001d30:	f003 fe86 	bl	8005a40 <HAL_GPIO_WritePin>
	SPITX[0] = Cmd;
 8001d34:	4a0f      	ldr	r2, [pc, #60]	; (8001d74 <MS56XXSendCmd+0x54>)
 8001d36:	79fb      	ldrb	r3, [r7, #7]
 8001d38:	7013      	strb	r3, [r2, #0]
	HAL_SPI_Transmit(&hspi1, &SPITX[0], 1, HAL_MAX_DELAY);
 8001d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d3e:	2201      	movs	r2, #1
 8001d40:	490c      	ldr	r1, [pc, #48]	; (8001d74 <MS56XXSendCmd+0x54>)
 8001d42:	480d      	ldr	r0, [pc, #52]	; (8001d78 <MS56XXSendCmd+0x58>)
 8001d44:	f007 f976 	bl	8009034 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY);
 8001d48:	bf00      	nop
 8001d4a:	480b      	ldr	r0, [pc, #44]	; (8001d78 <MS56XXSendCmd+0x58>)
 8001d4c:	f007 fe13 	bl	8009976 <HAL_SPI_GetState>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d0f9      	beq.n	8001d4a <MS56XXSendCmd+0x2a>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001d56:	2201      	movs	r2, #1
 8001d58:	2110      	movs	r1, #16
 8001d5a:	4805      	ldr	r0, [pc, #20]	; (8001d70 <MS56XXSendCmd+0x50>)
 8001d5c:	f003 fe70 	bl	8005a40 <HAL_GPIO_WritePin>
	isCmdSet = true;
 8001d60:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <MS56XXSendCmd+0x5c>)
 8001d62:	2201      	movs	r2, #1
 8001d64:	701a      	strb	r2, [r3, #0]
}
 8001d66:	bf00      	nop
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	40020000 	.word	0x40020000
 8001d74:	2000036c 	.word	0x2000036c
 8001d78:	200048b8 	.word	0x200048b8
 8001d7c:	20000386 	.word	0x20000386

08001d80 <MS56XXRead3Bytes>:

uint32_t MS56XXRead3Bytes(uint8_t address)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	4603      	mov	r3, r0
 8001d88:	71fb      	strb	r3, [r7, #7]
	SPITX[0] = 0x00;
 8001d8a:	4b20      	ldr	r3, [pc, #128]	; (8001e0c <MS56XXRead3Bytes+0x8c>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001d90:	2200      	movs	r2, #0
 8001d92:	2110      	movs	r1, #16
 8001d94:	481e      	ldr	r0, [pc, #120]	; (8001e10 <MS56XXRead3Bytes+0x90>)
 8001d96:	f003 fe53 	bl	8005a40 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &SPITX[0], 1, HAL_MAX_DELAY);
 8001d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d9e:	2201      	movs	r2, #1
 8001da0:	491a      	ldr	r1, [pc, #104]	; (8001e0c <MS56XXRead3Bytes+0x8c>)
 8001da2:	481c      	ldr	r0, [pc, #112]	; (8001e14 <MS56XXRead3Bytes+0x94>)
 8001da4:	f007 f946 	bl	8009034 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY);
 8001da8:	bf00      	nop
 8001daa:	481a      	ldr	r0, [pc, #104]	; (8001e14 <MS56XXRead3Bytes+0x94>)
 8001dac:	f007 fde3 	bl	8009976 <HAL_SPI_GetState>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d0f9      	beq.n	8001daa <MS56XXRead3Bytes+0x2a>
	HAL_SPI_Receive(&hspi1, &SPIRX3Byte[0], 1, HAL_MAX_DELAY);
 8001db6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dba:	2201      	movs	r2, #1
 8001dbc:	4916      	ldr	r1, [pc, #88]	; (8001e18 <MS56XXRead3Bytes+0x98>)
 8001dbe:	4815      	ldr	r0, [pc, #84]	; (8001e14 <MS56XXRead3Bytes+0x94>)
 8001dc0:	f007 fa9e 	bl	8009300 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &SPIRX3Byte[1], 1, HAL_MAX_DELAY);
 8001dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8001dc8:	2201      	movs	r2, #1
 8001dca:	4914      	ldr	r1, [pc, #80]	; (8001e1c <MS56XXRead3Bytes+0x9c>)
 8001dcc:	4811      	ldr	r0, [pc, #68]	; (8001e14 <MS56XXRead3Bytes+0x94>)
 8001dce:	f007 fa97 	bl	8009300 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &SPIRX3Byte[2], 1, HAL_MAX_DELAY);
 8001dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	4911      	ldr	r1, [pc, #68]	; (8001e20 <MS56XXRead3Bytes+0xa0>)
 8001dda:	480e      	ldr	r0, [pc, #56]	; (8001e14 <MS56XXRead3Bytes+0x94>)
 8001ddc:	f007 fa90 	bl	8009300 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001de0:	2201      	movs	r2, #1
 8001de2:	2110      	movs	r1, #16
 8001de4:	480a      	ldr	r0, [pc, #40]	; (8001e10 <MS56XXRead3Bytes+0x90>)
 8001de6:	f003 fe2b 	bl	8005a40 <HAL_GPIO_WritePin>
	isCmdSet = false;
 8001dea:	4b0e      	ldr	r3, [pc, #56]	; (8001e24 <MS56XXRead3Bytes+0xa4>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	701a      	strb	r2, [r3, #0]
	return (SPIRX3Byte[0] << 16) + (SPIRX3Byte[1] << 8 ) + (SPIRX3Byte[0]);
 8001df0:	4b09      	ldr	r3, [pc, #36]	; (8001e18 <MS56XXRead3Bytes+0x98>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	041a      	lsls	r2, r3, #16
 8001df6:	4b08      	ldr	r3, [pc, #32]	; (8001e18 <MS56XXRead3Bytes+0x98>)
 8001df8:	785b      	ldrb	r3, [r3, #1]
 8001dfa:	021b      	lsls	r3, r3, #8
 8001dfc:	4413      	add	r3, r2
 8001dfe:	4a06      	ldr	r2, [pc, #24]	; (8001e18 <MS56XXRead3Bytes+0x98>)
 8001e00:	7812      	ldrb	r2, [r2, #0]
 8001e02:	4413      	add	r3, r2
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	2000036c 	.word	0x2000036c
 8001e10:	40020000 	.word	0x40020000
 8001e14:	200048b8 	.word	0x200048b8
 8001e18:	20000374 	.word	0x20000374
 8001e1c:	20000375 	.word	0x20000375
 8001e20:	20000376 	.word	0x20000376
 8001e24:	20000386 	.word	0x20000386

08001e28 <GetAltitudeAndTemp>:

uint16_t GetAltitudeAndTemp(void)
{
 8001e28:	b4f0      	push	{r4, r5, r6, r7}
 8001e2a:	af00      	add	r7, sp, #0
	dT = RawTemp - Coeff5 * 256;
 8001e2c:	4b47      	ldr	r3, [pc, #284]	; (8001f4c <GetAltitudeAndTemp+0x124>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a47      	ldr	r2, [pc, #284]	; (8001f50 <GetAltitudeAndTemp+0x128>)
 8001e32:	8812      	ldrh	r2, [r2, #0]
 8001e34:	0212      	lsls	r2, r2, #8
 8001e36:	1a9b      	subs	r3, r3, r2
 8001e38:	461a      	mov	r2, r3
 8001e3a:	4b46      	ldr	r3, [pc, #280]	; (8001f54 <GetAltitudeAndTemp+0x12c>)
 8001e3c:	601a      	str	r2, [r3, #0]
	TEMP = 2000 + dT * Coeff6 / 8388608;
 8001e3e:	4b46      	ldr	r3, [pc, #280]	; (8001f58 <GetAltitudeAndTemp+0x130>)
 8001e40:	881b      	ldrh	r3, [r3, #0]
 8001e42:	461a      	mov	r2, r3
 8001e44:	4b43      	ldr	r3, [pc, #268]	; (8001f54 <GetAltitudeAndTemp+0x12c>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	fb03 f302 	mul.w	r3, r3, r2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	da02      	bge.n	8001e56 <GetAltitudeAndTemp+0x2e>
 8001e50:	4a42      	ldr	r2, [pc, #264]	; (8001f5c <GetAltitudeAndTemp+0x134>)
 8001e52:	441a      	add	r2, r3
 8001e54:	4613      	mov	r3, r2
 8001e56:	15db      	asrs	r3, r3, #23
 8001e58:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001e5c:	4a40      	ldr	r2, [pc, #256]	; (8001f60 <GetAltitudeAndTemp+0x138>)
 8001e5e:	6013      	str	r3, [r2, #0]
	OFF = Coeff2 * 131072 + Coeff4 * dT / 64;
 8001e60:	4b40      	ldr	r3, [pc, #256]	; (8001f64 <GetAltitudeAndTemp+0x13c>)
 8001e62:	881b      	ldrh	r3, [r3, #0]
 8001e64:	045a      	lsls	r2, r3, #17
 8001e66:	4b40      	ldr	r3, [pc, #256]	; (8001f68 <GetAltitudeAndTemp+0x140>)
 8001e68:	881b      	ldrh	r3, [r3, #0]
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4b39      	ldr	r3, [pc, #228]	; (8001f54 <GetAltitudeAndTemp+0x12c>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	fb03 f301 	mul.w	r3, r3, r1
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	da00      	bge.n	8001e7a <GetAltitudeAndTemp+0x52>
 8001e78:	333f      	adds	r3, #63	; 0x3f
 8001e7a:	119b      	asrs	r3, r3, #6
 8001e7c:	4413      	add	r3, r2
 8001e7e:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001e82:	4a3a      	ldr	r2, [pc, #232]	; (8001f6c <GetAltitudeAndTemp+0x144>)
 8001e84:	e9c2 3400 	strd	r3, r4, [r2]
	SNES = Coeff1 * 32768 + (Coeff3 * dT) / 127;
 8001e88:	4b39      	ldr	r3, [pc, #228]	; (8001f70 <GetAltitudeAndTemp+0x148>)
 8001e8a:	881b      	ldrh	r3, [r3, #0]
 8001e8c:	03da      	lsls	r2, r3, #15
 8001e8e:	4b39      	ldr	r3, [pc, #228]	; (8001f74 <GetAltitudeAndTemp+0x14c>)
 8001e90:	881b      	ldrh	r3, [r3, #0]
 8001e92:	4619      	mov	r1, r3
 8001e94:	4b2f      	ldr	r3, [pc, #188]	; (8001f54 <GetAltitudeAndTemp+0x12c>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	fb03 f301 	mul.w	r3, r3, r1
 8001e9c:	4936      	ldr	r1, [pc, #216]	; (8001f78 <GetAltitudeAndTemp+0x150>)
 8001e9e:	fb81 0103 	smull	r0, r1, r1, r3
 8001ea2:	4419      	add	r1, r3
 8001ea4:	1189      	asrs	r1, r1, #6
 8001ea6:	17db      	asrs	r3, r3, #31
 8001ea8:	1acb      	subs	r3, r1, r3
 8001eaa:	4413      	add	r3, r2
 8001eac:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001eb0:	4a32      	ldr	r2, [pc, #200]	; (8001f7c <GetAltitudeAndTemp+0x154>)
 8001eb2:	e9c2 3400 	strd	r3, r4, [r2]
	P = ((RawPressure * SNES) / 2097152 - OFF) / 32768;
 8001eb6:	4b32      	ldr	r3, [pc, #200]	; (8001f80 <GetAltitudeAndTemp+0x158>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4619      	mov	r1, r3
 8001ebc:	f04f 0200 	mov.w	r2, #0
 8001ec0:	4b2e      	ldr	r3, [pc, #184]	; (8001f7c <GetAltitudeAndTemp+0x154>)
 8001ec2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001ec6:	fb03 f502 	mul.w	r5, r3, r2
 8001eca:	fb01 f004 	mul.w	r0, r1, r4
 8001ece:	4428      	add	r0, r5
 8001ed0:	fba1 3403 	umull	r3, r4, r1, r3
 8001ed4:	1902      	adds	r2, r0, r4
 8001ed6:	4614      	mov	r4, r2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	f174 0200 	sbcs.w	r2, r4, #0
 8001ede:	da05      	bge.n	8001eec <GetAltitudeAndTemp+0xc4>
 8001ee0:	4928      	ldr	r1, [pc, #160]	; (8001f84 <GetAltitudeAndTemp+0x15c>)
 8001ee2:	f04f 0200 	mov.w	r2, #0
 8001ee6:	185b      	adds	r3, r3, r1
 8001ee8:	eb44 0402 	adc.w	r4, r4, r2
 8001eec:	f04f 0100 	mov.w	r1, #0
 8001ef0:	f04f 0200 	mov.w	r2, #0
 8001ef4:	0d59      	lsrs	r1, r3, #21
 8001ef6:	ea41 21c4 	orr.w	r1, r1, r4, lsl #11
 8001efa:	1562      	asrs	r2, r4, #21
 8001efc:	4b1b      	ldr	r3, [pc, #108]	; (8001f6c <GetAltitudeAndTemp+0x144>)
 8001efe:	e9d3 5600 	ldrd	r5, r6, [r3]
 8001f02:	460b      	mov	r3, r1
 8001f04:	4614      	mov	r4, r2
 8001f06:	1b5b      	subs	r3, r3, r5
 8001f08:	eb64 0406 	sbc.w	r4, r4, r6
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	f174 0200 	sbcs.w	r2, r4, #0
 8001f12:	da06      	bge.n	8001f22 <GetAltitudeAndTemp+0xfa>
 8001f14:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001f18:	f04f 0200 	mov.w	r2, #0
 8001f1c:	185b      	adds	r3, r3, r1
 8001f1e:	eb44 0402 	adc.w	r4, r4, r2
 8001f22:	f04f 0100 	mov.w	r1, #0
 8001f26:	f04f 0200 	mov.w	r2, #0
 8001f2a:	0bd9      	lsrs	r1, r3, #15
 8001f2c:	ea41 4144 	orr.w	r1, r1, r4, lsl #17
 8001f30:	13e2      	asrs	r2, r4, #15
 8001f32:	460b      	mov	r3, r1
 8001f34:	4614      	mov	r4, r2
 8001f36:	461a      	mov	r2, r3
 8001f38:	4b13      	ldr	r3, [pc, #76]	; (8001f88 <GetAltitudeAndTemp+0x160>)
 8001f3a:	601a      	str	r2, [r3, #0]
	return P;
 8001f3c:	4b12      	ldr	r3, [pc, #72]	; (8001f88 <GetAltitudeAndTemp+0x160>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	b29b      	uxth	r3, r3
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bcf0      	pop	{r4, r5, r6, r7}
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	20000398 	.word	0x20000398
 8001f50:	20000380 	.word	0x20000380
 8001f54:	200003a0 	.word	0x200003a0
 8001f58:	20000382 	.word	0x20000382
 8001f5c:	007fffff 	.word	0x007fffff
 8001f60:	200003a4 	.word	0x200003a4
 8001f64:	2000037a 	.word	0x2000037a
 8001f68:	2000037e 	.word	0x2000037e
 8001f6c:	200003a8 	.word	0x200003a8
 8001f70:	20000378 	.word	0x20000378
 8001f74:	2000037c 	.word	0x2000037c
 8001f78:	81020409 	.word	0x81020409
 8001f7c:	200003b0 	.word	0x200003b0
 8001f80:	2000039c 	.word	0x2000039c
 8001f84:	001fffff 	.word	0x001fffff
 8001f88:	200003b8 	.word	0x200003b8

08001f8c <MS56XXCyclicRead>:

void MS56XXCyclicRead(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
	if ( (HAL_GetTick() - LastTempMeasurement) > 1000 )
 8001f90:	f002 f8a0 	bl	80040d4 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	4b39      	ldr	r3, [pc, #228]	; (800207c <MS56XXCyclicRead+0xf0>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001fa0:	d917      	bls.n	8001fd2 <MS56XXCyclicRead+0x46>
	{
		if (!isCmdSet)
 8001fa2:	4b37      	ldr	r3, [pc, #220]	; (8002080 <MS56XXCyclicRead+0xf4>)
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	f083 0301 	eor.w	r3, r3, #1
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d010      	beq.n	8001fd2 <MS56XXCyclicRead+0x46>
		{
			MS56XXSendCmd(0x58);
 8001fb0:	2058      	movs	r0, #88	; 0x58
 8001fb2:	f7ff feb5 	bl	8001d20 <MS56XXSendCmd>
			isCmdSet = true;
 8001fb6:	4b32      	ldr	r3, [pc, #200]	; (8002080 <MS56XXCyclicRead+0xf4>)
 8001fb8:	2201      	movs	r2, #1
 8001fba:	701a      	strb	r2, [r3, #0]
			isNewMS56XXDataAvailable = false;
 8001fbc:	4b31      	ldr	r3, [pc, #196]	; (8002084 <MS56XXCyclicRead+0xf8>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	701a      	strb	r2, [r3, #0]
			isPressureLastCmd = false;
 8001fc2:	4b31      	ldr	r3, [pc, #196]	; (8002088 <MS56XXCyclicRead+0xfc>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	701a      	strb	r2, [r3, #0]
			LastCommandSent = HAL_GetTick();
 8001fc8:	f002 f884 	bl	80040d4 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	4b2f      	ldr	r3, [pc, #188]	; (800208c <MS56XXCyclicRead+0x100>)
 8001fd0:	601a      	str	r2, [r3, #0]
		}
	}

	if ((HAL_GetTick() - LastPressureMeasurement) > 20)
 8001fd2:	f002 f87f 	bl	80040d4 <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	4b2d      	ldr	r3, [pc, #180]	; (8002090 <MS56XXCyclicRead+0x104>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b14      	cmp	r3, #20
 8001fe0:	d917      	bls.n	8002012 <MS56XXCyclicRead+0x86>
	{
		if (!isCmdSet)
 8001fe2:	4b27      	ldr	r3, [pc, #156]	; (8002080 <MS56XXCyclicRead+0xf4>)
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	f083 0301 	eor.w	r3, r3, #1
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d010      	beq.n	8002012 <MS56XXCyclicRead+0x86>
		{
			MS56XXSendCmd(0x48);
 8001ff0:	2048      	movs	r0, #72	; 0x48
 8001ff2:	f7ff fe95 	bl	8001d20 <MS56XXSendCmd>
			isCmdSet = true;
 8001ff6:	4b22      	ldr	r3, [pc, #136]	; (8002080 <MS56XXCyclicRead+0xf4>)
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	701a      	strb	r2, [r3, #0]
			isNewMS56XXDataAvailable = false;
 8001ffc:	4b21      	ldr	r3, [pc, #132]	; (8002084 <MS56XXCyclicRead+0xf8>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	701a      	strb	r2, [r3, #0]
			isPressureLastCmd = true;
 8002002:	4b21      	ldr	r3, [pc, #132]	; (8002088 <MS56XXCyclicRead+0xfc>)
 8002004:	2201      	movs	r2, #1
 8002006:	701a      	strb	r2, [r3, #0]
			LastCommandSent = HAL_GetTick();
 8002008:	f002 f864 	bl	80040d4 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	4b1f      	ldr	r3, [pc, #124]	; (800208c <MS56XXCyclicRead+0x100>)
 8002010:	601a      	str	r2, [r3, #0]
		}
	}

	if ( (HAL_GetTick() - LastCommandSent) > 9 )
 8002012:	f002 f85f 	bl	80040d4 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	4b1c      	ldr	r3, [pc, #112]	; (800208c <MS56XXCyclicRead+0x100>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b09      	cmp	r3, #9
 8002020:	d929      	bls.n	8002076 <MS56XXCyclicRead+0xea>
	{
		if (isCmdSet)
 8002022:	4b17      	ldr	r3, [pc, #92]	; (8002080 <MS56XXCyclicRead+0xf4>)
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d025      	beq.n	8002076 <MS56XXCyclicRead+0xea>
		{
			if (!isPressureLastCmd)
 800202a:	4b17      	ldr	r3, [pc, #92]	; (8002088 <MS56XXCyclicRead+0xfc>)
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	f083 0301 	eor.w	r3, r3, #1
 8002032:	b2db      	uxtb	r3, r3
 8002034:	2b00      	cmp	r3, #0
 8002036:	d00b      	beq.n	8002050 <MS56XXCyclicRead+0xc4>
			{
				RawTemp = MS56XXRead3Bytes(0);
 8002038:	2000      	movs	r0, #0
 800203a:	f7ff fea1 	bl	8001d80 <MS56XXRead3Bytes>
 800203e:	4602      	mov	r2, r0
 8002040:	4b14      	ldr	r3, [pc, #80]	; (8002094 <MS56XXCyclicRead+0x108>)
 8002042:	601a      	str	r2, [r3, #0]
				LastTempMeasurement = HAL_GetTick();
 8002044:	f002 f846 	bl	80040d4 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	4b0c      	ldr	r3, [pc, #48]	; (800207c <MS56XXCyclicRead+0xf0>)
 800204c:	601a      	str	r2, [r3, #0]
 800204e:	e00a      	b.n	8002066 <MS56XXCyclicRead+0xda>
			}
			else
			{
				RawPressure = MS56XXRead3Bytes(0);
 8002050:	2000      	movs	r0, #0
 8002052:	f7ff fe95 	bl	8001d80 <MS56XXRead3Bytes>
 8002056:	4602      	mov	r2, r0
 8002058:	4b0f      	ldr	r3, [pc, #60]	; (8002098 <MS56XXCyclicRead+0x10c>)
 800205a:	601a      	str	r2, [r3, #0]
				LastPressureMeasurement = HAL_GetTick();
 800205c:	f002 f83a 	bl	80040d4 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	4b0b      	ldr	r3, [pc, #44]	; (8002090 <MS56XXCyclicRead+0x104>)
 8002064:	601a      	str	r2, [r3, #0]
			}
			isCmdSet = false;
 8002066:	4b06      	ldr	r3, [pc, #24]	; (8002080 <MS56XXCyclicRead+0xf4>)
 8002068:	2200      	movs	r2, #0
 800206a:	701a      	strb	r2, [r3, #0]
			GetAltitudeAndTemp();
 800206c:	f7ff fedc 	bl	8001e28 <GetAltitudeAndTemp>
			isNewMS56XXDataAvailable = true;
 8002070:	4b04      	ldr	r3, [pc, #16]	; (8002084 <MS56XXCyclicRead+0xf8>)
 8002072:	2201      	movs	r2, #1
 8002074:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8002076:	bf00      	nop
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	2000038c 	.word	0x2000038c
 8002080:	20000386 	.word	0x20000386
 8002084:	20000388 	.word	0x20000388
 8002088:	20000387 	.word	0x20000387
 800208c:	20000394 	.word	0x20000394
 8002090:	20000390 	.word	0x20000390
 8002094:	20000398 	.word	0x20000398
 8002098:	2000039c 	.word	0x2000039c

0800209c <func_dir>:
FILINFO fno;
DIR dp;
uint16_t DisplayedCharIndex = 0;

void func_dir(void)
{
 800209c:	b590      	push	{r4, r7, lr}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
	int br = 0;
 80020a2:	2300      	movs	r3, #0
 80020a4:	607b      	str	r3, [r7, #4]
	FS_ret2 = f_opendir (&dp, "\\");
 80020a6:	491b      	ldr	r1, [pc, #108]	; (8002114 <func_dir+0x78>)
 80020a8:	481b      	ldr	r0, [pc, #108]	; (8002118 <func_dir+0x7c>)
 80020aa:	f00d f840 	bl	800f12e <f_opendir>
 80020ae:	4603      	mov	r3, r0
 80020b0:	461a      	mov	r2, r3
 80020b2:	4b1a      	ldr	r3, [pc, #104]	; (800211c <func_dir+0x80>)
 80020b4:	701a      	strb	r2, [r3, #0]
	do
	{

//		FS_ret2 = f_findnext(&dp,&fno);
		FS_ret2 = f_readdir(&dp, &fno);
 80020b6:	491a      	ldr	r1, [pc, #104]	; (8002120 <func_dir+0x84>)
 80020b8:	4817      	ldr	r0, [pc, #92]	; (8002118 <func_dir+0x7c>)
 80020ba:	f00d f8ab 	bl	800f214 <f_readdir>
 80020be:	4603      	mov	r3, r0
 80020c0:	461a      	mov	r2, r3
 80020c2:	4b16      	ldr	r3, [pc, #88]	; (800211c <func_dir+0x80>)
 80020c4:	701a      	strb	r2, [r3, #0]
		if (fno.fname[0] != 0)
 80020c6:	4b16      	ldr	r3, [pc, #88]	; (8002120 <func_dir+0x84>)
 80020c8:	7d9b      	ldrb	r3, [r3, #22]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d00c      	beq.n	80020e8 <func_dir+0x4c>
		{
			memcpy(USBTXArray,fno.fname, sizeof(fno.fname));
 80020ce:	4a15      	ldr	r2, [pc, #84]	; (8002124 <func_dir+0x88>)
 80020d0:	4b13      	ldr	r3, [pc, #76]	; (8002120 <func_dir+0x84>)
 80020d2:	4610      	mov	r0, r2
 80020d4:	3316      	adds	r3, #22
 80020d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020da:	4619      	mov	r1, r3
 80020dc:	f00d ff04 	bl	800fee8 <memcpy>
			SendToScreen(true);
 80020e0:	2001      	movs	r0, #1
 80020e2:	f000 f943 	bl	800236c <SendToScreen>
 80020e6:	e00c      	b.n	8002102 <func_dir+0x66>
		}
		else
		{
			sprintf(USBTXArray,"%6.3f, EOD\r\n",CurrentTime());
 80020e8:	f001 f962 	bl	80033b0 <CurrentTime>
 80020ec:	ec54 3b10 	vmov	r3, r4, d0
 80020f0:	461a      	mov	r2, r3
 80020f2:	4623      	mov	r3, r4
 80020f4:	490c      	ldr	r1, [pc, #48]	; (8002128 <func_dir+0x8c>)
 80020f6:	480b      	ldr	r0, [pc, #44]	; (8002124 <func_dir+0x88>)
 80020f8:	f00e fd20 	bl	8010b3c <siprintf>
			SendToScreen(false);
 80020fc:	2000      	movs	r0, #0
 80020fe:	f000 f935 	bl	800236c <SendToScreen>
		}
//		memset(FileReadBuffer,0,sizeof(FileReadBuffer));

	} while (fno.fname[0] != 0);
 8002102:	4b07      	ldr	r3, [pc, #28]	; (8002120 <func_dir+0x84>)
 8002104:	7d9b      	ldrb	r3, [r3, #22]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d1d5      	bne.n	80020b6 <func_dir+0x1a>
}
 800210a:	bf00      	nop
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	bd90      	pop	{r4, r7, pc}
 8002112:	bf00      	nop
 8002114:	080138c0 	.word	0x080138c0
 8002118:	20001468 	.word	0x20001468
 800211c:	20001464 	.word	0x20001464
 8002120:	2000134c 	.word	0x2000134c
 8002124:	200008c0 	.word	0x200008c0
 8002128:	080138c4 	.word	0x080138c4

0800212c <func_imp>:
void func_imp(void)
{
 800212c:	b590      	push	{r4, r7, lr}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
	sprintf(USBTXArray, "%6.3f, import command received\r\n",CurrentTime());
 8002132:	f001 f93d 	bl	80033b0 <CurrentTime>
 8002136:	ec54 3b10 	vmov	r3, r4, d0
 800213a:	461a      	mov	r2, r3
 800213c:	4623      	mov	r3, r4
 800213e:	4906      	ldr	r1, [pc, #24]	; (8002158 <func_imp+0x2c>)
 8002140:	4806      	ldr	r0, [pc, #24]	; (800215c <func_imp+0x30>)
 8002142:	f00e fcfb 	bl	8010b3c <siprintf>
	SendToScreen(false);
 8002146:	2000      	movs	r0, #0
 8002148:	f000 f910 	bl	800236c <SendToScreen>
	int b =1;
 800214c:	2301      	movs	r3, #1
 800214e:	607b      	str	r3, [r7, #4]
}
 8002150:	bf00      	nop
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	bd90      	pop	{r4, r7, pc}
 8002158:	080138d4 	.word	0x080138d4
 800215c:	200008c0 	.word	0x200008c0

08002160 <func_read>:

void func_read(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
	do
	{
		HAL_Delay(1);
 8002166:	2001      	movs	r0, #1
 8002168:	f001 ffc0 	bl	80040ec <HAL_Delay>
		FS_ret2 = f_open(&USERFile, "Index.txt", FA_READ);
 800216c:	2201      	movs	r2, #1
 800216e:	491c      	ldr	r1, [pc, #112]	; (80021e0 <func_read+0x80>)
 8002170:	481c      	ldr	r0, [pc, #112]	; (80021e4 <func_read+0x84>)
 8002172:	f00c fc37 	bl	800e9e4 <f_open>
 8002176:	4603      	mov	r3, r0
 8002178:	461a      	mov	r2, r3
 800217a:	4b1b      	ldr	r3, [pc, #108]	; (80021e8 <func_read+0x88>)
 800217c:	701a      	strb	r2, [r3, #0]
	} while ( (FS_ret2 != FR_OK) );
 800217e:	4b1a      	ldr	r3, [pc, #104]	; (80021e8 <func_read+0x88>)
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d1ef      	bne.n	8002166 <func_read+0x6>

	unsigned int br = 0;
 8002186:	2300      	movs	r3, #0
 8002188:	607b      	str	r3, [r7, #4]
	do
	{
		FS_ret2 = f_read(&USERFile, &FileReadBuffer, sizeof(FileReadBuffer), &br);
 800218a:	1d3b      	adds	r3, r7, #4
 800218c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002190:	4916      	ldr	r1, [pc, #88]	; (80021ec <func_read+0x8c>)
 8002192:	4814      	ldr	r0, [pc, #80]	; (80021e4 <func_read+0x84>)
 8002194:	f00c fde4 	bl	800ed60 <f_read>
 8002198:	4603      	mov	r3, r0
 800219a:	461a      	mov	r2, r3
 800219c:	4b12      	ldr	r3, [pc, #72]	; (80021e8 <func_read+0x88>)
 800219e:	701a      	strb	r2, [r3, #0]
		memcpy(USBTXArray,FileReadBuffer, sizeof(FileReadBuffer));
 80021a0:	4a13      	ldr	r2, [pc, #76]	; (80021f0 <func_read+0x90>)
 80021a2:	4b12      	ldr	r3, [pc, #72]	; (80021ec <func_read+0x8c>)
 80021a4:	4610      	mov	r0, r2
 80021a6:	4619      	mov	r1, r3
 80021a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021ac:	461a      	mov	r2, r3
 80021ae:	f00d fe9b 	bl	800fee8 <memcpy>
		SendToScreen(false);
 80021b2:	2000      	movs	r0, #0
 80021b4:	f000 f8da 	bl	800236c <SendToScreen>
		memset(FileReadBuffer,0,sizeof(FileReadBuffer));
 80021b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021bc:	2100      	movs	r1, #0
 80021be:	480b      	ldr	r0, [pc, #44]	; (80021ec <func_read+0x8c>)
 80021c0:	f00d fe9d 	bl	800fefe <memset>
	} while (br != 0);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1df      	bne.n	800218a <func_read+0x2a>
	FS_ret2 = f_close(&USERFile);
 80021ca:	4806      	ldr	r0, [pc, #24]	; (80021e4 <func_read+0x84>)
 80021cc:	f00c ff85 	bl	800f0da <f_close>
 80021d0:	4603      	mov	r3, r0
 80021d2:	461a      	mov	r2, r3
 80021d4:	4b04      	ldr	r3, [pc, #16]	; (80021e8 <func_read+0x88>)
 80021d6:	701a      	strb	r2, [r3, #0]
}
 80021d8:	bf00      	nop
 80021da:	3708      	adds	r7, #8
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	080138f8 	.word	0x080138f8
 80021e4:	200014a8 	.word	0x200014a8
 80021e8:	20001464 	.word	0x20001464
 80021ec:	20000cc0 	.word	0x20000cc0
 80021f0:	200008c0 	.word	0x200008c0

080021f4 <func_fmt>:

void func_fmt(void)
{
 80021f4:	b590      	push	{r4, r7, lr}
 80021f6:	f5ad 5d80 	sub.w	sp, sp, #4096	; 0x1000
 80021fa:	b083      	sub	sp, #12
 80021fc:	af02      	add	r7, sp, #8
	uint8_t buffer[_MAX_SS];
	FS_ret2 = f_mkfs("\\", FM_FAT, 0, buffer, sizeof(buffer));
 80021fe:	463a      	mov	r2, r7
 8002200:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002204:	9300      	str	r3, [sp, #0]
 8002206:	4613      	mov	r3, r2
 8002208:	2200      	movs	r2, #0
 800220a:	2101      	movs	r1, #1
 800220c:	4821      	ldr	r0, [pc, #132]	; (8002294 <func_fmt+0xa0>)
 800220e:	f00d f8f3 	bl	800f3f8 <f_mkfs>
 8002212:	4603      	mov	r3, r0
 8002214:	461a      	mov	r2, r3
 8002216:	4b20      	ldr	r3, [pc, #128]	; (8002298 <func_fmt+0xa4>)
 8002218:	701a      	strb	r2, [r3, #0]
	sprintf(USBTXArray, "%6.3f, Disk Formated\r\n",CurrentTime());
 800221a:	f001 f8c9 	bl	80033b0 <CurrentTime>
 800221e:	ec54 3b10 	vmov	r3, r4, d0
 8002222:	461a      	mov	r2, r3
 8002224:	4623      	mov	r3, r4
 8002226:	491d      	ldr	r1, [pc, #116]	; (800229c <func_fmt+0xa8>)
 8002228:	481d      	ldr	r0, [pc, #116]	; (80022a0 <func_fmt+0xac>)
 800222a:	f00e fc87 	bl	8010b3c <siprintf>
	SendToScreen(false);
 800222e:	2000      	movs	r0, #0
 8002230:	f000 f89c 	bl	800236c <SendToScreen>
	FS_ret2 = f_open(&USERFile, "Index.txt", FA_CREATE_ALWAYS);
 8002234:	2208      	movs	r2, #8
 8002236:	491b      	ldr	r1, [pc, #108]	; (80022a4 <func_fmt+0xb0>)
 8002238:	481b      	ldr	r0, [pc, #108]	; (80022a8 <func_fmt+0xb4>)
 800223a:	f00c fbd3 	bl	800e9e4 <f_open>
 800223e:	4603      	mov	r3, r0
 8002240:	461a      	mov	r2, r3
 8002242:	4b15      	ldr	r3, [pc, #84]	; (8002298 <func_fmt+0xa4>)
 8002244:	701a      	strb	r2, [r3, #0]
	sprintf(USBTXArray, "%6.3f, Created Index file\r\n",CurrentTime());
 8002246:	f001 f8b3 	bl	80033b0 <CurrentTime>
 800224a:	ec54 3b10 	vmov	r3, r4, d0
 800224e:	461a      	mov	r2, r3
 8002250:	4623      	mov	r3, r4
 8002252:	4916      	ldr	r1, [pc, #88]	; (80022ac <func_fmt+0xb8>)
 8002254:	4812      	ldr	r0, [pc, #72]	; (80022a0 <func_fmt+0xac>)
 8002256:	f00e fc71 	bl	8010b3c <siprintf>
	SendToScreen(false);
 800225a:	2000      	movs	r0, #0
 800225c:	f000 f886 	bl	800236c <SendToScreen>
	FS_ret2 = f_close(&USERFile);
 8002260:	4811      	ldr	r0, [pc, #68]	; (80022a8 <func_fmt+0xb4>)
 8002262:	f00c ff3a 	bl	800f0da <f_close>
 8002266:	4603      	mov	r3, r0
 8002268:	461a      	mov	r2, r3
 800226a:	4b0b      	ldr	r3, [pc, #44]	; (8002298 <func_fmt+0xa4>)
 800226c:	701a      	strb	r2, [r3, #0]
	sprintf(USBTXArray, "%6.3f, Closed file\r\n",CurrentTime());
 800226e:	f001 f89f 	bl	80033b0 <CurrentTime>
 8002272:	ec54 3b10 	vmov	r3, r4, d0
 8002276:	461a      	mov	r2, r3
 8002278:	4623      	mov	r3, r4
 800227a:	490d      	ldr	r1, [pc, #52]	; (80022b0 <func_fmt+0xbc>)
 800227c:	4808      	ldr	r0, [pc, #32]	; (80022a0 <func_fmt+0xac>)
 800227e:	f00e fc5d 	bl	8010b3c <siprintf>
	SendToScreen(false);
 8002282:	2000      	movs	r0, #0
 8002284:	f000 f872 	bl	800236c <SendToScreen>
}
 8002288:	bf00      	nop
 800228a:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
 800228e:	3704      	adds	r7, #4
 8002290:	46bd      	mov	sp, r7
 8002292:	bd90      	pop	{r4, r7, pc}
 8002294:	080138c0 	.word	0x080138c0
 8002298:	20001464 	.word	0x20001464
 800229c:	08013904 	.word	0x08013904
 80022a0:	200008c0 	.word	0x200008c0
 80022a4:	080138f8 	.word	0x080138f8
 80022a8:	200014a8 	.word	0x200014a8
 80022ac:	0801391c 	.word	0x0801391c
 80022b0:	08013938 	.word	0x08013938

080022b4 <SearchString>:

uint32_t SearchString(char *pSrc, char *StringToLookFor)
{
 80022b4:	b590      	push	{r4, r7, lr}
 80022b6:	b087      	sub	sp, #28
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
	uint32_t LocalCounter = 0;
 80022be:	2300      	movs	r3, #0
 80022c0:	617b      	str	r3, [r7, #20]
	bool StringFound = false;
 80022c2:	2300      	movs	r3, #0
 80022c4:	72fb      	strb	r3, [r7, #11]

	if (strlen(pSrc) > strlen(StringToLookFor))
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f7fd ffc4 	bl	8000254 <strlen>
 80022cc:	4604      	mov	r4, r0
 80022ce:	6838      	ldr	r0, [r7, #0]
 80022d0:	f7fd ffc0 	bl	8000254 <strlen>
 80022d4:	4603      	mov	r3, r0
 80022d6:	429c      	cmp	r4, r3
 80022d8:	d942      	bls.n	8002360 <SearchString+0xac>
	{
		for (int i = 0 ; i <= strlen(pSrc) - strlen(StringToLookFor); i++ )
 80022da:	2300      	movs	r3, #0
 80022dc:	613b      	str	r3, [r7, #16]
 80022de:	e031      	b.n	8002344 <SearchString+0x90>
		{
			if (StringFound)
 80022e0:	7afb      	ldrb	r3, [r7, #11]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d13b      	bne.n	800235e <SearchString+0xaa>
			{
				break;
			}
			for (int j = 0; j < strlen(StringToLookFor); j++)
 80022e6:	2300      	movs	r3, #0
 80022e8:	60fb      	str	r3, [r7, #12]
 80022ea:	e021      	b.n	8002330 <SearchString+0x7c>
			{
				if (StringToLookFor[j] == pSrc[j+i])
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	683a      	ldr	r2, [r7, #0]
 80022f0:	4413      	add	r3, r2
 80022f2:	781a      	ldrb	r2, [r3, #0]
 80022f4:	68f9      	ldr	r1, [r7, #12]
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	440b      	add	r3, r1
 80022fa:	4619      	mov	r1, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	440b      	add	r3, r1
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	429a      	cmp	r2, r3
 8002304:	d10a      	bne.n	800231c <SearchString+0x68>
				{
					LocalCounter++;
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	3301      	adds	r3, #1
 800230a:	617b      	str	r3, [r7, #20]
				else
				{
					LocalCounter = 0;
					break;
				}
				if (strlen(StringToLookFor) == LocalCounter)
 800230c:	6838      	ldr	r0, [r7, #0]
 800230e:	f7fd ffa1 	bl	8000254 <strlen>
 8002312:	4602      	mov	r2, r0
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	4293      	cmp	r3, r2
 8002318:	d107      	bne.n	800232a <SearchString+0x76>
 800231a:	e002      	b.n	8002322 <SearchString+0x6e>
					LocalCounter = 0;
 800231c:	2300      	movs	r3, #0
 800231e:	617b      	str	r3, [r7, #20]
					break;
 8002320:	e00d      	b.n	800233e <SearchString+0x8a>
				{
					StringFound = true;
 8002322:	2301      	movs	r3, #1
 8002324:	72fb      	strb	r3, [r7, #11]
					return i;
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	e01b      	b.n	8002362 <SearchString+0xae>
			for (int j = 0; j < strlen(StringToLookFor); j++)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	3301      	adds	r3, #1
 800232e:	60fb      	str	r3, [r7, #12]
 8002330:	6838      	ldr	r0, [r7, #0]
 8002332:	f7fd ff8f 	bl	8000254 <strlen>
 8002336:	4602      	mov	r2, r0
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	429a      	cmp	r2, r3
 800233c:	d8d6      	bhi.n	80022ec <SearchString+0x38>
		for (int i = 0 ; i <= strlen(pSrc) - strlen(StringToLookFor); i++ )
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	3301      	adds	r3, #1
 8002342:	613b      	str	r3, [r7, #16]
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f7fd ff85 	bl	8000254 <strlen>
 800234a:	4604      	mov	r4, r0
 800234c:	6838      	ldr	r0, [r7, #0]
 800234e:	f7fd ff81 	bl	8000254 <strlen>
 8002352:	4603      	mov	r3, r0
 8002354:	1ae2      	subs	r2, r4, r3
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	429a      	cmp	r2, r3
 800235a:	d2c1      	bcs.n	80022e0 <SearchString+0x2c>
 800235c:	e000      	b.n	8002360 <SearchString+0xac>
				break;
 800235e:	bf00      	nop
					continue;
				}
			}
		}
	}
	return 0;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	371c      	adds	r7, #28
 8002366:	46bd      	mov	sp, r7
 8002368:	bd90      	pop	{r4, r7, pc}
	...

0800236c <SendToScreen>:
		{"fmt", func_fmt}
};


void SendToScreen(bool AddNewLine)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	4603      	mov	r3, r0
 8002374:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart2, USBTXArray, 256,10); // HAL_UART_Transmit(&huart2, USBTXArray, 1024,3); TIM2->CCR1
 8002376:	230a      	movs	r3, #10
 8002378:	f44f 7280 	mov.w	r2, #256	; 0x100
 800237c:	490b      	ldr	r1, [pc, #44]	; (80023ac <SendToScreen+0x40>)
 800237e:	480c      	ldr	r0, [pc, #48]	; (80023b0 <SendToScreen+0x44>)
 8002380:	f008 fc74 	bl	800ac6c <HAL_UART_Transmit>
	memset(USBTXArray,0, 256);
 8002384:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002388:	2100      	movs	r1, #0
 800238a:	4808      	ldr	r0, [pc, #32]	; (80023ac <SendToScreen+0x40>)
 800238c:	f00d fdb7 	bl	800fefe <memset>
	if (AddNewLine)
 8002390:	79fb      	ldrb	r3, [r7, #7]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d005      	beq.n	80023a2 <SendToScreen+0x36>
	{
		HAL_UART_Transmit(&huart2, "\r\n", 2,1);
 8002396:	2301      	movs	r3, #1
 8002398:	2202      	movs	r2, #2
 800239a:	4906      	ldr	r1, [pc, #24]	; (80023b4 <SendToScreen+0x48>)
 800239c:	4804      	ldr	r0, [pc, #16]	; (80023b0 <SendToScreen+0x44>)
 800239e:	f008 fc65 	bl	800ac6c <HAL_UART_Transmit>
	}
}
 80023a2:	bf00      	nop
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	200008c0 	.word	0x200008c0
 80023b0:	2000495c 	.word	0x2000495c
 80023b4:	08013964 	.word	0x08013964

080023b8 <funcTable>:

uint8_t funcTable( char* token )
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
	for( stringcase* pCase = cases; pCase != cases + sizeof( cases ) / sizeof( cases[0] ); pCase++ )
 80023c0:	4b0e      	ldr	r3, [pc, #56]	; (80023fc <funcTable+0x44>)
 80023c2:	60fb      	str	r3, [r7, #12]
 80023c4:	e010      	b.n	80023e8 <funcTable+0x30>
	{
		if( 0 == strcmp( pCase->string, token ) )
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	6879      	ldr	r1, [r7, #4]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7fd ff37 	bl	8000240 <strcmp>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d104      	bne.n	80023e2 <funcTable+0x2a>
		{
			(*pCase->func)();
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	4798      	blx	r3
			return 1;
 80023de:	2301      	movs	r3, #1
 80023e0:	e007      	b.n	80023f2 <funcTable+0x3a>
	for( stringcase* pCase = cases; pCase != cases + sizeof( cases ) / sizeof( cases[0] ); pCase++ )
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	3308      	adds	r3, #8
 80023e6:	60fb      	str	r3, [r7, #12]
 80023e8:	4a05      	ldr	r2, [pc, #20]	; (8002400 <funcTable+0x48>)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d1ea      	bne.n	80023c6 <funcTable+0xe>
			break;
		}
	}
	return 0;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3710      	adds	r7, #16
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	20000008 	.word	0x20000008
 8002400:	20000028 	.word	0x20000028

08002404 <getCMD>:

void getCMD(void)
{
 8002404:	b590      	push	{r4, r7, lr}
 8002406:	b08b      	sub	sp, #44	; 0x2c
 8002408:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart2, USBRXArray, 64);
 800240a:	2240      	movs	r2, #64	; 0x40
 800240c:	494b      	ldr	r1, [pc, #300]	; (800253c <getCMD+0x138>)
 800240e:	484c      	ldr	r0, [pc, #304]	; (8002540 <getCMD+0x13c>)
 8002410:	f008 fcbe 	bl	800ad90 <HAL_UART_Receive_DMA>
	HAL_UART_DMAPause(&huart2);
 8002414:	484a      	ldr	r0, [pc, #296]	; (8002540 <getCMD+0x13c>)
 8002416:	f008 fd3f 	bl	800ae98 <HAL_UART_DMAPause>

	int LocalCounter = 0;
 800241a:	2300      	movs	r3, #0
 800241c:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t LocalRet = 2;
 800241e:	2302      	movs	r3, #2
 8002420:	76fb      	strb	r3, [r7, #27]

	for (int i = 0; i<64;i++)
 8002422:	2300      	movs	r3, #0
 8002424:	623b      	str	r3, [r7, #32]
 8002426:	e01f      	b.n	8002468 <getCMD+0x64>
	{
		if (USBRXArray[i] == 0)
 8002428:	4a44      	ldr	r2, [pc, #272]	; (800253c <getCMD+0x138>)
 800242a:	6a3b      	ldr	r3, [r7, #32]
 800242c:	4413      	add	r3, r2
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d113      	bne.n	800245c <getCMD+0x58>
		{
			memcpy(&USBRXArray[i],&USBRXArray[i + 1],63-i);
 8002434:	6a3b      	ldr	r3, [r7, #32]
 8002436:	4a41      	ldr	r2, [pc, #260]	; (800253c <getCMD+0x138>)
 8002438:	1898      	adds	r0, r3, r2
 800243a:	6a3b      	ldr	r3, [r7, #32]
 800243c:	3301      	adds	r3, #1
 800243e:	4a3f      	ldr	r2, [pc, #252]	; (800253c <getCMD+0x138>)
 8002440:	1899      	adds	r1, r3, r2
 8002442:	6a3b      	ldr	r3, [r7, #32]
 8002444:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8002448:	461a      	mov	r2, r3
 800244a:	f00d fd4d 	bl	800fee8 <memcpy>
			UART5RXArray[63 - i] = 0;
 800244e:	6a3b      	ldr	r3, [r7, #32]
 8002450:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8002454:	4a3b      	ldr	r2, [pc, #236]	; (8002544 <getCMD+0x140>)
 8002456:	2100      	movs	r1, #0
 8002458:	54d1      	strb	r1, [r2, r3]
 800245a:	e002      	b.n	8002462 <getCMD+0x5e>
		}
		else
		{
			LocalCounter++;
 800245c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245e:	3301      	adds	r3, #1
 8002460:	627b      	str	r3, [r7, #36]	; 0x24
	for (int i = 0; i<64;i++)
 8002462:	6a3b      	ldr	r3, [r7, #32]
 8002464:	3301      	adds	r3, #1
 8002466:	623b      	str	r3, [r7, #32]
 8002468:	6a3b      	ldr	r3, [r7, #32]
 800246a:	2b3f      	cmp	r3, #63	; 0x3f
 800246c:	dddc      	ble.n	8002428 <getCMD+0x24>
		}
	}
	int LocalIndex =  DisplayedCharIndex;
 800246e:	4b36      	ldr	r3, [pc, #216]	; (8002548 <getCMD+0x144>)
 8002470:	881b      	ldrh	r3, [r3, #0]
 8002472:	617b      	str	r3, [r7, #20]
	for (int i = LocalIndex; i<strlen(USBRXArray);i++)
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	61fb      	str	r3, [r7, #28]
 8002478:	e017      	b.n	80024aa <getCMD+0xa6>
	{
		if (USBRXArray[i] != 0)
 800247a:	4a30      	ldr	r2, [pc, #192]	; (800253c <getCMD+0x138>)
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	4413      	add	r3, r2
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d00e      	beq.n	80024a4 <getCMD+0xa0>
		{
			memcpy(&USBTXArray, &USBRXArray[i],1);
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	4a2c      	ldr	r2, [pc, #176]	; (800253c <getCMD+0x138>)
 800248a:	4413      	add	r3, r2
 800248c:	781a      	ldrb	r2, [r3, #0]
 800248e:	4b2f      	ldr	r3, [pc, #188]	; (800254c <getCMD+0x148>)
 8002490:	701a      	strb	r2, [r3, #0]
			SendToScreen(false);
 8002492:	2000      	movs	r0, #0
 8002494:	f7ff ff6a 	bl	800236c <SendToScreen>
			DisplayedCharIndex++;
 8002498:	4b2b      	ldr	r3, [pc, #172]	; (8002548 <getCMD+0x144>)
 800249a:	881b      	ldrh	r3, [r3, #0]
 800249c:	3301      	adds	r3, #1
 800249e:	b29a      	uxth	r2, r3
 80024a0:	4b29      	ldr	r3, [pc, #164]	; (8002548 <getCMD+0x144>)
 80024a2:	801a      	strh	r2, [r3, #0]
	for (int i = LocalIndex; i<strlen(USBRXArray);i++)
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	3301      	adds	r3, #1
 80024a8:	61fb      	str	r3, [r7, #28]
 80024aa:	4824      	ldr	r0, [pc, #144]	; (800253c <getCMD+0x138>)
 80024ac:	f7fd fed2 	bl	8000254 <strlen>
 80024b0:	4602      	mov	r2, r0
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d8e0      	bhi.n	800247a <getCMD+0x76>
		}
	}



	uint32_t NewLineIndex = 0;
 80024b8:	2300      	movs	r3, #0
 80024ba:	613b      	str	r3, [r7, #16]
	NewLineIndex = SearchString(USBRXArray,"\r\n");
 80024bc:	4924      	ldr	r1, [pc, #144]	; (8002550 <getCMD+0x14c>)
 80024be:	481f      	ldr	r0, [pc, #124]	; (800253c <getCMD+0x138>)
 80024c0:	f7ff fef8 	bl	80022b4 <SearchString>
 80024c4:	6138      	str	r0, [r7, #16]
	if ((strlen(USBRXArray) > 0) && (NewLineIndex != 0) )
 80024c6:	4b1d      	ldr	r3, [pc, #116]	; (800253c <getCMD+0x138>)
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d02f      	beq.n	800252e <getCMD+0x12a>
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d02c      	beq.n	800252e <getCMD+0x12a>
	{

		char LocalCMD[10] = {0};
 80024d4:	1d3b      	adds	r3, r7, #4
 80024d6:	2200      	movs	r2, #0
 80024d8:	601a      	str	r2, [r3, #0]
 80024da:	605a      	str	r2, [r3, #4]
 80024dc:	811a      	strh	r2, [r3, #8]
		strncpy(&LocalCMD,&USBRXArray,NewLineIndex);
 80024de:	1d3b      	adds	r3, r7, #4
 80024e0:	693a      	ldr	r2, [r7, #16]
 80024e2:	4916      	ldr	r1, [pc, #88]	; (800253c <getCMD+0x138>)
 80024e4:	4618      	mov	r0, r3
 80024e6:	f00e fb49 	bl	8010b7c <strncpy>

		SendToScreen(true);
 80024ea:	2001      	movs	r0, #1
 80024ec:	f7ff ff3e 	bl	800236c <SendToScreen>
		LocalRet = funcTable(LocalCMD);
 80024f0:	1d3b      	adds	r3, r7, #4
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7ff ff60 	bl	80023b8 <funcTable>
 80024f8:	4603      	mov	r3, r0
 80024fa:	76fb      	strb	r3, [r7, #27]
		if (!LocalRet)
 80024fc:	7efb      	ldrb	r3, [r7, #27]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d10c      	bne.n	800251c <getCMD+0x118>
		{
			sprintf(USBTXArray, "%6.3f, failed to execute command\r\n",CurrentTime());
 8002502:	f000 ff55 	bl	80033b0 <CurrentTime>
 8002506:	ec54 3b10 	vmov	r3, r4, d0
 800250a:	461a      	mov	r2, r3
 800250c:	4623      	mov	r3, r4
 800250e:	4911      	ldr	r1, [pc, #68]	; (8002554 <getCMD+0x150>)
 8002510:	480e      	ldr	r0, [pc, #56]	; (800254c <getCMD+0x148>)
 8002512:	f00e fb13 	bl	8010b3c <siprintf>
			SendToScreen(false);
 8002516:	2000      	movs	r0, #0
 8002518:	f7ff ff28 	bl	800236c <SendToScreen>
		}
		memset(&USBRXArray,0,sizeof(USBRXArray));
 800251c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002520:	2100      	movs	r1, #0
 8002522:	4806      	ldr	r0, [pc, #24]	; (800253c <getCMD+0x138>)
 8002524:	f00d fceb 	bl	800fefe <memset>
		DisplayedCharIndex = 0;
 8002528:	4b07      	ldr	r3, [pc, #28]	; (8002548 <getCMD+0x144>)
 800252a:	2200      	movs	r2, #0
 800252c:	801a      	strh	r2, [r3, #0]

	}
	HAL_UART_DMAResume(&huart2);
 800252e:	4804      	ldr	r0, [pc, #16]	; (8002540 <getCMD+0x13c>)
 8002530:	f008 fd06 	bl	800af40 <HAL_UART_DMAResume>
//
}
 8002534:	bf00      	nop
 8002536:	372c      	adds	r7, #44	; 0x2c
 8002538:	46bd      	mov	sp, r7
 800253a:	bd90      	pop	{r4, r7, pc}
 800253c:	200003c0 	.word	0x200003c0
 8002540:	2000495c 	.word	0x2000495c
 8002544:	200007c0 	.word	0x200007c0
 8002548:	200003bc 	.word	0x200003bc
 800254c:	200008c0 	.word	0x200008c0
 8002550:	08013964 	.word	0x08013964
 8002554:	08013968 	.word	0x08013968

08002558 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */
FATFS SDFatFS;
/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800255c:	4904      	ldr	r1, [pc, #16]	; (8002570 <MX_FATFS_Init+0x18>)
 800255e:	4805      	ldr	r0, [pc, #20]	; (8002574 <MX_FATFS_Init+0x1c>)
 8002560:	f00d fbc2 	bl	800fce8 <FATFS_LinkDriver>
 8002564:	4603      	mov	r3, r0
 8002566:	461a      	mov	r2, r3
 8002568:	4b03      	ldr	r3, [pc, #12]	; (8002578 <MX_FATFS_Init+0x20>)
 800256a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800256c:	bf00      	nop
 800256e:	bd80      	pop	{r7, pc}
 8002570:	200014a0 	.word	0x200014a0
 8002574:	20000038 	.word	0x20000038
 8002578:	200014a4 	.word	0x200014a4

0800257c <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8002580:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8002582:	4618      	mov	r0, r3
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr
 800258c:	0000      	movs	r0, r0
	...

08002590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 8002596:	b084      	sub	sp, #16
 8002598:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800259a:	f001 fd4a 	bl	8004032 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800259e:	f000 f9a9 	bl	80028f4 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025a2:	f000 fe1b 	bl	80031dc <MX_GPIO_Init>
  MX_DMA_Init();
 80025a6:	f000 fdf3 	bl	8003190 <MX_DMA_Init>
  MX_TIM4_Init();
 80025aa:	f000 fce7 	bl	8002f7c <MX_TIM4_Init>
  MX_TIM1_Init();
 80025ae:	f000 fbc9 	bl	8002d44 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80025b2:	f000 fdb9 	bl	8003128 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80025b6:	f000 fa97 	bl	8002ae8 <MX_I2C1_Init>
  MX_FATFS_Init();
 80025ba:	f7ff ffcd 	bl	8002558 <MX_FATFS_Init>
  MX_QUADSPI_Init();
 80025be:	f000 fad3 	bl	8002b68 <MX_QUADSPI_Init>
  MX_SDMMC1_MMC_Init();
 80025c2:	f000 fb5b 	bl	8002c7c <MX_SDMMC1_MMC_Init>
  MX_SPI1_Init();
 80025c6:	f000 fb7f 	bl	8002cc8 <MX_SPI1_Init>
  MX_ADC1_Init();
 80025ca:	f000 fa3b 	bl	8002a44 <MX_ADC1_Init>
  MX_RTC_Init();
 80025ce:	f000 faf7 	bl	8002bc0 <MX_RTC_Init>
  MX_TIM2_Init();
 80025d2:	f000 fc77 	bl	8002ec4 <MX_TIM2_Init>
  MX_UART5_Init();
 80025d6:	f000 fd73 	bl	80030c0 <MX_UART5_Init>
  MX_UART4_Init();
 80025da:	f000 fd41 	bl	8003060 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Init(&htim1); // PWM Generation Servos
 80025de:	48aa      	ldr	r0, [pc, #680]	; (8002888 <main+0x2f8>)
 80025e0:	f007 fb4c 	bl	8009c7c <HAL_TIM_PWM_Init>
  HAL_TIM_PWM_Init(&htim4); // LED
 80025e4:	48a9      	ldr	r0, [pc, #676]	; (800288c <main+0x2fc>)
 80025e6:	f007 fb49 	bl	8009c7c <HAL_TIM_PWM_Init>
  HAL_ADC_Start(&hadc1);    // Battery
 80025ea:	48a9      	ldr	r0, [pc, #676]	; (8002890 <main+0x300>)
 80025ec:	f001 fde4 	bl	80041b8 <HAL_ADC_Start>
  //
  //	MS56XXInit();

  //	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET); 	// QSPI CS Low
  //	HAL_Delay(15);
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_SET); // QSPI WP High
 80025f0:	2201      	movs	r2, #1
 80025f2:	2104      	movs	r1, #4
 80025f4:	48a7      	ldr	r0, [pc, #668]	; (8002894 <main+0x304>)
 80025f6:	f003 fa23 	bl	8005a40 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80025fa:	2001      	movs	r0, #1
 80025fc:	f001 fd76 	bl	80040ec <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET); // QSPI RST High
 8002600:	2200      	movs	r2, #0
 8002602:	2102      	movs	r1, #2
 8002604:	48a4      	ldr	r0, [pc, #656]	; (8002898 <main+0x308>)
 8002606:	f003 fa1b 	bl	8005a40 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 800260a:	2001      	movs	r0, #1
 800260c:	f001 fd6e 	bl	80040ec <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET); // QSPI RST High
 8002610:	2201      	movs	r2, #1
 8002612:	2102      	movs	r1, #2
 8002614:	48a0      	ldr	r0, [pc, #640]	; (8002898 <main+0x308>)
 8002616:	f003 fa13 	bl	8005a40 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 800261a:	2002      	movs	r0, #2
 800261c:	f001 fd66 	bl	80040ec <HAL_Delay>

  QSPI_Init();
 8002620:	f7fe f94e 	bl	80008c0 <QSPI_Init>
//  Flash example
  QSPI_Read_Status_registers(&hqspi, &RR1, &RR2, &RR3);
 8002624:	4b9d      	ldr	r3, [pc, #628]	; (800289c <main+0x30c>)
 8002626:	4a9e      	ldr	r2, [pc, #632]	; (80028a0 <main+0x310>)
 8002628:	499e      	ldr	r1, [pc, #632]	; (80028a4 <main+0x314>)
 800262a:	489f      	ldr	r0, [pc, #636]	; (80028a8 <main+0x318>)
 800262c:	f7fe fb30 	bl	8000c90 <QSPI_Read_Status_registers>
  RR2 = 0x22;
 8002630:	4b9b      	ldr	r3, [pc, #620]	; (80028a0 <main+0x310>)
 8002632:	2222      	movs	r2, #34	; 0x22
 8002634:	801a      	strh	r2, [r3, #0]
  RR3 = 0x60;
 8002636:	4b99      	ldr	r3, [pc, #612]	; (800289c <main+0x30c>)
 8002638:	2260      	movs	r2, #96	; 0x60
 800263a:	801a      	strh	r2, [r3, #0]
  QSPI_Reset_Status_registers(&hqspi, &RR1, &RR2, &RR3);
 800263c:	4b97      	ldr	r3, [pc, #604]	; (800289c <main+0x30c>)
 800263e:	4a98      	ldr	r2, [pc, #608]	; (80028a0 <main+0x310>)
 8002640:	4998      	ldr	r1, [pc, #608]	; (80028a4 <main+0x314>)
 8002642:	4899      	ldr	r0, [pc, #612]	; (80028a8 <main+0x318>)
 8002644:	f7fe fbcc 	bl	8000de0 <QSPI_Reset_Status_registers>
  HAL_Delay(40);
 8002648:	2028      	movs	r0, #40	; 0x28
 800264a:	f001 fd4f 	bl	80040ec <HAL_Delay>
  QSPI_READMD(&MID, &DID);
 800264e:	4997      	ldr	r1, [pc, #604]	; (80028ac <main+0x31c>)
 8002650:	4897      	ldr	r0, [pc, #604]	; (80028b0 <main+0x320>)
 8002652:	f7fe faa3 	bl	8000b9c <QSPI_READMD>

  QSPI_Read_Status_registers(&hqspi, &RR1, &RR2, &RR3);
 8002656:	4b91      	ldr	r3, [pc, #580]	; (800289c <main+0x30c>)
 8002658:	4a91      	ldr	r2, [pc, #580]	; (80028a0 <main+0x310>)
 800265a:	4992      	ldr	r1, [pc, #584]	; (80028a4 <main+0x314>)
 800265c:	4892      	ldr	r0, [pc, #584]	; (80028a8 <main+0x318>)
 800265e:	f7fe fb17 	bl	8000c90 <QSPI_Read_Status_registers>
  do
  {
    HAL_Delay(1);
 8002662:	2001      	movs	r0, #1
 8002664:	f001 fd42 	bl	80040ec <HAL_Delay>
    FS_ret2 = f_mount(&USERFatFS, "\\", 0);
 8002668:	2200      	movs	r2, #0
 800266a:	4992      	ldr	r1, [pc, #584]	; (80028b4 <main+0x324>)
 800266c:	4892      	ldr	r0, [pc, #584]	; (80028b8 <main+0x328>)
 800266e:	f00c f973 	bl	800e958 <f_mount>
 8002672:	4603      	mov	r3, r0
 8002674:	461a      	mov	r2, r3
 8002676:	4b91      	ldr	r3, [pc, #580]	; (80028bc <main+0x32c>)
 8002678:	701a      	strb	r2, [r3, #0]
  } while (FS_ret2 != FR_OK);
 800267a:	4b90      	ldr	r3, [pc, #576]	; (80028bc <main+0x32c>)
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1ef      	bne.n	8002662 <main+0xd2>

  DWORD free_clusters, free_sectors, total_sectors;

  FATFS *getFreeFs;
  uint8_t buffer[_MAX_SS];
  FS_ret2 = f_getfree("\\", &free_clusters, &getFreeFs);
 8002682:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002686:	f241 0304 	movw	r3, #4100	; 0x1004
 800268a:	443b      	add	r3, r7
 800268c:	4619      	mov	r1, r3
 800268e:	4889      	ldr	r0, [pc, #548]	; (80028b4 <main+0x324>)
 8002690:	f00c fdfd 	bl	800f28e <f_getfree>
 8002694:	4603      	mov	r3, r0
 8002696:	461a      	mov	r2, r3
 8002698:	4b88      	ldr	r3, [pc, #544]	; (80028bc <main+0x32c>)
 800269a:	701a      	strb	r2, [r3, #0]
  if (FS_ret2 != FR_OK)
 800269c:	4b87      	ldr	r3, [pc, #540]	; (80028bc <main+0x32c>)
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d010      	beq.n	80026c6 <main+0x136>
  {
    FS_ret2 = f_mkfs("\\", FM_FAT, 0, buffer, sizeof(buffer));
 80026a4:	4b86      	ldr	r3, [pc, #536]	; (80028c0 <main+0x330>)
 80026a6:	f241 0248 	movw	r2, #4168	; 0x1048
 80026aa:	443a      	add	r2, r7
 80026ac:	4413      	add	r3, r2
 80026ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80026b2:	9200      	str	r2, [sp, #0]
 80026b4:	2200      	movs	r2, #0
 80026b6:	2101      	movs	r1, #1
 80026b8:	487e      	ldr	r0, [pc, #504]	; (80028b4 <main+0x324>)
 80026ba:	f00c fe9d 	bl	800f3f8 <f_mkfs>
 80026be:	4603      	mov	r3, r0
 80026c0:	461a      	mov	r2, r3
 80026c2:	4b7e      	ldr	r3, [pc, #504]	; (80028bc <main+0x32c>)
 80026c4:	701a      	strb	r2, [r3, #0]
  }

  total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 80026c6:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	699b      	ldr	r3, [r3, #24]
 80026ce:	3b02      	subs	r3, #2
 80026d0:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80026d4:	6812      	ldr	r2, [r2, #0]
 80026d6:	8952      	ldrh	r2, [r2, #10]
 80026d8:	fb02 f303 	mul.w	r3, r2, r3
 80026dc:	f241 0244 	movw	r2, #4164	; 0x1044
 80026e0:	443a      	add	r2, r7
 80026e2:	6013      	str	r3, [r2, #0]
  free_sectors = free_clusters * getFreeFs->csize;
 80026e4:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	895b      	ldrh	r3, [r3, #10]
 80026ec:	461a      	mov	r2, r3
 80026ee:	f241 0304 	movw	r3, #4100	; 0x1004
 80026f2:	443b      	add	r3, r7
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	fb03 f302 	mul.w	r3, r3, r2
 80026fa:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80026fe:	6013      	str	r3, [r2, #0]

  vBat = measureBattery();
 8002700:	f000 fe6e 	bl	80033e0 <measureBattery>
 8002704:	eeb0 7b40 	vmov.f64	d7, d0
 8002708:	4b6e      	ldr	r3, [pc, #440]	; (80028c4 <main+0x334>)
 800270a:	ed83 7b00 	vstr	d7, [r3]
  MS56XXInit();
 800270e:	f7ff fa9d 	bl	8001c4c <MS56XXInit>
  BNOInit();
 8002712:	f7ff fa03 	bl	8001b1c <BNOInit>
  led_init();
 8002716:	f7fe fcb9 	bl	800108c <led_init>
  SetRGB(0, 250, 0);
 800271a:	2200      	movs	r2, #0
 800271c:	21fa      	movs	r1, #250	; 0xfa
 800271e:	2000      	movs	r0, #0
 8002720:	f7fe fcc6 	bl	80010b0 <SetRGB>
//  Write Data to terminal - Example
//  ret = HAL_UART_Transmit_DMA(&huart2, USBTXArray, 1024);

//  HAL_UART_Receive_DMA(&huart5, UART5RXArray, 150);
//  NumberOfByteRet = CheckDataFromUART();
  LastBLERead = HAL_GetTick();
 8002724:	f001 fcd6 	bl	80040d4 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	4b67      	ldr	r3, [pc, #412]	; (80028c8 <main+0x338>)
 800272c:	601a      	str	r2, [r3, #0]
  HAL_Delay(100);
 800272e:	2064      	movs	r0, #100	; 0x64
 8002730:	f001 fcdc 	bl	80040ec <HAL_Delay>
//	  }
//	  sprintf(USBTXArray, "%6.3f, Roll: %6.3f, Pitch: %6.3f, Yaw: %6.3f\r\n",
//			  CurrentTime(), Roll, Pitch, Yaw);
//	  SendToScreen();

	  MS56XXCyclicRead();
 8002734:	f7ff fc2a 	bl	8001f8c <MS56XXCyclicRead>
	  if (isNewMS56XXDataAvailable)
 8002738:	4b64      	ldr	r3, [pc, #400]	; (80028cc <main+0x33c>)
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d009      	beq.n	8002754 <main+0x1c4>
	  {
//		  sprintf(USBTXArray, "%6.3f, Pressure: %d, Temp: %d\r\n",
//				  CurrentTime(), P, TEMP);
		  ret = strlen(USBTXArray);
 8002740:	4863      	ldr	r0, [pc, #396]	; (80028d0 <main+0x340>)
 8002742:	f7fd fd87 	bl	8000254 <strlen>
 8002746:	4603      	mov	r3, r0
 8002748:	b2da      	uxtb	r2, r3
 800274a:	4b62      	ldr	r3, [pc, #392]	; (80028d4 <main+0x344>)
 800274c:	701a      	strb	r2, [r3, #0]
//		  FS_ret2 = f_write(&USERFile, USBTXArray, strlen(USBTXArray), &BytesWritten);
		  SendToScreen(false);
 800274e:	2000      	movs	r0, #0
 8002750:	f7ff fe0c 	bl	800236c <SendToScreen>
	  }

    CheckButton();
 8002754:	f7fd ff8c 	bl	8000670 <CheckButton>
//	  HAL_RTCEx_GetTimeStamp(&hrtc, &ReadTime, &LocalDate, FORMAT_BIN);

//	  MeasuredRPM = RPMMeasurement();
//    LastRPMCycle++;
//    sprintf(UART5TXArray, "%d\r\n",LastRPMCycle);
    if (HAL_GetTick() - LastTerminalRead >= 100)
 8002758:	f001 fcbc 	bl	80040d4 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	4b5e      	ldr	r3, [pc, #376]	; (80028d8 <main+0x348>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	2b63      	cmp	r3, #99	; 0x63
 8002766:	d906      	bls.n	8002776 <main+0x1e6>
    {
//    	HAL_UART_DMAPause(&huart2);
        getCMD();
 8002768:	f7ff fe4c 	bl	8002404 <getCMD>
//        HAL_UART_DMAResume(&huart2);
        LastTerminalRead = HAL_GetTick();
 800276c:	f001 fcb2 	bl	80040d4 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	4b59      	ldr	r3, [pc, #356]	; (80028d8 <main+0x348>)
 8002774:	601a      	str	r2, [r3, #0]
    }
//	Read Sticks messages received through BlueTooth unit
    if (HAL_GetTick() - LastBLERead >= 100)
 8002776:	f001 fcad 	bl	80040d4 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	4b52      	ldr	r3, [pc, #328]	; (80028c8 <main+0x338>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b63      	cmp	r3, #99	; 0x63
 8002784:	d93b      	bls.n	80027fe <main+0x26e>
    {
    	LastBLERead = HAL_GetTick();
 8002786:	f001 fca5 	bl	80040d4 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	4b4e      	ldr	r3, [pc, #312]	; (80028c8 <main+0x338>)
 800278e:	601a      	str	r2, [r3, #0]
    	NumberOfByteRet = CheckDataFromUART();
 8002790:	f7fe fe02 	bl	8001398 <CheckDataFromUART>
 8002794:	4602      	mov	r2, r0
 8002796:	4b51      	ldr	r3, [pc, #324]	; (80028dc <main+0x34c>)
 8002798:	601a      	str	r2, [r3, #0]
    	ret = ParseRFMessage(&CurrentAngle, &CurrentPower);
 800279a:	4951      	ldr	r1, [pc, #324]	; (80028e0 <main+0x350>)
 800279c:	4851      	ldr	r0, [pc, #324]	; (80028e4 <main+0x354>)
 800279e:	f7fe fcbf 	bl	8001120 <ParseRFMessage>
 80027a2:	4603      	mov	r3, r0
 80027a4:	461a      	mov	r2, r3
 80027a6:	4b4b      	ldr	r3, [pc, #300]	; (80028d4 <main+0x344>)
 80027a8:	701a      	strb	r2, [r3, #0]
    	FinalAngle = CurrentAngle * (1 - ret) + FinalAngle * ret;
 80027aa:	4b4a      	ldr	r3, [pc, #296]	; (80028d4 <main+0x344>)
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	f1c3 0301 	rsb	r3, r3, #1
 80027b2:	b2da      	uxtb	r2, r3
 80027b4:	4b4b      	ldr	r3, [pc, #300]	; (80028e4 <main+0x354>)
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	fb12 f303 	smulbb	r3, r2, r3
 80027bc:	b2da      	uxtb	r2, r3
 80027be:	4b4a      	ldr	r3, [pc, #296]	; (80028e8 <main+0x358>)
 80027c0:	7819      	ldrb	r1, [r3, #0]
 80027c2:	4b44      	ldr	r3, [pc, #272]	; (80028d4 <main+0x344>)
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	fb11 f303 	smulbb	r3, r1, r3
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	4413      	add	r3, r2
 80027ce:	b2da      	uxtb	r2, r3
 80027d0:	4b45      	ldr	r3, [pc, #276]	; (80028e8 <main+0x358>)
 80027d2:	701a      	strb	r2, [r3, #0]
    	FinalPower = CurrentPower * (1 - ret) + FinalPower * ret;
 80027d4:	4b3f      	ldr	r3, [pc, #252]	; (80028d4 <main+0x344>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	f1c3 0301 	rsb	r3, r3, #1
 80027dc:	b2da      	uxtb	r2, r3
 80027de:	4b40      	ldr	r3, [pc, #256]	; (80028e0 <main+0x350>)
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	fb12 f303 	smulbb	r3, r2, r3
 80027e6:	b2da      	uxtb	r2, r3
 80027e8:	4b40      	ldr	r3, [pc, #256]	; (80028ec <main+0x35c>)
 80027ea:	7819      	ldrb	r1, [r3, #0]
 80027ec:	4b39      	ldr	r3, [pc, #228]	; (80028d4 <main+0x344>)
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	fb11 f303 	smulbb	r3, r1, r3
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	4413      	add	r3, r2
 80027f8:	b2da      	uxtb	r2, r3
 80027fa:	4b3c      	ldr	r3, [pc, #240]	; (80028ec <main+0x35c>)
 80027fc:	701a      	strb	r2, [r3, #0]
//    	//			  sprintf(USBTXArray,"%6.3f, Angle: %d, Power: %d ret: %d \r\n",CurrentTime(), CurrentAngle, CurrentPower, ret);
//    	//			  SendToScreen(false);
//    	sprintf(USBTXArray,"%6.3f, FAngle: %d, FPower: %d ret: %d \r\n",CurrentTime(), FinalAngle, FinalPower, ret);
//    	SendToScreen(false);
    }
    int PWMValue = 1000 * ((2 - 1) * (double)FinalAngle / (145.0 - 35.0) + 0.5);
 80027fe:	4b3a      	ldr	r3, [pc, #232]	; (80028e8 <main+0x358>)
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	ee07 3a90 	vmov	s15, r3
 8002806:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800280a:	ed9f 5b1b 	vldr	d5, [pc, #108]	; 8002878 <main+0x2e8>
 800280e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002812:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8002816:	ee37 7b06 	vadd.f64	d7, d7, d6
 800281a:	ed9f 6b19 	vldr	d6, [pc, #100]	; 8002880 <main+0x2f0>
 800281e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002822:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002826:	ee17 3a90 	vmov	r3, s15
 800282a:	f241 023c 	movw	r2, #4156	; 0x103c
 800282e:	443a      	add	r2, r7
 8002830:	6013      	str	r3, [r2, #0]
    start_pwm1(PWMValue); // Control Servo
 8002832:	f241 033c 	movw	r3, #4156	; 0x103c
 8002836:	443b      	add	r3, r7
 8002838:	6818      	ldr	r0, [r3, #0]
 800283a:	f7fd fee9 	bl	8000610 <start_pwm1>
    start_pwm2(FinalPower * 80);   // Control Car Motor
 800283e:	4b2b      	ldr	r3, [pc, #172]	; (80028ec <main+0x35c>)
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	461a      	mov	r2, r3
 8002844:	4613      	mov	r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	4413      	add	r3, r2
 800284a:	011b      	lsls	r3, r3, #4
 800284c:	4618      	mov	r0, r3
 800284e:	f7fd fefb 	bl	8000648 <start_pwm2>

    if (HAL_GetTick() - LastRPMCycle >= 1000)
 8002852:	f001 fc3f 	bl	80040d4 <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	4b25      	ldr	r3, [pc, #148]	; (80028f0 <main+0x360>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002862:	f4ff af67 	bcc.w	8002734 <main+0x1a4>
    {
    	LastRPMCycle = HAL_GetTick();
 8002866:	f001 fc35 	bl	80040d4 <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	4b20      	ldr	r3, [pc, #128]	; (80028f0 <main+0x360>)
 800286e:	601a      	str	r2, [r3, #0]
  {
 8002870:	e760      	b.n	8002734 <main+0x1a4>
 8002872:	bf00      	nop
 8002874:	f3af 8000 	nop.w
 8002878:	00000000 	.word	0x00000000
 800287c:	405b8000 	.word	0x405b8000
 8002880:	00000000 	.word	0x00000000
 8002884:	408f4000 	.word	0x408f4000
 8002888:	200047f8 	.word	0x200047f8
 800288c:	200045a0 	.word	0x200045a0
 8002890:	20004778 	.word	0x20004778
 8002894:	40021000 	.word	0x40021000
 8002898:	40020000 	.word	0x40020000
 800289c:	200010d4 	.word	0x200010d4
 80028a0:	200010d2 	.word	0x200010d2
 80028a4:	200010d0 	.word	0x200010d0
 80028a8:	20004a58 	.word	0x20004a58
 80028ac:	200010e9 	.word	0x200010e9
 80028b0:	200010e8 	.word	0x200010e8
 80028b4:	0801398c 	.word	0x0801398c
 80028b8:	2000350c 	.word	0x2000350c
 80028bc:	20001464 	.word	0x20001464
 80028c0:	ffffefb8 	.word	0xffffefb8
 80028c4:	200010c8 	.word	0x200010c8
 80028c8:	200010e0 	.word	0x200010e0
 80028cc:	20000388 	.word	0x20000388
 80028d0:	200008c0 	.word	0x200008c0
 80028d4:	200010ed 	.word	0x200010ed
 80028d8:	200010e4 	.word	0x200010e4
 80028dc:	200010dc 	.word	0x200010dc
 80028e0:	200010ec 	.word	0x200010ec
 80028e4:	200010eb 	.word	0x200010eb
 80028e8:	2000002c 	.word	0x2000002c
 80028ec:	200010ea 	.word	0x200010ea
 80028f0:	200010d8 	.word	0x200010d8

080028f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b0b8      	sub	sp, #224	; 0xe0
 80028f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028fa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80028fe:	2234      	movs	r2, #52	; 0x34
 8002900:	2100      	movs	r1, #0
 8002902:	4618      	mov	r0, r3
 8002904:	f00d fafb 	bl	800fefe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002908:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]
 8002910:	605a      	str	r2, [r3, #4]
 8002912:	609a      	str	r2, [r3, #8]
 8002914:	60da      	str	r2, [r3, #12]
 8002916:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002918:	f107 0308 	add.w	r3, r7, #8
 800291c:	2290      	movs	r2, #144	; 0x90
 800291e:	2100      	movs	r1, #0
 8002920:	4618      	mov	r0, r3
 8002922:	f00d faec 	bl	800fefe <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8002926:	f004 f8cd 	bl	8006ac4 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800292a:	4b42      	ldr	r3, [pc, #264]	; (8002a34 <SystemClock_Config+0x140>)
 800292c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292e:	4a41      	ldr	r2, [pc, #260]	; (8002a34 <SystemClock_Config+0x140>)
 8002930:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002934:	6413      	str	r3, [r2, #64]	; 0x40
 8002936:	4b3f      	ldr	r3, [pc, #252]	; (8002a34 <SystemClock_Config+0x140>)
 8002938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800293e:	607b      	str	r3, [r7, #4]
 8002940:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002942:	4b3d      	ldr	r3, [pc, #244]	; (8002a38 <SystemClock_Config+0x144>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a3c      	ldr	r2, [pc, #240]	; (8002a38 <SystemClock_Config+0x144>)
 8002948:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800294c:	6013      	str	r3, [r2, #0]
 800294e:	4b3a      	ldr	r3, [pc, #232]	; (8002a38 <SystemClock_Config+0x144>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002956:	603b      	str	r3, [r7, #0]
 8002958:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800295a:	2301      	movs	r3, #1
 800295c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002960:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002964:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002968:	2302      	movs	r3, #2
 800296a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800296e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002972:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002976:	2319      	movs	r3, #25
 8002978:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 432;
 800297c:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8002980:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002984:	2302      	movs	r3, #2
 8002986:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800298a:	2309      	movs	r3, #9
 800298c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002990:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002994:	4618      	mov	r0, r3
 8002996:	f004 ff95 	bl	80078c4 <HAL_RCC_OscConfig>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80029a0:	f000 fd44 	bl	800342c <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80029a4:	f004 f8b6 	bl	8006b14 <HAL_PWREx_EnableOverDrive>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80029ae:	f000 fd3d 	bl	800342c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029b2:	230f      	movs	r3, #15
 80029b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029b8:	2302      	movs	r3, #2
 80029ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029be:	2300      	movs	r3, #0
 80029c0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80029c4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80029c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80029cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80029d4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80029d8:	2107      	movs	r1, #7
 80029da:	4618      	mov	r0, r3
 80029dc:	f005 fa20 	bl	8007e20 <HAL_RCC_ClockConfig>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80029e6:	f000 fd21 	bl	800342c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_TIM|RCC_PERIPHCLK_RTC
 80029ea:	4b14      	ldr	r3, [pc, #80]	; (8002a3c <SystemClock_Config+0x148>)
 80029ec:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_UART4
                              |RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 80029ee:	4b14      	ldr	r3, [pc, #80]	; (8002a40 <SystemClock_Config+0x14c>)
 80029f0:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80029f2:	2300      	movs	r3, #0
 80029f4:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80029f6:	2300      	movs	r3, #0
 80029f8:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80029fa:	2300      	movs	r3, #0
 80029fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80029fe:	2300      	movs	r3, #0
 8002a00:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002a02:	2300      	movs	r3, #0
 8002a04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  PeriphClkInitStruct.TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8002a0e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a12:	643b      	str	r3, [r7, #64]	; 0x40

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a14:	f107 0308 	add.w	r3, r7, #8
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f005 fbff 	bl	800821c <HAL_RCCEx_PeriphCLKConfig>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d001      	beq.n	8002a28 <SystemClock_Config+0x134>
  {
    Error_Handler();
 8002a24:	f000 fd02 	bl	800342c <Error_Handler>
  }
  /** Enables the Clock Security System 
  */
  HAL_RCC_EnableCSS();
 8002a28:	f005 fae6 	bl	8007ff8 <HAL_RCC_EnableCSS>
}
 8002a2c:	bf00      	nop
 8002a2e:	37e0      	adds	r7, #224	; 0xe0
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	40023800 	.word	0x40023800
 8002a38:	40007000 	.word	0x40007000
 8002a3c:	00a046b0 	.word	0x00a046b0
 8002a40:	00190300 	.word	0x00190300

08002a44 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002a4a:	463b      	mov	r3, r7
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	605a      	str	r2, [r3, #4]
 8002a52:	609a      	str	r2, [r3, #8]
 8002a54:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8002a56:	4b21      	ldr	r3, [pc, #132]	; (8002adc <MX_ADC1_Init+0x98>)
 8002a58:	4a21      	ldr	r2, [pc, #132]	; (8002ae0 <MX_ADC1_Init+0x9c>)
 8002a5a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002a5c:	4b1f      	ldr	r3, [pc, #124]	; (8002adc <MX_ADC1_Init+0x98>)
 8002a5e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002a62:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002a64:	4b1d      	ldr	r3, [pc, #116]	; (8002adc <MX_ADC1_Init+0x98>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002a6a:	4b1c      	ldr	r3, [pc, #112]	; (8002adc <MX_ADC1_Init+0x98>)
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002a70:	4b1a      	ldr	r3, [pc, #104]	; (8002adc <MX_ADC1_Init+0x98>)
 8002a72:	2201      	movs	r2, #1
 8002a74:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002a76:	4b19      	ldr	r3, [pc, #100]	; (8002adc <MX_ADC1_Init+0x98>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002a7e:	4b17      	ldr	r3, [pc, #92]	; (8002adc <MX_ADC1_Init+0x98>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002a84:	4b15      	ldr	r3, [pc, #84]	; (8002adc <MX_ADC1_Init+0x98>)
 8002a86:	4a17      	ldr	r2, [pc, #92]	; (8002ae4 <MX_ADC1_Init+0xa0>)
 8002a88:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002a8a:	4b14      	ldr	r3, [pc, #80]	; (8002adc <MX_ADC1_Init+0x98>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002a90:	4b12      	ldr	r3, [pc, #72]	; (8002adc <MX_ADC1_Init+0x98>)
 8002a92:	2201      	movs	r2, #1
 8002a94:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002a96:	4b11      	ldr	r3, [pc, #68]	; (8002adc <MX_ADC1_Init+0x98>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002a9e:	4b0f      	ldr	r3, [pc, #60]	; (8002adc <MX_ADC1_Init+0x98>)
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002aa4:	480d      	ldr	r0, [pc, #52]	; (8002adc <MX_ADC1_Init+0x98>)
 8002aa6:	f001 fb43 	bl	8004130 <HAL_ADC_Init>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002ab0:	f000 fcbc 	bl	800342c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8002ab4:	230d      	movs	r3, #13
 8002ab6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002abc:	2300      	movs	r3, #0
 8002abe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ac0:	463b      	mov	r3, r7
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	4805      	ldr	r0, [pc, #20]	; (8002adc <MX_ADC1_Init+0x98>)
 8002ac6:	f001 fda3 	bl	8004610 <HAL_ADC_ConfigChannel>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d001      	beq.n	8002ad4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002ad0:	f000 fcac 	bl	800342c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002ad4:	bf00      	nop
 8002ad6:	3710      	adds	r7, #16
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	20004778 	.word	0x20004778
 8002ae0:	40012000 	.word	0x40012000
 8002ae4:	0f000001 	.word	0x0f000001

08002ae8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002aec:	4b1b      	ldr	r3, [pc, #108]	; (8002b5c <MX_I2C1_Init+0x74>)
 8002aee:	4a1c      	ldr	r2, [pc, #112]	; (8002b60 <MX_I2C1_Init+0x78>)
 8002af0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 8002af2:	4b1a      	ldr	r3, [pc, #104]	; (8002b5c <MX_I2C1_Init+0x74>)
 8002af4:	4a1b      	ldr	r2, [pc, #108]	; (8002b64 <MX_I2C1_Init+0x7c>)
 8002af6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 82;
 8002af8:	4b18      	ldr	r3, [pc, #96]	; (8002b5c <MX_I2C1_Init+0x74>)
 8002afa:	2252      	movs	r2, #82	; 0x52
 8002afc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002afe:	4b17      	ldr	r3, [pc, #92]	; (8002b5c <MX_I2C1_Init+0x74>)
 8002b00:	2201      	movs	r2, #1
 8002b02:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b04:	4b15      	ldr	r3, [pc, #84]	; (8002b5c <MX_I2C1_Init+0x74>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002b0a:	4b14      	ldr	r3, [pc, #80]	; (8002b5c <MX_I2C1_Init+0x74>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002b10:	4b12      	ldr	r3, [pc, #72]	; (8002b5c <MX_I2C1_Init+0x74>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b16:	4b11      	ldr	r3, [pc, #68]	; (8002b5c <MX_I2C1_Init+0x74>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b1c:	4b0f      	ldr	r3, [pc, #60]	; (8002b5c <MX_I2C1_Init+0x74>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002b22:	480e      	ldr	r0, [pc, #56]	; (8002b5c <MX_I2C1_Init+0x74>)
 8002b24:	f002 ffa6 	bl	8005a74 <HAL_I2C_Init>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002b2e:	f000 fc7d 	bl	800342c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002b32:	2100      	movs	r1, #0
 8002b34:	4809      	ldr	r0, [pc, #36]	; (8002b5c <MX_I2C1_Init+0x74>)
 8002b36:	f003 fc11 	bl	800635c <HAL_I2CEx_ConfigAnalogFilter>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d001      	beq.n	8002b44 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002b40:	f000 fc74 	bl	800342c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002b44:	2100      	movs	r1, #0
 8002b46:	4805      	ldr	r0, [pc, #20]	; (8002b5c <MX_I2C1_Init+0x74>)
 8002b48:	f003 fc53 	bl	80063f2 <HAL_I2CEx_ConfigDigitalFilter>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002b52:	f000 fc6b 	bl	800342c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002b56:	bf00      	nop
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	200045e0 	.word	0x200045e0
 8002b60:	40005400 	.word	0x40005400
 8002b64:	6000030d 	.word	0x6000030d

08002b68 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8002b6c:	4b12      	ldr	r3, [pc, #72]	; (8002bb8 <MX_QUADSPI_Init+0x50>)
 8002b6e:	4a13      	ldr	r2, [pc, #76]	; (8002bbc <MX_QUADSPI_Init+0x54>)
 8002b70:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8002b72:	4b11      	ldr	r3, [pc, #68]	; (8002bb8 <MX_QUADSPI_Init+0x50>)
 8002b74:	22ff      	movs	r2, #255	; 0xff
 8002b76:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 32;
 8002b78:	4b0f      	ldr	r3, [pc, #60]	; (8002bb8 <MX_QUADSPI_Init+0x50>)
 8002b7a:	2220      	movs	r2, #32
 8002b7c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8002b7e:	4b0e      	ldr	r3, [pc, #56]	; (8002bb8 <MX_QUADSPI_Init+0x50>)
 8002b80:	2210      	movs	r2, #16
 8002b82:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8002b84:	4b0c      	ldr	r3, [pc, #48]	; (8002bb8 <MX_QUADSPI_Init+0x50>)
 8002b86:	2217      	movs	r2, #23
 8002b88:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8002b8a:	4b0b      	ldr	r3, [pc, #44]	; (8002bb8 <MX_QUADSPI_Init+0x50>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8002b90:	4b09      	ldr	r3, [pc, #36]	; (8002bb8 <MX_QUADSPI_Init+0x50>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_2;
 8002b96:	4b08      	ldr	r3, [pc, #32]	; (8002bb8 <MX_QUADSPI_Init+0x50>)
 8002b98:	2280      	movs	r2, #128	; 0x80
 8002b9a:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8002b9c:	4b06      	ldr	r3, [pc, #24]	; (8002bb8 <MX_QUADSPI_Init+0x50>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8002ba2:	4805      	ldr	r0, [pc, #20]	; (8002bb8 <MX_QUADSPI_Init+0x50>)
 8002ba4:	f004 f806 	bl	8006bb4 <HAL_QSPI_Init>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8002bae:	f000 fc3d 	bl	800342c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8002bb2:	bf00      	nop
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	20004a58 	.word	0x20004a58
 8002bbc:	a0001000 	.word	0xa0001000

08002bc0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b088      	sub	sp, #32
 8002bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002bc6:	f107 0308 	add.w	r3, r7, #8
 8002bca:	2200      	movs	r2, #0
 8002bcc:	601a      	str	r2, [r3, #0]
 8002bce:	605a      	str	r2, [r3, #4]
 8002bd0:	609a      	str	r2, [r3, #8]
 8002bd2:	60da      	str	r2, [r3, #12]
 8002bd4:	611a      	str	r2, [r3, #16]
 8002bd6:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8002bd8:	2300      	movs	r3, #0
 8002bda:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8002bdc:	4b25      	ldr	r3, [pc, #148]	; (8002c74 <MX_RTC_Init+0xb4>)
 8002bde:	4a26      	ldr	r2, [pc, #152]	; (8002c78 <MX_RTC_Init+0xb8>)
 8002be0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002be2:	4b24      	ldr	r3, [pc, #144]	; (8002c74 <MX_RTC_Init+0xb4>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 99;
 8002be8:	4b22      	ldr	r3, [pc, #136]	; (8002c74 <MX_RTC_Init+0xb4>)
 8002bea:	2263      	movs	r2, #99	; 0x63
 8002bec:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 9999;
 8002bee:	4b21      	ldr	r3, [pc, #132]	; (8002c74 <MX_RTC_Init+0xb4>)
 8002bf0:	f242 720f 	movw	r2, #9999	; 0x270f
 8002bf4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002bf6:	4b1f      	ldr	r3, [pc, #124]	; (8002c74 <MX_RTC_Init+0xb4>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002bfc:	4b1d      	ldr	r3, [pc, #116]	; (8002c74 <MX_RTC_Init+0xb4>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002c02:	4b1c      	ldr	r3, [pc, #112]	; (8002c74 <MX_RTC_Init+0xb4>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002c08:	481a      	ldr	r0, [pc, #104]	; (8002c74 <MX_RTC_Init+0xb4>)
 8002c0a:	f005 ff2d 	bl	8008a68 <HAL_RTC_Init>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d001      	beq.n	8002c18 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8002c14:	f000 fc0a 	bl	800342c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0;
 8002c20:	2300      	movs	r3, #0
 8002c22:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002c24:	2300      	movs	r3, #0
 8002c26:	61bb      	str	r3, [r7, #24]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	61fb      	str	r3, [r7, #28]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002c2c:	f107 0308 	add.w	r3, r7, #8
 8002c30:	2200      	movs	r2, #0
 8002c32:	4619      	mov	r1, r3
 8002c34:	480f      	ldr	r0, [pc, #60]	; (8002c74 <MX_RTC_Init+0xb4>)
 8002c36:	f005 ff93 	bl	8008b60 <HAL_RTC_SetTime>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d001      	beq.n	8002c44 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8002c40:	f000 fbf4 	bl	800342c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002c44:	2301      	movs	r3, #1
 8002c46:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_JANUARY;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	717b      	strb	r3, [r7, #5]
  sDate.Date = 1;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 20;
 8002c50:	2314      	movs	r3, #20
 8002c52:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8002c54:	1d3b      	adds	r3, r7, #4
 8002c56:	2200      	movs	r2, #0
 8002c58:	4619      	mov	r1, r3
 8002c5a:	4806      	ldr	r0, [pc, #24]	; (8002c74 <MX_RTC_Init+0xb4>)
 8002c5c:	f006 f83e 	bl	8008cdc <HAL_RTC_SetDate>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 8002c66:	f000 fbe1 	bl	800342c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002c6a:	bf00      	nop
 8002c6c:	3720      	adds	r7, #32
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	200047c0 	.word	0x200047c0
 8002c78:	40002800 	.word	0x40002800

08002c7c <MX_SDMMC1_MMC_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_MMC_Init(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hmmc1.Instance = SDMMC1;
 8002c80:	4b0f      	ldr	r3, [pc, #60]	; (8002cc0 <MX_SDMMC1_MMC_Init+0x44>)
 8002c82:	4a10      	ldr	r2, [pc, #64]	; (8002cc4 <MX_SDMMC1_MMC_Init+0x48>)
 8002c84:	601a      	str	r2, [r3, #0]
  hmmc1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8002c86:	4b0e      	ldr	r3, [pc, #56]	; (8002cc0 <MX_SDMMC1_MMC_Init+0x44>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	605a      	str	r2, [r3, #4]
  hmmc1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8002c8c:	4b0c      	ldr	r3, [pc, #48]	; (8002cc0 <MX_SDMMC1_MMC_Init+0x44>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	609a      	str	r2, [r3, #8]
  hmmc1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002c92:	4b0b      	ldr	r3, [pc, #44]	; (8002cc0 <MX_SDMMC1_MMC_Init+0x44>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	60da      	str	r2, [r3, #12]
  hmmc1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8002c98:	4b09      	ldr	r3, [pc, #36]	; (8002cc0 <MX_SDMMC1_MMC_Init+0x44>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	611a      	str	r2, [r3, #16]
  hmmc1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002c9e:	4b08      	ldr	r3, [pc, #32]	; (8002cc0 <MX_SDMMC1_MMC_Init+0x44>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	615a      	str	r2, [r3, #20]
  hmmc1.Init.ClockDiv = 0;
 8002ca4:	4b06      	ldr	r3, [pc, #24]	; (8002cc0 <MX_SDMMC1_MMC_Init+0x44>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	619a      	str	r2, [r3, #24]
  if (HAL_MMC_Init(&hmmc1) != HAL_OK)
 8002caa:	4805      	ldr	r0, [pc, #20]	; (8002cc0 <MX_SDMMC1_MMC_Init+0x44>)
 8002cac:	f003 fbed 	bl	800648a <HAL_MMC_Init>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <MX_SDMMC1_MMC_Init+0x3e>
  {
    Error_Handler();
 8002cb6:	f000 fbb9 	bl	800342c <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8002cba:	bf00      	nop
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	2000462c 	.word	0x2000462c
 8002cc4:	40012c00 	.word	0x40012c00

08002cc8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002ccc:	4b1b      	ldr	r3, [pc, #108]	; (8002d3c <MX_SPI1_Init+0x74>)
 8002cce:	4a1c      	ldr	r2, [pc, #112]	; (8002d40 <MX_SPI1_Init+0x78>)
 8002cd0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002cd2:	4b1a      	ldr	r3, [pc, #104]	; (8002d3c <MX_SPI1_Init+0x74>)
 8002cd4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002cd8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002cda:	4b18      	ldr	r3, [pc, #96]	; (8002d3c <MX_SPI1_Init+0x74>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ce0:	4b16      	ldr	r3, [pc, #88]	; (8002d3c <MX_SPI1_Init+0x74>)
 8002ce2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002ce6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ce8:	4b14      	ldr	r3, [pc, #80]	; (8002d3c <MX_SPI1_Init+0x74>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002cee:	4b13      	ldr	r3, [pc, #76]	; (8002d3c <MX_SPI1_Init+0x74>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002cf4:	4b11      	ldr	r3, [pc, #68]	; (8002d3c <MX_SPI1_Init+0x74>)
 8002cf6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cfa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002cfc:	4b0f      	ldr	r3, [pc, #60]	; (8002d3c <MX_SPI1_Init+0x74>)
 8002cfe:	2220      	movs	r2, #32
 8002d00:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d02:	4b0e      	ldr	r3, [pc, #56]	; (8002d3c <MX_SPI1_Init+0x74>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d08:	4b0c      	ldr	r3, [pc, #48]	; (8002d3c <MX_SPI1_Init+0x74>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d0e:	4b0b      	ldr	r3, [pc, #44]	; (8002d3c <MX_SPI1_Init+0x74>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002d14:	4b09      	ldr	r3, [pc, #36]	; (8002d3c <MX_SPI1_Init+0x74>)
 8002d16:	2207      	movs	r2, #7
 8002d18:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002d1a:	4b08      	ldr	r3, [pc, #32]	; (8002d3c <MX_SPI1_Init+0x74>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002d20:	4b06      	ldr	r3, [pc, #24]	; (8002d3c <MX_SPI1_Init+0x74>)
 8002d22:	2208      	movs	r2, #8
 8002d24:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002d26:	4805      	ldr	r0, [pc, #20]	; (8002d3c <MX_SPI1_Init+0x74>)
 8002d28:	f006 f8f2 	bl	8008f10 <HAL_SPI_Init>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d001      	beq.n	8002d36 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002d32:	f000 fb7b 	bl	800342c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002d36:	bf00      	nop
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	200048b8 	.word	0x200048b8
 8002d40:	40013000 	.word	0x40013000

08002d44 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b09a      	sub	sp, #104	; 0x68
 8002d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d4a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002d4e:	2200      	movs	r2, #0
 8002d50:	601a      	str	r2, [r3, #0]
 8002d52:	605a      	str	r2, [r3, #4]
 8002d54:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002d56:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	601a      	str	r2, [r3, #0]
 8002d5e:	605a      	str	r2, [r3, #4]
 8002d60:	609a      	str	r2, [r3, #8]
 8002d62:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d64:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002d68:	2200      	movs	r2, #0
 8002d6a:	601a      	str	r2, [r3, #0]
 8002d6c:	605a      	str	r2, [r3, #4]
 8002d6e:	609a      	str	r2, [r3, #8]
 8002d70:	60da      	str	r2, [r3, #12]
 8002d72:	611a      	str	r2, [r3, #16]
 8002d74:	615a      	str	r2, [r3, #20]
 8002d76:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002d78:	1d3b      	adds	r3, r7, #4
 8002d7a:	222c      	movs	r2, #44	; 0x2c
 8002d7c:	2100      	movs	r1, #0
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f00d f8bd 	bl	800fefe <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002d84:	4b4d      	ldr	r3, [pc, #308]	; (8002ebc <MX_TIM1_Init+0x178>)
 8002d86:	4a4e      	ldr	r2, [pc, #312]	; (8002ec0 <MX_TIM1_Init+0x17c>)
 8002d88:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 539;
 8002d8a:	4b4c      	ldr	r3, [pc, #304]	; (8002ebc <MX_TIM1_Init+0x178>)
 8002d8c:	f240 221b 	movw	r2, #539	; 0x21b
 8002d90:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d92:	4b4a      	ldr	r3, [pc, #296]	; (8002ebc <MX_TIM1_Init+0x178>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8000;
 8002d98:	4b48      	ldr	r3, [pc, #288]	; (8002ebc <MX_TIM1_Init+0x178>)
 8002d9a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002d9e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002da0:	4b46      	ldr	r3, [pc, #280]	; (8002ebc <MX_TIM1_Init+0x178>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002da6:	4b45      	ldr	r3, [pc, #276]	; (8002ebc <MX_TIM1_Init+0x178>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002dac:	4b43      	ldr	r3, [pc, #268]	; (8002ebc <MX_TIM1_Init+0x178>)
 8002dae:	2280      	movs	r2, #128	; 0x80
 8002db0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8002db2:	4842      	ldr	r0, [pc, #264]	; (8002ebc <MX_TIM1_Init+0x178>)
 8002db4:	f006 ffd2 	bl	8009d5c <HAL_TIM_IC_Init>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8002dbe:	f000 fb35 	bl	800342c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002dc2:	483e      	ldr	r0, [pc, #248]	; (8002ebc <MX_TIM1_Init+0x178>)
 8002dc4:	f006 ff5a 	bl	8009c7c <HAL_TIM_PWM_Init>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8002dce:	f000 fb2d 	bl	800342c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002dd2:	2320      	movs	r3, #32
 8002dd4:	65fb      	str	r3, [r7, #92]	; 0x5c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 8002dd6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002dda:	663b      	str	r3, [r7, #96]	; 0x60
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002de0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002de4:	4619      	mov	r1, r3
 8002de6:	4835      	ldr	r0, [pc, #212]	; (8002ebc <MX_TIM1_Init+0x178>)
 8002de8:	f007 fde6 	bl	800a9b8 <HAL_TIMEx_MasterConfigSynchronization>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <MX_TIM1_Init+0xb2>
  {
    Error_Handler();
 8002df2:	f000 fb1b 	bl	800342c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002df6:	2300      	movs	r3, #0
 8002df8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	653b      	str	r3, [r7, #80]	; 0x50
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	657b      	str	r3, [r7, #84]	; 0x54
  sConfigIC.ICFilter = 0;
 8002e02:	2300      	movs	r3, #0
 8002e04:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002e06:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	482b      	ldr	r0, [pc, #172]	; (8002ebc <MX_TIM1_Init+0x178>)
 8002e10:	f006 ffcf 	bl	8009db2 <HAL_TIM_IC_ConfigChannel>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 8002e1a:	f000 fb07 	bl	800342c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002e1e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002e22:	2208      	movs	r2, #8
 8002e24:	4619      	mov	r1, r3
 8002e26:	4825      	ldr	r0, [pc, #148]	; (8002ebc <MX_TIM1_Init+0x178>)
 8002e28:	f006 ffc3 	bl	8009db2 <HAL_TIM_IC_ConfigChannel>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 8002e32:	f000 fafb 	bl	800342c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e36:	2360      	movs	r3, #96	; 0x60
 8002e38:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 600;
 8002e3a:	f44f 7316 	mov.w	r3, #600	; 0x258
 8002e3e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e40:	2300      	movs	r3, #0
 8002e42:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e44:	2300      	movs	r3, #0
 8002e46:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002e50:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002e54:	220c      	movs	r2, #12
 8002e56:	4619      	mov	r1, r3
 8002e58:	4818      	ldr	r0, [pc, #96]	; (8002ebc <MX_TIM1_Init+0x178>)
 8002e5a:	f007 f847 	bl	8009eec <HAL_TIM_PWM_ConfigChannel>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d001      	beq.n	8002e68 <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 8002e64:	f000 fae2 	bl	800342c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002e70:	2300      	movs	r3, #0
 8002e72:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002e74:	2300      	movs	r3, #0
 8002e76:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002e7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e80:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002e82:	2300      	movs	r3, #0
 8002e84:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002e86:	2300      	movs	r3, #0
 8002e88:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002e8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e8e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002e90:	2300      	movs	r3, #0
 8002e92:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002e94:	2300      	movs	r3, #0
 8002e96:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002e98:	1d3b      	adds	r3, r7, #4
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	4807      	ldr	r0, [pc, #28]	; (8002ebc <MX_TIM1_Init+0x178>)
 8002e9e:	f007 fe19 	bl	800aad4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d001      	beq.n	8002eac <MX_TIM1_Init+0x168>
  {
    Error_Handler();
 8002ea8:	f000 fac0 	bl	800342c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002eac:	4803      	ldr	r0, [pc, #12]	; (8002ebc <MX_TIM1_Init+0x178>)
 8002eae:	f000 fd43 	bl	8003938 <HAL_TIM_MspPostInit>

}
 8002eb2:	bf00      	nop
 8002eb4:	3768      	adds	r7, #104	; 0x68
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	200047f8 	.word	0x200047f8
 8002ec0:	40010000 	.word	0x40010000

08002ec4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b08a      	sub	sp, #40	; 0x28
 8002ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002eca:	f107 031c 	add.w	r3, r7, #28
 8002ece:	2200      	movs	r2, #0
 8002ed0:	601a      	str	r2, [r3, #0]
 8002ed2:	605a      	str	r2, [r3, #4]
 8002ed4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ed6:	463b      	mov	r3, r7
 8002ed8:	2200      	movs	r2, #0
 8002eda:	601a      	str	r2, [r3, #0]
 8002edc:	605a      	str	r2, [r3, #4]
 8002ede:	609a      	str	r2, [r3, #8]
 8002ee0:	60da      	str	r2, [r3, #12]
 8002ee2:	611a      	str	r2, [r3, #16]
 8002ee4:	615a      	str	r2, [r3, #20]
 8002ee6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002ee8:	4b23      	ldr	r3, [pc, #140]	; (8002f78 <MX_TIM2_Init+0xb4>)
 8002eea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002eee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 539;
 8002ef0:	4b21      	ldr	r3, [pc, #132]	; (8002f78 <MX_TIM2_Init+0xb4>)
 8002ef2:	f240 221b 	movw	r2, #539	; 0x21b
 8002ef6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ef8:	4b1f      	ldr	r3, [pc, #124]	; (8002f78 <MX_TIM2_Init+0xb4>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8000;
 8002efe:	4b1e      	ldr	r3, [pc, #120]	; (8002f78 <MX_TIM2_Init+0xb4>)
 8002f00:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002f04:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f06:	4b1c      	ldr	r3, [pc, #112]	; (8002f78 <MX_TIM2_Init+0xb4>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002f0c:	4b1a      	ldr	r3, [pc, #104]	; (8002f78 <MX_TIM2_Init+0xb4>)
 8002f0e:	2280      	movs	r2, #128	; 0x80
 8002f10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002f12:	4819      	ldr	r0, [pc, #100]	; (8002f78 <MX_TIM2_Init+0xb4>)
 8002f14:	f006 feb2 	bl	8009c7c <HAL_TIM_PWM_Init>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 8002f1e:	f000 fa85 	bl	800342c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f22:	2300      	movs	r3, #0
 8002f24:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f26:	2300      	movs	r3, #0
 8002f28:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002f2a:	f107 031c 	add.w	r3, r7, #28
 8002f2e:	4619      	mov	r1, r3
 8002f30:	4811      	ldr	r0, [pc, #68]	; (8002f78 <MX_TIM2_Init+0xb4>)
 8002f32:	f007 fd41 	bl	800a9b8 <HAL_TIMEx_MasterConfigSynchronization>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d001      	beq.n	8002f40 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8002f3c:	f000 fa76 	bl	800342c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f40:	2360      	movs	r3, #96	; 0x60
 8002f42:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 600;
 8002f44:	f44f 7316 	mov.w	r3, #600	; 0x258
 8002f48:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f52:	463b      	mov	r3, r7
 8002f54:	2200      	movs	r2, #0
 8002f56:	4619      	mov	r1, r3
 8002f58:	4807      	ldr	r0, [pc, #28]	; (8002f78 <MX_TIM2_Init+0xb4>)
 8002f5a:	f006 ffc7 	bl	8009eec <HAL_TIM_PWM_ConfigChannel>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d001      	beq.n	8002f68 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8002f64:	f000 fa62 	bl	800342c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002f68:	4803      	ldr	r0, [pc, #12]	; (8002f78 <MX_TIM2_Init+0xb4>)
 8002f6a:	f000 fce5 	bl	8003938 <HAL_TIM_MspPostInit>

}
 8002f6e:	bf00      	nop
 8002f70:	3728      	adds	r7, #40	; 0x28
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	2000491c 	.word	0x2000491c

08002f7c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b08a      	sub	sp, #40	; 0x28
 8002f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f82:	f107 031c 	add.w	r3, r7, #28
 8002f86:	2200      	movs	r2, #0
 8002f88:	601a      	str	r2, [r3, #0]
 8002f8a:	605a      	str	r2, [r3, #4]
 8002f8c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f8e:	463b      	mov	r3, r7
 8002f90:	2200      	movs	r2, #0
 8002f92:	601a      	str	r2, [r3, #0]
 8002f94:	605a      	str	r2, [r3, #4]
 8002f96:	609a      	str	r2, [r3, #8]
 8002f98:	60da      	str	r2, [r3, #12]
 8002f9a:	611a      	str	r2, [r3, #16]
 8002f9c:	615a      	str	r2, [r3, #20]
 8002f9e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002fa0:	4b2d      	ldr	r3, [pc, #180]	; (8003058 <MX_TIM4_Init+0xdc>)
 8002fa2:	4a2e      	ldr	r2, [pc, #184]	; (800305c <MX_TIM4_Init+0xe0>)
 8002fa4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 539;
 8002fa6:	4b2c      	ldr	r3, [pc, #176]	; (8003058 <MX_TIM4_Init+0xdc>)
 8002fa8:	f240 221b 	movw	r2, #539	; 0x21b
 8002fac:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fae:	4b2a      	ldr	r3, [pc, #168]	; (8003058 <MX_TIM4_Init+0xdc>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 8000;
 8002fb4:	4b28      	ldr	r3, [pc, #160]	; (8003058 <MX_TIM4_Init+0xdc>)
 8002fb6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002fba:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fbc:	4b26      	ldr	r3, [pc, #152]	; (8003058 <MX_TIM4_Init+0xdc>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002fc2:	4b25      	ldr	r3, [pc, #148]	; (8003058 <MX_TIM4_Init+0xdc>)
 8002fc4:	2280      	movs	r2, #128	; 0x80
 8002fc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002fc8:	4823      	ldr	r0, [pc, #140]	; (8003058 <MX_TIM4_Init+0xdc>)
 8002fca:	f006 fe57 	bl	8009c7c <HAL_TIM_PWM_Init>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d001      	beq.n	8002fd8 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 8002fd4:	f000 fa2a 	bl	800342c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002fe0:	f107 031c 	add.w	r3, r7, #28
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	481c      	ldr	r0, [pc, #112]	; (8003058 <MX_TIM4_Init+0xdc>)
 8002fe8:	f007 fce6 	bl	800a9b8 <HAL_TIMEx_MasterConfigSynchronization>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d001      	beq.n	8002ff6 <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 8002ff2:	f000 fa1b 	bl	800342c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ff6:	2360      	movs	r3, #96	; 0x60
 8002ff8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ffe:	2300      	movs	r3, #0
 8003000:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003002:	2300      	movs	r3, #0
 8003004:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003006:	463b      	mov	r3, r7
 8003008:	2200      	movs	r2, #0
 800300a:	4619      	mov	r1, r3
 800300c:	4812      	ldr	r0, [pc, #72]	; (8003058 <MX_TIM4_Init+0xdc>)
 800300e:	f006 ff6d 	bl	8009eec <HAL_TIM_PWM_ConfigChannel>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d001      	beq.n	800301c <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8003018:	f000 fa08 	bl	800342c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800301c:	463b      	mov	r3, r7
 800301e:	2204      	movs	r2, #4
 8003020:	4619      	mov	r1, r3
 8003022:	480d      	ldr	r0, [pc, #52]	; (8003058 <MX_TIM4_Init+0xdc>)
 8003024:	f006 ff62 	bl	8009eec <HAL_TIM_PWM_ConfigChannel>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 800302e:	f000 f9fd 	bl	800342c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003032:	463b      	mov	r3, r7
 8003034:	220c      	movs	r2, #12
 8003036:	4619      	mov	r1, r3
 8003038:	4807      	ldr	r0, [pc, #28]	; (8003058 <MX_TIM4_Init+0xdc>)
 800303a:	f006 ff57 	bl	8009eec <HAL_TIM_PWM_ConfigChannel>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d001      	beq.n	8003048 <MX_TIM4_Init+0xcc>
  {
    Error_Handler();
 8003044:	f000 f9f2 	bl	800342c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003048:	4803      	ldr	r0, [pc, #12]	; (8003058 <MX_TIM4_Init+0xdc>)
 800304a:	f000 fc75 	bl	8003938 <HAL_TIM_MspPostInit>

}
 800304e:	bf00      	nop
 8003050:	3728      	adds	r7, #40	; 0x28
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	200045a0 	.word	0x200045a0
 800305c:	40000800 	.word	0x40000800

08003060 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003064:	4b14      	ldr	r3, [pc, #80]	; (80030b8 <MX_UART4_Init+0x58>)
 8003066:	4a15      	ldr	r2, [pc, #84]	; (80030bc <MX_UART4_Init+0x5c>)
 8003068:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800306a:	4b13      	ldr	r3, [pc, #76]	; (80030b8 <MX_UART4_Init+0x58>)
 800306c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003070:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003072:	4b11      	ldr	r3, [pc, #68]	; (80030b8 <MX_UART4_Init+0x58>)
 8003074:	2200      	movs	r2, #0
 8003076:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_2;
 8003078:	4b0f      	ldr	r3, [pc, #60]	; (80030b8 <MX_UART4_Init+0x58>)
 800307a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800307e:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003080:	4b0d      	ldr	r3, [pc, #52]	; (80030b8 <MX_UART4_Init+0x58>)
 8003082:	2200      	movs	r2, #0
 8003084:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003086:	4b0c      	ldr	r3, [pc, #48]	; (80030b8 <MX_UART4_Init+0x58>)
 8003088:	220c      	movs	r2, #12
 800308a:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800308c:	4b0a      	ldr	r3, [pc, #40]	; (80030b8 <MX_UART4_Init+0x58>)
 800308e:	2200      	movs	r2, #0
 8003090:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003092:	4b09      	ldr	r3, [pc, #36]	; (80030b8 <MX_UART4_Init+0x58>)
 8003094:	2200      	movs	r2, #0
 8003096:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003098:	4b07      	ldr	r3, [pc, #28]	; (80030b8 <MX_UART4_Init+0x58>)
 800309a:	2200      	movs	r2, #0
 800309c:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800309e:	4b06      	ldr	r3, [pc, #24]	; (80030b8 <MX_UART4_Init+0x58>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80030a4:	4804      	ldr	r0, [pc, #16]	; (80030b8 <MX_UART4_Init+0x58>)
 80030a6:	f007 fd93 	bl	800abd0 <HAL_UART_Init>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d001      	beq.n	80030b4 <MX_UART4_Init+0x54>
  {
    Error_Handler();
 80030b0:	f000 f9bc 	bl	800342c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80030b4:	bf00      	nop
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	20004838 	.word	0x20004838
 80030bc:	40004c00 	.word	0x40004c00

080030c0 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80030c4:	4b16      	ldr	r3, [pc, #88]	; (8003120 <MX_UART5_Init+0x60>)
 80030c6:	4a17      	ldr	r2, [pc, #92]	; (8003124 <MX_UART5_Init+0x64>)
 80030c8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80030ca:	4b15      	ldr	r3, [pc, #84]	; (8003120 <MX_UART5_Init+0x60>)
 80030cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80030d0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80030d2:	4b13      	ldr	r3, [pc, #76]	; (8003120 <MX_UART5_Init+0x60>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80030d8:	4b11      	ldr	r3, [pc, #68]	; (8003120 <MX_UART5_Init+0x60>)
 80030da:	2200      	movs	r2, #0
 80030dc:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80030de:	4b10      	ldr	r3, [pc, #64]	; (8003120 <MX_UART5_Init+0x60>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80030e4:	4b0e      	ldr	r3, [pc, #56]	; (8003120 <MX_UART5_Init+0x60>)
 80030e6:	220c      	movs	r2, #12
 80030e8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030ea:	4b0d      	ldr	r3, [pc, #52]	; (8003120 <MX_UART5_Init+0x60>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_8;
 80030f0:	4b0b      	ldr	r3, [pc, #44]	; (8003120 <MX_UART5_Init+0x60>)
 80030f2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80030f6:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80030f8:	4b09      	ldr	r3, [pc, #36]	; (8003120 <MX_UART5_Init+0x60>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 80030fe:	4b08      	ldr	r3, [pc, #32]	; (8003120 <MX_UART5_Init+0x60>)
 8003100:	2210      	movs	r2, #16
 8003102:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8003104:	4b06      	ldr	r3, [pc, #24]	; (8003120 <MX_UART5_Init+0x60>)
 8003106:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800310a:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800310c:	4804      	ldr	r0, [pc, #16]	; (8003120 <MX_UART5_Init+0x60>)
 800310e:	f007 fd5f 	bl	800abd0 <HAL_UART_Init>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d001      	beq.n	800311c <MX_UART5_Init+0x5c>
  {
    Error_Handler();
 8003118:	f000 f988 	bl	800342c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800311c:	bf00      	nop
 800311e:	bd80      	pop	{r7, pc}
 8003120:	200046f0 	.word	0x200046f0
 8003124:	40005000 	.word	0x40005000

08003128 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800312c:	4b16      	ldr	r3, [pc, #88]	; (8003188 <MX_USART2_UART_Init+0x60>)
 800312e:	4a17      	ldr	r2, [pc, #92]	; (800318c <MX_USART2_UART_Init+0x64>)
 8003130:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 8003132:	4b15      	ldr	r3, [pc, #84]	; (8003188 <MX_USART2_UART_Init+0x60>)
 8003134:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8003138:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800313a:	4b13      	ldr	r3, [pc, #76]	; (8003188 <MX_USART2_UART_Init+0x60>)
 800313c:	2200      	movs	r2, #0
 800313e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003140:	4b11      	ldr	r3, [pc, #68]	; (8003188 <MX_USART2_UART_Init+0x60>)
 8003142:	2200      	movs	r2, #0
 8003144:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003146:	4b10      	ldr	r3, [pc, #64]	; (8003188 <MX_USART2_UART_Init+0x60>)
 8003148:	2200      	movs	r2, #0
 800314a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800314c:	4b0e      	ldr	r3, [pc, #56]	; (8003188 <MX_USART2_UART_Init+0x60>)
 800314e:	220c      	movs	r2, #12
 8003150:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003152:	4b0d      	ldr	r3, [pc, #52]	; (8003188 <MX_USART2_UART_Init+0x60>)
 8003154:	2200      	movs	r2, #0
 8003156:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003158:	4b0b      	ldr	r3, [pc, #44]	; (8003188 <MX_USART2_UART_Init+0x60>)
 800315a:	2200      	movs	r2, #0
 800315c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800315e:	4b0a      	ldr	r3, [pc, #40]	; (8003188 <MX_USART2_UART_Init+0x60>)
 8003160:	2200      	movs	r2, #0
 8003162:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8003164:	4b08      	ldr	r3, [pc, #32]	; (8003188 <MX_USART2_UART_Init+0x60>)
 8003166:	2210      	movs	r2, #16
 8003168:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800316a:	4b07      	ldr	r3, [pc, #28]	; (8003188 <MX_USART2_UART_Init+0x60>)
 800316c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003170:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003172:	4805      	ldr	r0, [pc, #20]	; (8003188 <MX_USART2_UART_Init+0x60>)
 8003174:	f007 fd2c 	bl	800abd0 <HAL_UART_Init>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 800317e:	f000 f955 	bl	800342c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003182:	bf00      	nop
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	2000495c 	.word	0x2000495c
 800318c:	40004400 	.word	0x40004400

08003190 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003196:	4b10      	ldr	r3, [pc, #64]	; (80031d8 <MX_DMA_Init+0x48>)
 8003198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319a:	4a0f      	ldr	r2, [pc, #60]	; (80031d8 <MX_DMA_Init+0x48>)
 800319c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80031a0:	6313      	str	r3, [r2, #48]	; 0x30
 80031a2:	4b0d      	ldr	r3, [pc, #52]	; (80031d8 <MX_DMA_Init+0x48>)
 80031a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031aa:	607b      	str	r3, [r7, #4]
 80031ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80031ae:	2200      	movs	r2, #0
 80031b0:	2100      	movs	r1, #0
 80031b2:	200b      	movs	r0, #11
 80031b4:	f001 fd55 	bl	8004c62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80031b8:	200b      	movs	r0, #11
 80031ba:	f001 fd6e 	bl	8004c9a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80031be:	2200      	movs	r2, #0
 80031c0:	2100      	movs	r1, #0
 80031c2:	2010      	movs	r0, #16
 80031c4:	f001 fd4d 	bl	8004c62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80031c8:	2010      	movs	r0, #16
 80031ca:	f001 fd66 	bl	8004c9a <HAL_NVIC_EnableIRQ>

}
 80031ce:	bf00      	nop
 80031d0:	3708      	adds	r7, #8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	40023800 	.word	0x40023800

080031dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b08c      	sub	sp, #48	; 0x30
 80031e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031e2:	f107 031c 	add.w	r3, r7, #28
 80031e6:	2200      	movs	r2, #0
 80031e8:	601a      	str	r2, [r3, #0]
 80031ea:	605a      	str	r2, [r3, #4]
 80031ec:	609a      	str	r2, [r3, #8]
 80031ee:	60da      	str	r2, [r3, #12]
 80031f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80031f2:	4b69      	ldr	r3, [pc, #420]	; (8003398 <MX_GPIO_Init+0x1bc>)
 80031f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f6:	4a68      	ldr	r2, [pc, #416]	; (8003398 <MX_GPIO_Init+0x1bc>)
 80031f8:	f043 0310 	orr.w	r3, r3, #16
 80031fc:	6313      	str	r3, [r2, #48]	; 0x30
 80031fe:	4b66      	ldr	r3, [pc, #408]	; (8003398 <MX_GPIO_Init+0x1bc>)
 8003200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003202:	f003 0310 	and.w	r3, r3, #16
 8003206:	61bb      	str	r3, [r7, #24]
 8003208:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800320a:	4b63      	ldr	r3, [pc, #396]	; (8003398 <MX_GPIO_Init+0x1bc>)
 800320c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320e:	4a62      	ldr	r2, [pc, #392]	; (8003398 <MX_GPIO_Init+0x1bc>)
 8003210:	f043 0304 	orr.w	r3, r3, #4
 8003214:	6313      	str	r3, [r2, #48]	; 0x30
 8003216:	4b60      	ldr	r3, [pc, #384]	; (8003398 <MX_GPIO_Init+0x1bc>)
 8003218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321a:	f003 0304 	and.w	r3, r3, #4
 800321e:	617b      	str	r3, [r7, #20]
 8003220:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003222:	4b5d      	ldr	r3, [pc, #372]	; (8003398 <MX_GPIO_Init+0x1bc>)
 8003224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003226:	4a5c      	ldr	r2, [pc, #368]	; (8003398 <MX_GPIO_Init+0x1bc>)
 8003228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800322c:	6313      	str	r3, [r2, #48]	; 0x30
 800322e:	4b5a      	ldr	r3, [pc, #360]	; (8003398 <MX_GPIO_Init+0x1bc>)
 8003230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003236:	613b      	str	r3, [r7, #16]
 8003238:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800323a:	4b57      	ldr	r3, [pc, #348]	; (8003398 <MX_GPIO_Init+0x1bc>)
 800323c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323e:	4a56      	ldr	r2, [pc, #344]	; (8003398 <MX_GPIO_Init+0x1bc>)
 8003240:	f043 0301 	orr.w	r3, r3, #1
 8003244:	6313      	str	r3, [r2, #48]	; 0x30
 8003246:	4b54      	ldr	r3, [pc, #336]	; (8003398 <MX_GPIO_Init+0x1bc>)
 8003248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	60fb      	str	r3, [r7, #12]
 8003250:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003252:	4b51      	ldr	r3, [pc, #324]	; (8003398 <MX_GPIO_Init+0x1bc>)
 8003254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003256:	4a50      	ldr	r2, [pc, #320]	; (8003398 <MX_GPIO_Init+0x1bc>)
 8003258:	f043 0302 	orr.w	r3, r3, #2
 800325c:	6313      	str	r3, [r2, #48]	; 0x30
 800325e:	4b4e      	ldr	r3, [pc, #312]	; (8003398 <MX_GPIO_Init+0x1bc>)
 8003260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003262:	f003 0302 	and.w	r3, r3, #2
 8003266:	60bb      	str	r3, [r7, #8]
 8003268:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800326a:	4b4b      	ldr	r3, [pc, #300]	; (8003398 <MX_GPIO_Init+0x1bc>)
 800326c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326e:	4a4a      	ldr	r2, [pc, #296]	; (8003398 <MX_GPIO_Init+0x1bc>)
 8003270:	f043 0308 	orr.w	r3, r3, #8
 8003274:	6313      	str	r3, [r2, #48]	; 0x30
 8003276:	4b48      	ldr	r3, [pc, #288]	; (8003398 <MX_GPIO_Init+0x1bc>)
 8003278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327a:	f003 0308 	and.w	r3, r3, #8
 800327e:	607b      	str	r3, [r7, #4]
 8003280:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Flash_WP_GPIO_Port, Flash_WP_Pin, GPIO_PIN_SET);
 8003282:	2201      	movs	r2, #1
 8003284:	2104      	movs	r1, #4
 8003286:	4845      	ldr	r0, [pc, #276]	; (800339c <MX_GPIO_Init+0x1c0>)
 8003288:	f002 fbda 	bl	8005a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Flash_Reset_GPIO_Port, Flash_Reset_Pin, GPIO_PIN_SET);
 800328c:	2201      	movs	r2, #1
 800328e:	2102      	movs	r1, #2
 8003290:	4843      	ldr	r0, [pc, #268]	; (80033a0 <MX_GPIO_Init+0x1c4>)
 8003292:	f002 fbd5 	bl	8005a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MS5611_CS_GPIO_Port, MS5611_CS_Pin, GPIO_PIN_RESET);
 8003296:	2200      	movs	r2, #0
 8003298:	2110      	movs	r1, #16
 800329a:	4841      	ldr	r0, [pc, #260]	; (80033a0 <MX_GPIO_Init+0x1c4>)
 800329c:	f002 fbd0 	bl	8005a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Flash_WP_Pin */
  GPIO_InitStruct.Pin = Flash_WP_Pin;
 80032a0:	2304      	movs	r3, #4
 80032a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032a4:	2301      	movs	r3, #1
 80032a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80032a8:	2301      	movs	r3, #1
 80032aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032ac:	2300      	movs	r3, #0
 80032ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Flash_WP_GPIO_Port, &GPIO_InitStruct);
 80032b0:	f107 031c 	add.w	r3, r7, #28
 80032b4:	4619      	mov	r1, r3
 80032b6:	4839      	ldr	r0, [pc, #228]	; (800339c <MX_GPIO_Init+0x1c0>)
 80032b8:	f002 fa00 	bl	80056bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PE3 PE4 PE5 PE6 
                           PE9 PE10 PE11 PE12 
                           PE13 PE14 PE15 PE0 
                           PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
 80032bc:	f64f 637b 	movw	r3, #65147	; 0xfe7b
 80032c0:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12 
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0 
                          |GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80032c2:	2303      	movs	r3, #3
 80032c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c6:	2300      	movs	r3, #0
 80032c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80032ca:	f107 031c 	add.w	r3, r7, #28
 80032ce:	4619      	mov	r1, r3
 80032d0:	4832      	ldr	r0, [pc, #200]	; (800339c <MX_GPIO_Init+0x1c0>)
 80032d2:	f002 f9f3 	bl	80056bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC4 
                           PC5 PC6 PC7 PC9 
                           PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4 
 80032d6:	f240 63f7 	movw	r3, #1783	; 0x6f7
 80032da:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9 
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80032dc:	2303      	movs	r3, #3
 80032de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e0:	2300      	movs	r3, #0
 80032e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032e4:	f107 031c 	add.w	r3, r7, #28
 80032e8:	4619      	mov	r1, r3
 80032ea:	482e      	ldr	r0, [pc, #184]	; (80033a4 <MX_GPIO_Init+0x1c8>)
 80032ec:	f002 f9e6 	bl	80056bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80032f0:	2301      	movs	r3, #1
 80032f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032f4:	2300      	movs	r3, #0
 80032f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80032f8:	2301      	movs	r3, #1
 80032fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032fc:	f107 031c 	add.w	r3, r7, #28
 8003300:	4619      	mov	r1, r3
 8003302:	4827      	ldr	r0, [pc, #156]	; (80033a0 <MX_GPIO_Init+0x1c4>)
 8003304:	f002 f9da 	bl	80056bc <HAL_GPIO_Init>

  /*Configure GPIO pin : Flash_Reset_Pin */
  GPIO_InitStruct.Pin = Flash_Reset_Pin;
 8003308:	2302      	movs	r3, #2
 800330a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800330c:	2301      	movs	r3, #1
 800330e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003310:	2301      	movs	r3, #1
 8003312:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003314:	2300      	movs	r3, #0
 8003316:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Flash_Reset_GPIO_Port, &GPIO_InitStruct);
 8003318:	f107 031c 	add.w	r3, r7, #28
 800331c:	4619      	mov	r1, r3
 800331e:	4820      	ldr	r0, [pc, #128]	; (80033a0 <MX_GPIO_Init+0x1c4>)
 8003320:	f002 f9cc 	bl	80056bc <HAL_GPIO_Init>

  /*Configure GPIO pin : MS5611_CS_Pin */
  GPIO_InitStruct.Pin = MS5611_CS_Pin;
 8003324:	2310      	movs	r3, #16
 8003326:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003328:	2301      	movs	r3, #1
 800332a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800332c:	2300      	movs	r3, #0
 800332e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003330:	2300      	movs	r3, #0
 8003332:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(MS5611_CS_GPIO_Port, &GPIO_InitStruct);
 8003334:	f107 031c 	add.w	r3, r7, #28
 8003338:	4619      	mov	r1, r3
 800333a:	4819      	ldr	r0, [pc, #100]	; (80033a0 <MX_GPIO_Init+0x1c4>)
 800333c:	f002 f9be 	bl	80056bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 PA9 PA12 
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_12 
 8003340:	f249 23c0 	movw	r3, #37568	; 0x92c0
 8003344:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003346:	2303      	movs	r3, #3
 8003348:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800334a:	2300      	movs	r3, #0
 800334c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800334e:	f107 031c 	add.w	r3, r7, #28
 8003352:	4619      	mov	r1, r3
 8003354:	4812      	ldr	r0, [pc, #72]	; (80033a0 <MX_GPIO_Init+0x1c4>)
 8003356:	f002 f9b1 	bl	80056bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11 
                           PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11 
 800335a:	f64f 4303 	movw	r3, #64515	; 0xfc03
 800335e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003360:	2303      	movs	r3, #3
 8003362:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003364:	2300      	movs	r3, #0
 8003366:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003368:	f107 031c 	add.w	r3, r7, #28
 800336c:	4619      	mov	r1, r3
 800336e:	480e      	ldr	r0, [pc, #56]	; (80033a8 <MX_GPIO_Init+0x1cc>)
 8003370:	f002 f9a4 	bl	80056bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11 
                           PD14 PD3 PD4 PD5 
                           PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8003374:	f644 73f8 	movw	r3, #20472	; 0x4ff8
 8003378:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_14|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800337a:	2303      	movs	r3, #3
 800337c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800337e:	2300      	movs	r3, #0
 8003380:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003382:	f107 031c 	add.w	r3, r7, #28
 8003386:	4619      	mov	r1, r3
 8003388:	4808      	ldr	r0, [pc, #32]	; (80033ac <MX_GPIO_Init+0x1d0>)
 800338a:	f002 f997 	bl	80056bc <HAL_GPIO_Init>

}
 800338e:	bf00      	nop
 8003390:	3730      	adds	r7, #48	; 0x30
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	40023800 	.word	0x40023800
 800339c:	40021000 	.word	0x40021000
 80033a0:	40020000 	.word	0x40020000
 80033a4:	40020800 	.word	0x40020800
 80033a8:	40020400 	.word	0x40020400
 80033ac:	40020c00 	.word	0x40020c00

080033b0 <CurrentTime>:

/* USER CODE BEGIN 4 */
double CurrentTime(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	af00      	add	r7, sp, #0
  return HAL_GetTick() / 1000.0;
 80033b4:	f000 fe8e 	bl	80040d4 <HAL_GetTick>
 80033b8:	ee07 0a90 	vmov	s15, r0
 80033bc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80033c0:	ed9f 6b05 	vldr	d6, [pc, #20]	; 80033d8 <CurrentTime+0x28>
 80033c4:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80033c8:	eeb0 7b45 	vmov.f64	d7, d5
}
 80033cc:	eeb0 0b47 	vmov.f64	d0, d7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	f3af 8000 	nop.w
 80033d8:	00000000 	.word	0x00000000
 80033dc:	408f4000 	.word	0x408f4000

080033e0 <measureBattery>:

double measureBattery()
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
  uint32_t D = HAL_ADC_GetValue(&hadc1);
 80033e6:	4810      	ldr	r0, [pc, #64]	; (8003428 <measureBattery+0x48>)
 80033e8:	f001 f8e7 	bl	80045ba <HAL_ADC_GetValue>
 80033ec:	6078      	str	r0, [r7, #4]
  return 2 * 3.3 * D / 4096.0;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	ee07 3a90 	vmov	s15, r3
 80033f4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80033f8:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8003418 <measureBattery+0x38>
 80033fc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003400:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8003420 <measureBattery+0x40>
 8003404:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8003408:	eeb0 7b45 	vmov.f64	d7, d5
}
 800340c:	eeb0 0b47 	vmov.f64	d0, d7
 8003410:	3708      	adds	r7, #8
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	66666666 	.word	0x66666666
 800341c:	401a6666 	.word	0x401a6666
 8003420:	00000000 	.word	0x00000000
 8003424:	40b00000 	.word	0x40b00000
 8003428:	20004778 	.word	0x20004778

0800342c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800342c:	b480      	push	{r7}
 800342e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003430:	bf00      	nop
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
	...

0800343c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003442:	4b12      	ldr	r3, [pc, #72]	; (800348c <HAL_MspInit+0x50>)
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	4a11      	ldr	r2, [pc, #68]	; (800348c <HAL_MspInit+0x50>)
 8003448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800344c:	6413      	str	r3, [r2, #64]	; 0x40
 800344e:	4b0f      	ldr	r3, [pc, #60]	; (800348c <HAL_MspInit+0x50>)
 8003450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003456:	607b      	str	r3, [r7, #4]
 8003458:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800345a:	4b0c      	ldr	r3, [pc, #48]	; (800348c <HAL_MspInit+0x50>)
 800345c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800345e:	4a0b      	ldr	r2, [pc, #44]	; (800348c <HAL_MspInit+0x50>)
 8003460:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003464:	6453      	str	r3, [r2, #68]	; 0x44
 8003466:	4b09      	ldr	r3, [pc, #36]	; (800348c <HAL_MspInit+0x50>)
 8003468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800346a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800346e:	603b      	str	r3, [r7, #0]
 8003470:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 8003472:	2200      	movs	r2, #0
 8003474:	2100      	movs	r1, #0
 8003476:	2004      	movs	r0, #4
 8003478:	f001 fbf3 	bl	8004c62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 800347c:	2004      	movs	r0, #4
 800347e:	f001 fc0c 	bl	8004c9a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003482:	bf00      	nop
 8003484:	3708      	adds	r7, #8
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	40023800 	.word	0x40023800

08003490 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b08a      	sub	sp, #40	; 0x28
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003498:	f107 0314 	add.w	r3, r7, #20
 800349c:	2200      	movs	r2, #0
 800349e:	601a      	str	r2, [r3, #0]
 80034a0:	605a      	str	r2, [r3, #4]
 80034a2:	609a      	str	r2, [r3, #8]
 80034a4:	60da      	str	r2, [r3, #12]
 80034a6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a19      	ldr	r2, [pc, #100]	; (8003514 <HAL_ADC_MspInit+0x84>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d12b      	bne.n	800350a <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80034b2:	4b19      	ldr	r3, [pc, #100]	; (8003518 <HAL_ADC_MspInit+0x88>)
 80034b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b6:	4a18      	ldr	r2, [pc, #96]	; (8003518 <HAL_ADC_MspInit+0x88>)
 80034b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034bc:	6453      	str	r3, [r2, #68]	; 0x44
 80034be:	4b16      	ldr	r3, [pc, #88]	; (8003518 <HAL_ADC_MspInit+0x88>)
 80034c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c6:	613b      	str	r3, [r7, #16]
 80034c8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034ca:	4b13      	ldr	r3, [pc, #76]	; (8003518 <HAL_ADC_MspInit+0x88>)
 80034cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ce:	4a12      	ldr	r2, [pc, #72]	; (8003518 <HAL_ADC_MspInit+0x88>)
 80034d0:	f043 0304 	orr.w	r3, r3, #4
 80034d4:	6313      	str	r3, [r2, #48]	; 0x30
 80034d6:	4b10      	ldr	r3, [pc, #64]	; (8003518 <HAL_ADC_MspInit+0x88>)
 80034d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034da:	f003 0304 	and.w	r3, r3, #4
 80034de:	60fb      	str	r3, [r7, #12]
 80034e0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PC3     ------> ADC1_IN13 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80034e2:	2308      	movs	r3, #8
 80034e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034e6:	2303      	movs	r3, #3
 80034e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ea:	2300      	movs	r3, #0
 80034ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034ee:	f107 0314 	add.w	r3, r7, #20
 80034f2:	4619      	mov	r1, r3
 80034f4:	4809      	ldr	r0, [pc, #36]	; (800351c <HAL_ADC_MspInit+0x8c>)
 80034f6:	f002 f8e1 	bl	80056bc <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80034fa:	2200      	movs	r2, #0
 80034fc:	2100      	movs	r1, #0
 80034fe:	2012      	movs	r0, #18
 8003500:	f001 fbaf 	bl	8004c62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003504:	2012      	movs	r0, #18
 8003506:	f001 fbc8 	bl	8004c9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800350a:	bf00      	nop
 800350c:	3728      	adds	r7, #40	; 0x28
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	40012000 	.word	0x40012000
 8003518:	40023800 	.word	0x40023800
 800351c:	40020800 	.word	0x40020800

08003520 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b08a      	sub	sp, #40	; 0x28
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003528:	f107 0314 	add.w	r3, r7, #20
 800352c:	2200      	movs	r2, #0
 800352e:	601a      	str	r2, [r3, #0]
 8003530:	605a      	str	r2, [r3, #4]
 8003532:	609a      	str	r2, [r3, #8]
 8003534:	60da      	str	r2, [r3, #12]
 8003536:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a1b      	ldr	r2, [pc, #108]	; (80035ac <HAL_I2C_MspInit+0x8c>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d12f      	bne.n	80035a2 <HAL_I2C_MspInit+0x82>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003542:	4b1b      	ldr	r3, [pc, #108]	; (80035b0 <HAL_I2C_MspInit+0x90>)
 8003544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003546:	4a1a      	ldr	r2, [pc, #104]	; (80035b0 <HAL_I2C_MspInit+0x90>)
 8003548:	f043 0302 	orr.w	r3, r3, #2
 800354c:	6313      	str	r3, [r2, #48]	; 0x30
 800354e:	4b18      	ldr	r3, [pc, #96]	; (80035b0 <HAL_I2C_MspInit+0x90>)
 8003550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	613b      	str	r3, [r7, #16]
 8003558:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = BNO_SCL_Pin|BNO_SDA_Pin;
 800355a:	23c0      	movs	r3, #192	; 0xc0
 800355c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800355e:	2312      	movs	r3, #18
 8003560:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003562:	2301      	movs	r3, #1
 8003564:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003566:	2303      	movs	r3, #3
 8003568:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800356a:	2304      	movs	r3, #4
 800356c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800356e:	f107 0314 	add.w	r3, r7, #20
 8003572:	4619      	mov	r1, r3
 8003574:	480f      	ldr	r0, [pc, #60]	; (80035b4 <HAL_I2C_MspInit+0x94>)
 8003576:	f002 f8a1 	bl	80056bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800357a:	4b0d      	ldr	r3, [pc, #52]	; (80035b0 <HAL_I2C_MspInit+0x90>)
 800357c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357e:	4a0c      	ldr	r2, [pc, #48]	; (80035b0 <HAL_I2C_MspInit+0x90>)
 8003580:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003584:	6413      	str	r3, [r2, #64]	; 0x40
 8003586:	4b0a      	ldr	r3, [pc, #40]	; (80035b0 <HAL_I2C_MspInit+0x90>)
 8003588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800358e:	60fb      	str	r3, [r7, #12]
 8003590:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003592:	2200      	movs	r2, #0
 8003594:	2100      	movs	r1, #0
 8003596:	201f      	movs	r0, #31
 8003598:	f001 fb63 	bl	8004c62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800359c:	201f      	movs	r0, #31
 800359e:	f001 fb7c 	bl	8004c9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80035a2:	bf00      	nop
 80035a4:	3728      	adds	r7, #40	; 0x28
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	40005400 	.word	0x40005400
 80035b0:	40023800 	.word	0x40023800
 80035b4:	40020400 	.word	0x40020400

080035b8 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b08c      	sub	sp, #48	; 0x30
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035c0:	f107 031c 	add.w	r3, r7, #28
 80035c4:	2200      	movs	r2, #0
 80035c6:	601a      	str	r2, [r3, #0]
 80035c8:	605a      	str	r2, [r3, #4]
 80035ca:	609a      	str	r2, [r3, #8]
 80035cc:	60da      	str	r2, [r3, #12]
 80035ce:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a38      	ldr	r2, [pc, #224]	; (80036b8 <HAL_QSPI_MspInit+0x100>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d169      	bne.n	80036ae <HAL_QSPI_MspInit+0xf6>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80035da:	4b38      	ldr	r3, [pc, #224]	; (80036bc <HAL_QSPI_MspInit+0x104>)
 80035dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035de:	4a37      	ldr	r2, [pc, #220]	; (80036bc <HAL_QSPI_MspInit+0x104>)
 80035e0:	f043 0302 	orr.w	r3, r3, #2
 80035e4:	6393      	str	r3, [r2, #56]	; 0x38
 80035e6:	4b35      	ldr	r3, [pc, #212]	; (80036bc <HAL_QSPI_MspInit+0x104>)
 80035e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ea:	f003 0302 	and.w	r3, r3, #2
 80035ee:	61bb      	str	r3, [r7, #24]
 80035f0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035f2:	4b32      	ldr	r3, [pc, #200]	; (80036bc <HAL_QSPI_MspInit+0x104>)
 80035f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f6:	4a31      	ldr	r2, [pc, #196]	; (80036bc <HAL_QSPI_MspInit+0x104>)
 80035f8:	f043 0302 	orr.w	r3, r3, #2
 80035fc:	6313      	str	r3, [r2, #48]	; 0x30
 80035fe:	4b2f      	ldr	r3, [pc, #188]	; (80036bc <HAL_QSPI_MspInit+0x104>)
 8003600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	617b      	str	r3, [r7, #20]
 8003608:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800360a:	4b2c      	ldr	r3, [pc, #176]	; (80036bc <HAL_QSPI_MspInit+0x104>)
 800360c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360e:	4a2b      	ldr	r2, [pc, #172]	; (80036bc <HAL_QSPI_MspInit+0x104>)
 8003610:	f043 0310 	orr.w	r3, r3, #16
 8003614:	6313      	str	r3, [r2, #48]	; 0x30
 8003616:	4b29      	ldr	r3, [pc, #164]	; (80036bc <HAL_QSPI_MspInit+0x104>)
 8003618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361a:	f003 0310 	and.w	r3, r3, #16
 800361e:	613b      	str	r3, [r7, #16]
 8003620:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003622:	4b26      	ldr	r3, [pc, #152]	; (80036bc <HAL_QSPI_MspInit+0x104>)
 8003624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003626:	4a25      	ldr	r2, [pc, #148]	; (80036bc <HAL_QSPI_MspInit+0x104>)
 8003628:	f043 0304 	orr.w	r3, r3, #4
 800362c:	6313      	str	r3, [r2, #48]	; 0x30
 800362e:	4b23      	ldr	r3, [pc, #140]	; (80036bc <HAL_QSPI_MspInit+0x104>)
 8003630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003632:	f003 0304 	and.w	r3, r3, #4
 8003636:	60fb      	str	r3, [r7, #12]
 8003638:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PE7     ------> QUADSPI_BK2_IO0
    PE8     ------> QUADSPI_BK2_IO1
    PC11     ------> QUADSPI_BK2_NCS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800363a:	2304      	movs	r3, #4
 800363c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800363e:	2302      	movs	r3, #2
 8003640:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003642:	2300      	movs	r3, #0
 8003644:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003646:	2303      	movs	r3, #3
 8003648:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800364a:	2309      	movs	r3, #9
 800364c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800364e:	f107 031c 	add.w	r3, r7, #28
 8003652:	4619      	mov	r1, r3
 8003654:	481a      	ldr	r0, [pc, #104]	; (80036c0 <HAL_QSPI_MspInit+0x108>)
 8003656:	f002 f831 	bl	80056bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800365a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800365e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003660:	2302      	movs	r3, #2
 8003662:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003664:	2300      	movs	r3, #0
 8003666:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003668:	2303      	movs	r3, #3
 800366a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800366c:	230a      	movs	r3, #10
 800366e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003670:	f107 031c 	add.w	r3, r7, #28
 8003674:	4619      	mov	r1, r3
 8003676:	4813      	ldr	r0, [pc, #76]	; (80036c4 <HAL_QSPI_MspInit+0x10c>)
 8003678:	f002 f820 	bl	80056bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800367c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003680:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003682:	2302      	movs	r3, #2
 8003684:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003686:	2300      	movs	r3, #0
 8003688:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800368a:	2303      	movs	r3, #3
 800368c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800368e:	2309      	movs	r3, #9
 8003690:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003692:	f107 031c 	add.w	r3, r7, #28
 8003696:	4619      	mov	r1, r3
 8003698:	480b      	ldr	r0, [pc, #44]	; (80036c8 <HAL_QSPI_MspInit+0x110>)
 800369a:	f002 f80f 	bl	80056bc <HAL_GPIO_Init>

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 0, 0);
 800369e:	2200      	movs	r2, #0
 80036a0:	2100      	movs	r1, #0
 80036a2:	205c      	movs	r0, #92	; 0x5c
 80036a4:	f001 fadd 	bl	8004c62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 80036a8:	205c      	movs	r0, #92	; 0x5c
 80036aa:	f001 faf6 	bl	8004c9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80036ae:	bf00      	nop
 80036b0:	3730      	adds	r7, #48	; 0x30
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	a0001000 	.word	0xa0001000
 80036bc:	40023800 	.word	0x40023800
 80036c0:	40020400 	.word	0x40020400
 80036c4:	40021000 	.word	0x40021000
 80036c8:	40020800 	.word	0x40020800

080036cc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a07      	ldr	r2, [pc, #28]	; (80036f8 <HAL_RTC_MspInit+0x2c>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d105      	bne.n	80036ea <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80036de:	4b07      	ldr	r3, [pc, #28]	; (80036fc <HAL_RTC_MspInit+0x30>)
 80036e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e2:	4a06      	ldr	r2, [pc, #24]	; (80036fc <HAL_RTC_MspInit+0x30>)
 80036e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036e8:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80036ea:	bf00      	nop
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	40002800 	.word	0x40002800
 80036fc:	40023800 	.word	0x40023800

08003700 <HAL_MMC_MspInit>:
* This function configures the hardware resources used in this example
* @param hmmc: MMC handle pointer
* @retval None
*/
void HAL_MMC_MspInit(MMC_HandleTypeDef* hmmc)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b08a      	sub	sp, #40	; 0x28
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003708:	f107 0314 	add.w	r3, r7, #20
 800370c:	2200      	movs	r2, #0
 800370e:	601a      	str	r2, [r3, #0]
 8003710:	605a      	str	r2, [r3, #4]
 8003712:	609a      	str	r2, [r3, #8]
 8003714:	60da      	str	r2, [r3, #12]
 8003716:	611a      	str	r2, [r3, #16]
  if(hmmc->Instance==SDMMC1)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a25      	ldr	r2, [pc, #148]	; (80037b4 <HAL_MMC_MspInit+0xb4>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d144      	bne.n	80037ac <HAL_MMC_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003722:	4b25      	ldr	r3, [pc, #148]	; (80037b8 <HAL_MMC_MspInit+0xb8>)
 8003724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003726:	4a24      	ldr	r2, [pc, #144]	; (80037b8 <HAL_MMC_MspInit+0xb8>)
 8003728:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800372c:	6453      	str	r3, [r2, #68]	; 0x44
 800372e:	4b22      	ldr	r3, [pc, #136]	; (80037b8 <HAL_MMC_MspInit+0xb8>)
 8003730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003732:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003736:	613b      	str	r3, [r7, #16]
 8003738:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800373a:	4b1f      	ldr	r3, [pc, #124]	; (80037b8 <HAL_MMC_MspInit+0xb8>)
 800373c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373e:	4a1e      	ldr	r2, [pc, #120]	; (80037b8 <HAL_MMC_MspInit+0xb8>)
 8003740:	f043 0304 	orr.w	r3, r3, #4
 8003744:	6313      	str	r3, [r2, #48]	; 0x30
 8003746:	4b1c      	ldr	r3, [pc, #112]	; (80037b8 <HAL_MMC_MspInit+0xb8>)
 8003748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374a:	f003 0304 	and.w	r3, r3, #4
 800374e:	60fb      	str	r3, [r7, #12]
 8003750:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003752:	4b19      	ldr	r3, [pc, #100]	; (80037b8 <HAL_MMC_MspInit+0xb8>)
 8003754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003756:	4a18      	ldr	r2, [pc, #96]	; (80037b8 <HAL_MMC_MspInit+0xb8>)
 8003758:	f043 0308 	orr.w	r3, r3, #8
 800375c:	6313      	str	r3, [r2, #48]	; 0x30
 800375e:	4b16      	ldr	r3, [pc, #88]	; (80037b8 <HAL_MMC_MspInit+0xb8>)
 8003760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003762:	f003 0308 	and.w	r3, r3, #8
 8003766:	60bb      	str	r3, [r7, #8]
 8003768:	68bb      	ldr	r3, [r7, #8]
    /**SDMMC1 GPIO Configuration    
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 800376a:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 800376e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003770:	2302      	movs	r3, #2
 8003772:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003774:	2300      	movs	r3, #0
 8003776:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003778:	2303      	movs	r3, #3
 800377a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800377c:	230c      	movs	r3, #12
 800377e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003780:	f107 0314 	add.w	r3, r7, #20
 8003784:	4619      	mov	r1, r3
 8003786:	480d      	ldr	r0, [pc, #52]	; (80037bc <HAL_MMC_MspInit+0xbc>)
 8003788:	f001 ff98 	bl	80056bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800378c:	2304      	movs	r3, #4
 800378e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003790:	2302      	movs	r3, #2
 8003792:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003794:	2300      	movs	r3, #0
 8003796:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003798:	2303      	movs	r3, #3
 800379a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800379c:	230c      	movs	r3, #12
 800379e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80037a0:	f107 0314 	add.w	r3, r7, #20
 80037a4:	4619      	mov	r1, r3
 80037a6:	4806      	ldr	r0, [pc, #24]	; (80037c0 <HAL_MMC_MspInit+0xc0>)
 80037a8:	f001 ff88 	bl	80056bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80037ac:	bf00      	nop
 80037ae:	3728      	adds	r7, #40	; 0x28
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	40012c00 	.word	0x40012c00
 80037b8:	40023800 	.word	0x40023800
 80037bc:	40020800 	.word	0x40020800
 80037c0:	40020c00 	.word	0x40020c00

080037c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b08a      	sub	sp, #40	; 0x28
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037cc:	f107 0314 	add.w	r3, r7, #20
 80037d0:	2200      	movs	r2, #0
 80037d2:	601a      	str	r2, [r3, #0]
 80037d4:	605a      	str	r2, [r3, #4]
 80037d6:	609a      	str	r2, [r3, #8]
 80037d8:	60da      	str	r2, [r3, #12]
 80037da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a17      	ldr	r2, [pc, #92]	; (8003840 <HAL_SPI_MspInit+0x7c>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d127      	bne.n	8003836 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80037e6:	4b17      	ldr	r3, [pc, #92]	; (8003844 <HAL_SPI_MspInit+0x80>)
 80037e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ea:	4a16      	ldr	r2, [pc, #88]	; (8003844 <HAL_SPI_MspInit+0x80>)
 80037ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80037f0:	6453      	str	r3, [r2, #68]	; 0x44
 80037f2:	4b14      	ldr	r3, [pc, #80]	; (8003844 <HAL_SPI_MspInit+0x80>)
 80037f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037fa:	613b      	str	r3, [r7, #16]
 80037fc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037fe:	4b11      	ldr	r3, [pc, #68]	; (8003844 <HAL_SPI_MspInit+0x80>)
 8003800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003802:	4a10      	ldr	r2, [pc, #64]	; (8003844 <HAL_SPI_MspInit+0x80>)
 8003804:	f043 0302 	orr.w	r3, r3, #2
 8003808:	6313      	str	r3, [r2, #48]	; 0x30
 800380a:	4b0e      	ldr	r3, [pc, #56]	; (8003844 <HAL_SPI_MspInit+0x80>)
 800380c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	60fb      	str	r3, [r7, #12]
 8003814:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8003816:	2338      	movs	r3, #56	; 0x38
 8003818:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800381a:	2302      	movs	r3, #2
 800381c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800381e:	2300      	movs	r3, #0
 8003820:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003822:	2303      	movs	r3, #3
 8003824:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003826:	2305      	movs	r3, #5
 8003828:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800382a:	f107 0314 	add.w	r3, r7, #20
 800382e:	4619      	mov	r1, r3
 8003830:	4805      	ldr	r0, [pc, #20]	; (8003848 <HAL_SPI_MspInit+0x84>)
 8003832:	f001 ff43 	bl	80056bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003836:	bf00      	nop
 8003838:	3728      	adds	r7, #40	; 0x28
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	40013000 	.word	0x40013000
 8003844:	40023800 	.word	0x40023800
 8003848:	40020400 	.word	0x40020400

0800384c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b08a      	sub	sp, #40	; 0x28
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003854:	f107 0314 	add.w	r3, r7, #20
 8003858:	2200      	movs	r2, #0
 800385a:	601a      	str	r2, [r3, #0]
 800385c:	605a      	str	r2, [r3, #4]
 800385e:	609a      	str	r2, [r3, #8]
 8003860:	60da      	str	r2, [r3, #12]
 8003862:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a17      	ldr	r2, [pc, #92]	; (80038c8 <HAL_TIM_IC_MspInit+0x7c>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d128      	bne.n	80038c0 <HAL_TIM_IC_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800386e:	4b17      	ldr	r3, [pc, #92]	; (80038cc <HAL_TIM_IC_MspInit+0x80>)
 8003870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003872:	4a16      	ldr	r2, [pc, #88]	; (80038cc <HAL_TIM_IC_MspInit+0x80>)
 8003874:	f043 0301 	orr.w	r3, r3, #1
 8003878:	6453      	str	r3, [r2, #68]	; 0x44
 800387a:	4b14      	ldr	r3, [pc, #80]	; (80038cc <HAL_TIM_IC_MspInit+0x80>)
 800387c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	613b      	str	r3, [r7, #16]
 8003884:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003886:	4b11      	ldr	r3, [pc, #68]	; (80038cc <HAL_TIM_IC_MspInit+0x80>)
 8003888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388a:	4a10      	ldr	r2, [pc, #64]	; (80038cc <HAL_TIM_IC_MspInit+0x80>)
 800388c:	f043 0301 	orr.w	r3, r3, #1
 8003890:	6313      	str	r3, [r2, #48]	; 0x30
 8003892:	4b0e      	ldr	r3, [pc, #56]	; (80038cc <HAL_TIM_IC_MspInit+0x80>)
 8003894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	60fb      	str	r3, [r7, #12]
 800389c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = PWM3_J5_P1_Pin|PWM4_J5_P4_Pin;
 800389e:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80038a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038a4:	2302      	movs	r3, #2
 80038a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a8:	2300      	movs	r3, #0
 80038aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038ac:	2300      	movs	r3, #0
 80038ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80038b0:	2301      	movs	r3, #1
 80038b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038b4:	f107 0314 	add.w	r3, r7, #20
 80038b8:	4619      	mov	r1, r3
 80038ba:	4805      	ldr	r0, [pc, #20]	; (80038d0 <HAL_TIM_IC_MspInit+0x84>)
 80038bc:	f001 fefe 	bl	80056bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80038c0:	bf00      	nop
 80038c2:	3728      	adds	r7, #40	; 0x28
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	40010000 	.word	0x40010000
 80038cc:	40023800 	.word	0x40023800
 80038d0:	40020000 	.word	0x40020000

080038d4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b085      	sub	sp, #20
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038e4:	d10c      	bne.n	8003900 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80038e6:	4b12      	ldr	r3, [pc, #72]	; (8003930 <HAL_TIM_PWM_MspInit+0x5c>)
 80038e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ea:	4a11      	ldr	r2, [pc, #68]	; (8003930 <HAL_TIM_PWM_MspInit+0x5c>)
 80038ec:	f043 0301 	orr.w	r3, r3, #1
 80038f0:	6413      	str	r3, [r2, #64]	; 0x40
 80038f2:	4b0f      	ldr	r3, [pc, #60]	; (8003930 <HAL_TIM_PWM_MspInit+0x5c>)
 80038f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	60fb      	str	r3, [r7, #12]
 80038fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80038fe:	e010      	b.n	8003922 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM4)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a0b      	ldr	r2, [pc, #44]	; (8003934 <HAL_TIM_PWM_MspInit+0x60>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d10b      	bne.n	8003922 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800390a:	4b09      	ldr	r3, [pc, #36]	; (8003930 <HAL_TIM_PWM_MspInit+0x5c>)
 800390c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390e:	4a08      	ldr	r2, [pc, #32]	; (8003930 <HAL_TIM_PWM_MspInit+0x5c>)
 8003910:	f043 0304 	orr.w	r3, r3, #4
 8003914:	6413      	str	r3, [r2, #64]	; 0x40
 8003916:	4b06      	ldr	r3, [pc, #24]	; (8003930 <HAL_TIM_PWM_MspInit+0x5c>)
 8003918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391a:	f003 0304 	and.w	r3, r3, #4
 800391e:	60bb      	str	r3, [r7, #8]
 8003920:	68bb      	ldr	r3, [r7, #8]
}
 8003922:	bf00      	nop
 8003924:	3714      	adds	r7, #20
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	40023800 	.word	0x40023800
 8003934:	40000800 	.word	0x40000800

08003938 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b08a      	sub	sp, #40	; 0x28
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003940:	f107 0314 	add.w	r3, r7, #20
 8003944:	2200      	movs	r2, #0
 8003946:	601a      	str	r2, [r3, #0]
 8003948:	605a      	str	r2, [r3, #4]
 800394a:	609a      	str	r2, [r3, #8]
 800394c:	60da      	str	r2, [r3, #12]
 800394e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a34      	ldr	r2, [pc, #208]	; (8003a28 <HAL_TIM_MspPostInit+0xf0>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d11d      	bne.n	8003996 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800395a:	4b34      	ldr	r3, [pc, #208]	; (8003a2c <HAL_TIM_MspPostInit+0xf4>)
 800395c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395e:	4a33      	ldr	r2, [pc, #204]	; (8003a2c <HAL_TIM_MspPostInit+0xf4>)
 8003960:	f043 0301 	orr.w	r3, r3, #1
 8003964:	6313      	str	r3, [r2, #48]	; 0x30
 8003966:	4b31      	ldr	r3, [pc, #196]	; (8003a2c <HAL_TIM_MspPostInit+0xf4>)
 8003968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	613b      	str	r3, [r7, #16]
 8003970:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = PWM2_J1_P4_Pin;
 8003972:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003976:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003978:	2302      	movs	r3, #2
 800397a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800397c:	2300      	movs	r3, #0
 800397e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003980:	2300      	movs	r3, #0
 8003982:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003984:	2301      	movs	r3, #1
 8003986:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM2_J1_P4_GPIO_Port, &GPIO_InitStruct);
 8003988:	f107 0314 	add.w	r3, r7, #20
 800398c:	4619      	mov	r1, r3
 800398e:	4828      	ldr	r0, [pc, #160]	; (8003a30 <HAL_TIM_MspPostInit+0xf8>)
 8003990:	f001 fe94 	bl	80056bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003994:	e043      	b.n	8003a1e <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM2)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800399e:	d11c      	bne.n	80039da <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039a0:	4b22      	ldr	r3, [pc, #136]	; (8003a2c <HAL_TIM_MspPostInit+0xf4>)
 80039a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a4:	4a21      	ldr	r2, [pc, #132]	; (8003a2c <HAL_TIM_MspPostInit+0xf4>)
 80039a6:	f043 0301 	orr.w	r3, r3, #1
 80039aa:	6313      	str	r3, [r2, #48]	; 0x30
 80039ac:	4b1f      	ldr	r3, [pc, #124]	; (8003a2c <HAL_TIM_MspPostInit+0xf4>)
 80039ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b0:	f003 0301 	and.w	r3, r3, #1
 80039b4:	60fb      	str	r3, [r7, #12]
 80039b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM1_J1_P1_Pin;
 80039b8:	2320      	movs	r3, #32
 80039ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039bc:	2302      	movs	r3, #2
 80039be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039c0:	2300      	movs	r3, #0
 80039c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039c4:	2300      	movs	r3, #0
 80039c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80039c8:	2301      	movs	r3, #1
 80039ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM1_J1_P1_GPIO_Port, &GPIO_InitStruct);
 80039cc:	f107 0314 	add.w	r3, r7, #20
 80039d0:	4619      	mov	r1, r3
 80039d2:	4817      	ldr	r0, [pc, #92]	; (8003a30 <HAL_TIM_MspPostInit+0xf8>)
 80039d4:	f001 fe72 	bl	80056bc <HAL_GPIO_Init>
}
 80039d8:	e021      	b.n	8003a1e <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM4)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a15      	ldr	r2, [pc, #84]	; (8003a34 <HAL_TIM_MspPostInit+0xfc>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d11c      	bne.n	8003a1e <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80039e4:	4b11      	ldr	r3, [pc, #68]	; (8003a2c <HAL_TIM_MspPostInit+0xf4>)
 80039e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e8:	4a10      	ldr	r2, [pc, #64]	; (8003a2c <HAL_TIM_MspPostInit+0xf4>)
 80039ea:	f043 0308 	orr.w	r3, r3, #8
 80039ee:	6313      	str	r3, [r2, #48]	; 0x30
 80039f0:	4b0e      	ldr	r3, [pc, #56]	; (8003a2c <HAL_TIM_MspPostInit+0xf4>)
 80039f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f4:	f003 0308 	and.w	r3, r3, #8
 80039f8:	60bb      	str	r3, [r7, #8]
 80039fa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Green_LED_Pin|Red_LED_Pin|Blue_LED_Pin;
 80039fc:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8003a00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a02:	2302      	movs	r3, #2
 8003a04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a06:	2300      	movs	r3, #0
 8003a08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003a0e:	2302      	movs	r3, #2
 8003a10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a12:	f107 0314 	add.w	r3, r7, #20
 8003a16:	4619      	mov	r1, r3
 8003a18:	4807      	ldr	r0, [pc, #28]	; (8003a38 <HAL_TIM_MspPostInit+0x100>)
 8003a1a:	f001 fe4f 	bl	80056bc <HAL_GPIO_Init>
}
 8003a1e:	bf00      	nop
 8003a20:	3728      	adds	r7, #40	; 0x28
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	40010000 	.word	0x40010000
 8003a2c:	40023800 	.word	0x40023800
 8003a30:	40020000 	.word	0x40020000
 8003a34:	40000800 	.word	0x40000800
 8003a38:	40020c00 	.word	0x40020c00

08003a3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b08e      	sub	sp, #56	; 0x38
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a48:	2200      	movs	r2, #0
 8003a4a:	601a      	str	r2, [r3, #0]
 8003a4c:	605a      	str	r2, [r3, #4]
 8003a4e:	609a      	str	r2, [r3, #8]
 8003a50:	60da      	str	r2, [r3, #12]
 8003a52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a7b      	ldr	r2, [pc, #492]	; (8003c48 <HAL_UART_MspInit+0x20c>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d130      	bne.n	8003ac0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003a5e:	4b7b      	ldr	r3, [pc, #492]	; (8003c4c <HAL_UART_MspInit+0x210>)
 8003a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a62:	4a7a      	ldr	r2, [pc, #488]	; (8003c4c <HAL_UART_MspInit+0x210>)
 8003a64:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003a68:	6413      	str	r3, [r2, #64]	; 0x40
 8003a6a:	4b78      	ldr	r3, [pc, #480]	; (8003c4c <HAL_UART_MspInit+0x210>)
 8003a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a72:	623b      	str	r3, [r7, #32]
 8003a74:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a76:	4b75      	ldr	r3, [pc, #468]	; (8003c4c <HAL_UART_MspInit+0x210>)
 8003a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7a:	4a74      	ldr	r2, [pc, #464]	; (8003c4c <HAL_UART_MspInit+0x210>)
 8003a7c:	f043 0308 	orr.w	r3, r3, #8
 8003a80:	6313      	str	r3, [r2, #48]	; 0x30
 8003a82:	4b72      	ldr	r3, [pc, #456]	; (8003c4c <HAL_UART_MspInit+0x210>)
 8003a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a86:	f003 0308 	and.w	r3, r3, #8
 8003a8a:	61fb      	str	r3, [r7, #28]
 8003a8c:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration    
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX 
    */
    GPIO_InitStruct.Pin = UART4_RX_J9_P3_Pin|UART4_TX_J9_P1_Pin;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a92:	2302      	movs	r3, #2
 8003a94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a96:	2300      	movs	r3, #0
 8003a98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003a9e:	2308      	movs	r3, #8
 8003aa0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003aa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	4869      	ldr	r0, [pc, #420]	; (8003c50 <HAL_UART_MspInit+0x214>)
 8003aaa:	f001 fe07 	bl	80056bc <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8003aae:	2200      	movs	r2, #0
 8003ab0:	2100      	movs	r1, #0
 8003ab2:	2034      	movs	r0, #52	; 0x34
 8003ab4:	f001 f8d5 	bl	8004c62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003ab8:	2034      	movs	r0, #52	; 0x34
 8003aba:	f001 f8ee 	bl	8004c9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003abe:	e0bf      	b.n	8003c40 <HAL_UART_MspInit+0x204>
  else if(huart->Instance==UART5)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a63      	ldr	r2, [pc, #396]	; (8003c54 <HAL_UART_MspInit+0x218>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d15f      	bne.n	8003b8a <HAL_UART_MspInit+0x14e>
    __HAL_RCC_UART5_CLK_ENABLE();
 8003aca:	4b60      	ldr	r3, [pc, #384]	; (8003c4c <HAL_UART_MspInit+0x210>)
 8003acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ace:	4a5f      	ldr	r2, [pc, #380]	; (8003c4c <HAL_UART_MspInit+0x210>)
 8003ad0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ad4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ad6:	4b5d      	ldr	r3, [pc, #372]	; (8003c4c <HAL_UART_MspInit+0x210>)
 8003ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ada:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ade:	61bb      	str	r3, [r7, #24]
 8003ae0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ae2:	4b5a      	ldr	r3, [pc, #360]	; (8003c4c <HAL_UART_MspInit+0x210>)
 8003ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae6:	4a59      	ldr	r2, [pc, #356]	; (8003c4c <HAL_UART_MspInit+0x210>)
 8003ae8:	f043 0302 	orr.w	r3, r3, #2
 8003aec:	6313      	str	r3, [r2, #48]	; 0x30
 8003aee:	4b57      	ldr	r3, [pc, #348]	; (8003c4c <HAL_UART_MspInit+0x210>)
 8003af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	617b      	str	r3, [r7, #20]
 8003af8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003afa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003afe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b00:	2302      	movs	r3, #2
 8003b02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b04:	2300      	movs	r3, #0
 8003b06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_UART5;
 8003b0c:	2307      	movs	r3, #7
 8003b0e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b14:	4619      	mov	r1, r3
 8003b16:	4850      	ldr	r0, [pc, #320]	; (8003c58 <HAL_UART_MspInit+0x21c>)
 8003b18:	f001 fdd0 	bl	80056bc <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8003b1c:	4b4f      	ldr	r3, [pc, #316]	; (8003c5c <HAL_UART_MspInit+0x220>)
 8003b1e:	4a50      	ldr	r2, [pc, #320]	; (8003c60 <HAL_UART_MspInit+0x224>)
 8003b20:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8003b22:	4b4e      	ldr	r3, [pc, #312]	; (8003c5c <HAL_UART_MspInit+0x220>)
 8003b24:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003b28:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b2a:	4b4c      	ldr	r3, [pc, #304]	; (8003c5c <HAL_UART_MspInit+0x220>)
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b30:	4b4a      	ldr	r3, [pc, #296]	; (8003c5c <HAL_UART_MspInit+0x220>)
 8003b32:	2200      	movs	r2, #0
 8003b34:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003b36:	4b49      	ldr	r3, [pc, #292]	; (8003c5c <HAL_UART_MspInit+0x220>)
 8003b38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b3c:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b3e:	4b47      	ldr	r3, [pc, #284]	; (8003c5c <HAL_UART_MspInit+0x220>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b44:	4b45      	ldr	r3, [pc, #276]	; (8003c5c <HAL_UART_MspInit+0x220>)
 8003b46:	2200      	movs	r2, #0
 8003b48:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8003b4a:	4b44      	ldr	r3, [pc, #272]	; (8003c5c <HAL_UART_MspInit+0x220>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003b50:	4b42      	ldr	r3, [pc, #264]	; (8003c5c <HAL_UART_MspInit+0x220>)
 8003b52:	2200      	movs	r2, #0
 8003b54:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b56:	4b41      	ldr	r3, [pc, #260]	; (8003c5c <HAL_UART_MspInit+0x220>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8003b5c:	483f      	ldr	r0, [pc, #252]	; (8003c5c <HAL_UART_MspInit+0x220>)
 8003b5e:	f001 f8b7 	bl	8004cd0 <HAL_DMA_Init>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d001      	beq.n	8003b6c <HAL_UART_MspInit+0x130>
      Error_Handler();
 8003b68:	f7ff fc60 	bl	800342c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a3b      	ldr	r2, [pc, #236]	; (8003c5c <HAL_UART_MspInit+0x220>)
 8003b70:	66da      	str	r2, [r3, #108]	; 0x6c
 8003b72:	4a3a      	ldr	r2, [pc, #232]	; (8003c5c <HAL_UART_MspInit+0x220>)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8003b78:	2200      	movs	r2, #0
 8003b7a:	2100      	movs	r1, #0
 8003b7c:	2035      	movs	r0, #53	; 0x35
 8003b7e:	f001 f870 	bl	8004c62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8003b82:	2035      	movs	r0, #53	; 0x35
 8003b84:	f001 f889 	bl	8004c9a <HAL_NVIC_EnableIRQ>
}
 8003b88:	e05a      	b.n	8003c40 <HAL_UART_MspInit+0x204>
  else if(huart->Instance==USART2)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a35      	ldr	r2, [pc, #212]	; (8003c64 <HAL_UART_MspInit+0x228>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d155      	bne.n	8003c40 <HAL_UART_MspInit+0x204>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003b94:	4b2d      	ldr	r3, [pc, #180]	; (8003c4c <HAL_UART_MspInit+0x210>)
 8003b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b98:	4a2c      	ldr	r2, [pc, #176]	; (8003c4c <HAL_UART_MspInit+0x210>)
 8003b9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b9e:	6413      	str	r3, [r2, #64]	; 0x40
 8003ba0:	4b2a      	ldr	r3, [pc, #168]	; (8003c4c <HAL_UART_MspInit+0x210>)
 8003ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba8:	613b      	str	r3, [r7, #16]
 8003baa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bac:	4b27      	ldr	r3, [pc, #156]	; (8003c4c <HAL_UART_MspInit+0x210>)
 8003bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb0:	4a26      	ldr	r2, [pc, #152]	; (8003c4c <HAL_UART_MspInit+0x210>)
 8003bb2:	f043 0301 	orr.w	r3, r3, #1
 8003bb6:	6313      	str	r3, [r2, #48]	; 0x30
 8003bb8:	4b24      	ldr	r3, [pc, #144]	; (8003c4c <HAL_UART_MspInit+0x210>)
 8003bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bbc:	f003 0301 	and.w	r3, r3, #1
 8003bc0:	60fb      	str	r3, [r7, #12]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USB_TX_Pin|USB_RX_Pin;
 8003bc4:	230c      	movs	r3, #12
 8003bc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bc8:	2302      	movs	r3, #2
 8003bca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003bd4:	2307      	movs	r3, #7
 8003bd6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bdc:	4619      	mov	r1, r3
 8003bde:	4822      	ldr	r0, [pc, #136]	; (8003c68 <HAL_UART_MspInit+0x22c>)
 8003be0:	f001 fd6c 	bl	80056bc <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003be4:	4b21      	ldr	r3, [pc, #132]	; (8003c6c <HAL_UART_MspInit+0x230>)
 8003be6:	4a22      	ldr	r2, [pc, #136]	; (8003c70 <HAL_UART_MspInit+0x234>)
 8003be8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003bea:	4b20      	ldr	r3, [pc, #128]	; (8003c6c <HAL_UART_MspInit+0x230>)
 8003bec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003bf0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003bf2:	4b1e      	ldr	r3, [pc, #120]	; (8003c6c <HAL_UART_MspInit+0x230>)
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003bf8:	4b1c      	ldr	r3, [pc, #112]	; (8003c6c <HAL_UART_MspInit+0x230>)
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003bfe:	4b1b      	ldr	r3, [pc, #108]	; (8003c6c <HAL_UART_MspInit+0x230>)
 8003c00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c04:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c06:	4b19      	ldr	r3, [pc, #100]	; (8003c6c <HAL_UART_MspInit+0x230>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c0c:	4b17      	ldr	r3, [pc, #92]	; (8003c6c <HAL_UART_MspInit+0x230>)
 8003c0e:	2200      	movs	r2, #0
 8003c10:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003c12:	4b16      	ldr	r3, [pc, #88]	; (8003c6c <HAL_UART_MspInit+0x230>)
 8003c14:	2200      	movs	r2, #0
 8003c16:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003c18:	4b14      	ldr	r3, [pc, #80]	; (8003c6c <HAL_UART_MspInit+0x230>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003c1e:	4b13      	ldr	r3, [pc, #76]	; (8003c6c <HAL_UART_MspInit+0x230>)
 8003c20:	2200      	movs	r2, #0
 8003c22:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003c24:	4811      	ldr	r0, [pc, #68]	; (8003c6c <HAL_UART_MspInit+0x230>)
 8003c26:	f001 f853 	bl	8004cd0 <HAL_DMA_Init>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d001      	beq.n	8003c34 <HAL_UART_MspInit+0x1f8>
      Error_Handler();
 8003c30:	f7ff fbfc 	bl	800342c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a0d      	ldr	r2, [pc, #52]	; (8003c6c <HAL_UART_MspInit+0x230>)
 8003c38:	66da      	str	r2, [r3, #108]	; 0x6c
 8003c3a:	4a0c      	ldr	r2, [pc, #48]	; (8003c6c <HAL_UART_MspInit+0x230>)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003c40:	bf00      	nop
 8003c42:	3738      	adds	r7, #56	; 0x38
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	40004c00 	.word	0x40004c00
 8003c4c:	40023800 	.word	0x40023800
 8003c50:	40020c00 	.word	0x40020c00
 8003c54:	40005000 	.word	0x40005000
 8003c58:	40020400 	.word	0x40020400
 8003c5c:	200049dc 	.word	0x200049dc
 8003c60:	40026010 	.word	0x40026010
 8003c64:	40004400 	.word	0x40004400
 8003c68:	40020000 	.word	0x40020000
 8003c6c:	20004540 	.word	0x20004540
 8003c70:	40026088 	.word	0x40026088

08003c74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8003c78:	f004 fab4 	bl	80081e4 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003c7c:	bf00      	nop
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	SetRGB(250, 250, 250);
 8003c84:	22fa      	movs	r2, #250	; 0xfa
 8003c86:	21fa      	movs	r1, #250	; 0xfa
 8003c88:	20fa      	movs	r0, #250	; 0xfa
 8003c8a:	f7fd fa11 	bl	80010b0 <SetRGB>
	HAL_Delay(5000);
 8003c8e:	f241 3088 	movw	r0, #5000	; 0x1388
 8003c92:	f000 fa2b 	bl	80040ec <HAL_Delay>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c96:	e7fe      	b.n	8003c96 <HardFault_Handler+0x16>

08003c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	SetRGB(250, 250, 0);
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	21fa      	movs	r1, #250	; 0xfa
 8003ca0:	20fa      	movs	r0, #250	; 0xfa
 8003ca2:	f7fd fa05 	bl	80010b0 <SetRGB>
	HAL_Delay(5000);
 8003ca6:	f241 3088 	movw	r0, #5000	; 0x1388
 8003caa:	f000 fa1f 	bl	80040ec <HAL_Delay>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003cae:	e7fe      	b.n	8003cae <MemManage_Handler+0x16>

08003cb0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	SetRGB(250, 250, 0);
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	21fa      	movs	r1, #250	; 0xfa
 8003cb8:	20fa      	movs	r0, #250	; 0xfa
 8003cba:	f7fd f9f9 	bl	80010b0 <SetRGB>
	HAL_Delay(5000);
 8003cbe:	f241 3088 	movw	r0, #5000	; 0x1388
 8003cc2:	f000 fa13 	bl	80040ec <HAL_Delay>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003cc6:	e7fe      	b.n	8003cc6 <BusFault_Handler+0x16>

08003cc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	SetRGB(250, 250, 0);
 8003ccc:	2200      	movs	r2, #0
 8003cce:	21fa      	movs	r1, #250	; 0xfa
 8003cd0:	20fa      	movs	r0, #250	; 0xfa
 8003cd2:	f7fd f9ed 	bl	80010b0 <SetRGB>
	HAL_Delay(5000);
 8003cd6:	f241 3088 	movw	r0, #5000	; 0x1388
 8003cda:	f000 fa07 	bl	80040ec <HAL_Delay>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003cde:	e7fe      	b.n	8003cde <UsageFault_Handler+0x16>

08003ce0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ce4:	bf00      	nop
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr

08003cee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003cee:	b480      	push	{r7}
 8003cf0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003cf2:	bf00      	nop
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d00:	bf00      	nop
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr

08003d0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d0a:	b580      	push	{r7, lr}
 8003d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d0e:	f000 f9cd 	bl	80040ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d12:	bf00      	nop
 8003d14:	bd80      	pop	{r7, pc}

08003d16 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8003d16:	b580      	push	{r7, lr}
 8003d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8003d1a:	f001 fb71 	bl	8005400 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8003d1e:	bf00      	nop
 8003d20:	bd80      	pop	{r7, pc}
	...

08003d24 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8003d28:	4802      	ldr	r0, [pc, #8]	; (8003d34 <DMA1_Stream0_IRQHandler+0x10>)
 8003d2a:	f001 f901 	bl	8004f30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003d2e:	bf00      	nop
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	200049dc 	.word	0x200049dc

08003d38 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003d3c:	4802      	ldr	r0, [pc, #8]	; (8003d48 <DMA1_Stream5_IRQHandler+0x10>)
 8003d3e:	f001 f8f7 	bl	8004f30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003d42:	bf00      	nop
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	20004540 	.word	0x20004540

08003d4c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003d50:	4802      	ldr	r0, [pc, #8]	; (8003d5c <ADC_IRQHandler+0x10>)
 8003d52:	f000 faf1 	bl	8004338 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003d56:	bf00      	nop
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	20004778 	.word	0x20004778

08003d60 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003d64:	4802      	ldr	r0, [pc, #8]	; (8003d70 <I2C1_EV_IRQHandler+0x10>)
 8003d66:	f002 f8ff 	bl	8005f68 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003d6a:	bf00      	nop
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	200045e0 	.word	0x200045e0

08003d74 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003d78:	4802      	ldr	r0, [pc, #8]	; (8003d84 <UART4_IRQHandler+0x10>)
 8003d7a:	f007 f927 	bl	800afcc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003d7e:	bf00      	nop
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	20004838 	.word	0x20004838

08003d88 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8003d8c:	4802      	ldr	r0, [pc, #8]	; (8003d98 <UART5_IRQHandler+0x10>)
 8003d8e:	f007 f91d 	bl	800afcc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8003d92:	bf00      	nop
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	200046f0 	.word	0x200046f0

08003d9c <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 8003da0:	4802      	ldr	r0, [pc, #8]	; (8003dac <QUADSPI_IRQHandler+0x10>)
 8003da2:	f002 ff83 	bl	8006cac <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 8003da6:	bf00      	nop
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	20004a58 	.word	0x20004a58

08003db0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003db8:	4b11      	ldr	r3, [pc, #68]	; (8003e00 <_sbrk+0x50>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d102      	bne.n	8003dc6 <_sbrk+0x16>
		heap_end = &end;
 8003dc0:	4b0f      	ldr	r3, [pc, #60]	; (8003e00 <_sbrk+0x50>)
 8003dc2:	4a10      	ldr	r2, [pc, #64]	; (8003e04 <_sbrk+0x54>)
 8003dc4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003dc6:	4b0e      	ldr	r3, [pc, #56]	; (8003e00 <_sbrk+0x50>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003dcc:	4b0c      	ldr	r3, [pc, #48]	; (8003e00 <_sbrk+0x50>)
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4413      	add	r3, r2
 8003dd4:	466a      	mov	r2, sp
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d907      	bls.n	8003dea <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003dda:	f00c f85b 	bl	800fe94 <__errno>
 8003dde:	4602      	mov	r2, r0
 8003de0:	230c      	movs	r3, #12
 8003de2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003de4:	f04f 33ff 	mov.w	r3, #4294967295
 8003de8:	e006      	b.n	8003df8 <_sbrk+0x48>
	}

	heap_end += incr;
 8003dea:	4b05      	ldr	r3, [pc, #20]	; (8003e00 <_sbrk+0x50>)
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4413      	add	r3, r2
 8003df2:	4a03      	ldr	r2, [pc, #12]	; (8003e00 <_sbrk+0x50>)
 8003df4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003df6:	68fb      	ldr	r3, [r7, #12]
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3710      	adds	r7, #16
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	200010f0 	.word	0x200010f0
 8003e04:	20004ad8 	.word	0x20004ad8

08003e08 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003e0c:	4b08      	ldr	r3, [pc, #32]	; (8003e30 <SystemInit+0x28>)
 8003e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e12:	4a07      	ldr	r2, [pc, #28]	; (8003e30 <SystemInit+0x28>)
 8003e14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003e1c:	4b04      	ldr	r3, [pc, #16]	; (8003e30 <SystemInit+0x28>)
 8003e1e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003e22:	609a      	str	r2, [r3, #8]
#endif
}
 8003e24:	bf00      	nop
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop
 8003e30:	e000ed00 	.word	0xe000ed00

08003e34 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = 0; //STA_NOINIT;
 8003e3e:	4b06      	ldr	r3, [pc, #24]	; (8003e58 <USER_initialize+0x24>)
 8003e40:	2200      	movs	r2, #0
 8003e42:	701a      	strb	r2, [r3, #0]
//	{       Stat &= ~STA_NOINIT;
//	}
//	else
//	{      // printf("DISK IO INIT ERROR \n");
//	}
    return Stat;
 8003e44:	4b04      	ldr	r3, [pc, #16]	; (8003e58 <USER_initialize+0x24>)
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	370c      	adds	r7, #12
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	20000034 	.word	0x20000034

08003e5c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	4603      	mov	r3, r0
 8003e64:	71fb      	strb	r3, [r7, #7]
//      {
//        return HAL_ERROR;
//      }
//  }

  Stat = STA_NOINIT;
 8003e66:	4b0a      	ldr	r3, [pc, #40]	; (8003e90 <USER_status+0x34>)
 8003e68:	2201      	movs	r2, #1
 8003e6a:	701a      	strb	r2, [r3, #0]
  Stat &= ~STA_NOINIT;
 8003e6c:	4b08      	ldr	r3, [pc, #32]	; (8003e90 <USER_status+0x34>)
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	f023 0301 	bic.w	r3, r3, #1
 8003e76:	b2da      	uxtb	r2, r3
 8003e78:	4b05      	ldr	r3, [pc, #20]	; (8003e90 <USER_status+0x34>)
 8003e7a:	701a      	strb	r2, [r3, #0]
  	return Stat;
 8003e7c:	4b04      	ldr	r3, [pc, #16]	; (8003e90 <USER_status+0x34>)
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	370c      	adds	r7, #12
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	20000034 	.word	0x20000034

08003e94 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b086      	sub	sp, #24
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60b9      	str	r1, [r7, #8]
 8003e9c:	607a      	str	r2, [r7, #4]
 8003e9e:	603b      	str	r3, [r7, #0]
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    	uint32_t SecAdd = sector * SECTOR_SIZE;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	031b      	lsls	r3, r3, #12
 8003ea8:	617b      	str	r3, [r7, #20]
	uint32_t Size = count * SECTOR_SIZE;
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	031b      	lsls	r3, r3, #12
 8003eae:	613b      	str	r3, [r7, #16]
//uint8_t QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)        
	if(QSPI_Read((uint8_t*)buff, (uint32_t)SecAdd, (uint32_t) Size ) ==  HAL_OK)
 8003eb0:	693a      	ldr	r2, [r7, #16]
 8003eb2:	6979      	ldr	r1, [r7, #20]
 8003eb4:	68b8      	ldr	r0, [r7, #8]
 8003eb6:	f7fc fde5 	bl	8000a84 <QSPI_Read>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d101      	bne.n	8003ec4 <USER_read+0x30>
	{       return RES_OK;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	e000      	b.n	8003ec6 <USER_read+0x32>
	}
	else
	{       //printf("DISK Read Error \n");
		return RES_ERROR;
 8003ec4:	2301      	movs	r3, #1
	}
  /* USER CODE END READ */
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3718      	adds	r7, #24
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
	...

08003ed0 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b086      	sub	sp, #24
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	60b9      	str	r1, [r7, #8]
 8003ed8:	607a      	str	r2, [r7, #4]
 8003eda:	603b      	str	r3, [r7, #0]
 8003edc:	4603      	mov	r3, r0
 8003ede:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
	DSector = sector;
 8003ee0:	4a1a      	ldr	r2, [pc, #104]	; (8003f4c <USER_write+0x7c>)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6013      	str	r3, [r2, #0]
	SecAdd = sector * SECTOR_SIZE;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	031b      	lsls	r3, r3, #12
 8003eea:	4a19      	ldr	r2, [pc, #100]	; (8003f50 <USER_write+0x80>)
 8003eec:	6013      	str	r3, [r2, #0]
	Size = count * SECTOR_SIZE;
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	031b      	lsls	r3, r3, #12
 8003ef2:	4a18      	ldr	r2, [pc, #96]	; (8003f54 <USER_write+0x84>)
 8003ef4:	6013      	str	r3, [r2, #0]
	for(uint16_t i = 0; i< count; i++)
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	82fb      	strh	r3, [r7, #22]
 8003efa:	e010      	b.n	8003f1e <USER_write+0x4e>
	{       if(QSPI_Erase_Sector4K(SecAdd + (i * SECTOR_SIZE)) != HAL_OK)
 8003efc:	8afb      	ldrh	r3, [r7, #22]
 8003efe:	031b      	lsls	r3, r3, #12
 8003f00:	461a      	mov	r2, r3
 8003f02:	4b13      	ldr	r3, [pc, #76]	; (8003f50 <USER_write+0x80>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4413      	add	r3, r2
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f7fc fce9 	bl	80008e0 <QSPI_Erase_Sector4K>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d001      	beq.n	8003f18 <USER_write+0x48>
		{	// printf("DISK IO ERASE FAIL \n");
			return RES_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e014      	b.n	8003f42 <USER_write+0x72>
	for(uint16_t i = 0; i< count; i++)
 8003f18:	8afb      	ldrh	r3, [r7, #22]
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	82fb      	strh	r3, [r7, #22]
 8003f1e:	8afb      	ldrh	r3, [r7, #22]
 8003f20:	683a      	ldr	r2, [r7, #0]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d8ea      	bhi.n	8003efc <USER_write+0x2c>
		}
	}
     
	if(QSPI_Write((uint8_t *)buff, SecAdd, Size) != HAL_OK)
 8003f26:	4b0a      	ldr	r3, [pc, #40]	; (8003f50 <USER_write+0x80>)
 8003f28:	6819      	ldr	r1, [r3, #0]
 8003f2a:	4b0a      	ldr	r3, [pc, #40]	; (8003f54 <USER_write+0x84>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	461a      	mov	r2, r3
 8003f30:	68b8      	ldr	r0, [r7, #8]
 8003f32:	f7fc fd17 	bl	8000964 <QSPI_Write>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d001      	beq.n	8003f40 <USER_write+0x70>
	{       // printf("DISK IO WRITE FAIL \n");
		return RES_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e000      	b.n	8003f42 <USER_write+0x72>
	}
  /* USER CODE HERE */
    return RES_OK;
 8003f40:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3718      	adds	r7, #24
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	20004aac 	.word	0x20004aac
 8003f50:	20004aa4 	.word	0x20004aa4
 8003f54:	20004aa8 	.word	0x20004aa8

08003f58 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b085      	sub	sp, #20
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	4603      	mov	r3, r0
 8003f60:	603a      	str	r2, [r7, #0]
 8003f62:	71fb      	strb	r3, [r7, #7]
 8003f64:	460b      	mov	r3, r1
 8003f66:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	73fb      	strb	r3, [r7, #15]
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003f6c:	4b1b      	ldr	r3, [pc, #108]	; (8003fdc <USER_ioctl+0x84>)
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	f003 0301 	and.w	r3, r3, #1
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d001      	beq.n	8003f7e <USER_ioctl+0x26>
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e027      	b.n	8003fce <USER_ioctl+0x76>
  
  switch (cmd)
 8003f7e:	79bb      	ldrb	r3, [r7, #6]
 8003f80:	2b03      	cmp	r3, #3
 8003f82:	d821      	bhi.n	8003fc8 <USER_ioctl+0x70>
 8003f84:	a201      	add	r2, pc, #4	; (adr r2, 8003f8c <USER_ioctl+0x34>)
 8003f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f8a:	bf00      	nop
 8003f8c:	08003f9d 	.word	0x08003f9d
 8003f90:	08003fa3 	.word	0x08003fa3
 8003f94:	08003fb1 	.word	0x08003fb1
 8003f98:	08003fbf 	.word	0x08003fbf
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	73fb      	strb	r3, [r7, #15]
    break;
 8003fa0:	e014      	b.n	8003fcc <USER_ioctl+0x74>
  
  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    *(DWORD*)buff = 4096; //SDRAM_DEVICE_SIZE / BLOCK_SIZE;
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003fa8:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8003faa:	2300      	movs	r3, #0
 8003fac:	73fb      	strb	r3, [r7, #15]
    break;
 8003fae:	e00d      	b.n	8003fcc <USER_ioctl+0x74>
  
  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    *(WORD*)buff = SECTOR_SIZE;
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003fb6:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	73fb      	strb	r3, [r7, #15]
    break;
 8003fbc:	e006      	b.n	8003fcc <USER_ioctl+0x74>
  
  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    *(DWORD*)buff = SECTOR_SIZE;
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003fc4:	601a      	str	r2, [r3, #0]
    break;
 8003fc6:	e001      	b.n	8003fcc <USER_ioctl+0x74>
  
  default:
    res = RES_PARERR;
 8003fc8:	2304      	movs	r3, #4
 8003fca:	73fb      	strb	r3, [r7, #15]
  }
	return res;
 8003fcc:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3714      	adds	r7, #20
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	20000034 	.word	0x20000034

08003fe0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003fe0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004018 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003fe4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003fe6:	e003      	b.n	8003ff0 <LoopCopyDataInit>

08003fe8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003fe8:	4b0c      	ldr	r3, [pc, #48]	; (800401c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003fea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003fec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003fee:	3104      	adds	r1, #4

08003ff0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003ff0:	480b      	ldr	r0, [pc, #44]	; (8004020 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003ff2:	4b0c      	ldr	r3, [pc, #48]	; (8004024 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003ff4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003ff6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003ff8:	d3f6      	bcc.n	8003fe8 <CopyDataInit>
  ldr  r2, =_sbss
 8003ffa:	4a0b      	ldr	r2, [pc, #44]	; (8004028 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003ffc:	e002      	b.n	8004004 <LoopFillZerobss>

08003ffe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003ffe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004000:	f842 3b04 	str.w	r3, [r2], #4

08004004 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004004:	4b09      	ldr	r3, [pc, #36]	; (800402c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004006:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004008:	d3f9      	bcc.n	8003ffe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800400a:	f7ff fefd 	bl	8003e08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800400e:	f00b ff47 	bl	800fea0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004012:	f7fe fabd 	bl	8002590 <main>
  bx  lr    
 8004016:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004018:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800401c:	08014120 	.word	0x08014120
  ldr  r0, =_sdata
 8004020:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004024:	20000224 	.word	0x20000224
  ldr  r2, =_sbss
 8004028:	20000228 	.word	0x20000228
  ldr  r3, = _ebss
 800402c:	20004ad4 	.word	0x20004ad4

08004030 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004030:	e7fe      	b.n	8004030 <CAN1_RX0_IRQHandler>

08004032 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004032:	b580      	push	{r7, lr}
 8004034:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004036:	2003      	movs	r0, #3
 8004038:	f000 fe08 	bl	8004c4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800403c:	2000      	movs	r0, #0
 800403e:	f000 f805 	bl	800404c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8004042:	f7ff f9fb 	bl	800343c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	bd80      	pop	{r7, pc}

0800404c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004054:	4b12      	ldr	r3, [pc, #72]	; (80040a0 <HAL_InitTick+0x54>)
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	4b12      	ldr	r3, [pc, #72]	; (80040a4 <HAL_InitTick+0x58>)
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	4619      	mov	r1, r3
 800405e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004062:	fbb3 f3f1 	udiv	r3, r3, r1
 8004066:	fbb2 f3f3 	udiv	r3, r2, r3
 800406a:	4618      	mov	r0, r3
 800406c:	f000 fe23 	bl	8004cb6 <HAL_SYSTICK_Config>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d001      	beq.n	800407a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e00e      	b.n	8004098 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2b0f      	cmp	r3, #15
 800407e:	d80a      	bhi.n	8004096 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004080:	2200      	movs	r2, #0
 8004082:	6879      	ldr	r1, [r7, #4]
 8004084:	f04f 30ff 	mov.w	r0, #4294967295
 8004088:	f000 fdeb 	bl	8004c62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800408c:	4a06      	ldr	r2, [pc, #24]	; (80040a8 <HAL_InitTick+0x5c>)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004092:	2300      	movs	r3, #0
 8004094:	e000      	b.n	8004098 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
}
 8004098:	4618      	mov	r0, r3
 800409a:	3708      	adds	r7, #8
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	20000030 	.word	0x20000030
 80040a4:	20000050 	.word	0x20000050
 80040a8:	2000004c 	.word	0x2000004c

080040ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80040ac:	b480      	push	{r7}
 80040ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80040b0:	4b06      	ldr	r3, [pc, #24]	; (80040cc <HAL_IncTick+0x20>)
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	461a      	mov	r2, r3
 80040b6:	4b06      	ldr	r3, [pc, #24]	; (80040d0 <HAL_IncTick+0x24>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4413      	add	r3, r2
 80040bc:	4a04      	ldr	r2, [pc, #16]	; (80040d0 <HAL_IncTick+0x24>)
 80040be:	6013      	str	r3, [r2, #0]
}
 80040c0:	bf00      	nop
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	20000050 	.word	0x20000050
 80040d0:	20004ab0 	.word	0x20004ab0

080040d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80040d4:	b480      	push	{r7}
 80040d6:	af00      	add	r7, sp, #0
  return uwTick;
 80040d8:	4b03      	ldr	r3, [pc, #12]	; (80040e8 <HAL_GetTick+0x14>)
 80040da:	681b      	ldr	r3, [r3, #0]
}
 80040dc:	4618      	mov	r0, r3
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	20004ab0 	.word	0x20004ab0

080040ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80040f4:	f7ff ffee 	bl	80040d4 <HAL_GetTick>
 80040f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004104:	d005      	beq.n	8004112 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004106:	4b09      	ldr	r3, [pc, #36]	; (800412c <HAL_Delay+0x40>)
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	461a      	mov	r2, r3
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	4413      	add	r3, r2
 8004110:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004112:	bf00      	nop
 8004114:	f7ff ffde 	bl	80040d4 <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	68fa      	ldr	r2, [r7, #12]
 8004120:	429a      	cmp	r2, r3
 8004122:	d8f7      	bhi.n	8004114 <HAL_Delay+0x28>
  {
  }
}
 8004124:	bf00      	nop
 8004126:	3710      	adds	r7, #16
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}
 800412c:	20000050 	.word	0x20000050

08004130 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004138:	2300      	movs	r3, #0
 800413a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d101      	bne.n	8004146 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e031      	b.n	80041aa <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414a:	2b00      	cmp	r3, #0
 800414c:	d109      	bne.n	8004162 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f7ff f99e 	bl	8003490 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004166:	f003 0310 	and.w	r3, r3, #16
 800416a:	2b00      	cmp	r3, #0
 800416c:	d116      	bne.n	800419c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004172:	4b10      	ldr	r3, [pc, #64]	; (80041b4 <HAL_ADC_Init+0x84>)
 8004174:	4013      	ands	r3, r2
 8004176:	f043 0202 	orr.w	r2, r3, #2
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 fb90 	bl	80048a4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418e:	f023 0303 	bic.w	r3, r3, #3
 8004192:	f043 0201 	orr.w	r2, r3, #1
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	641a      	str	r2, [r3, #64]	; 0x40
 800419a:	e001      	b.n	80041a0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80041a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3710      	adds	r7, #16
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	ffffeefd 	.word	0xffffeefd

080041b8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b085      	sub	sp, #20
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80041c0:	2300      	movs	r3, #0
 80041c2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d101      	bne.n	80041d2 <HAL_ADC_Start+0x1a>
 80041ce:	2302      	movs	r3, #2
 80041d0:	e0a0      	b.n	8004314 <HAL_ADC_Start+0x15c>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2201      	movs	r2, #1
 80041d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	f003 0301 	and.w	r3, r3, #1
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d018      	beq.n	800421a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	689a      	ldr	r2, [r3, #8]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f042 0201 	orr.w	r2, r2, #1
 80041f6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80041f8:	4b49      	ldr	r3, [pc, #292]	; (8004320 <HAL_ADC_Start+0x168>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a49      	ldr	r2, [pc, #292]	; (8004324 <HAL_ADC_Start+0x16c>)
 80041fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004202:	0c9a      	lsrs	r2, r3, #18
 8004204:	4613      	mov	r3, r2
 8004206:	005b      	lsls	r3, r3, #1
 8004208:	4413      	add	r3, r2
 800420a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800420c:	e002      	b.n	8004214 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	3b01      	subs	r3, #1
 8004212:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d1f9      	bne.n	800420e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	f003 0301 	and.w	r3, r3, #1
 8004224:	2b01      	cmp	r3, #1
 8004226:	d174      	bne.n	8004312 <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800422c:	4b3e      	ldr	r3, [pc, #248]	; (8004328 <HAL_ADC_Start+0x170>)
 800422e:	4013      	ands	r3, r2
 8004230:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004242:	2b00      	cmp	r3, #0
 8004244:	d007      	beq.n	8004256 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800424e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800425e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004262:	d106      	bne.n	8004272 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004268:	f023 0206 	bic.w	r2, r3, #6
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	645a      	str	r2, [r3, #68]	; 0x44
 8004270:	e002      	b.n	8004278 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004288:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800428a:	4b28      	ldr	r3, [pc, #160]	; (800432c <HAL_ADC_Start+0x174>)
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	f003 031f 	and.w	r3, r3, #31
 8004292:	2b00      	cmp	r3, #0
 8004294:	d10f      	bne.n	80042b6 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d136      	bne.n	8004312 <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	689a      	ldr	r2, [r3, #8]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80042b2:	609a      	str	r2, [r3, #8]
 80042b4:	e02d      	b.n	8004312 <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a1d      	ldr	r2, [pc, #116]	; (8004330 <HAL_ADC_Start+0x178>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d10e      	bne.n	80042de <HAL_ADC_Start+0x126>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d107      	bne.n	80042de <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	689a      	ldr	r2, [r3, #8]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80042dc:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80042de:	4b13      	ldr	r3, [pc, #76]	; (800432c <HAL_ADC_Start+0x174>)
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	f003 0310 	and.w	r3, r3, #16
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d113      	bne.n	8004312 <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a11      	ldr	r2, [pc, #68]	; (8004334 <HAL_ADC_Start+0x17c>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d10e      	bne.n	8004312 <HAL_ADC_Start+0x15a>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d107      	bne.n	8004312 <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	689a      	ldr	r2, [r3, #8]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004310:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8004312:	2300      	movs	r3, #0
}
 8004314:	4618      	mov	r0, r3
 8004316:	3714      	adds	r7, #20
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr
 8004320:	20000030 	.word	0x20000030
 8004324:	431bde83 	.word	0x431bde83
 8004328:	fffff8fe 	.word	0xfffff8fe
 800432c:	40012300 	.word	0x40012300
 8004330:	40012000 	.word	0x40012000
 8004334:	40012200 	.word	0x40012200

08004338 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8004340:	2300      	movs	r3, #0
 8004342:	60fb      	str	r3, [r7, #12]
 8004344:	2300      	movs	r3, #0
 8004346:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0302 	and.w	r3, r3, #2
 8004352:	2b02      	cmp	r3, #2
 8004354:	bf0c      	ite	eq
 8004356:	2301      	moveq	r3, #1
 8004358:	2300      	movne	r3, #0
 800435a:	b2db      	uxtb	r3, r3
 800435c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f003 0320 	and.w	r3, r3, #32
 8004368:	2b20      	cmp	r3, #32
 800436a:	bf0c      	ite	eq
 800436c:	2301      	moveq	r3, #1
 800436e:	2300      	movne	r3, #0
 8004370:	b2db      	uxtb	r3, r3
 8004372:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d049      	beq.n	800440e <HAL_ADC_IRQHandler+0xd6>
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d046      	beq.n	800440e <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004384:	f003 0310 	and.w	r3, r3, #16
 8004388:	2b00      	cmp	r3, #0
 800438a:	d105      	bne.n	8004398 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004390:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d12b      	bne.n	80043fe <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d127      	bne.n	80043fe <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d006      	beq.n	80043ca <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d119      	bne.n	80043fe <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	685a      	ldr	r2, [r3, #4]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f022 0220 	bic.w	r2, r2, #32
 80043d8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d105      	bne.n	80043fe <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f6:	f043 0201 	orr.w	r2, r3, #1
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 f8e8 	bl	80045d4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f06f 0212 	mvn.w	r2, #18
 800440c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 0304 	and.w	r3, r3, #4
 8004418:	2b04      	cmp	r3, #4
 800441a:	bf0c      	ite	eq
 800441c:	2301      	moveq	r3, #1
 800441e:	2300      	movne	r3, #0
 8004420:	b2db      	uxtb	r3, r3
 8004422:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800442e:	2b80      	cmp	r3, #128	; 0x80
 8004430:	bf0c      	ite	eq
 8004432:	2301      	moveq	r3, #1
 8004434:	2300      	movne	r3, #0
 8004436:	b2db      	uxtb	r3, r3
 8004438:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d057      	beq.n	80044f0 <HAL_ADC_IRQHandler+0x1b8>
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d054      	beq.n	80044f0 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444a:	f003 0310 	and.w	r3, r3, #16
 800444e:	2b00      	cmp	r3, #0
 8004450:	d105      	bne.n	800445e <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004456:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d139      	bne.n	80044e0 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004472:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004476:	2b00      	cmp	r3, #0
 8004478:	d006      	beq.n	8004488 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8004484:	2b00      	cmp	r3, #0
 8004486:	d12b      	bne.n	80044e0 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8004492:	2b00      	cmp	r3, #0
 8004494:	d124      	bne.n	80044e0 <HAL_ADC_IRQHandler+0x1a8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d11d      	bne.n	80044e0 <HAL_ADC_IRQHandler+0x1a8>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d119      	bne.n	80044e0 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	685a      	ldr	r2, [r3, #4]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044ba:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d105      	bne.n	80044e0 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d8:	f043 0201 	orr.w	r2, r3, #1
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f000 fad9 	bl	8004a98 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f06f 020c 	mvn.w	r2, #12
 80044ee:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0301 	and.w	r3, r3, #1
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	bf0c      	ite	eq
 80044fe:	2301      	moveq	r3, #1
 8004500:	2300      	movne	r3, #0
 8004502:	b2db      	uxtb	r3, r3
 8004504:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004510:	2b40      	cmp	r3, #64	; 0x40
 8004512:	bf0c      	ite	eq
 8004514:	2301      	moveq	r3, #1
 8004516:	2300      	movne	r3, #0
 8004518:	b2db      	uxtb	r3, r3
 800451a:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d017      	beq.n	8004552 <HAL_ADC_IRQHandler+0x21a>
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d014      	beq.n	8004552 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0301 	and.w	r3, r3, #1
 8004532:	2b01      	cmp	r3, #1
 8004534:	d10d      	bne.n	8004552 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 f850 	bl	80045e8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f06f 0201 	mvn.w	r2, #1
 8004550:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0320 	and.w	r3, r3, #32
 800455c:	2b20      	cmp	r3, #32
 800455e:	bf0c      	ite	eq
 8004560:	2301      	moveq	r3, #1
 8004562:	2300      	movne	r3, #0
 8004564:	b2db      	uxtb	r3, r3
 8004566:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004572:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004576:	bf0c      	ite	eq
 8004578:	2301      	moveq	r3, #1
 800457a:	2300      	movne	r3, #0
 800457c:	b2db      	uxtb	r3, r3
 800457e:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d015      	beq.n	80045b2 <HAL_ADC_IRQHandler+0x27a>
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d012      	beq.n	80045b2 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004590:	f043 0202 	orr.w	r2, r3, #2
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f06f 0220 	mvn.w	r2, #32
 80045a0:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 f82a 	bl	80045fc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f06f 0220 	mvn.w	r2, #32
 80045b0:	601a      	str	r2, [r3, #0]
  }
}
 80045b2:	bf00      	nop
 80045b4:	3710      	adds	r7, #16
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}

080045ba <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80045ba:	b480      	push	{r7}
 80045bc:	b083      	sub	sp, #12
 80045be:	af00      	add	r7, sp, #0
 80045c0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80045dc:	bf00      	nop
 80045de:	370c      	adds	r7, #12
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80045f0:	bf00      	nop
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004604:	bf00      	nop
 8004606:	370c      	adds	r7, #12
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004610:	b480      	push	{r7}
 8004612:	b085      	sub	sp, #20
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800461a:	2300      	movs	r3, #0
 800461c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004624:	2b01      	cmp	r3, #1
 8004626:	d101      	bne.n	800462c <HAL_ADC_ConfigChannel+0x1c>
 8004628:	2302      	movs	r3, #2
 800462a:	e12a      	b.n	8004882 <HAL_ADC_ConfigChannel+0x272>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2b09      	cmp	r3, #9
 800463a:	d93a      	bls.n	80046b2 <HAL_ADC_ConfigChannel+0xa2>
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004644:	d035      	beq.n	80046b2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68d9      	ldr	r1, [r3, #12]
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	b29b      	uxth	r3, r3
 8004652:	461a      	mov	r2, r3
 8004654:	4613      	mov	r3, r2
 8004656:	005b      	lsls	r3, r3, #1
 8004658:	4413      	add	r3, r2
 800465a:	3b1e      	subs	r3, #30
 800465c:	2207      	movs	r2, #7
 800465e:	fa02 f303 	lsl.w	r3, r2, r3
 8004662:	43da      	mvns	r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	400a      	ands	r2, r1
 800466a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a87      	ldr	r2, [pc, #540]	; (8004890 <HAL_ADC_ConfigChannel+0x280>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d10a      	bne.n	800468c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68d9      	ldr	r1, [r3, #12]
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	061a      	lsls	r2, r3, #24
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	430a      	orrs	r2, r1
 8004688:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800468a:	e035      	b.n	80046f8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68d9      	ldr	r1, [r3, #12]
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	689a      	ldr	r2, [r3, #8]
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	b29b      	uxth	r3, r3
 800469c:	4618      	mov	r0, r3
 800469e:	4603      	mov	r3, r0
 80046a0:	005b      	lsls	r3, r3, #1
 80046a2:	4403      	add	r3, r0
 80046a4:	3b1e      	subs	r3, #30
 80046a6:	409a      	lsls	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	430a      	orrs	r2, r1
 80046ae:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80046b0:	e022      	b.n	80046f8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	6919      	ldr	r1, [r3, #16]
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	b29b      	uxth	r3, r3
 80046be:	461a      	mov	r2, r3
 80046c0:	4613      	mov	r3, r2
 80046c2:	005b      	lsls	r3, r3, #1
 80046c4:	4413      	add	r3, r2
 80046c6:	2207      	movs	r2, #7
 80046c8:	fa02 f303 	lsl.w	r3, r2, r3
 80046cc:	43da      	mvns	r2, r3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	400a      	ands	r2, r1
 80046d4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	6919      	ldr	r1, [r3, #16]
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	689a      	ldr	r2, [r3, #8]
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	4618      	mov	r0, r3
 80046e8:	4603      	mov	r3, r0
 80046ea:	005b      	lsls	r3, r3, #1
 80046ec:	4403      	add	r3, r0
 80046ee:	409a      	lsls	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	430a      	orrs	r2, r1
 80046f6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	2b06      	cmp	r3, #6
 80046fe:	d824      	bhi.n	800474a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	685a      	ldr	r2, [r3, #4]
 800470a:	4613      	mov	r3, r2
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	4413      	add	r3, r2
 8004710:	3b05      	subs	r3, #5
 8004712:	221f      	movs	r2, #31
 8004714:	fa02 f303 	lsl.w	r3, r2, r3
 8004718:	43da      	mvns	r2, r3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	400a      	ands	r2, r1
 8004720:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	b29b      	uxth	r3, r3
 800472e:	4618      	mov	r0, r3
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	685a      	ldr	r2, [r3, #4]
 8004734:	4613      	mov	r3, r2
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	4413      	add	r3, r2
 800473a:	3b05      	subs	r3, #5
 800473c:	fa00 f203 	lsl.w	r2, r0, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	430a      	orrs	r2, r1
 8004746:	635a      	str	r2, [r3, #52]	; 0x34
 8004748:	e04c      	b.n	80047e4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	2b0c      	cmp	r3, #12
 8004750:	d824      	bhi.n	800479c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	685a      	ldr	r2, [r3, #4]
 800475c:	4613      	mov	r3, r2
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	4413      	add	r3, r2
 8004762:	3b23      	subs	r3, #35	; 0x23
 8004764:	221f      	movs	r2, #31
 8004766:	fa02 f303 	lsl.w	r3, r2, r3
 800476a:	43da      	mvns	r2, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	400a      	ands	r2, r1
 8004772:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	b29b      	uxth	r3, r3
 8004780:	4618      	mov	r0, r3
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	685a      	ldr	r2, [r3, #4]
 8004786:	4613      	mov	r3, r2
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	4413      	add	r3, r2
 800478c:	3b23      	subs	r3, #35	; 0x23
 800478e:	fa00 f203 	lsl.w	r2, r0, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	430a      	orrs	r2, r1
 8004798:	631a      	str	r2, [r3, #48]	; 0x30
 800479a:	e023      	b.n	80047e4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	685a      	ldr	r2, [r3, #4]
 80047a6:	4613      	mov	r3, r2
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	4413      	add	r3, r2
 80047ac:	3b41      	subs	r3, #65	; 0x41
 80047ae:	221f      	movs	r2, #31
 80047b0:	fa02 f303 	lsl.w	r3, r2, r3
 80047b4:	43da      	mvns	r2, r3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	400a      	ands	r2, r1
 80047bc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	4618      	mov	r0, r3
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	685a      	ldr	r2, [r3, #4]
 80047d0:	4613      	mov	r3, r2
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	4413      	add	r3, r2
 80047d6:	3b41      	subs	r3, #65	; 0x41
 80047d8:	fa00 f203 	lsl.w	r2, r0, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	430a      	orrs	r2, r1
 80047e2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a2a      	ldr	r2, [pc, #168]	; (8004894 <HAL_ADC_ConfigChannel+0x284>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d10a      	bne.n	8004804 <HAL_ADC_ConfigChannel+0x1f4>
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047f6:	d105      	bne.n	8004804 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80047f8:	4b27      	ldr	r3, [pc, #156]	; (8004898 <HAL_ADC_ConfigChannel+0x288>)
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	4a26      	ldr	r2, [pc, #152]	; (8004898 <HAL_ADC_ConfigChannel+0x288>)
 80047fe:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8004802:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a22      	ldr	r2, [pc, #136]	; (8004894 <HAL_ADC_ConfigChannel+0x284>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d109      	bne.n	8004822 <HAL_ADC_ConfigChannel+0x212>
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2b12      	cmp	r3, #18
 8004814:	d105      	bne.n	8004822 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8004816:	4b20      	ldr	r3, [pc, #128]	; (8004898 <HAL_ADC_ConfigChannel+0x288>)
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	4a1f      	ldr	r2, [pc, #124]	; (8004898 <HAL_ADC_ConfigChannel+0x288>)
 800481c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004820:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a1b      	ldr	r2, [pc, #108]	; (8004894 <HAL_ADC_ConfigChannel+0x284>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d125      	bne.n	8004878 <HAL_ADC_ConfigChannel+0x268>
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a17      	ldr	r2, [pc, #92]	; (8004890 <HAL_ADC_ConfigChannel+0x280>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d003      	beq.n	800483e <HAL_ADC_ConfigChannel+0x22e>
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2b11      	cmp	r3, #17
 800483c:	d11c      	bne.n	8004878 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800483e:	4b16      	ldr	r3, [pc, #88]	; (8004898 <HAL_ADC_ConfigChannel+0x288>)
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	4a15      	ldr	r2, [pc, #84]	; (8004898 <HAL_ADC_ConfigChannel+0x288>)
 8004844:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004848:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a10      	ldr	r2, [pc, #64]	; (8004890 <HAL_ADC_ConfigChannel+0x280>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d111      	bne.n	8004878 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8004854:	4b11      	ldr	r3, [pc, #68]	; (800489c <HAL_ADC_ConfigChannel+0x28c>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a11      	ldr	r2, [pc, #68]	; (80048a0 <HAL_ADC_ConfigChannel+0x290>)
 800485a:	fba2 2303 	umull	r2, r3, r2, r3
 800485e:	0c9a      	lsrs	r2, r3, #18
 8004860:	4613      	mov	r3, r2
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	4413      	add	r3, r2
 8004866:	005b      	lsls	r3, r3, #1
 8004868:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800486a:	e002      	b.n	8004872 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	3b01      	subs	r3, #1
 8004870:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d1f9      	bne.n	800486c <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004880:	2300      	movs	r3, #0
}
 8004882:	4618      	mov	r0, r3
 8004884:	3714      	adds	r7, #20
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	10000012 	.word	0x10000012
 8004894:	40012000 	.word	0x40012000
 8004898:	40012300 	.word	0x40012300
 800489c:	20000030 	.word	0x20000030
 80048a0:	431bde83 	.word	0x431bde83

080048a4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80048ac:	4b78      	ldr	r3, [pc, #480]	; (8004a90 <ADC_Init+0x1ec>)
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	4a77      	ldr	r2, [pc, #476]	; (8004a90 <ADC_Init+0x1ec>)
 80048b2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80048b6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80048b8:	4b75      	ldr	r3, [pc, #468]	; (8004a90 <ADC_Init+0x1ec>)
 80048ba:	685a      	ldr	r2, [r3, #4]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	4973      	ldr	r1, [pc, #460]	; (8004a90 <ADC_Init+0x1ec>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	685a      	ldr	r2, [r3, #4]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	6859      	ldr	r1, [r3, #4]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	021a      	lsls	r2, r3, #8
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	430a      	orrs	r2, r1
 80048e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	685a      	ldr	r2, [r3, #4]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80048f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	6859      	ldr	r1, [r3, #4]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	689a      	ldr	r2, [r3, #8]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	430a      	orrs	r2, r1
 800490a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	689a      	ldr	r2, [r3, #8]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800491a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	6899      	ldr	r1, [r3, #8]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	68da      	ldr	r2, [r3, #12]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	430a      	orrs	r2, r1
 800492c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004932:	4a58      	ldr	r2, [pc, #352]	; (8004a94 <ADC_Init+0x1f0>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d022      	beq.n	800497e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	689a      	ldr	r2, [r3, #8]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004946:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	6899      	ldr	r1, [r3, #8]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	430a      	orrs	r2, r1
 8004958:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	689a      	ldr	r2, [r3, #8]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004968:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	6899      	ldr	r1, [r3, #8]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	430a      	orrs	r2, r1
 800497a:	609a      	str	r2, [r3, #8]
 800497c:	e00f      	b.n	800499e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	689a      	ldr	r2, [r3, #8]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800498c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	689a      	ldr	r2, [r3, #8]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800499c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	689a      	ldr	r2, [r3, #8]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f022 0202 	bic.w	r2, r2, #2
 80049ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	6899      	ldr	r1, [r3, #8]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	005a      	lsls	r2, r3, #1
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	430a      	orrs	r2, r1
 80049c0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d01b      	beq.n	8004a04 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	685a      	ldr	r2, [r3, #4]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049da:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	685a      	ldr	r2, [r3, #4]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80049ea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	6859      	ldr	r1, [r3, #4]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f6:	3b01      	subs	r3, #1
 80049f8:	035a      	lsls	r2, r3, #13
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	430a      	orrs	r2, r1
 8004a00:	605a      	str	r2, [r3, #4]
 8004a02:	e007      	b.n	8004a14 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	685a      	ldr	r2, [r3, #4]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a12:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004a22:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	69db      	ldr	r3, [r3, #28]
 8004a2e:	3b01      	subs	r3, #1
 8004a30:	051a      	lsls	r2, r3, #20
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	430a      	orrs	r2, r1
 8004a38:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	689a      	ldr	r2, [r3, #8]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004a48:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	6899      	ldr	r1, [r3, #8]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004a56:	025a      	lsls	r2, r3, #9
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	430a      	orrs	r2, r1
 8004a5e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	689a      	ldr	r2, [r3, #8]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a6e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	6899      	ldr	r1, [r3, #8]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	695b      	ldr	r3, [r3, #20]
 8004a7a:	029a      	lsls	r2, r3, #10
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	430a      	orrs	r2, r1
 8004a82:	609a      	str	r2, [r3, #8]
}
 8004a84:	bf00      	nop
 8004a86:	370c      	adds	r7, #12
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr
 8004a90:	40012300 	.word	0x40012300
 8004a94:	0f000001 	.word	0x0f000001

08004a98 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004aa0:	bf00      	nop
 8004aa2:	370c      	adds	r7, #12
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b085      	sub	sp, #20
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f003 0307 	and.w	r3, r3, #7
 8004aba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004abc:	4b0b      	ldr	r3, [pc, #44]	; (8004aec <__NVIC_SetPriorityGrouping+0x40>)
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ac2:	68ba      	ldr	r2, [r7, #8]
 8004ac4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004ac8:	4013      	ands	r3, r2
 8004aca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004ad4:	4b06      	ldr	r3, [pc, #24]	; (8004af0 <__NVIC_SetPriorityGrouping+0x44>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004ada:	4a04      	ldr	r2, [pc, #16]	; (8004aec <__NVIC_SetPriorityGrouping+0x40>)
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	60d3      	str	r3, [r2, #12]
}
 8004ae0:	bf00      	nop
 8004ae2:	3714      	adds	r7, #20
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr
 8004aec:	e000ed00 	.word	0xe000ed00
 8004af0:	05fa0000 	.word	0x05fa0000

08004af4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004af4:	b480      	push	{r7}
 8004af6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004af8:	4b04      	ldr	r3, [pc, #16]	; (8004b0c <__NVIC_GetPriorityGrouping+0x18>)
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	0a1b      	lsrs	r3, r3, #8
 8004afe:	f003 0307 	and.w	r3, r3, #7
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr
 8004b0c:	e000ed00 	.word	0xe000ed00

08004b10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	4603      	mov	r3, r0
 8004b18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	db0b      	blt.n	8004b3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b22:	79fb      	ldrb	r3, [r7, #7]
 8004b24:	f003 021f 	and.w	r2, r3, #31
 8004b28:	4907      	ldr	r1, [pc, #28]	; (8004b48 <__NVIC_EnableIRQ+0x38>)
 8004b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b2e:	095b      	lsrs	r3, r3, #5
 8004b30:	2001      	movs	r0, #1
 8004b32:	fa00 f202 	lsl.w	r2, r0, r2
 8004b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004b3a:	bf00      	nop
 8004b3c:	370c      	adds	r7, #12
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr
 8004b46:	bf00      	nop
 8004b48:	e000e100 	.word	0xe000e100

08004b4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	4603      	mov	r3, r0
 8004b54:	6039      	str	r1, [r7, #0]
 8004b56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	db0a      	blt.n	8004b76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	b2da      	uxtb	r2, r3
 8004b64:	490c      	ldr	r1, [pc, #48]	; (8004b98 <__NVIC_SetPriority+0x4c>)
 8004b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b6a:	0112      	lsls	r2, r2, #4
 8004b6c:	b2d2      	uxtb	r2, r2
 8004b6e:	440b      	add	r3, r1
 8004b70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b74:	e00a      	b.n	8004b8c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	b2da      	uxtb	r2, r3
 8004b7a:	4908      	ldr	r1, [pc, #32]	; (8004b9c <__NVIC_SetPriority+0x50>)
 8004b7c:	79fb      	ldrb	r3, [r7, #7]
 8004b7e:	f003 030f 	and.w	r3, r3, #15
 8004b82:	3b04      	subs	r3, #4
 8004b84:	0112      	lsls	r2, r2, #4
 8004b86:	b2d2      	uxtb	r2, r2
 8004b88:	440b      	add	r3, r1
 8004b8a:	761a      	strb	r2, [r3, #24]
}
 8004b8c:	bf00      	nop
 8004b8e:	370c      	adds	r7, #12
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr
 8004b98:	e000e100 	.word	0xe000e100
 8004b9c:	e000ed00 	.word	0xe000ed00

08004ba0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b089      	sub	sp, #36	; 0x24
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f003 0307 	and.w	r3, r3, #7
 8004bb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	f1c3 0307 	rsb	r3, r3, #7
 8004bba:	2b04      	cmp	r3, #4
 8004bbc:	bf28      	it	cs
 8004bbe:	2304      	movcs	r3, #4
 8004bc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004bc2:	69fb      	ldr	r3, [r7, #28]
 8004bc4:	3304      	adds	r3, #4
 8004bc6:	2b06      	cmp	r3, #6
 8004bc8:	d902      	bls.n	8004bd0 <NVIC_EncodePriority+0x30>
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	3b03      	subs	r3, #3
 8004bce:	e000      	b.n	8004bd2 <NVIC_EncodePriority+0x32>
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	fa02 f303 	lsl.w	r3, r2, r3
 8004bde:	43da      	mvns	r2, r3
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	401a      	ands	r2, r3
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004be8:	f04f 31ff 	mov.w	r1, #4294967295
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	fa01 f303 	lsl.w	r3, r1, r3
 8004bf2:	43d9      	mvns	r1, r3
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bf8:	4313      	orrs	r3, r2
         );
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3724      	adds	r7, #36	; 0x24
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr
	...

08004c08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	3b01      	subs	r3, #1
 8004c14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c18:	d301      	bcc.n	8004c1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e00f      	b.n	8004c3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c1e:	4a0a      	ldr	r2, [pc, #40]	; (8004c48 <SysTick_Config+0x40>)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	3b01      	subs	r3, #1
 8004c24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c26:	210f      	movs	r1, #15
 8004c28:	f04f 30ff 	mov.w	r0, #4294967295
 8004c2c:	f7ff ff8e 	bl	8004b4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c30:	4b05      	ldr	r3, [pc, #20]	; (8004c48 <SysTick_Config+0x40>)
 8004c32:	2200      	movs	r2, #0
 8004c34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c36:	4b04      	ldr	r3, [pc, #16]	; (8004c48 <SysTick_Config+0x40>)
 8004c38:	2207      	movs	r2, #7
 8004c3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3708      	adds	r7, #8
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop
 8004c48:	e000e010 	.word	0xe000e010

08004c4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b082      	sub	sp, #8
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f7ff ff29 	bl	8004aac <__NVIC_SetPriorityGrouping>
}
 8004c5a:	bf00      	nop
 8004c5c:	3708      	adds	r7, #8
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}

08004c62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004c62:	b580      	push	{r7, lr}
 8004c64:	b086      	sub	sp, #24
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	4603      	mov	r3, r0
 8004c6a:	60b9      	str	r1, [r7, #8]
 8004c6c:	607a      	str	r2, [r7, #4]
 8004c6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004c70:	2300      	movs	r3, #0
 8004c72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004c74:	f7ff ff3e 	bl	8004af4 <__NVIC_GetPriorityGrouping>
 8004c78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	68b9      	ldr	r1, [r7, #8]
 8004c7e:	6978      	ldr	r0, [r7, #20]
 8004c80:	f7ff ff8e 	bl	8004ba0 <NVIC_EncodePriority>
 8004c84:	4602      	mov	r2, r0
 8004c86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c8a:	4611      	mov	r1, r2
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f7ff ff5d 	bl	8004b4c <__NVIC_SetPriority>
}
 8004c92:	bf00      	nop
 8004c94:	3718      	adds	r7, #24
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}

08004c9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c9a:	b580      	push	{r7, lr}
 8004c9c:	b082      	sub	sp, #8
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f7ff ff31 	bl	8004b10 <__NVIC_EnableIRQ>
}
 8004cae:	bf00      	nop
 8004cb0:	3708      	adds	r7, #8
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}

08004cb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004cb6:	b580      	push	{r7, lr}
 8004cb8:	b082      	sub	sp, #8
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f7ff ffa2 	bl	8004c08 <SysTick_Config>
 8004cc4:	4603      	mov	r3, r0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3708      	adds	r7, #8
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
	...

08004cd0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b086      	sub	sp, #24
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004cdc:	f7ff f9fa 	bl	80040d4 <HAL_GetTick>
 8004ce0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d101      	bne.n	8004cec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e099      	b.n	8004e20 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2202      	movs	r2, #2
 8004cf8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f022 0201 	bic.w	r2, r2, #1
 8004d0a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d0c:	e00f      	b.n	8004d2e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d0e:	f7ff f9e1 	bl	80040d4 <HAL_GetTick>
 8004d12:	4602      	mov	r2, r0
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	2b05      	cmp	r3, #5
 8004d1a:	d908      	bls.n	8004d2e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2220      	movs	r2, #32
 8004d20:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2203      	movs	r2, #3
 8004d26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	e078      	b.n	8004e20 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0301 	and.w	r3, r3, #1
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d1e8      	bne.n	8004d0e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004d44:	697a      	ldr	r2, [r7, #20]
 8004d46:	4b38      	ldr	r3, [pc, #224]	; (8004e28 <HAL_DMA_Init+0x158>)
 8004d48:	4013      	ands	r3, r2
 8004d4a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	685a      	ldr	r2, [r3, #4]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004d5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	691b      	ldr	r3, [r3, #16]
 8004d60:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d66:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	699b      	ldr	r3, [r3, #24]
 8004d6c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d72:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a1b      	ldr	r3, [r3, #32]
 8004d78:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004d7a:	697a      	ldr	r2, [r7, #20]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d84:	2b04      	cmp	r3, #4
 8004d86:	d107      	bne.n	8004d98 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d90:	4313      	orrs	r3, r2
 8004d92:	697a      	ldr	r2, [r7, #20]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	697a      	ldr	r2, [r7, #20]
 8004d9e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	695b      	ldr	r3, [r3, #20]
 8004da6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	f023 0307 	bic.w	r3, r3, #7
 8004dae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db4:	697a      	ldr	r2, [r7, #20]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbe:	2b04      	cmp	r3, #4
 8004dc0:	d117      	bne.n	8004df2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc6:	697a      	ldr	r2, [r7, #20]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d00e      	beq.n	8004df2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 fa99 	bl	800530c <DMA_CheckFifoParam>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d008      	beq.n	8004df2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2240      	movs	r2, #64	; 0x40
 8004de4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2201      	movs	r2, #1
 8004dea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004dee:	2301      	movs	r3, #1
 8004df0:	e016      	b.n	8004e20 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	697a      	ldr	r2, [r7, #20]
 8004df8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 fa50 	bl	80052a0 <DMA_CalcBaseAndBitshift>
 8004e00:	4603      	mov	r3, r0
 8004e02:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e08:	223f      	movs	r2, #63	; 0x3f
 8004e0a:	409a      	lsls	r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004e1e:	2300      	movs	r3, #0
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3718      	adds	r7, #24
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	e010803f 	.word	0xe010803f

08004e2c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b086      	sub	sp, #24
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	607a      	str	r2, [r7, #4]
 8004e38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e42:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d101      	bne.n	8004e52 <HAL_DMA_Start_IT+0x26>
 8004e4e:	2302      	movs	r3, #2
 8004e50:	e048      	b.n	8004ee4 <HAL_DMA_Start_IT+0xb8>
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2201      	movs	r2, #1
 8004e56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d137      	bne.n	8004ed6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2202      	movs	r2, #2
 8004e6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2200      	movs	r2, #0
 8004e72:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	68b9      	ldr	r1, [r7, #8]
 8004e7a:	68f8      	ldr	r0, [r7, #12]
 8004e7c:	f000 f9e2 	bl	8005244 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e84:	223f      	movs	r2, #63	; 0x3f
 8004e86:	409a      	lsls	r2, r3
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f042 0216 	orr.w	r2, r2, #22
 8004e9a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	695a      	ldr	r2, [r3, #20]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004eaa:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d007      	beq.n	8004ec4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f042 0208 	orr.w	r2, r2, #8
 8004ec2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f042 0201 	orr.w	r2, r2, #1
 8004ed2:	601a      	str	r2, [r3, #0]
 8004ed4:	e005      	b.n	8004ee2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004ede:	2302      	movs	r3, #2
 8004ee0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004ee2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3718      	adds	r7, #24
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}

08004eec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	2b02      	cmp	r3, #2
 8004efe:	d004      	beq.n	8004f0a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2280      	movs	r2, #128	; 0x80
 8004f04:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e00c      	b.n	8004f24 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2205      	movs	r2, #5
 8004f0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f022 0201 	bic.w	r2, r2, #1
 8004f20:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004f22:	2300      	movs	r3, #0
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	370c      	adds	r7, #12
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr

08004f30 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b086      	sub	sp, #24
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8004f3c:	4b92      	ldr	r3, [pc, #584]	; (8005188 <HAL_DMA_IRQHandler+0x258>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a92      	ldr	r2, [pc, #584]	; (800518c <HAL_DMA_IRQHandler+0x25c>)
 8004f42:	fba2 2303 	umull	r2, r3, r2, r3
 8004f46:	0a9b      	lsrs	r3, r3, #10
 8004f48:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f4e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f5a:	2208      	movs	r2, #8
 8004f5c:	409a      	lsls	r2, r3
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	4013      	ands	r3, r2
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d01a      	beq.n	8004f9c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0304 	and.w	r3, r3, #4
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d013      	beq.n	8004f9c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f022 0204 	bic.w	r2, r2, #4
 8004f82:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f88:	2208      	movs	r2, #8
 8004f8a:	409a      	lsls	r2, r3
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f94:	f043 0201 	orr.w	r2, r3, #1
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	409a      	lsls	r2, r3
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d012      	beq.n	8004fd2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	695b      	ldr	r3, [r3, #20]
 8004fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00b      	beq.n	8004fd2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	409a      	lsls	r2, r3
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fca:	f043 0202 	orr.w	r2, r3, #2
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fd6:	2204      	movs	r2, #4
 8004fd8:	409a      	lsls	r2, r3
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	4013      	ands	r3, r2
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d012      	beq.n	8005008 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 0302 	and.w	r3, r3, #2
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d00b      	beq.n	8005008 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ff4:	2204      	movs	r2, #4
 8004ff6:	409a      	lsls	r2, r3
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005000:	f043 0204 	orr.w	r2, r3, #4
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800500c:	2210      	movs	r2, #16
 800500e:	409a      	lsls	r2, r3
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	4013      	ands	r3, r2
 8005014:	2b00      	cmp	r3, #0
 8005016:	d043      	beq.n	80050a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 0308 	and.w	r3, r3, #8
 8005022:	2b00      	cmp	r3, #0
 8005024:	d03c      	beq.n	80050a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800502a:	2210      	movs	r2, #16
 800502c:	409a      	lsls	r2, r3
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800503c:	2b00      	cmp	r3, #0
 800503e:	d018      	beq.n	8005072 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d108      	bne.n	8005060 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005052:	2b00      	cmp	r3, #0
 8005054:	d024      	beq.n	80050a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	4798      	blx	r3
 800505e:	e01f      	b.n	80050a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005064:	2b00      	cmp	r3, #0
 8005066:	d01b      	beq.n	80050a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	4798      	blx	r3
 8005070:	e016      	b.n	80050a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800507c:	2b00      	cmp	r3, #0
 800507e:	d107      	bne.n	8005090 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f022 0208 	bic.w	r2, r2, #8
 800508e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005094:	2b00      	cmp	r3, #0
 8005096:	d003      	beq.n	80050a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050a4:	2220      	movs	r2, #32
 80050a6:	409a      	lsls	r2, r3
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	4013      	ands	r3, r2
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	f000 808e 	beq.w	80051ce <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 0310 	and.w	r3, r3, #16
 80050bc:	2b00      	cmp	r3, #0
 80050be:	f000 8086 	beq.w	80051ce <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050c6:	2220      	movs	r2, #32
 80050c8:	409a      	lsls	r2, r3
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	2b05      	cmp	r3, #5
 80050d8:	d136      	bne.n	8005148 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f022 0216 	bic.w	r2, r2, #22
 80050e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	695a      	ldr	r2, [r3, #20]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80050f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d103      	bne.n	800510a <HAL_DMA_IRQHandler+0x1da>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005106:	2b00      	cmp	r3, #0
 8005108:	d007      	beq.n	800511a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f022 0208 	bic.w	r2, r2, #8
 8005118:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800511e:	223f      	movs	r2, #63	; 0x3f
 8005120:	409a      	lsls	r2, r3
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2201      	movs	r2, #1
 8005132:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800513a:	2b00      	cmp	r3, #0
 800513c:	d07d      	beq.n	800523a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	4798      	blx	r3
        }
        return;
 8005146:	e078      	b.n	800523a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005152:	2b00      	cmp	r3, #0
 8005154:	d01c      	beq.n	8005190 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005160:	2b00      	cmp	r3, #0
 8005162:	d108      	bne.n	8005176 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005168:	2b00      	cmp	r3, #0
 800516a:	d030      	beq.n	80051ce <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	4798      	blx	r3
 8005174:	e02b      	b.n	80051ce <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800517a:	2b00      	cmp	r3, #0
 800517c:	d027      	beq.n	80051ce <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	4798      	blx	r3
 8005186:	e022      	b.n	80051ce <HAL_DMA_IRQHandler+0x29e>
 8005188:	20000030 	.word	0x20000030
 800518c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800519a:	2b00      	cmp	r3, #0
 800519c:	d10f      	bne.n	80051be <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f022 0210 	bic.w	r2, r2, #16
 80051ac:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2201      	movs	r2, #1
 80051ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d003      	beq.n	80051ce <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d032      	beq.n	800523c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051da:	f003 0301 	and.w	r3, r3, #1
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d022      	beq.n	8005228 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2205      	movs	r2, #5
 80051e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f022 0201 	bic.w	r2, r2, #1
 80051f8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	3301      	adds	r3, #1
 80051fe:	60bb      	str	r3, [r7, #8]
 8005200:	697a      	ldr	r2, [r7, #20]
 8005202:	429a      	cmp	r2, r3
 8005204:	d307      	bcc.n	8005216 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 0301 	and.w	r3, r3, #1
 8005210:	2b00      	cmp	r3, #0
 8005212:	d1f2      	bne.n	80051fa <HAL_DMA_IRQHandler+0x2ca>
 8005214:	e000      	b.n	8005218 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005216:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800522c:	2b00      	cmp	r3, #0
 800522e:	d005      	beq.n	800523c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	4798      	blx	r3
 8005238:	e000      	b.n	800523c <HAL_DMA_IRQHandler+0x30c>
        return;
 800523a:	bf00      	nop
    }
  }
}
 800523c:	3718      	adds	r7, #24
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop

08005244 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005244:	b480      	push	{r7}
 8005246:	b085      	sub	sp, #20
 8005248:	af00      	add	r7, sp, #0
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	60b9      	str	r1, [r7, #8]
 800524e:	607a      	str	r2, [r7, #4]
 8005250:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005260:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	683a      	ldr	r2, [r7, #0]
 8005268:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	2b40      	cmp	r3, #64	; 0x40
 8005270:	d108      	bne.n	8005284 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68ba      	ldr	r2, [r7, #8]
 8005280:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005282:	e007      	b.n	8005294 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	68ba      	ldr	r2, [r7, #8]
 800528a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	60da      	str	r2, [r3, #12]
}
 8005294:	bf00      	nop
 8005296:	3714      	adds	r7, #20
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr

080052a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b085      	sub	sp, #20
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	3b10      	subs	r3, #16
 80052b0:	4a13      	ldr	r2, [pc, #76]	; (8005300 <DMA_CalcBaseAndBitshift+0x60>)
 80052b2:	fba2 2303 	umull	r2, r3, r2, r3
 80052b6:	091b      	lsrs	r3, r3, #4
 80052b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80052ba:	4a12      	ldr	r2, [pc, #72]	; (8005304 <DMA_CalcBaseAndBitshift+0x64>)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	4413      	add	r3, r2
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	461a      	mov	r2, r3
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2b03      	cmp	r3, #3
 80052cc:	d908      	bls.n	80052e0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	461a      	mov	r2, r3
 80052d4:	4b0c      	ldr	r3, [pc, #48]	; (8005308 <DMA_CalcBaseAndBitshift+0x68>)
 80052d6:	4013      	ands	r3, r2
 80052d8:	1d1a      	adds	r2, r3, #4
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	659a      	str	r2, [r3, #88]	; 0x58
 80052de:	e006      	b.n	80052ee <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	461a      	mov	r2, r3
 80052e6:	4b08      	ldr	r3, [pc, #32]	; (8005308 <DMA_CalcBaseAndBitshift+0x68>)
 80052e8:	4013      	ands	r3, r2
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3714      	adds	r7, #20
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr
 80052fe:	bf00      	nop
 8005300:	aaaaaaab 	.word	0xaaaaaaab
 8005304:	080139f0 	.word	0x080139f0
 8005308:	fffffc00 	.word	0xfffffc00

0800530c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800530c:	b480      	push	{r7}
 800530e:	b085      	sub	sp, #20
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005314:	2300      	movs	r3, #0
 8005316:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800531c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	699b      	ldr	r3, [r3, #24]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d11f      	bne.n	8005366 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	2b03      	cmp	r3, #3
 800532a:	d855      	bhi.n	80053d8 <DMA_CheckFifoParam+0xcc>
 800532c:	a201      	add	r2, pc, #4	; (adr r2, 8005334 <DMA_CheckFifoParam+0x28>)
 800532e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005332:	bf00      	nop
 8005334:	08005345 	.word	0x08005345
 8005338:	08005357 	.word	0x08005357
 800533c:	08005345 	.word	0x08005345
 8005340:	080053d9 	.word	0x080053d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005348:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800534c:	2b00      	cmp	r3, #0
 800534e:	d045      	beq.n	80053dc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005354:	e042      	b.n	80053dc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800535a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800535e:	d13f      	bne.n	80053e0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005364:	e03c      	b.n	80053e0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	699b      	ldr	r3, [r3, #24]
 800536a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800536e:	d121      	bne.n	80053b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	2b03      	cmp	r3, #3
 8005374:	d836      	bhi.n	80053e4 <DMA_CheckFifoParam+0xd8>
 8005376:	a201      	add	r2, pc, #4	; (adr r2, 800537c <DMA_CheckFifoParam+0x70>)
 8005378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800537c:	0800538d 	.word	0x0800538d
 8005380:	08005393 	.word	0x08005393
 8005384:	0800538d 	.word	0x0800538d
 8005388:	080053a5 	.word	0x080053a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	73fb      	strb	r3, [r7, #15]
      break;
 8005390:	e02f      	b.n	80053f2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005396:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d024      	beq.n	80053e8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053a2:	e021      	b.n	80053e8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80053ac:	d11e      	bne.n	80053ec <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80053b2:	e01b      	b.n	80053ec <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	2b02      	cmp	r3, #2
 80053b8:	d902      	bls.n	80053c0 <DMA_CheckFifoParam+0xb4>
 80053ba:	2b03      	cmp	r3, #3
 80053bc:	d003      	beq.n	80053c6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80053be:	e018      	b.n	80053f2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	73fb      	strb	r3, [r7, #15]
      break;
 80053c4:	e015      	b.n	80053f2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d00e      	beq.n	80053f0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	73fb      	strb	r3, [r7, #15]
      break;
 80053d6:	e00b      	b.n	80053f0 <DMA_CheckFifoParam+0xe4>
      break;
 80053d8:	bf00      	nop
 80053da:	e00a      	b.n	80053f2 <DMA_CheckFifoParam+0xe6>
      break;
 80053dc:	bf00      	nop
 80053de:	e008      	b.n	80053f2 <DMA_CheckFifoParam+0xe6>
      break;
 80053e0:	bf00      	nop
 80053e2:	e006      	b.n	80053f2 <DMA_CheckFifoParam+0xe6>
      break;
 80053e4:	bf00      	nop
 80053e6:	e004      	b.n	80053f2 <DMA_CheckFifoParam+0xe6>
      break;
 80053e8:	bf00      	nop
 80053ea:	e002      	b.n	80053f2 <DMA_CheckFifoParam+0xe6>
      break;   
 80053ec:	bf00      	nop
 80053ee:	e000      	b.n	80053f2 <DMA_CheckFifoParam+0xe6>
      break;
 80053f0:	bf00      	nop
    }
  } 
  
  return status; 
 80053f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3714      	adds	r7, #20
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr

08005400 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b082      	sub	sp, #8
 8005404:	af00      	add	r7, sp, #0
  uint32_t temp = 0;
 8005406:	2300      	movs	r3, #0
 8005408:	607b      	str	r3, [r7, #4]
  
  /* If the program operation is completed, disable the PG Bit */
  FLASH->CR &= (~FLASH_CR_PG);
 800540a:	4b52      	ldr	r3, [pc, #328]	; (8005554 <HAL_FLASH_IRQHandler+0x154>)
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	4a51      	ldr	r2, [pc, #324]	; (8005554 <HAL_FLASH_IRQHandler+0x154>)
 8005410:	f023 0301 	bic.w	r3, r3, #1
 8005414:	6113      	str	r3, [r2, #16]

  /* If the erase operation is completed, disable the SER Bit */
  FLASH->CR &= (~FLASH_CR_SER);
 8005416:	4b4f      	ldr	r3, [pc, #316]	; (8005554 <HAL_FLASH_IRQHandler+0x154>)
 8005418:	691b      	ldr	r3, [r3, #16]
 800541a:	4a4e      	ldr	r2, [pc, #312]	; (8005554 <HAL_FLASH_IRQHandler+0x154>)
 800541c:	f023 0302 	bic.w	r3, r3, #2
 8005420:	6113      	str	r3, [r2, #16]
  FLASH->CR &= SECTOR_MASK; 
 8005422:	4b4c      	ldr	r3, [pc, #304]	; (8005554 <HAL_FLASH_IRQHandler+0x154>)
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	4a4b      	ldr	r2, [pc, #300]	; (8005554 <HAL_FLASH_IRQHandler+0x154>)
 8005428:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800542c:	6113      	str	r3, [r2, #16]

  /* if the erase operation is completed, disable the MER Bit */
  FLASH->CR &= (~FLASH_MER_BIT);
 800542e:	4b49      	ldr	r3, [pc, #292]	; (8005554 <HAL_FLASH_IRQHandler+0x154>)
 8005430:	691a      	ldr	r2, [r3, #16]
 8005432:	4948      	ldr	r1, [pc, #288]	; (8005554 <HAL_FLASH_IRQHandler+0x154>)
 8005434:	4b48      	ldr	r3, [pc, #288]	; (8005558 <HAL_FLASH_IRQHandler+0x158>)
 8005436:	4013      	ands	r3, r2
 8005438:	610b      	str	r3, [r1, #16]

  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800543a:	4b46      	ldr	r3, [pc, #280]	; (8005554 <HAL_FLASH_IRQHandler+0x154>)
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	f003 0301 	and.w	r3, r3, #1
 8005442:	2b00      	cmp	r3, #0
 8005444:	d046      	beq.n	80054d4 <HAL_FLASH_IRQHandler+0xd4>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005446:	4b43      	ldr	r3, [pc, #268]	; (8005554 <HAL_FLASH_IRQHandler+0x154>)
 8005448:	2201      	movs	r2, #1
 800544a:	60da      	str	r2, [r3, #12]
    
    switch (pFlash.ProcedureOnGoing)
 800544c:	4b43      	ldr	r3, [pc, #268]	; (800555c <HAL_FLASH_IRQHandler+0x15c>)
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	b2db      	uxtb	r3, r3
 8005452:	2b02      	cmp	r3, #2
 8005454:	d02e      	beq.n	80054b4 <HAL_FLASH_IRQHandler+0xb4>
 8005456:	2b03      	cmp	r3, #3
 8005458:	d033      	beq.n	80054c2 <HAL_FLASH_IRQHandler+0xc2>
 800545a:	2b01      	cmp	r3, #1
 800545c:	d000      	beq.n	8005460 <HAL_FLASH_IRQHandler+0x60>
        /* Programming procedure is completed */
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
        break;
      }
      default :
        break;
 800545e:	e03a      	b.n	80054d6 <HAL_FLASH_IRQHandler+0xd6>
        pFlash.NbSectorsToErase--;
 8005460:	4b3e      	ldr	r3, [pc, #248]	; (800555c <HAL_FLASH_IRQHandler+0x15c>)
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	3b01      	subs	r3, #1
 8005466:	4a3d      	ldr	r2, [pc, #244]	; (800555c <HAL_FLASH_IRQHandler+0x15c>)
 8005468:	6053      	str	r3, [r2, #4]
        if(pFlash.NbSectorsToErase != 0)
 800546a:	4b3c      	ldr	r3, [pc, #240]	; (800555c <HAL_FLASH_IRQHandler+0x15c>)
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d013      	beq.n	800549a <HAL_FLASH_IRQHandler+0x9a>
          temp = pFlash.Sector;
 8005472:	4b3a      	ldr	r3, [pc, #232]	; (800555c <HAL_FLASH_IRQHandler+0x15c>)
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	607b      	str	r3, [r7, #4]
          HAL_FLASH_EndOfOperationCallback(temp);
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f000 f871 	bl	8005560 <HAL_FLASH_EndOfOperationCallback>
          temp = ++pFlash.Sector;
 800547e:	4b37      	ldr	r3, [pc, #220]	; (800555c <HAL_FLASH_IRQHandler+0x15c>)
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	3301      	adds	r3, #1
 8005484:	4a35      	ldr	r2, [pc, #212]	; (800555c <HAL_FLASH_IRQHandler+0x15c>)
 8005486:	60d3      	str	r3, [r2, #12]
 8005488:	607b      	str	r3, [r7, #4]
          FLASH_Erase_Sector(temp, pFlash.VoltageForErase);
 800548a:	4b34      	ldr	r3, [pc, #208]	; (800555c <HAL_FLASH_IRQHandler+0x15c>)
 800548c:	7a1b      	ldrb	r3, [r3, #8]
 800548e:	b2db      	uxtb	r3, r3
 8005490:	4619      	mov	r1, r3
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 f8c2 	bl	800561c <FLASH_Erase_Sector>
        break;
 8005498:	e01d      	b.n	80054d6 <HAL_FLASH_IRQHandler+0xd6>
          pFlash.Sector = temp = 0xFFFFFFFFU;
 800549a:	f04f 33ff 	mov.w	r3, #4294967295
 800549e:	607b      	str	r3, [r7, #4]
 80054a0:	4a2e      	ldr	r2, [pc, #184]	; (800555c <HAL_FLASH_IRQHandler+0x15c>)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	60d3      	str	r3, [r2, #12]
          HAL_FLASH_EndOfOperationCallback(temp);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 f85a 	bl	8005560 <HAL_FLASH_EndOfOperationCallback>
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80054ac:	4b2b      	ldr	r3, [pc, #172]	; (800555c <HAL_FLASH_IRQHandler+0x15c>)
 80054ae:	2200      	movs	r2, #0
 80054b0:	701a      	strb	r2, [r3, #0]
        break;
 80054b2:	e010      	b.n	80054d6 <HAL_FLASH_IRQHandler+0xd6>
        HAL_FLASH_EndOfOperationCallback(0);
 80054b4:	2000      	movs	r0, #0
 80054b6:	f000 f853 	bl	8005560 <HAL_FLASH_EndOfOperationCallback>
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80054ba:	4b28      	ldr	r3, [pc, #160]	; (800555c <HAL_FLASH_IRQHandler+0x15c>)
 80054bc:	2200      	movs	r2, #0
 80054be:	701a      	strb	r2, [r3, #0]
        break;
 80054c0:	e009      	b.n	80054d6 <HAL_FLASH_IRQHandler+0xd6>
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 80054c2:	4b26      	ldr	r3, [pc, #152]	; (800555c <HAL_FLASH_IRQHandler+0x15c>)
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	4618      	mov	r0, r3
 80054c8:	f000 f84a 	bl	8005560 <HAL_FLASH_EndOfOperationCallback>
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80054cc:	4b23      	ldr	r3, [pc, #140]	; (800555c <HAL_FLASH_IRQHandler+0x15c>)
 80054ce:	2200      	movs	r2, #0
 80054d0:	701a      	strb	r2, [r3, #0]
        break;
 80054d2:	e000      	b.n	80054d6 <HAL_FLASH_IRQHandler+0xd6>
    }
  }
 80054d4:	bf00      	nop
  
  /* Check FLASH operation error flags */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 80054d6:	4b1f      	ldr	r3, [pc, #124]	; (8005554 <HAL_FLASH_IRQHandler+0x154>)
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d020      	beq.n	8005524 <HAL_FLASH_IRQHandler+0x124>
  {
    switch (pFlash.ProcedureOnGoing)
 80054e2:	4b1e      	ldr	r3, [pc, #120]	; (800555c <HAL_FLASH_IRQHandler+0x15c>)
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d00c      	beq.n	8005506 <HAL_FLASH_IRQHandler+0x106>
 80054ec:	2b03      	cmp	r3, #3
 80054ee:	d00d      	beq.n	800550c <HAL_FLASH_IRQHandler+0x10c>
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d000      	beq.n	80054f6 <HAL_FLASH_IRQHandler+0xf6>
        /*return the faulty address*/
        temp = pFlash.Address;
        break;
      }
    default :
      break;
 80054f4:	e00e      	b.n	8005514 <HAL_FLASH_IRQHandler+0x114>
        temp = pFlash.Sector;
 80054f6:	4b19      	ldr	r3, [pc, #100]	; (800555c <HAL_FLASH_IRQHandler+0x15c>)
 80054f8:	68db      	ldr	r3, [r3, #12]
 80054fa:	607b      	str	r3, [r7, #4]
        pFlash.Sector = 0xFFFFFFFFU;
 80054fc:	4b17      	ldr	r3, [pc, #92]	; (800555c <HAL_FLASH_IRQHandler+0x15c>)
 80054fe:	f04f 32ff 	mov.w	r2, #4294967295
 8005502:	60da      	str	r2, [r3, #12]
        break;
 8005504:	e006      	b.n	8005514 <HAL_FLASH_IRQHandler+0x114>
        temp = 0;
 8005506:	2300      	movs	r3, #0
 8005508:	607b      	str	r3, [r7, #4]
        break;
 800550a:	e003      	b.n	8005514 <HAL_FLASH_IRQHandler+0x114>
        temp = pFlash.Address;
 800550c:	4b13      	ldr	r3, [pc, #76]	; (800555c <HAL_FLASH_IRQHandler+0x15c>)
 800550e:	691b      	ldr	r3, [r3, #16]
 8005510:	607b      	str	r3, [r7, #4]
        break;
 8005512:	bf00      	nop
    }
    /*Save the Error code*/
    FLASH_SetErrorCode();
 8005514:	f000 f838 	bl	8005588 <FLASH_SetErrorCode>

    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(temp);
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f000 f82b 	bl	8005574 <HAL_FLASH_OperationErrorCallback>

    /*Stop the procedure ongoing */
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800551e:	4b0f      	ldr	r3, [pc, #60]	; (800555c <HAL_FLASH_IRQHandler+0x15c>)
 8005520:	2200      	movs	r2, #0
 8005522:	701a      	strb	r2, [r3, #0]
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8005524:	4b0d      	ldr	r3, [pc, #52]	; (800555c <HAL_FLASH_IRQHandler+0x15c>)
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	b2db      	uxtb	r3, r3
 800552a:	2b00      	cmp	r3, #0
 800552c:	d10e      	bne.n	800554c <HAL_FLASH_IRQHandler+0x14c>
  {
    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 800552e:	4b09      	ldr	r3, [pc, #36]	; (8005554 <HAL_FLASH_IRQHandler+0x154>)
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	4a08      	ldr	r2, [pc, #32]	; (8005554 <HAL_FLASH_IRQHandler+0x154>)
 8005534:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005538:	6113      	str	r3, [r2, #16]

    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 800553a:	4b06      	ldr	r3, [pc, #24]	; (8005554 <HAL_FLASH_IRQHandler+0x154>)
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	4a05      	ldr	r2, [pc, #20]	; (8005554 <HAL_FLASH_IRQHandler+0x154>)
 8005540:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005544:	6113      	str	r3, [r2, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8005546:	4b05      	ldr	r3, [pc, #20]	; (800555c <HAL_FLASH_IRQHandler+0x15c>)
 8005548:	2200      	movs	r2, #0
 800554a:	751a      	strb	r2, [r3, #20]
  }
  
}
 800554c:	bf00      	nop
 800554e:	3708      	adds	r7, #8
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}
 8005554:	40023c00 	.word	0x40023c00
 8005558:	ffff7ffb 	.word	0xffff7ffb
 800555c:	20004ab4 	.word	0x20004ab4

08005560 <HAL_FLASH_EndOfOperationCallback>:
  *                 - Program      : Address which was selected for data program
  *                 - Mass Erase   : No return value expected
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
  */ 
}
 8005568:	bf00      	nop
 800556a:	370c      	adds	r7, #12
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr

08005574 <HAL_FLASH_OperationErrorCallback>:
  *                 - Program      : Address which was selected for data program
  *                 - Mass Erase   : No return value expected
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 800557c:	bf00      	nop
 800557e:	370c      	adds	r7, #12
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8005588:	b480      	push	{r7}
 800558a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800558c:	4b21      	ldr	r3, [pc, #132]	; (8005614 <FLASH_SetErrorCode+0x8c>)
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	f003 0302 	and.w	r3, r3, #2
 8005594:	2b00      	cmp	r3, #0
 8005596:	d005      	beq.n	80055a4 <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8005598:	4b1f      	ldr	r3, [pc, #124]	; (8005618 <FLASH_SetErrorCode+0x90>)
 800559a:	699b      	ldr	r3, [r3, #24]
 800559c:	f043 0320 	orr.w	r3, r3, #32
 80055a0:	4a1d      	ldr	r2, [pc, #116]	; (8005618 <FLASH_SetErrorCode+0x90>)
 80055a2:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80055a4:	4b1b      	ldr	r3, [pc, #108]	; (8005614 <FLASH_SetErrorCode+0x8c>)
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	f003 0310 	and.w	r3, r3, #16
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d005      	beq.n	80055bc <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80055b0:	4b19      	ldr	r3, [pc, #100]	; (8005618 <FLASH_SetErrorCode+0x90>)
 80055b2:	699b      	ldr	r3, [r3, #24]
 80055b4:	f043 0310 	orr.w	r3, r3, #16
 80055b8:	4a17      	ldr	r2, [pc, #92]	; (8005618 <FLASH_SetErrorCode+0x90>)
 80055ba:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80055bc:	4b15      	ldr	r3, [pc, #84]	; (8005614 <FLASH_SetErrorCode+0x8c>)
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	f003 0320 	and.w	r3, r3, #32
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d005      	beq.n	80055d4 <FLASH_SetErrorCode+0x4c>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80055c8:	4b13      	ldr	r3, [pc, #76]	; (8005618 <FLASH_SetErrorCode+0x90>)
 80055ca:	699b      	ldr	r3, [r3, #24]
 80055cc:	f043 0308 	orr.w	r3, r3, #8
 80055d0:	4a11      	ldr	r2, [pc, #68]	; (8005618 <FLASH_SetErrorCode+0x90>)
 80055d2:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80055d4:	4b0f      	ldr	r3, [pc, #60]	; (8005614 <FLASH_SetErrorCode+0x8c>)
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d005      	beq.n	80055ec <FLASH_SetErrorCode+0x64>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80055e0:	4b0d      	ldr	r3, [pc, #52]	; (8005618 <FLASH_SetErrorCode+0x90>)
 80055e2:	699b      	ldr	r3, [r3, #24]
 80055e4:	f043 0304 	orr.w	r3, r3, #4
 80055e8:	4a0b      	ldr	r2, [pc, #44]	; (8005618 <FLASH_SetErrorCode+0x90>)
 80055ea:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 80055ec:	4b09      	ldr	r3, [pc, #36]	; (8005614 <FLASH_SetErrorCode+0x8c>)
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d005      	beq.n	8005604 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 80055f8:	4b07      	ldr	r3, [pc, #28]	; (8005618 <FLASH_SetErrorCode+0x90>)
 80055fa:	699b      	ldr	r3, [r3, #24]
 80055fc:	f043 0302 	orr.w	r3, r3, #2
 8005600:	4a05      	ldr	r2, [pc, #20]	; (8005618 <FLASH_SetErrorCode+0x90>)
 8005602:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8005604:	4b03      	ldr	r3, [pc, #12]	; (8005614 <FLASH_SetErrorCode+0x8c>)
 8005606:	22f2      	movs	r2, #242	; 0xf2
 8005608:	60da      	str	r2, [r3, #12]
}
 800560a:	bf00      	nop
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr
 8005614:	40023c00 	.word	0x40023c00
 8005618:	20004ab4 	.word	0x20004ab4

0800561c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800561c:	b480      	push	{r7}
 800561e:	b085      	sub	sp, #20
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	460b      	mov	r3, r1
 8005626:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0;
 8005628:	2300      	movs	r3, #0
 800562a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800562c:	78fb      	ldrb	r3, [r7, #3]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d102      	bne.n	8005638 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8005632:	2300      	movs	r3, #0
 8005634:	60fb      	str	r3, [r7, #12]
 8005636:	e010      	b.n	800565a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8005638:	78fb      	ldrb	r3, [r7, #3]
 800563a:	2b01      	cmp	r3, #1
 800563c:	d103      	bne.n	8005646 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800563e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005642:	60fb      	str	r3, [r7, #12]
 8005644:	e009      	b.n	800565a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8005646:	78fb      	ldrb	r3, [r7, #3]
 8005648:	2b02      	cmp	r3, #2
 800564a:	d103      	bne.n	8005654 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800564c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005650:	60fb      	str	r3, [r7, #12]
 8005652:	e002      	b.n	800565a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8005654:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005658:	60fb      	str	r3, [r7, #12]
  }
  
  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if(Sector > FLASH_SECTOR_11) 
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2b0b      	cmp	r3, #11
 800565e:	d902      	bls.n	8005666 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	3304      	adds	r3, #4
 8005664:	607b      	str	r3, [r7, #4]
  }  

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
 8005666:	4b14      	ldr	r3, [pc, #80]	; (80056b8 <FLASH_Erase_Sector+0x9c>)
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	4a13      	ldr	r2, [pc, #76]	; (80056b8 <FLASH_Erase_Sector+0x9c>)
 800566c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005670:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8005672:	4b11      	ldr	r3, [pc, #68]	; (80056b8 <FLASH_Erase_Sector+0x9c>)
 8005674:	691a      	ldr	r2, [r3, #16]
 8005676:	4910      	ldr	r1, [pc, #64]	; (80056b8 <FLASH_Erase_Sector+0x9c>)
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	4313      	orrs	r3, r2
 800567c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800567e:	4b0e      	ldr	r3, [pc, #56]	; (80056b8 <FLASH_Erase_Sector+0x9c>)
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	4a0d      	ldr	r2, [pc, #52]	; (80056b8 <FLASH_Erase_Sector+0x9c>)
 8005684:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005688:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800568a:	4b0b      	ldr	r3, [pc, #44]	; (80056b8 <FLASH_Erase_Sector+0x9c>)
 800568c:	691a      	ldr	r2, [r3, #16]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	00db      	lsls	r3, r3, #3
 8005692:	4313      	orrs	r3, r2
 8005694:	4a08      	ldr	r2, [pc, #32]	; (80056b8 <FLASH_Erase_Sector+0x9c>)
 8005696:	f043 0302 	orr.w	r3, r3, #2
 800569a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800569c:	4b06      	ldr	r3, [pc, #24]	; (80056b8 <FLASH_Erase_Sector+0x9c>)
 800569e:	691b      	ldr	r3, [r3, #16]
 80056a0:	4a05      	ldr	r2, [pc, #20]	; (80056b8 <FLASH_Erase_Sector+0x9c>)
 80056a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056a6:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 80056a8:	f3bf 8f4f 	dsb	sy
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80056ac:	bf00      	nop
 80056ae:	3714      	adds	r7, #20
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr
 80056b8:	40023c00 	.word	0x40023c00

080056bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80056bc:	b480      	push	{r7}
 80056be:	b089      	sub	sp, #36	; 0x24
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80056c6:	2300      	movs	r3, #0
 80056c8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80056ca:	2300      	movs	r3, #0
 80056cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80056ce:	2300      	movs	r3, #0
 80056d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80056d2:	2300      	movs	r3, #0
 80056d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80056d6:	2300      	movs	r3, #0
 80056d8:	61fb      	str	r3, [r7, #28]
 80056da:	e175      	b.n	80059c8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80056dc:	2201      	movs	r2, #1
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	fa02 f303 	lsl.w	r3, r2, r3
 80056e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	697a      	ldr	r2, [r7, #20]
 80056ec:	4013      	ands	r3, r2
 80056ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80056f0:	693a      	ldr	r2, [r7, #16]
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	f040 8164 	bne.w	80059c2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d00b      	beq.n	800571a <HAL_GPIO_Init+0x5e>
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	2b02      	cmp	r3, #2
 8005708:	d007      	beq.n	800571a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800570e:	2b11      	cmp	r3, #17
 8005710:	d003      	beq.n	800571a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	2b12      	cmp	r3, #18
 8005718:	d130      	bne.n	800577c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	005b      	lsls	r3, r3, #1
 8005724:	2203      	movs	r2, #3
 8005726:	fa02 f303 	lsl.w	r3, r2, r3
 800572a:	43db      	mvns	r3, r3
 800572c:	69ba      	ldr	r2, [r7, #24]
 800572e:	4013      	ands	r3, r2
 8005730:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	68da      	ldr	r2, [r3, #12]
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	005b      	lsls	r3, r3, #1
 800573a:	fa02 f303 	lsl.w	r3, r2, r3
 800573e:	69ba      	ldr	r2, [r7, #24]
 8005740:	4313      	orrs	r3, r2
 8005742:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	69ba      	ldr	r2, [r7, #24]
 8005748:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005750:	2201      	movs	r2, #1
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	fa02 f303 	lsl.w	r3, r2, r3
 8005758:	43db      	mvns	r3, r3
 800575a:	69ba      	ldr	r2, [r7, #24]
 800575c:	4013      	ands	r3, r2
 800575e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	091b      	lsrs	r3, r3, #4
 8005766:	f003 0201 	and.w	r2, r3, #1
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	fa02 f303 	lsl.w	r3, r2, r3
 8005770:	69ba      	ldr	r2, [r7, #24]
 8005772:	4313      	orrs	r3, r2
 8005774:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	69ba      	ldr	r2, [r7, #24]
 800577a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	005b      	lsls	r3, r3, #1
 8005786:	2203      	movs	r2, #3
 8005788:	fa02 f303 	lsl.w	r3, r2, r3
 800578c:	43db      	mvns	r3, r3
 800578e:	69ba      	ldr	r2, [r7, #24]
 8005790:	4013      	ands	r3, r2
 8005792:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	689a      	ldr	r2, [r3, #8]
 8005798:	69fb      	ldr	r3, [r7, #28]
 800579a:	005b      	lsls	r3, r3, #1
 800579c:	fa02 f303 	lsl.w	r3, r2, r3
 80057a0:	69ba      	ldr	r2, [r7, #24]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	69ba      	ldr	r2, [r7, #24]
 80057aa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d003      	beq.n	80057bc <HAL_GPIO_Init+0x100>
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	2b12      	cmp	r3, #18
 80057ba:	d123      	bne.n	8005804 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	08da      	lsrs	r2, r3, #3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	3208      	adds	r2, #8
 80057c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80057ca:	69fb      	ldr	r3, [r7, #28]
 80057cc:	f003 0307 	and.w	r3, r3, #7
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	220f      	movs	r2, #15
 80057d4:	fa02 f303 	lsl.w	r3, r2, r3
 80057d8:	43db      	mvns	r3, r3
 80057da:	69ba      	ldr	r2, [r7, #24]
 80057dc:	4013      	ands	r3, r2
 80057de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	691a      	ldr	r2, [r3, #16]
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	f003 0307 	and.w	r3, r3, #7
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	fa02 f303 	lsl.w	r3, r2, r3
 80057f0:	69ba      	ldr	r2, [r7, #24]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	08da      	lsrs	r2, r3, #3
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	3208      	adds	r2, #8
 80057fe:	69b9      	ldr	r1, [r7, #24]
 8005800:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	005b      	lsls	r3, r3, #1
 800580e:	2203      	movs	r2, #3
 8005810:	fa02 f303 	lsl.w	r3, r2, r3
 8005814:	43db      	mvns	r3, r3
 8005816:	69ba      	ldr	r2, [r7, #24]
 8005818:	4013      	ands	r3, r2
 800581a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	f003 0203 	and.w	r2, r3, #3
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	005b      	lsls	r3, r3, #1
 8005828:	fa02 f303 	lsl.w	r3, r2, r3
 800582c:	69ba      	ldr	r2, [r7, #24]
 800582e:	4313      	orrs	r3, r2
 8005830:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	69ba      	ldr	r2, [r7, #24]
 8005836:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005840:	2b00      	cmp	r3, #0
 8005842:	f000 80be 	beq.w	80059c2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005846:	4b65      	ldr	r3, [pc, #404]	; (80059dc <HAL_GPIO_Init+0x320>)
 8005848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800584a:	4a64      	ldr	r2, [pc, #400]	; (80059dc <HAL_GPIO_Init+0x320>)
 800584c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005850:	6453      	str	r3, [r2, #68]	; 0x44
 8005852:	4b62      	ldr	r3, [pc, #392]	; (80059dc <HAL_GPIO_Init+0x320>)
 8005854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005856:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800585a:	60fb      	str	r3, [r7, #12]
 800585c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800585e:	4a60      	ldr	r2, [pc, #384]	; (80059e0 <HAL_GPIO_Init+0x324>)
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	089b      	lsrs	r3, r3, #2
 8005864:	3302      	adds	r3, #2
 8005866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800586a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	f003 0303 	and.w	r3, r3, #3
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	220f      	movs	r2, #15
 8005876:	fa02 f303 	lsl.w	r3, r2, r3
 800587a:	43db      	mvns	r3, r3
 800587c:	69ba      	ldr	r2, [r7, #24]
 800587e:	4013      	ands	r3, r2
 8005880:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a57      	ldr	r2, [pc, #348]	; (80059e4 <HAL_GPIO_Init+0x328>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d037      	beq.n	80058fa <HAL_GPIO_Init+0x23e>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a56      	ldr	r2, [pc, #344]	; (80059e8 <HAL_GPIO_Init+0x32c>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d031      	beq.n	80058f6 <HAL_GPIO_Init+0x23a>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a55      	ldr	r2, [pc, #340]	; (80059ec <HAL_GPIO_Init+0x330>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d02b      	beq.n	80058f2 <HAL_GPIO_Init+0x236>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a54      	ldr	r2, [pc, #336]	; (80059f0 <HAL_GPIO_Init+0x334>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d025      	beq.n	80058ee <HAL_GPIO_Init+0x232>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a53      	ldr	r2, [pc, #332]	; (80059f4 <HAL_GPIO_Init+0x338>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d01f      	beq.n	80058ea <HAL_GPIO_Init+0x22e>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a52      	ldr	r2, [pc, #328]	; (80059f8 <HAL_GPIO_Init+0x33c>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d019      	beq.n	80058e6 <HAL_GPIO_Init+0x22a>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a51      	ldr	r2, [pc, #324]	; (80059fc <HAL_GPIO_Init+0x340>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d013      	beq.n	80058e2 <HAL_GPIO_Init+0x226>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a50      	ldr	r2, [pc, #320]	; (8005a00 <HAL_GPIO_Init+0x344>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d00d      	beq.n	80058de <HAL_GPIO_Init+0x222>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a4f      	ldr	r2, [pc, #316]	; (8005a04 <HAL_GPIO_Init+0x348>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d007      	beq.n	80058da <HAL_GPIO_Init+0x21e>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a4e      	ldr	r2, [pc, #312]	; (8005a08 <HAL_GPIO_Init+0x34c>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d101      	bne.n	80058d6 <HAL_GPIO_Init+0x21a>
 80058d2:	2309      	movs	r3, #9
 80058d4:	e012      	b.n	80058fc <HAL_GPIO_Init+0x240>
 80058d6:	230a      	movs	r3, #10
 80058d8:	e010      	b.n	80058fc <HAL_GPIO_Init+0x240>
 80058da:	2308      	movs	r3, #8
 80058dc:	e00e      	b.n	80058fc <HAL_GPIO_Init+0x240>
 80058de:	2307      	movs	r3, #7
 80058e0:	e00c      	b.n	80058fc <HAL_GPIO_Init+0x240>
 80058e2:	2306      	movs	r3, #6
 80058e4:	e00a      	b.n	80058fc <HAL_GPIO_Init+0x240>
 80058e6:	2305      	movs	r3, #5
 80058e8:	e008      	b.n	80058fc <HAL_GPIO_Init+0x240>
 80058ea:	2304      	movs	r3, #4
 80058ec:	e006      	b.n	80058fc <HAL_GPIO_Init+0x240>
 80058ee:	2303      	movs	r3, #3
 80058f0:	e004      	b.n	80058fc <HAL_GPIO_Init+0x240>
 80058f2:	2302      	movs	r3, #2
 80058f4:	e002      	b.n	80058fc <HAL_GPIO_Init+0x240>
 80058f6:	2301      	movs	r3, #1
 80058f8:	e000      	b.n	80058fc <HAL_GPIO_Init+0x240>
 80058fa:	2300      	movs	r3, #0
 80058fc:	69fa      	ldr	r2, [r7, #28]
 80058fe:	f002 0203 	and.w	r2, r2, #3
 8005902:	0092      	lsls	r2, r2, #2
 8005904:	4093      	lsls	r3, r2
 8005906:	69ba      	ldr	r2, [r7, #24]
 8005908:	4313      	orrs	r3, r2
 800590a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800590c:	4934      	ldr	r1, [pc, #208]	; (80059e0 <HAL_GPIO_Init+0x324>)
 800590e:	69fb      	ldr	r3, [r7, #28]
 8005910:	089b      	lsrs	r3, r3, #2
 8005912:	3302      	adds	r3, #2
 8005914:	69ba      	ldr	r2, [r7, #24]
 8005916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800591a:	4b3c      	ldr	r3, [pc, #240]	; (8005a0c <HAL_GPIO_Init+0x350>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	43db      	mvns	r3, r3
 8005924:	69ba      	ldr	r2, [r7, #24]
 8005926:	4013      	ands	r3, r2
 8005928:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005932:	2b00      	cmp	r3, #0
 8005934:	d003      	beq.n	800593e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005936:	69ba      	ldr	r2, [r7, #24]
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	4313      	orrs	r3, r2
 800593c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800593e:	4a33      	ldr	r2, [pc, #204]	; (8005a0c <HAL_GPIO_Init+0x350>)
 8005940:	69bb      	ldr	r3, [r7, #24]
 8005942:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005944:	4b31      	ldr	r3, [pc, #196]	; (8005a0c <HAL_GPIO_Init+0x350>)
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	43db      	mvns	r3, r3
 800594e:	69ba      	ldr	r2, [r7, #24]
 8005950:	4013      	ands	r3, r2
 8005952:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800595c:	2b00      	cmp	r3, #0
 800595e:	d003      	beq.n	8005968 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005960:	69ba      	ldr	r2, [r7, #24]
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	4313      	orrs	r3, r2
 8005966:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005968:	4a28      	ldr	r2, [pc, #160]	; (8005a0c <HAL_GPIO_Init+0x350>)
 800596a:	69bb      	ldr	r3, [r7, #24]
 800596c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800596e:	4b27      	ldr	r3, [pc, #156]	; (8005a0c <HAL_GPIO_Init+0x350>)
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	43db      	mvns	r3, r3
 8005978:	69ba      	ldr	r2, [r7, #24]
 800597a:	4013      	ands	r3, r2
 800597c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005986:	2b00      	cmp	r3, #0
 8005988:	d003      	beq.n	8005992 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800598a:	69ba      	ldr	r2, [r7, #24]
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	4313      	orrs	r3, r2
 8005990:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005992:	4a1e      	ldr	r2, [pc, #120]	; (8005a0c <HAL_GPIO_Init+0x350>)
 8005994:	69bb      	ldr	r3, [r7, #24]
 8005996:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005998:	4b1c      	ldr	r3, [pc, #112]	; (8005a0c <HAL_GPIO_Init+0x350>)
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	43db      	mvns	r3, r3
 80059a2:	69ba      	ldr	r2, [r7, #24]
 80059a4:	4013      	ands	r3, r2
 80059a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d003      	beq.n	80059bc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80059b4:	69ba      	ldr	r2, [r7, #24]
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80059bc:	4a13      	ldr	r2, [pc, #76]	; (8005a0c <HAL_GPIO_Init+0x350>)
 80059be:	69bb      	ldr	r3, [r7, #24]
 80059c0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80059c2:	69fb      	ldr	r3, [r7, #28]
 80059c4:	3301      	adds	r3, #1
 80059c6:	61fb      	str	r3, [r7, #28]
 80059c8:	69fb      	ldr	r3, [r7, #28]
 80059ca:	2b0f      	cmp	r3, #15
 80059cc:	f67f ae86 	bls.w	80056dc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80059d0:	bf00      	nop
 80059d2:	3724      	adds	r7, #36	; 0x24
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr
 80059dc:	40023800 	.word	0x40023800
 80059e0:	40013800 	.word	0x40013800
 80059e4:	40020000 	.word	0x40020000
 80059e8:	40020400 	.word	0x40020400
 80059ec:	40020800 	.word	0x40020800
 80059f0:	40020c00 	.word	0x40020c00
 80059f4:	40021000 	.word	0x40021000
 80059f8:	40021400 	.word	0x40021400
 80059fc:	40021800 	.word	0x40021800
 8005a00:	40021c00 	.word	0x40021c00
 8005a04:	40022000 	.word	0x40022000
 8005a08:	40022400 	.word	0x40022400
 8005a0c:	40013c00 	.word	0x40013c00

08005a10 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b085      	sub	sp, #20
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	460b      	mov	r3, r1
 8005a1a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	691a      	ldr	r2, [r3, #16]
 8005a20:	887b      	ldrh	r3, [r7, #2]
 8005a22:	4013      	ands	r3, r2
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d002      	beq.n	8005a2e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	73fb      	strb	r3, [r7, #15]
 8005a2c:	e001      	b.n	8005a32 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3714      	adds	r7, #20
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	460b      	mov	r3, r1
 8005a4a:	807b      	strh	r3, [r7, #2]
 8005a4c:	4613      	mov	r3, r2
 8005a4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005a50:	787b      	ldrb	r3, [r7, #1]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d003      	beq.n	8005a5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005a56:	887a      	ldrh	r2, [r7, #2]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005a5c:	e003      	b.n	8005a66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005a5e:	887b      	ldrh	r3, [r7, #2]
 8005a60:	041a      	lsls	r2, r3, #16
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	619a      	str	r2, [r3, #24]
}
 8005a66:	bf00      	nop
 8005a68:	370c      	adds	r7, #12
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr
	...

08005a74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b082      	sub	sp, #8
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d101      	bne.n	8005a86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	e07f      	b.n	8005b86 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d106      	bne.n	8005aa0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f7fd fd40 	bl	8003520 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2224      	movs	r2, #36	; 0x24
 8005aa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f022 0201 	bic.w	r2, r2, #1
 8005ab6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	685a      	ldr	r2, [r3, #4]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005ac4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	689a      	ldr	r2, [r3, #8]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005ad4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d107      	bne.n	8005aee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	689a      	ldr	r2, [r3, #8]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005aea:	609a      	str	r2, [r3, #8]
 8005aec:	e006      	b.n	8005afc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	689a      	ldr	r2, [r3, #8]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005afa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	2b02      	cmp	r3, #2
 8005b02:	d104      	bne.n	8005b0e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b0c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	6859      	ldr	r1, [r3, #4]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	4b1d      	ldr	r3, [pc, #116]	; (8005b90 <HAL_I2C_Init+0x11c>)
 8005b1a:	430b      	orrs	r3, r1
 8005b1c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	68da      	ldr	r2, [r3, #12]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005b2c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	691a      	ldr	r2, [r3, #16]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	695b      	ldr	r3, [r3, #20]
 8005b36:	ea42 0103 	orr.w	r1, r2, r3
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	699b      	ldr	r3, [r3, #24]
 8005b3e:	021a      	lsls	r2, r3, #8
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	430a      	orrs	r2, r1
 8005b46:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	69d9      	ldr	r1, [r3, #28]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6a1a      	ldr	r2, [r3, #32]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	430a      	orrs	r2, r1
 8005b56:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f042 0201 	orr.w	r2, r2, #1
 8005b66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2220      	movs	r2, #32
 8005b72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005b84:	2300      	movs	r3, #0
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3708      	adds	r7, #8
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
 8005b8e:	bf00      	nop
 8005b90:	02008000 	.word	0x02008000

08005b94 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b088      	sub	sp, #32
 8005b98:	af02      	add	r7, sp, #8
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	607a      	str	r2, [r7, #4]
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	460b      	mov	r3, r1
 8005ba2:	817b      	strh	r3, [r7, #10]
 8005ba4:	4613      	mov	r3, r2
 8005ba6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	2b20      	cmp	r3, #32
 8005bb2:	f040 80da 	bne.w	8005d6a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d101      	bne.n	8005bc4 <HAL_I2C_Master_Transmit+0x30>
 8005bc0:	2302      	movs	r3, #2
 8005bc2:	e0d3      	b.n	8005d6c <HAL_I2C_Master_Transmit+0x1d8>
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005bcc:	f7fe fa82 	bl	80040d4 <HAL_GetTick>
 8005bd0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	9300      	str	r3, [sp, #0]
 8005bd6:	2319      	movs	r3, #25
 8005bd8:	2201      	movs	r2, #1
 8005bda:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005bde:	68f8      	ldr	r0, [r7, #12]
 8005be0:	f000 fa00 	bl	8005fe4 <I2C_WaitOnFlagUntilTimeout>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d001      	beq.n	8005bee <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	e0be      	b.n	8005d6c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2221      	movs	r2, #33	; 0x21
 8005bf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2210      	movs	r2, #16
 8005bfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2200      	movs	r2, #0
 8005c02:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	893a      	ldrh	r2, [r7, #8]
 8005c0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2200      	movs	r2, #0
 8005c14:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	2bff      	cmp	r3, #255	; 0xff
 8005c1e:	d90e      	bls.n	8005c3e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	22ff      	movs	r2, #255	; 0xff
 8005c24:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c2a:	b2da      	uxtb	r2, r3
 8005c2c:	8979      	ldrh	r1, [r7, #10]
 8005c2e:	4b51      	ldr	r3, [pc, #324]	; (8005d74 <HAL_I2C_Master_Transmit+0x1e0>)
 8005c30:	9300      	str	r3, [sp, #0]
 8005c32:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005c36:	68f8      	ldr	r0, [r7, #12]
 8005c38:	f000 fb62 	bl	8006300 <I2C_TransferConfig>
 8005c3c:	e06c      	b.n	8005d18 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c42:	b29a      	uxth	r2, r3
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c4c:	b2da      	uxtb	r2, r3
 8005c4e:	8979      	ldrh	r1, [r7, #10]
 8005c50:	4b48      	ldr	r3, [pc, #288]	; (8005d74 <HAL_I2C_Master_Transmit+0x1e0>)
 8005c52:	9300      	str	r3, [sp, #0]
 8005c54:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005c58:	68f8      	ldr	r0, [r7, #12]
 8005c5a:	f000 fb51 	bl	8006300 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8005c5e:	e05b      	b.n	8005d18 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c60:	697a      	ldr	r2, [r7, #20]
 8005c62:	6a39      	ldr	r1, [r7, #32]
 8005c64:	68f8      	ldr	r0, [r7, #12]
 8005c66:	f000 f9fd 	bl	8006064 <I2C_WaitOnTXISFlagUntilTimeout>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d001      	beq.n	8005c74 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	e07b      	b.n	8005d6c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c78:	781a      	ldrb	r2, [r3, #0]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c84:	1c5a      	adds	r2, r3, #1
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	3b01      	subs	r3, #1
 8005c92:	b29a      	uxth	r2, r3
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c9c:	3b01      	subs	r3, #1
 8005c9e:	b29a      	uxth	r2, r3
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d034      	beq.n	8005d18 <HAL_I2C_Master_Transmit+0x184>
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d130      	bne.n	8005d18 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	9300      	str	r3, [sp, #0]
 8005cba:	6a3b      	ldr	r3, [r7, #32]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	2180      	movs	r1, #128	; 0x80
 8005cc0:	68f8      	ldr	r0, [r7, #12]
 8005cc2:	f000 f98f 	bl	8005fe4 <I2C_WaitOnFlagUntilTimeout>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d001      	beq.n	8005cd0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e04d      	b.n	8005d6c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	2bff      	cmp	r3, #255	; 0xff
 8005cd8:	d90e      	bls.n	8005cf8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	22ff      	movs	r2, #255	; 0xff
 8005cde:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ce4:	b2da      	uxtb	r2, r3
 8005ce6:	8979      	ldrh	r1, [r7, #10]
 8005ce8:	2300      	movs	r3, #0
 8005cea:	9300      	str	r3, [sp, #0]
 8005cec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005cf0:	68f8      	ldr	r0, [r7, #12]
 8005cf2:	f000 fb05 	bl	8006300 <I2C_TransferConfig>
 8005cf6:	e00f      	b.n	8005d18 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cfc:	b29a      	uxth	r2, r3
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d06:	b2da      	uxtb	r2, r3
 8005d08:	8979      	ldrh	r1, [r7, #10]
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	9300      	str	r3, [sp, #0]
 8005d0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d12:	68f8      	ldr	r0, [r7, #12]
 8005d14:	f000 faf4 	bl	8006300 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d19e      	bne.n	8005c60 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d22:	697a      	ldr	r2, [r7, #20]
 8005d24:	6a39      	ldr	r1, [r7, #32]
 8005d26:	68f8      	ldr	r0, [r7, #12]
 8005d28:	f000 f9dc 	bl	80060e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d001      	beq.n	8005d36 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e01a      	b.n	8005d6c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2220      	movs	r2, #32
 8005d3c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	6859      	ldr	r1, [r3, #4]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	4b0b      	ldr	r3, [pc, #44]	; (8005d78 <HAL_I2C_Master_Transmit+0x1e4>)
 8005d4a:	400b      	ands	r3, r1
 8005d4c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2220      	movs	r2, #32
 8005d52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2200      	movs	r2, #0
 8005d62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005d66:	2300      	movs	r3, #0
 8005d68:	e000      	b.n	8005d6c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8005d6a:	2302      	movs	r3, #2
  }
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3718      	adds	r7, #24
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}
 8005d74:	80002000 	.word	0x80002000
 8005d78:	fe00e800 	.word	0xfe00e800

08005d7c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b088      	sub	sp, #32
 8005d80:	af02      	add	r7, sp, #8
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	607a      	str	r2, [r7, #4]
 8005d86:	461a      	mov	r2, r3
 8005d88:	460b      	mov	r3, r1
 8005d8a:	817b      	strh	r3, [r7, #10]
 8005d8c:	4613      	mov	r3, r2
 8005d8e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	2b20      	cmp	r3, #32
 8005d9a:	f040 80db 	bne.w	8005f54 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d101      	bne.n	8005dac <HAL_I2C_Master_Receive+0x30>
 8005da8:	2302      	movs	r3, #2
 8005daa:	e0d4      	b.n	8005f56 <HAL_I2C_Master_Receive+0x1da>
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005db4:	f7fe f98e 	bl	80040d4 <HAL_GetTick>
 8005db8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	9300      	str	r3, [sp, #0]
 8005dbe:	2319      	movs	r3, #25
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005dc6:	68f8      	ldr	r0, [r7, #12]
 8005dc8:	f000 f90c 	bl	8005fe4 <I2C_WaitOnFlagUntilTimeout>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d001      	beq.n	8005dd6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e0bf      	b.n	8005f56 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2222      	movs	r2, #34	; 0x22
 8005dda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2210      	movs	r2, #16
 8005de2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2200      	movs	r2, #0
 8005dea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	893a      	ldrh	r2, [r7, #8]
 8005df6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	2bff      	cmp	r3, #255	; 0xff
 8005e06:	d90e      	bls.n	8005e26 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	22ff      	movs	r2, #255	; 0xff
 8005e0c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e12:	b2da      	uxtb	r2, r3
 8005e14:	8979      	ldrh	r1, [r7, #10]
 8005e16:	4b52      	ldr	r3, [pc, #328]	; (8005f60 <HAL_I2C_Master_Receive+0x1e4>)
 8005e18:	9300      	str	r3, [sp, #0]
 8005e1a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005e1e:	68f8      	ldr	r0, [r7, #12]
 8005e20:	f000 fa6e 	bl	8006300 <I2C_TransferConfig>
 8005e24:	e06d      	b.n	8005f02 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e2a:	b29a      	uxth	r2, r3
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e34:	b2da      	uxtb	r2, r3
 8005e36:	8979      	ldrh	r1, [r7, #10]
 8005e38:	4b49      	ldr	r3, [pc, #292]	; (8005f60 <HAL_I2C_Master_Receive+0x1e4>)
 8005e3a:	9300      	str	r3, [sp, #0]
 8005e3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e40:	68f8      	ldr	r0, [r7, #12]
 8005e42:	f000 fa5d 	bl	8006300 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8005e46:	e05c      	b.n	8005f02 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e48:	697a      	ldr	r2, [r7, #20]
 8005e4a:	6a39      	ldr	r1, [r7, #32]
 8005e4c:	68f8      	ldr	r0, [r7, #12]
 8005e4e:	f000 f985 	bl	800615c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005e52:	4603      	mov	r3, r0
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d001      	beq.n	8005e5c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e07c      	b.n	8005f56 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e66:	b2d2      	uxtb	r2, r2
 8005e68:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e6e:	1c5a      	adds	r2, r3, #1
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e78:	3b01      	subs	r3, #1
 8005e7a:	b29a      	uxth	r2, r3
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	3b01      	subs	r3, #1
 8005e88:	b29a      	uxth	r2, r3
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d034      	beq.n	8005f02 <HAL_I2C_Master_Receive+0x186>
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d130      	bne.n	8005f02 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	9300      	str	r3, [sp, #0]
 8005ea4:	6a3b      	ldr	r3, [r7, #32]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	2180      	movs	r1, #128	; 0x80
 8005eaa:	68f8      	ldr	r0, [r7, #12]
 8005eac:	f000 f89a 	bl	8005fe4 <I2C_WaitOnFlagUntilTimeout>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d001      	beq.n	8005eba <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e04d      	b.n	8005f56 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	2bff      	cmp	r3, #255	; 0xff
 8005ec2:	d90e      	bls.n	8005ee2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	22ff      	movs	r2, #255	; 0xff
 8005ec8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ece:	b2da      	uxtb	r2, r3
 8005ed0:	8979      	ldrh	r1, [r7, #10]
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	9300      	str	r3, [sp, #0]
 8005ed6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005eda:	68f8      	ldr	r0, [r7, #12]
 8005edc:	f000 fa10 	bl	8006300 <I2C_TransferConfig>
 8005ee0:	e00f      	b.n	8005f02 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ee6:	b29a      	uxth	r2, r3
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ef0:	b2da      	uxtb	r2, r3
 8005ef2:	8979      	ldrh	r1, [r7, #10]
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	9300      	str	r3, [sp, #0]
 8005ef8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005efc:	68f8      	ldr	r0, [r7, #12]
 8005efe:	f000 f9ff 	bl	8006300 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d19d      	bne.n	8005e48 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f0c:	697a      	ldr	r2, [r7, #20]
 8005f0e:	6a39      	ldr	r1, [r7, #32]
 8005f10:	68f8      	ldr	r0, [r7, #12]
 8005f12:	f000 f8e7 	bl	80060e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005f16:	4603      	mov	r3, r0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d001      	beq.n	8005f20 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	e01a      	b.n	8005f56 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	2220      	movs	r2, #32
 8005f26:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	6859      	ldr	r1, [r3, #4]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	4b0c      	ldr	r3, [pc, #48]	; (8005f64 <HAL_I2C_Master_Receive+0x1e8>)
 8005f34:	400b      	ands	r3, r1
 8005f36:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2220      	movs	r2, #32
 8005f3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005f50:	2300      	movs	r3, #0
 8005f52:	e000      	b.n	8005f56 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005f54:	2302      	movs	r3, #2
  }
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3718      	adds	r7, #24
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
 8005f5e:	bf00      	nop
 8005f60:	80002400 	.word	0x80002400
 8005f64:	fe00e800 	.word	0xfe00e800

08005f68 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b084      	sub	sp, #16
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	699b      	ldr	r3, [r3, #24]
 8005f76:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d005      	beq.n	8005f94 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f8c:	68ba      	ldr	r2, [r7, #8]
 8005f8e:	68f9      	ldr	r1, [r7, #12]
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	4798      	blx	r3
  }
}
 8005f94:	bf00      	nop
 8005f96:	3710      	adds	r7, #16
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	699b      	ldr	r3, [r3, #24]
 8005faa:	f003 0302 	and.w	r3, r3, #2
 8005fae:	2b02      	cmp	r3, #2
 8005fb0:	d103      	bne.n	8005fba <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	699b      	ldr	r3, [r3, #24]
 8005fc0:	f003 0301 	and.w	r3, r3, #1
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d007      	beq.n	8005fd8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	699a      	ldr	r2, [r3, #24]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f042 0201 	orr.w	r2, r2, #1
 8005fd6:	619a      	str	r2, [r3, #24]
  }
}
 8005fd8:	bf00      	nop
 8005fda:	370c      	adds	r7, #12
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr

08005fe4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	60b9      	str	r1, [r7, #8]
 8005fee:	603b      	str	r3, [r7, #0]
 8005ff0:	4613      	mov	r3, r2
 8005ff2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ff4:	e022      	b.n	800603c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ffc:	d01e      	beq.n	800603c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ffe:	f7fe f869 	bl	80040d4 <HAL_GetTick>
 8006002:	4602      	mov	r2, r0
 8006004:	69bb      	ldr	r3, [r7, #24]
 8006006:	1ad3      	subs	r3, r2, r3
 8006008:	683a      	ldr	r2, [r7, #0]
 800600a:	429a      	cmp	r2, r3
 800600c:	d302      	bcc.n	8006014 <I2C_WaitOnFlagUntilTimeout+0x30>
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d113      	bne.n	800603c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006018:	f043 0220 	orr.w	r2, r3, #32
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2220      	movs	r2, #32
 8006024:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2200      	movs	r2, #0
 800602c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2200      	movs	r2, #0
 8006034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006038:	2301      	movs	r3, #1
 800603a:	e00f      	b.n	800605c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	699a      	ldr	r2, [r3, #24]
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	4013      	ands	r3, r2
 8006046:	68ba      	ldr	r2, [r7, #8]
 8006048:	429a      	cmp	r2, r3
 800604a:	bf0c      	ite	eq
 800604c:	2301      	moveq	r3, #1
 800604e:	2300      	movne	r3, #0
 8006050:	b2db      	uxtb	r3, r3
 8006052:	461a      	mov	r2, r3
 8006054:	79fb      	ldrb	r3, [r7, #7]
 8006056:	429a      	cmp	r2, r3
 8006058:	d0cd      	beq.n	8005ff6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800605a:	2300      	movs	r3, #0
}
 800605c:	4618      	mov	r0, r3
 800605e:	3710      	adds	r7, #16
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}

08006064 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b084      	sub	sp, #16
 8006068:	af00      	add	r7, sp, #0
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	60b9      	str	r1, [r7, #8]
 800606e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006070:	e02c      	b.n	80060cc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	68b9      	ldr	r1, [r7, #8]
 8006076:	68f8      	ldr	r0, [r7, #12]
 8006078:	f000 f8dc 	bl	8006234 <I2C_IsAcknowledgeFailed>
 800607c:	4603      	mov	r3, r0
 800607e:	2b00      	cmp	r3, #0
 8006080:	d001      	beq.n	8006086 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	e02a      	b.n	80060dc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800608c:	d01e      	beq.n	80060cc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800608e:	f7fe f821 	bl	80040d4 <HAL_GetTick>
 8006092:	4602      	mov	r2, r0
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	1ad3      	subs	r3, r2, r3
 8006098:	68ba      	ldr	r2, [r7, #8]
 800609a:	429a      	cmp	r2, r3
 800609c:	d302      	bcc.n	80060a4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d113      	bne.n	80060cc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060a8:	f043 0220 	orr.w	r2, r3, #32
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2220      	movs	r2, #32
 80060b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2200      	movs	r2, #0
 80060bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2200      	movs	r2, #0
 80060c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	e007      	b.n	80060dc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	699b      	ldr	r3, [r3, #24]
 80060d2:	f003 0302 	and.w	r3, r3, #2
 80060d6:	2b02      	cmp	r3, #2
 80060d8:	d1cb      	bne.n	8006072 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80060da:	2300      	movs	r3, #0
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3710      	adds	r7, #16
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b084      	sub	sp, #16
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	60f8      	str	r0, [r7, #12]
 80060ec:	60b9      	str	r1, [r7, #8]
 80060ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80060f0:	e028      	b.n	8006144 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	68b9      	ldr	r1, [r7, #8]
 80060f6:	68f8      	ldr	r0, [r7, #12]
 80060f8:	f000 f89c 	bl	8006234 <I2C_IsAcknowledgeFailed>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d001      	beq.n	8006106 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	e026      	b.n	8006154 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006106:	f7fd ffe5 	bl	80040d4 <HAL_GetTick>
 800610a:	4602      	mov	r2, r0
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	1ad3      	subs	r3, r2, r3
 8006110:	68ba      	ldr	r2, [r7, #8]
 8006112:	429a      	cmp	r2, r3
 8006114:	d302      	bcc.n	800611c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d113      	bne.n	8006144 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006120:	f043 0220 	orr.w	r2, r3, #32
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2220      	movs	r2, #32
 800612c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2200      	movs	r2, #0
 8006134:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2200      	movs	r2, #0
 800613c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	e007      	b.n	8006154 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	699b      	ldr	r3, [r3, #24]
 800614a:	f003 0320 	and.w	r3, r3, #32
 800614e:	2b20      	cmp	r3, #32
 8006150:	d1cf      	bne.n	80060f2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006152:	2300      	movs	r3, #0
}
 8006154:	4618      	mov	r0, r3
 8006156:	3710      	adds	r7, #16
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}

0800615c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	60b9      	str	r1, [r7, #8]
 8006166:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006168:	e055      	b.n	8006216 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	68b9      	ldr	r1, [r7, #8]
 800616e:	68f8      	ldr	r0, [r7, #12]
 8006170:	f000 f860 	bl	8006234 <I2C_IsAcknowledgeFailed>
 8006174:	4603      	mov	r3, r0
 8006176:	2b00      	cmp	r3, #0
 8006178:	d001      	beq.n	800617e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	e053      	b.n	8006226 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	699b      	ldr	r3, [r3, #24]
 8006184:	f003 0320 	and.w	r3, r3, #32
 8006188:	2b20      	cmp	r3, #32
 800618a:	d129      	bne.n	80061e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	699b      	ldr	r3, [r3, #24]
 8006192:	f003 0304 	and.w	r3, r3, #4
 8006196:	2b04      	cmp	r3, #4
 8006198:	d105      	bne.n	80061a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d001      	beq.n	80061a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80061a2:	2300      	movs	r3, #0
 80061a4:	e03f      	b.n	8006226 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	2220      	movs	r2, #32
 80061ac:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	6859      	ldr	r1, [r3, #4]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	4b1d      	ldr	r3, [pc, #116]	; (8006230 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80061ba:	400b      	ands	r3, r1
 80061bc:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2200      	movs	r2, #0
 80061c2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2220      	movs	r2, #32
 80061c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2200      	movs	r2, #0
 80061d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2200      	movs	r2, #0
 80061d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80061dc:	2301      	movs	r3, #1
 80061de:	e022      	b.n	8006226 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061e0:	f7fd ff78 	bl	80040d4 <HAL_GetTick>
 80061e4:	4602      	mov	r2, r0
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	1ad3      	subs	r3, r2, r3
 80061ea:	68ba      	ldr	r2, [r7, #8]
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d302      	bcc.n	80061f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d10f      	bne.n	8006216 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061fa:	f043 0220 	orr.w	r2, r3, #32
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2220      	movs	r2, #32
 8006206:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2200      	movs	r2, #0
 800620e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	e007      	b.n	8006226 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	699b      	ldr	r3, [r3, #24]
 800621c:	f003 0304 	and.w	r3, r3, #4
 8006220:	2b04      	cmp	r3, #4
 8006222:	d1a2      	bne.n	800616a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006224:	2300      	movs	r3, #0
}
 8006226:	4618      	mov	r0, r3
 8006228:	3710      	adds	r7, #16
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
 800622e:	bf00      	nop
 8006230:	fe00e800 	.word	0xfe00e800

08006234 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b084      	sub	sp, #16
 8006238:	af00      	add	r7, sp, #0
 800623a:	60f8      	str	r0, [r7, #12]
 800623c:	60b9      	str	r1, [r7, #8]
 800623e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	699b      	ldr	r3, [r3, #24]
 8006246:	f003 0310 	and.w	r3, r3, #16
 800624a:	2b10      	cmp	r3, #16
 800624c:	d151      	bne.n	80062f2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800624e:	e022      	b.n	8006296 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006256:	d01e      	beq.n	8006296 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006258:	f7fd ff3c 	bl	80040d4 <HAL_GetTick>
 800625c:	4602      	mov	r2, r0
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	1ad3      	subs	r3, r2, r3
 8006262:	68ba      	ldr	r2, [r7, #8]
 8006264:	429a      	cmp	r2, r3
 8006266:	d302      	bcc.n	800626e <I2C_IsAcknowledgeFailed+0x3a>
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d113      	bne.n	8006296 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006272:	f043 0220 	orr.w	r2, r3, #32
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2220      	movs	r2, #32
 800627e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2200      	movs	r2, #0
 8006286:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2200      	movs	r2, #0
 800628e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	e02e      	b.n	80062f4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	699b      	ldr	r3, [r3, #24]
 800629c:	f003 0320 	and.w	r3, r3, #32
 80062a0:	2b20      	cmp	r3, #32
 80062a2:	d1d5      	bne.n	8006250 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	2210      	movs	r2, #16
 80062aa:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	2220      	movs	r2, #32
 80062b2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80062b4:	68f8      	ldr	r0, [r7, #12]
 80062b6:	f7ff fe71 	bl	8005f9c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	6859      	ldr	r1, [r3, #4]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	4b0d      	ldr	r3, [pc, #52]	; (80062fc <I2C_IsAcknowledgeFailed+0xc8>)
 80062c6:	400b      	ands	r3, r1
 80062c8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ce:	f043 0204 	orr.w	r2, r3, #4
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2220      	movs	r2, #32
 80062da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2200      	movs	r2, #0
 80062ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	e000      	b.n	80062f4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80062f2:	2300      	movs	r3, #0
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3710      	adds	r7, #16
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}
 80062fc:	fe00e800 	.word	0xfe00e800

08006300 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8006300:	b480      	push	{r7}
 8006302:	b085      	sub	sp, #20
 8006304:	af00      	add	r7, sp, #0
 8006306:	60f8      	str	r0, [r7, #12]
 8006308:	607b      	str	r3, [r7, #4]
 800630a:	460b      	mov	r3, r1
 800630c:	817b      	strh	r3, [r7, #10]
 800630e:	4613      	mov	r3, r2
 8006310:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	685a      	ldr	r2, [r3, #4]
 8006318:	69bb      	ldr	r3, [r7, #24]
 800631a:	0d5b      	lsrs	r3, r3, #21
 800631c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006320:	4b0d      	ldr	r3, [pc, #52]	; (8006358 <I2C_TransferConfig+0x58>)
 8006322:	430b      	orrs	r3, r1
 8006324:	43db      	mvns	r3, r3
 8006326:	ea02 0103 	and.w	r1, r2, r3
 800632a:	897b      	ldrh	r3, [r7, #10]
 800632c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006330:	7a7b      	ldrb	r3, [r7, #9]
 8006332:	041b      	lsls	r3, r3, #16
 8006334:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006338:	431a      	orrs	r2, r3
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	431a      	orrs	r2, r3
 800633e:	69bb      	ldr	r3, [r7, #24]
 8006340:	431a      	orrs	r2, r3
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	430a      	orrs	r2, r1
 8006348:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800634a:	bf00      	nop
 800634c:	3714      	adds	r7, #20
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr
 8006356:	bf00      	nop
 8006358:	03ff63ff 	.word	0x03ff63ff

0800635c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800636c:	b2db      	uxtb	r3, r3
 800636e:	2b20      	cmp	r3, #32
 8006370:	d138      	bne.n	80063e4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006378:	2b01      	cmp	r3, #1
 800637a:	d101      	bne.n	8006380 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800637c:	2302      	movs	r3, #2
 800637e:	e032      	b.n	80063e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2201      	movs	r2, #1
 8006384:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2224      	movs	r2, #36	; 0x24
 800638c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	681a      	ldr	r2, [r3, #0]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f022 0201 	bic.w	r2, r2, #1
 800639e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80063ae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	6819      	ldr	r1, [r3, #0]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	683a      	ldr	r2, [r7, #0]
 80063bc:	430a      	orrs	r2, r1
 80063be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f042 0201 	orr.w	r2, r2, #1
 80063ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2220      	movs	r2, #32
 80063d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80063e0:	2300      	movs	r3, #0
 80063e2:	e000      	b.n	80063e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80063e4:	2302      	movs	r3, #2
  }
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	370c      	adds	r7, #12
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr

080063f2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80063f2:	b480      	push	{r7}
 80063f4:	b085      	sub	sp, #20
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	6078      	str	r0, [r7, #4]
 80063fa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006402:	b2db      	uxtb	r3, r3
 8006404:	2b20      	cmp	r3, #32
 8006406:	d139      	bne.n	800647c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800640e:	2b01      	cmp	r3, #1
 8006410:	d101      	bne.n	8006416 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006412:	2302      	movs	r3, #2
 8006414:	e033      	b.n	800647e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2201      	movs	r2, #1
 800641a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2224      	movs	r2, #36	; 0x24
 8006422:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	681a      	ldr	r2, [r3, #0]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f022 0201 	bic.w	r2, r2, #1
 8006434:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006444:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	021b      	lsls	r3, r3, #8
 800644a:	68fa      	ldr	r2, [r7, #12]
 800644c:	4313      	orrs	r3, r2
 800644e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	68fa      	ldr	r2, [r7, #12]
 8006456:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f042 0201 	orr.w	r2, r2, #1
 8006466:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2220      	movs	r2, #32
 800646c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006478:	2300      	movs	r3, #0
 800647a:	e000      	b.n	800647e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800647c:	2302      	movs	r3, #2
  }
}
 800647e:	4618      	mov	r0, r3
 8006480:	3714      	adds	r7, #20
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr

0800648a <HAL_MMC_Init>:
            MMC_HandleTypeDef and create the associated handle.
  * @param  hmmc: Pointer to the MMC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_Init(MMC_HandleTypeDef *hmmc)
{
 800648a:	b580      	push	{r7, lr}
 800648c:	b082      	sub	sp, #8
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
  /* Check the MMC handle allocation */
  if(hmmc == NULL)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d101      	bne.n	800649c <HAL_MMC_Init+0x12>
  {
    return HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	e022      	b.n	80064e2 <HAL_MMC_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hmmc->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hmmc->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hmmc->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hmmc->Init.ClockDiv));

  if(hmmc->State == HAL_MMC_STATE_RESET)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d105      	bne.n	80064b4 <HAL_MMC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hmmc->Lock = HAL_UNLOCKED;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2200      	movs	r2, #0
 80064ac:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hmmc->MspInitCallback(hmmc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_MMC_MspInit(hmmc);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f7fd f926 	bl	8003700 <HAL_MMC_MspInit>
#endif
  }

  hmmc->State = HAL_MMC_STATE_BUSY;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2203      	movs	r2, #3
 80064b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if(HAL_MMC_InitCard(hmmc) == HAL_ERROR)
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f000 f814 	bl	80064ea <HAL_MMC_InitCard>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d101      	bne.n	80064cc <HAL_MMC_Init+0x42>
  {
    return HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
 80064ca:	e00a      	b.n	80064e2 <HAL_MMC_Init+0x58>
  }

  /* Initialize the error code */
  hmmc->ErrorCode = HAL_DMA_ERROR_NONE;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the MMC operation */
  hmmc->Context = MMC_CONTEXT_NONE;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2200      	movs	r2, #0
 80064d6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the MMC state */
  hmmc->State = HAL_MMC_STATE_READY;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2201      	movs	r2, #1
 80064dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3708      	adds	r7, #8
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}

080064ea <HAL_MMC_InitCard>:
  * @note   This function initializes the MMC card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 80064ea:	b5b0      	push	{r4, r5, r7, lr}
 80064ec:	b08e      	sub	sp, #56	; 0x38
 80064ee:	af04      	add	r7, sp, #16
 80064f0:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  MMC_InitTypeDef Init;
  HAL_StatusTypeDef status;
  
  /* Default SDMMC peripheral configuration for MMC card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80064f2:	2300      	movs	r3, #0
 80064f4:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80064f6:	2300      	movs	r3, #0
 80064f8:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80064fa:	2300      	movs	r3, #0
 80064fc:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80064fe:	2300      	movs	r3, #0
 8006500:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8006502:	2300      	movs	r3, #0
 8006504:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8006506:	2376      	movs	r3, #118	; 0x76
 8006508:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hmmc->Instance, Init);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681d      	ldr	r5, [r3, #0]
 800650e:	466c      	mov	r4, sp
 8006510:	f107 0314 	add.w	r3, r7, #20
 8006514:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006518:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800651c:	f107 0308 	add.w	r3, r7, #8
 8006520:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006522:	4628      	mov	r0, r5
 8006524:	f005 fbb6 	bl	800bc94 <SDMMC_Init>
 8006528:	4603      	mov	r3, r0
 800652a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status == HAL_ERROR)
 800652e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006532:	2b01      	cmp	r3, #1
 8006534:	d101      	bne.n	800653a <HAL_MMC_InitCard+0x50>
  {
    return HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	e044      	b.n	80065c4 <HAL_MMC_InitCard+0xda>
  }

  /* Disable SDMMC Clock */
  __HAL_MMC_DISABLE(hmmc); 
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	685a      	ldr	r2, [r3, #4]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006548:	605a      	str	r2, [r3, #4]
  
  /* Set Power State to ON */
  status = SDMMC_PowerState_ON(hmmc->Instance);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4618      	mov	r0, r3
 8006550:	f005 fbcc 	bl	800bcec <SDMMC_PowerState_ON>
 8006554:	4603      	mov	r3, r0
 8006556:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status == HAL_ERROR)
 800655a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800655e:	2b01      	cmp	r3, #1
 8006560:	d101      	bne.n	8006566 <HAL_MMC_InitCard+0x7c>
  {
    return HAL_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	e02e      	b.n	80065c4 <HAL_MMC_InitCard+0xda>
  }

  /* Enable MMC Clock */
  __HAL_MMC_ENABLE(hmmc);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	685a      	ldr	r2, [r3, #4]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006574:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = MMC_PowerON(hmmc);
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 fa54 	bl	8006a24 <MMC_PowerON>
 800657c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_MMC_ERROR_NONE)
 800657e:	6a3b      	ldr	r3, [r7, #32]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d00b      	beq.n	800659c <HAL_MMC_InitCard+0xb2>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2201      	movs	r2, #1
 8006588:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hmmc->ErrorCode |= errorstate;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006590:	6a3b      	ldr	r3, [r7, #32]
 8006592:	431a      	orrs	r2, r3
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	e013      	b.n	80065c4 <HAL_MMC_InitCard+0xda>
  }

  /* Card initialization */
  errorstate = MMC_InitCard(hmmc);
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 f980 	bl	80068a2 <MMC_InitCard>
 80065a2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_MMC_ERROR_NONE)
 80065a4:	6a3b      	ldr	r3, [r7, #32]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d00b      	beq.n	80065c2 <HAL_MMC_InitCard+0xd8>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2201      	movs	r2, #1
 80065ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hmmc->ErrorCode |= errorstate;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065b6:	6a3b      	ldr	r3, [r7, #32]
 80065b8:	431a      	orrs	r2, r3
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80065be:	2301      	movs	r3, #1
 80065c0:	e000      	b.n	80065c4 <HAL_MMC_InitCard+0xda>
  }

  return HAL_OK;
 80065c2:	2300      	movs	r3, #0
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3728      	adds	r7, #40	; 0x28
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bdb0      	pop	{r4, r5, r7, pc}

080065cc <HAL_MMC_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_MMC_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_GetCardCSD(MMC_HandleTypeDef *hmmc, HAL_MMC_CardCSDTypeDef *pCSD)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b083      	sub	sp, #12
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hmmc->CSD[0] & 0xC0000000U) >> 30U);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065da:	0f9b      	lsrs	r3, r3, #30
 80065dc:	b2da      	uxtb	r2, r3
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hmmc->CSD[0] & 0x3C000000U) >> 26U);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065e6:	0e9b      	lsrs	r3, r3, #26
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	f003 030f 	and.w	r3, r3, #15
 80065ee:	b2da      	uxtb	r2, r3
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hmmc->CSD[0] & 0x03000000U) >> 24U);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065f8:	0e1b      	lsrs	r3, r3, #24
 80065fa:	b2db      	uxtb	r3, r3
 80065fc:	f003 0303 	and.w	r3, r3, #3
 8006600:	b2da      	uxtb	r2, r3
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hmmc->CSD[0] & 0x00FF0000U) >> 16U);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800660a:	0c1b      	lsrs	r3, r3, #16
 800660c:	b2da      	uxtb	r2, r3
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hmmc->CSD[0] & 0x0000FF00U) >> 8U);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006616:	0a1b      	lsrs	r3, r3, #8
 8006618:	b2da      	uxtb	r2, r3
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hmmc->CSD[0] & 0x000000FFU);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006622:	b2da      	uxtb	r2, r3
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hmmc->CSD[1] & 0xFFF00000U) >> 20U);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800662c:	0d1b      	lsrs	r3, r3, #20
 800662e:	b29a      	uxth	r2, r3
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hmmc->CSD[1] & 0x000F0000U) >> 16U);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006638:	0c1b      	lsrs	r3, r3, #16
 800663a:	b2db      	uxtb	r3, r3
 800663c:	f003 030f 	and.w	r3, r3, #15
 8006640:	b2da      	uxtb	r2, r3
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hmmc->CSD[1] & 0x00008000U) >> 15U);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800664a:	0bdb      	lsrs	r3, r3, #15
 800664c:	b2db      	uxtb	r3, r3
 800664e:	f003 0301 	and.w	r3, r3, #1
 8006652:	b2da      	uxtb	r2, r3
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00004000U) >> 14U);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800665c:	0b9b      	lsrs	r3, r3, #14
 800665e:	b2db      	uxtb	r3, r3
 8006660:	f003 0301 	and.w	r3, r3, #1
 8006664:	b2da      	uxtb	r2, r3
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00002000U) >> 13U);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800666e:	0b5b      	lsrs	r3, r3, #13
 8006670:	b2db      	uxtb	r3, r3
 8006672:	f003 0301 	and.w	r3, r3, #1
 8006676:	b2da      	uxtb	r2, r3
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hmmc->CSD[1] & 0x00001000U) >> 12U);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006680:	0b1b      	lsrs	r3, r3, #12
 8006682:	b2db      	uxtb	r3, r3
 8006684:	f003 0301 	and.w	r3, r3, #1
 8006688:	b2da      	uxtb	r2, r3
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	2200      	movs	r2, #0
 8006692:	735a      	strb	r2, [r3, #13]

  pCSD->DeviceSize = (((hmmc->CSD[1] & 0x000003FFU) << 2U) | ((hmmc->CSD[2] & 0xC0000000U) >> 30U));
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006698:	009a      	lsls	r2, r3, #2
 800669a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800669e:	4013      	ands	r3, r2
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80066a4:	0f92      	lsrs	r2, r2, #30
 80066a6:	431a      	orrs	r2, r3
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	611a      	str	r2, [r3, #16]

  pCSD->MaxRdCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x38000000U) >> 27U);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066b0:	0edb      	lsrs	r3, r3, #27
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	f003 0307 	and.w	r3, r3, #7
 80066b8:	b2da      	uxtb	r2, r3
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	751a      	strb	r2, [r3, #20]

  pCSD->MaxRdCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x07000000U) >> 24U);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066c2:	0e1b      	lsrs	r3, r3, #24
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	f003 0307 	and.w	r3, r3, #7
 80066ca:	b2da      	uxtb	r2, r3
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	755a      	strb	r2, [r3, #21]

  pCSD->MaxWrCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x00E00000U) >> 21U);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066d4:	0d5b      	lsrs	r3, r3, #21
 80066d6:	b2db      	uxtb	r3, r3
 80066d8:	f003 0307 	and.w	r3, r3, #7
 80066dc:	b2da      	uxtb	r2, r3
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	759a      	strb	r2, [r3, #22]

  pCSD->MaxWrCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x001C0000U) >> 18U);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066e6:	0c9b      	lsrs	r3, r3, #18
 80066e8:	b2db      	uxtb	r3, r3
 80066ea:	f003 0307 	and.w	r3, r3, #7
 80066ee:	b2da      	uxtb	r2, r3
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	75da      	strb	r2, [r3, #23]

  pCSD->DeviceSizeMul = (uint8_t)((hmmc->CSD[2] & 0x00038000U) >> 15U);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066f8:	0bdb      	lsrs	r3, r3, #15
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	f003 0307 	and.w	r3, r3, #7
 8006700:	b2da      	uxtb	r2, r3
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	761a      	strb	r2, [r3, #24]

  hmmc->MmcCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	691b      	ldr	r3, [r3, #16]
 800670a:	1c5a      	adds	r2, r3, #1
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	651a      	str	r2, [r3, #80]	; 0x50
  hmmc->MmcCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	7e1b      	ldrb	r3, [r3, #24]
 8006714:	b2db      	uxtb	r3, r3
 8006716:	f003 0307 	and.w	r3, r3, #7
 800671a:	3302      	adds	r3, #2
 800671c:	2201      	movs	r2, #1
 800671e:	fa02 f303 	lsl.w	r3, r2, r3
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006726:	fb02 f203 	mul.w	r2, r2, r3
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	651a      	str	r2, [r3, #80]	; 0x50
  hmmc->MmcCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	7a1b      	ldrb	r3, [r3, #8]
 8006732:	b2db      	uxtb	r3, r3
 8006734:	f003 030f 	and.w	r3, r3, #15
 8006738:	2201      	movs	r2, #1
 800673a:	409a      	lsls	r2, r3
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	655a      	str	r2, [r3, #84]	; 0x54

  hmmc->MmcCard.LogBlockNbr =  (hmmc->MmcCard.BlockNbr) * ((hmmc->MmcCard.BlockSize) / 512U);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006744:	687a      	ldr	r2, [r7, #4]
 8006746:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006748:	0a52      	lsrs	r2, r2, #9
 800674a:	fb02 f203 	mul.w	r2, r2, r3
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	659a      	str	r2, [r3, #88]	; 0x58
  hmmc->MmcCard.LogBlockSize = 512U;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006758:	65da      	str	r2, [r3, #92]	; 0x5c
  
  pCSD->EraseGrSize = (uint8_t)((hmmc->CSD[2] & 0x00004000U) >> 14U);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800675e:	0b9b      	lsrs	r3, r3, #14
 8006760:	b2db      	uxtb	r3, r3
 8006762:	f003 0301 	and.w	r3, r3, #1
 8006766:	b2da      	uxtb	r2, r3
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hmmc->CSD[2] & 0x00003F80U) >> 7U);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006770:	09db      	lsrs	r3, r3, #7
 8006772:	b2db      	uxtb	r3, r3
 8006774:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006778:	b2da      	uxtb	r2, r3
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hmmc->CSD[2] & 0x0000007FU);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006782:	b2db      	uxtb	r3, r3
 8006784:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006788:	b2da      	uxtb	r2, r3
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hmmc->CSD[3] & 0x80000000U) >> 31U);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006792:	0fdb      	lsrs	r3, r3, #31
 8006794:	b2da      	uxtb	r2, r3
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hmmc->CSD[3] & 0x60000000U) >> 29U);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800679e:	0f5b      	lsrs	r3, r3, #29
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	f003 0303 	and.w	r3, r3, #3
 80067a6:	b2da      	uxtb	r2, r3
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hmmc->CSD[3] & 0x1C000000U) >> 26U);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067b0:	0e9b      	lsrs	r3, r3, #26
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	f003 0307 	and.w	r3, r3, #7
 80067b8:	b2da      	uxtb	r2, r3
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hmmc->CSD[3] & 0x03C00000U) >> 22U);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067c2:	0d9b      	lsrs	r3, r3, #22
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	f003 030f 	and.w	r3, r3, #15
 80067ca:	b2da      	uxtb	r2, r3
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hmmc->CSD[3] & 0x00200000U) >> 21U);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067d4:	0d5b      	lsrs	r3, r3, #21
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	f003 0301 	and.w	r3, r3, #1
 80067dc:	b2da      	uxtb	r2, r3
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	2200      	movs	r2, #0
 80067e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hmmc->CSD[3] & 0x00010000U) >> 16U);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067f0:	0c1b      	lsrs	r3, r3, #16
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	f003 0301 	and.w	r3, r3, #1
 80067f8:	b2da      	uxtb	r2, r3
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hmmc->CSD[3] & 0x00008000U) >> 15U);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006804:	0bdb      	lsrs	r3, r3, #15
 8006806:	b2db      	uxtb	r3, r3
 8006808:	f003 0301 	and.w	r3, r3, #1
 800680c:	b2da      	uxtb	r2, r3
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hmmc->CSD[3] & 0x00004000U) >> 14U);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006818:	0b9b      	lsrs	r3, r3, #14
 800681a:	b2db      	uxtb	r3, r3
 800681c:	f003 0301 	and.w	r3, r3, #1
 8006820:	b2da      	uxtb	r2, r3
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00002000U) >> 13U);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800682c:	0b5b      	lsrs	r3, r3, #13
 800682e:	b2db      	uxtb	r3, r3
 8006830:	f003 0301 	and.w	r3, r3, #1
 8006834:	b2da      	uxtb	r2, r3
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00001000U) >> 12U);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006840:	0b1b      	lsrs	r3, r3, #12
 8006842:	b2db      	uxtb	r3, r3
 8006844:	f003 0301 	and.w	r3, r3, #1
 8006848:	b2da      	uxtb	r2, r3
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hmmc->CSD[3] & 0x00000C00U) >> 10U);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006854:	0a9b      	lsrs	r3, r3, #10
 8006856:	b2db      	uxtb	r3, r3
 8006858:	f003 0303 	and.w	r3, r3, #3
 800685c:	b2da      	uxtb	r2, r3
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hmmc->CSD[3] & 0x00000300U) >> 8U);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006868:	0a1b      	lsrs	r3, r3, #8
 800686a:	b2db      	uxtb	r3, r3
 800686c:	f003 0303 	and.w	r3, r3, #3
 8006870:	b2da      	uxtb	r2, r3
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hmmc->CSD[3] & 0x000000FEU) >> 1U);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800687c:	085b      	lsrs	r3, r3, #1
 800687e:	b2db      	uxtb	r3, r3
 8006880:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006884:	b2da      	uxtb	r2, r3
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	2201      	movs	r2, #1
 8006890:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006894:	2300      	movs	r3, #0
}
 8006896:	4618      	mov	r0, r3
 8006898:	370c      	adds	r7, #12
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr

080068a2 <MMC_InitCard>:
  * @brief  Initializes the mmc card.
  * @param  hmmc: Pointer to MMC handle
  * @retval MMC Card error state
  */
static uint32_t MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 80068a2:	b5b0      	push	{r4, r5, r7, lr}
 80068a4:	b094      	sub	sp, #80	; 0x50
 80068a6:	af04      	add	r7, sp, #16
 80068a8:	6078      	str	r0, [r7, #4]
  HAL_MMC_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t mmc_rca = 1U;
 80068aa:	2301      	movs	r3, #1
 80068ac:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hmmc->Instance) == 0U)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4618      	mov	r0, r3
 80068b4:	f005 fa29 	bl	800bd0a <SDMMC_GetPowerState>
 80068b8:	4603      	mov	r3, r0
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d102      	bne.n	80068c4 <MMC_InitCard+0x22>
  {
    /* Power off */
    return HAL_MMC_ERROR_REQUEST_NOT_APPLICABLE;
 80068be:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80068c2:	e0aa      	b.n	8006a1a <MMC_InitCard+0x178>
  }

  /* Send CMD2 ALL_SEND_CID */
  errorstate = SDMMC_CmdSendCID(hmmc->Instance);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4618      	mov	r0, r3
 80068ca:	f005 fab8 	bl	800be3e <SDMMC_CmdSendCID>
 80068ce:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_MMC_ERROR_NONE)
 80068d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d001      	beq.n	80068da <MMC_InitCard+0x38>
  {
    return errorstate;
 80068d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068d8:	e09f      	b.n	8006a1a <MMC_InitCard+0x178>
  }
  else
  {
    /* Get Card identification number data */
    hmmc->CID[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	2100      	movs	r1, #0
 80068e0:	4618      	mov	r0, r3
 80068e2:	f005 fa58 	bl	800bd96 <SDMMC_GetResponse>
 80068e6:	4602      	mov	r2, r0
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	671a      	str	r2, [r3, #112]	; 0x70
    hmmc->CID[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	2104      	movs	r1, #4
 80068f2:	4618      	mov	r0, r3
 80068f4:	f005 fa4f 	bl	800bd96 <SDMMC_GetResponse>
 80068f8:	4602      	mov	r2, r0
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	675a      	str	r2, [r3, #116]	; 0x74
    hmmc->CID[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	2108      	movs	r1, #8
 8006904:	4618      	mov	r0, r3
 8006906:	f005 fa46 	bl	800bd96 <SDMMC_GetResponse>
 800690a:	4602      	mov	r2, r0
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	679a      	str	r2, [r3, #120]	; 0x78
    hmmc->CID[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	210c      	movs	r1, #12
 8006916:	4618      	mov	r0, r3
 8006918:	f005 fa3d 	bl	800bd96 <SDMMC_GetResponse>
 800691c:	4602      	mov	r2, r0
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	67da      	str	r2, [r3, #124]	; 0x7c
  }

  /* Send CMD3 SET_REL_ADDR with argument 0 */
  /* MMC Card publishes its RCA. */
  errorstate = SDMMC_CmdSetRelAdd(hmmc->Instance, &mmc_rca);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f107 020e 	add.w	r2, r7, #14
 800692a:	4611      	mov	r1, r2
 800692c:	4618      	mov	r0, r3
 800692e:	f005 fac3 	bl	800beb8 <SDMMC_CmdSetRelAdd>
 8006932:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_MMC_ERROR_NONE)
 8006934:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006936:	2b00      	cmp	r3, #0
 8006938:	d001      	beq.n	800693e <MMC_InitCard+0x9c>
  {
    return errorstate;
 800693a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800693c:	e06d      	b.n	8006a1a <MMC_InitCard+0x178>
  }

  /* Get the MMC card RCA */
  hmmc->MmcCard.RelCardAdd = mmc_rca;
 800693e:	89fb      	ldrh	r3, [r7, #14]
 8006940:	461a      	mov	r2, r3
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Send CMD9 SEND_CSD with argument as card's RCA */
  errorstate = SDMMC_CmdSendCSD(hmmc->Instance, (uint32_t)(hmmc->MmcCard.RelCardAdd << 16U));
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800694e:	041b      	lsls	r3, r3, #16
 8006950:	4619      	mov	r1, r3
 8006952:	4610      	mov	r0, r2
 8006954:	f005 fa91 	bl	800be7a <SDMMC_CmdSendCSD>
 8006958:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_MMC_ERROR_NONE)
 800695a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800695c:	2b00      	cmp	r3, #0
 800695e:	d001      	beq.n	8006964 <MMC_InitCard+0xc2>
  {
    return errorstate;
 8006960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006962:	e05a      	b.n	8006a1a <MMC_InitCard+0x178>
  }
  else
  {
    /* Get Card Specific Data */
    hmmc->CSD[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	2100      	movs	r1, #0
 800696a:	4618      	mov	r0, r3
 800696c:	f005 fa13 	bl	800bd96 <SDMMC_GetResponse>
 8006970:	4602      	mov	r2, r0
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	661a      	str	r2, [r3, #96]	; 0x60
    hmmc->CSD[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	2104      	movs	r1, #4
 800697c:	4618      	mov	r0, r3
 800697e:	f005 fa0a 	bl	800bd96 <SDMMC_GetResponse>
 8006982:	4602      	mov	r2, r0
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	665a      	str	r2, [r3, #100]	; 0x64
    hmmc->CSD[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	2108      	movs	r1, #8
 800698e:	4618      	mov	r0, r3
 8006990:	f005 fa01 	bl	800bd96 <SDMMC_GetResponse>
 8006994:	4602      	mov	r2, r0
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	669a      	str	r2, [r3, #104]	; 0x68
    hmmc->CSD[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	210c      	movs	r1, #12
 80069a0:	4618      	mov	r0, r3
 80069a2:	f005 f9f8 	bl	800bd96 <SDMMC_GetResponse>
 80069a6:	4602      	mov	r2, r0
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	66da      	str	r2, [r3, #108]	; 0x6c
  }

  /* Get the Card Class */
  hmmc->MmcCard.Class = (SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2) >> 20U);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	2104      	movs	r1, #4
 80069b2:	4618      	mov	r0, r3
 80069b4:	f005 f9ef 	bl	800bd96 <SDMMC_GetResponse>
 80069b8:	4603      	mov	r3, r0
 80069ba:	0d1a      	lsrs	r2, r3, #20
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	649a      	str	r2, [r3, #72]	; 0x48

  /* Get CSD parameters */
  if (HAL_MMC_GetCardCSD(hmmc, &CSD) != HAL_OK)
 80069c0:	f107 0310 	add.w	r3, r7, #16
 80069c4:	4619      	mov	r1, r3
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f7ff fe00 	bl	80065cc <HAL_MMC_GetCardCSD>
 80069cc:	4603      	mov	r3, r0
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d002      	beq.n	80069d8 <MMC_InitCard+0x136>
  {
    return hmmc->ErrorCode;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d6:	e020      	b.n	8006a1a <MMC_InitCard+0x178>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6819      	ldr	r1, [r3, #0]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069e0:	041b      	lsls	r3, r3, #16
 80069e2:	f04f 0400 	mov.w	r4, #0
 80069e6:	461a      	mov	r2, r3
 80069e8:	4623      	mov	r3, r4
 80069ea:	4608      	mov	r0, r1
 80069ec:	f005 f9e6 	bl	800bdbc <SDMMC_CmdSelDesel>
 80069f0:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_MMC_ERROR_NONE)
 80069f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d001      	beq.n	80069fc <MMC_InitCard+0x15a>
  {
    return errorstate;
 80069f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069fa:	e00e      	b.n	8006a1a <MMC_InitCard+0x178>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hmmc->Instance, hmmc->Init);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681d      	ldr	r5, [r3, #0]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	466c      	mov	r4, sp
 8006a04:	f103 0210 	add.w	r2, r3, #16
 8006a08:	ca07      	ldmia	r2, {r0, r1, r2}
 8006a0a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006a0e:	3304      	adds	r3, #4
 8006a10:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006a12:	4628      	mov	r0, r5
 8006a14:	f005 f93e 	bl	800bc94 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_MMC_ERROR_NONE;
 8006a18:	2300      	movs	r3, #0
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3740      	adds	r7, #64	; 0x40
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006a24 <MMC_PowerON>:
  *         in the MMC handle.
  * @param  hmmc: Pointer to MMC handle
  * @retval error state
  */
static uint32_t MMC_PowerON(MMC_HandleTypeDef *hmmc)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b086      	sub	sp, #24
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006a30:	2300      	movs	r3, #0
 8006a32:	617b      	str	r3, [r7, #20]
 8006a34:	2300      	movs	r3, #0
 8006a36:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hmmc->Instance);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f005 f9e0 	bl	800be02 <SDMMC_CmdGoIdleState>
 8006a42:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_MMC_ERROR_NONE)
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d027      	beq.n	8006a9a <MMC_PowerON+0x76>
  {
    return errorstate;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	e034      	b.n	8006ab8 <MMC_PowerON+0x94>
  }

  while(validvoltage == 0U)
  {
    if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	1c5a      	adds	r2, r3, #1
 8006a52:	60ba      	str	r2, [r7, #8]
 8006a54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d102      	bne.n	8006a62 <MMC_PowerON+0x3e>
    {
      return HAL_MMC_ERROR_INVALID_VOLTRANGE;
 8006a5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006a60:	e02a      	b.n	8006ab8 <MMC_PowerON+0x94>
    }

    /* SEND CMD1 APP_CMD with MMC_HIGH_VOLTAGE_RANGE(0xC0FF8000) as argument */
    errorstate = SDMMC_CmdOpCondition(hmmc->Instance, eMMC_HIGH_VOLTAGE_RANGE);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4916      	ldr	r1, [pc, #88]	; (8006ac0 <MMC_PowerON+0x9c>)
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f005 fa46 	bl	800befa <SDMMC_CmdOpCondition>
 8006a6e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_MMC_ERROR_NONE)
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d002      	beq.n	8006a7c <MMC_PowerON+0x58>
    {
      return HAL_MMC_ERROR_UNSUPPORTED_FEATURE;
 8006a76:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006a7a:	e01d      	b.n	8006ab8 <MMC_PowerON+0x94>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	2100      	movs	r1, #0
 8006a82:	4618      	mov	r0, r3
 8006a84:	f005 f987 	bl	800bd96 <SDMMC_GetResponse>
 8006a88:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	0fdb      	lsrs	r3, r3, #31
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d101      	bne.n	8006a96 <MMC_PowerON+0x72>
 8006a92:	2301      	movs	r3, #1
 8006a94:	e000      	b.n	8006a98 <MMC_PowerON+0x74>
 8006a96:	2300      	movs	r3, #0
 8006a98:	613b      	str	r3, [r7, #16]
  while(validvoltage == 0U)
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d0d6      	beq.n	8006a4e <MMC_PowerON+0x2a>
  }

  /* When power routine is finished and command returns valid voltage */
  if (((response & (0xFF000000U)) >> 24U) == 0xC0U)
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	0e1b      	lsrs	r3, r3, #24
 8006aa4:	2bc0      	cmp	r3, #192	; 0xc0
 8006aa6:	d103      	bne.n	8006ab0 <MMC_PowerON+0x8c>
  {
    hmmc->MmcCard.CardType = MMC_HIGH_CAPACITY_CARD;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	645a      	str	r2, [r3, #68]	; 0x44
 8006aae:	e002      	b.n	8006ab6 <MMC_PowerON+0x92>
  }
  else
  {
    hmmc->MmcCard.CardType = MMC_LOW_CAPACITY_CARD;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  return HAL_MMC_ERROR_NONE;
 8006ab6:	2300      	movs	r3, #0
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3718      	adds	r7, #24
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}
 8006ac0:	c0ff8000 	.word	0xc0ff8000

08006ac4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006ac8:	4b05      	ldr	r3, [pc, #20]	; (8006ae0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a04      	ldr	r2, [pc, #16]	; (8006ae0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006ace:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ad2:	6013      	str	r3, [r2, #0]
}
 8006ad4:	bf00      	nop
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr
 8006ade:	bf00      	nop
 8006ae0:	40007000 	.word	0x40007000

08006ae4 <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pins if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  PWR->CR1 |= PWR_CR1_PDDS;
 8006ae8:	4b08      	ldr	r3, [pc, #32]	; (8006b0c <HAL_PWR_EnterSTANDBYMode+0x28>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a07      	ldr	r2, [pc, #28]	; (8006b0c <HAL_PWR_EnterSTANDBYMode+0x28>)
 8006aee:	f043 0302 	orr.w	r3, r3, #2
 8006af2:	6013      	str	r3, [r2, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 8006af4:	4b06      	ldr	r3, [pc, #24]	; (8006b10 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8006af6:	691b      	ldr	r3, [r3, #16]
 8006af8:	4a05      	ldr	r2, [pc, #20]	; (8006b10 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8006afa:	f043 0304 	orr.w	r3, r3, #4
 8006afe:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8006b00:	bf30      	wfi
}
 8006b02:	bf00      	nop
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr
 8006b0c:	40007000 	.word	0x40007000
 8006b10:	e000ed00 	.word	0xe000ed00

08006b14 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b082      	sub	sp, #8
 8006b18:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006b1e:	4b23      	ldr	r3, [pc, #140]	; (8006bac <HAL_PWREx_EnableOverDrive+0x98>)
 8006b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b22:	4a22      	ldr	r2, [pc, #136]	; (8006bac <HAL_PWREx_EnableOverDrive+0x98>)
 8006b24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b28:	6413      	str	r3, [r2, #64]	; 0x40
 8006b2a:	4b20      	ldr	r3, [pc, #128]	; (8006bac <HAL_PWREx_EnableOverDrive+0x98>)
 8006b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b32:	603b      	str	r3, [r7, #0]
 8006b34:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006b36:	4b1e      	ldr	r3, [pc, #120]	; (8006bb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a1d      	ldr	r2, [pc, #116]	; (8006bb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006b3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b40:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006b42:	f7fd fac7 	bl	80040d4 <HAL_GetTick>
 8006b46:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006b48:	e009      	b.n	8006b5e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006b4a:	f7fd fac3 	bl	80040d4 <HAL_GetTick>
 8006b4e:	4602      	mov	r2, r0
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	1ad3      	subs	r3, r2, r3
 8006b54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b58:	d901      	bls.n	8006b5e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006b5a:	2303      	movs	r3, #3
 8006b5c:	e022      	b.n	8006ba4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006b5e:	4b14      	ldr	r3, [pc, #80]	; (8006bb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b6a:	d1ee      	bne.n	8006b4a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006b6c:	4b10      	ldr	r3, [pc, #64]	; (8006bb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a0f      	ldr	r2, [pc, #60]	; (8006bb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006b72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b76:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006b78:	f7fd faac 	bl	80040d4 <HAL_GetTick>
 8006b7c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006b7e:	e009      	b.n	8006b94 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006b80:	f7fd faa8 	bl	80040d4 <HAL_GetTick>
 8006b84:	4602      	mov	r2, r0
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	1ad3      	subs	r3, r2, r3
 8006b8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b8e:	d901      	bls.n	8006b94 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006b90:	2303      	movs	r3, #3
 8006b92:	e007      	b.n	8006ba4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006b94:	4b06      	ldr	r3, [pc, #24]	; (8006bb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ba0:	d1ee      	bne.n	8006b80 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006ba2:	2300      	movs	r3, #0
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3708      	adds	r7, #8
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}
 8006bac:	40023800 	.word	0x40023800
 8006bb0:	40007000 	.word	0x40007000

08006bb4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b086      	sub	sp, #24
 8006bb8:	af02      	add	r7, sp, #8
 8006bba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006bbc:	f7fd fa8a 	bl	80040d4 <HAL_GetTick>
 8006bc0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d101      	bne.n	8006bcc <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	e067      	b.n	8006c9c <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006bd2:	b2db      	uxtb	r3, r3
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d10b      	bne.n	8006bf0 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f7fc fce9 	bl	80035b8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8006be6:	f241 3188 	movw	r1, #5000	; 0x1388
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 fc6c 	bl	80074c8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	3b01      	subs	r3, #1
 8006c00:	021a      	lsls	r2, r3, #8
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	430a      	orrs	r2, r1
 8006c08:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c0e:	9300      	str	r3, [sp, #0]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2200      	movs	r2, #0
 8006c14:	2120      	movs	r1, #32
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f000 fc97 	bl	800754a <QSPI_WaitFlagStateUntilTimeout>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006c20:	7afb      	ldrb	r3, [r7, #11]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d135      	bne.n	8006c92 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	4b1d      	ldr	r3, [pc, #116]	; (8006ca4 <HAL_QSPI_Init+0xf0>)
 8006c2e:	4013      	ands	r3, r2
 8006c30:	687a      	ldr	r2, [r7, #4]
 8006c32:	6852      	ldr	r2, [r2, #4]
 8006c34:	0611      	lsls	r1, r2, #24
 8006c36:	687a      	ldr	r2, [r7, #4]
 8006c38:	68d2      	ldr	r2, [r2, #12]
 8006c3a:	4311      	orrs	r1, r2
 8006c3c:	687a      	ldr	r2, [r7, #4]
 8006c3e:	69d2      	ldr	r2, [r2, #28]
 8006c40:	4311      	orrs	r1, r2
 8006c42:	687a      	ldr	r2, [r7, #4]
 8006c44:	6a12      	ldr	r2, [r2, #32]
 8006c46:	4311      	orrs	r1, r2
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	6812      	ldr	r2, [r2, #0]
 8006c4c:	430b      	orrs	r3, r1
 8006c4e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	685a      	ldr	r2, [r3, #4]
 8006c56:	4b14      	ldr	r3, [pc, #80]	; (8006ca8 <HAL_QSPI_Init+0xf4>)
 8006c58:	4013      	ands	r3, r2
 8006c5a:	687a      	ldr	r2, [r7, #4]
 8006c5c:	6912      	ldr	r2, [r2, #16]
 8006c5e:	0411      	lsls	r1, r2, #16
 8006c60:	687a      	ldr	r2, [r7, #4]
 8006c62:	6952      	ldr	r2, [r2, #20]
 8006c64:	4311      	orrs	r1, r2
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	6992      	ldr	r2, [r2, #24]
 8006c6a:	4311      	orrs	r1, r2
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	6812      	ldr	r2, [r2, #0]
 8006c70:	430b      	orrs	r3, r1
 8006c72:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	681a      	ldr	r2, [r3, #0]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f042 0201 	orr.w	r2, r2, #1
 8006c82:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2200      	movs	r2, #0
 8006c88:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8006c9a:	7afb      	ldrb	r3, [r7, #11]
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3710      	adds	r7, #16
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}
 8006ca4:	00ffff2f 	.word	0x00ffff2f
 8006ca8:	ffe0f8fe 	.word	0xffe0f8fe

08006cac <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi : QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b086      	sub	sp, #24
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	f003 0304 	and.w	r3, r3, #4
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d064      	beq.n	8006d98 <HAL_QSPI_IRQHandler+0xec>
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d05f      	beq.n	8006d98 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	3320      	adds	r3, #32
 8006cde:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	2b12      	cmp	r3, #18
 8006cea:	d125      	bne.n	8006d38 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8006cec:	e01c      	b.n	8006d28 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d00f      	beq.n	8006d16 <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cfa:	781a      	ldrb	r2, [r3, #0]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d04:	1c5a      	adds	r2, r3, #1
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d0e:	1e5a      	subs	r2, r3, #1
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	62da      	str	r2, [r3, #44]	; 0x2c
 8006d14:	e008      	b.n	8006d28 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006d24:	601a      	str	r2, [r3, #0]
          break;
 8006d26:	e033      	b.n	8006d90 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	f003 0304 	and.w	r3, r3, #4
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d1db      	bne.n	8006cee <HAL_QSPI_IRQHandler+0x42>
 8006d36:	e02b      	b.n	8006d90 <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d3e:	b2db      	uxtb	r3, r3
 8006d40:	2b22      	cmp	r3, #34	; 0x22
 8006d42:	d125      	bne.n	8006d90 <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8006d44:	e01d      	b.n	8006d82 <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d010      	beq.n	8006d70 <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d52:	68fa      	ldr	r2, [r7, #12]
 8006d54:	7812      	ldrb	r2, [r2, #0]
 8006d56:	b2d2      	uxtb	r2, r2
 8006d58:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d5e:	1c5a      	adds	r2, r3, #1
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d68:	1e5a      	subs	r2, r3, #1
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	639a      	str	r2, [r3, #56]	; 0x38
 8006d6e:	e008      	b.n	8006d82 <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006d7e:	601a      	str	r2, [r3, #0]
          break;
 8006d80:	e006      	b.n	8006d90 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	f003 0304 	and.w	r3, r3, #4
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d1da      	bne.n	8006d46 <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f000 fb7b 	bl	800748c <HAL_QSPI_FifoThresholdCallback>
 8006d96:	e13c      	b.n	8007012 <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	f003 0302 	and.w	r3, r3, #2
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	f000 80b0 	beq.w	8006f04 <HAL_QSPI_IRQHandler+0x258>
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	f000 80aa 	beq.w	8006f04 <HAL_QSPI_IRQHandler+0x258>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	2202      	movs	r2, #2
 8006db6:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8006dc6:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006dce:	b2db      	uxtb	r3, r3
 8006dd0:	2b12      	cmp	r3, #18
 8006dd2:	d120      	bne.n	8006e16 <HAL_QSPI_IRQHandler+0x16a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f003 0304 	and.w	r3, r3, #4
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d011      	beq.n	8006e06 <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f022 0204 	bic.w	r2, r2, #4
 8006df0:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f022 0201 	bic.w	r2, r2, #1
 8006e04:	601a      	str	r2, [r3, #0]
      /* Clear Busy bit */
      HAL_QSPI_Abort_IT(hqspi);
#endif

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2201      	movs	r2, #1
 8006e0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 fb32 	bl	8007478 <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8006e14:	e0fa      	b.n	800700c <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e1c:	b2db      	uxtb	r3, r3
 8006e1e:	2b22      	cmp	r3, #34	; 0x22
 8006e20:	d143      	bne.n	8006eaa <HAL_QSPI_IRQHandler+0x1fe>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f003 0304 	and.w	r3, r3, #4
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d012      	beq.n	8006e56 <HAL_QSPI_IRQHandler+0x1aa>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	681a      	ldr	r2, [r3, #0]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f022 0204 	bic.w	r2, r2, #4
 8006e3e:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f022 0201 	bic.w	r2, r2, #1
 8006e52:	601a      	str	r2, [r3, #0]
 8006e54:	e021      	b.n	8006e9a <HAL_QSPI_IRQHandler+0x1ee>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	3320      	adds	r3, #32
 8006e5c:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 8006e5e:	e013      	b.n	8006e88 <HAL_QSPI_IRQHandler+0x1dc>
        {
          if (hqspi->RxXferCount > 0U)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d017      	beq.n	8006e98 <HAL_QSPI_IRQHandler+0x1ec>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e6c:	68fa      	ldr	r2, [r7, #12]
 8006e6e:	7812      	ldrb	r2, [r2, #0]
 8006e70:	b2d2      	uxtb	r2, r2
 8006e72:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e78:	1c5a      	adds	r2, r3, #1
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e82:	1e5a      	subs	r2, r3, #1
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d1e4      	bne.n	8006e60 <HAL_QSPI_IRQHandler+0x1b4>
 8006e96:	e000      	b.n	8006e9a <HAL_QSPI_IRQHandler+0x1ee>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 8006e98:	bf00      	nop
      /* Workaround - Extra data written in the FIFO at the end of a read transfer */
      HAL_QSPI_Abort_IT(hqspi);
#endif

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 fade 	bl	8007464 <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8006ea8:	e0b0      	b.n	800700c <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006eb0:	b2db      	uxtb	r3, r3
 8006eb2:	2b02      	cmp	r3, #2
 8006eb4:	d107      	bne.n	8006ec6 <HAL_QSPI_IRQHandler+0x21a>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2201      	movs	r2, #1
 8006eba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f000 fac6 	bl	8007450 <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8006ec4:	e0a2      	b.n	800700c <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ecc:	b2db      	uxtb	r3, r3
 8006ece:	2b08      	cmp	r3, #8
 8006ed0:	f040 809c 	bne.w	800700c <HAL_QSPI_IRQHandler+0x360>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	695a      	ldr	r2, [r3, #20]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8006ee2:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d103      	bne.n	8006efc <HAL_QSPI_IRQHandler+0x250>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f000 faa1 	bl	800743c <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8006efa:	e087      	b.n	800700c <HAL_QSPI_IRQHandler+0x360>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f000 fa93 	bl	8007428 <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8006f02:	e083      	b.n	800700c <HAL_QSPI_IRQHandler+0x360>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	f003 0308 	and.w	r3, r3, #8
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d01f      	beq.n	8006f4e <HAL_QSPI_IRQHandler+0x2a2>
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d01a      	beq.n	8006f4e <HAL_QSPI_IRQHandler+0x2a2>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	2208      	movs	r2, #8
 8006f1e:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d00b      	beq.n	8006f46 <HAL_QSPI_IRQHandler+0x29a>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	681a      	ldr	r2, [r3, #0]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8006f3c:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2201      	movs	r2, #1
 8006f42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 faaa 	bl	80074a0 <HAL_QSPI_StatusMatchCallback>
 8006f4c:	e061      	b.n	8007012 <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	f003 0301 	and.w	r3, r3, #1
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d047      	beq.n	8006fe8 <HAL_QSPI_IRQHandler+0x33c>
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d042      	beq.n	8006fe8 <HAL_QSPI_IRQHandler+0x33c>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	2201      	movs	r2, #1
 8006f68:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8006f78:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f7e:	f043 0202 	orr.w	r2, r3, #2
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f003 0304 	and.w	r3, r3, #4
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d021      	beq.n	8006fd8 <HAL_QSPI_IRQHandler+0x32c>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f022 0204 	bic.w	r2, r2, #4
 8006fa2:	601a      	str	r2, [r3, #0]

      /* Disable the DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fa8:	4a1c      	ldr	r2, [pc, #112]	; (800701c <HAL_QSPI_IRQHandler+0x370>)
 8006faa:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f7fd ff9b 	bl	8004eec <HAL_DMA_Abort_IT>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d029      	beq.n	8007010 <HAL_QSPI_IRQHandler+0x364>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fc0:	f043 0204 	orr.w	r2, r3, #4
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        
        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f000 fa29 	bl	8007428 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8006fd6:	e01b      	b.n	8007010 <HAL_QSPI_IRQHandler+0x364>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2201      	movs	r2, #1
 8006fdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f000 fa21 	bl	8007428 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8006fe6:	e013      	b.n	8007010 <HAL_QSPI_IRQHandler+0x364>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	f003 0310 	and.w	r3, r3, #16
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d00f      	beq.n	8007012 <HAL_QSPI_IRQHandler+0x366>
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d00a      	beq.n	8007012 <HAL_QSPI_IRQHandler+0x366>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	2210      	movs	r2, #16
 8007002:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f000 fa55 	bl	80074b4 <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 800700a:	e002      	b.n	8007012 <HAL_QSPI_IRQHandler+0x366>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800700c:	bf00      	nop
 800700e:	e000      	b.n	8007012 <HAL_QSPI_IRQHandler+0x366>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8007010:	bf00      	nop
}
 8007012:	bf00      	nop
 8007014:	3718      	adds	r7, #24
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}
 800701a:	bf00      	nop
 800701c:	080074e5 	.word	0x080074e5

08007020 <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b088      	sub	sp, #32
 8007024:	af02      	add	r7, sp, #8
 8007026:	60f8      	str	r0, [r7, #12]
 8007028:	60b9      	str	r1, [r7, #8]
 800702a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800702c:	f7fd f852 	bl	80040d4 <HAL_GetTick>
 8007030:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007038:	b2db      	uxtb	r3, r3
 800703a:	2b01      	cmp	r3, #1
 800703c:	d101      	bne.n	8007042 <HAL_QSPI_Command+0x22>
 800703e:	2302      	movs	r3, #2
 8007040:	e048      	b.n	80070d4 <HAL_QSPI_Command+0xb4>
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2201      	movs	r2, #1
 8007046:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007050:	b2db      	uxtb	r3, r3
 8007052:	2b01      	cmp	r3, #1
 8007054:	d137      	bne.n	80070c6 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2200      	movs	r2, #0
 800705a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2202      	movs	r2, #2
 8007060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	9300      	str	r3, [sp, #0]
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	2200      	movs	r2, #0
 800706c:	2120      	movs	r1, #32
 800706e:	68f8      	ldr	r0, [r7, #12]
 8007070:	f000 fa6b 	bl	800754a <QSPI_WaitFlagStateUntilTimeout>
 8007074:	4603      	mov	r3, r0
 8007076:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8007078:	7dfb      	ldrb	r3, [r7, #23]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d125      	bne.n	80070ca <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800707e:	2200      	movs	r2, #0
 8007080:	68b9      	ldr	r1, [r7, #8]
 8007082:	68f8      	ldr	r0, [r7, #12]
 8007084:	f000 fa98 	bl	80075b8 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800708c:	2b00      	cmp	r3, #0
 800708e:	d115      	bne.n	80070bc <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	9300      	str	r3, [sp, #0]
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	2201      	movs	r2, #1
 8007098:	2102      	movs	r1, #2
 800709a:	68f8      	ldr	r0, [r7, #12]
 800709c:	f000 fa55 	bl	800754a <QSPI_WaitFlagStateUntilTimeout>
 80070a0:	4603      	mov	r3, r0
 80070a2:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 80070a4:	7dfb      	ldrb	r3, [r7, #23]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d10f      	bne.n	80070ca <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	2202      	movs	r2, #2
 80070b0:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2201      	movs	r2, #1
 80070b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80070ba:	e006      	b.n	80070ca <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2201      	movs	r2, #1
 80070c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80070c4:	e001      	b.n	80070ca <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 80070c6:	2302      	movs	r3, #2
 80070c8:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2200      	movs	r2, #0
 80070ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80070d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3718      	adds	r7, #24
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}

080070dc <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b08a      	sub	sp, #40	; 0x28
 80070e0:	af02      	add	r7, sp, #8
 80070e2:	60f8      	str	r0, [r7, #12]
 80070e4:	60b9      	str	r1, [r7, #8]
 80070e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070e8:	2300      	movs	r3, #0
 80070ea:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80070ec:	f7fc fff2 	bl	80040d4 <HAL_GetTick>
 80070f0:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	3320      	adds	r3, #32
 80070f8:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007100:	b2db      	uxtb	r3, r3
 8007102:	2b01      	cmp	r3, #1
 8007104:	d101      	bne.n	800710a <HAL_QSPI_Transmit+0x2e>
 8007106:	2302      	movs	r3, #2
 8007108:	e076      	b.n	80071f8 <HAL_QSPI_Transmit+0x11c>
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2201      	movs	r2, #1
 800710e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007118:	b2db      	uxtb	r3, r3
 800711a:	2b01      	cmp	r3, #1
 800711c:	d165      	bne.n	80071ea <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2200      	movs	r2, #0
 8007122:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d056      	beq.n	80071d8 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2212      	movs	r2, #18
 800712e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	691b      	ldr	r3, [r3, #16]
 8007138:	1c5a      	adds	r2, r3, #1
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	691b      	ldr	r3, [r3, #16]
 8007144:	1c5a      	adds	r2, r3, #1
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	68ba      	ldr	r2, [r7, #8]
 800714e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	695a      	ldr	r2, [r3, #20]
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800715e:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8007160:	e01b      	b.n	800719a <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	9300      	str	r3, [sp, #0]
 8007166:	69bb      	ldr	r3, [r7, #24]
 8007168:	2201      	movs	r2, #1
 800716a:	2104      	movs	r1, #4
 800716c:	68f8      	ldr	r0, [r7, #12]
 800716e:	f000 f9ec 	bl	800754a <QSPI_WaitFlagStateUntilTimeout>
 8007172:	4603      	mov	r3, r0
 8007174:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8007176:	7ffb      	ldrb	r3, [r7, #31]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d113      	bne.n	80071a4 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007180:	781a      	ldrb	r2, [r3, #0]
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800718a:	1c5a      	adds	r2, r3, #1
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007194:	1e5a      	subs	r2, r3, #1
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d1df      	bne.n	8007162 <HAL_QSPI_Transmit+0x86>
 80071a2:	e000      	b.n	80071a6 <HAL_QSPI_Transmit+0xca>
          break;
 80071a4:	bf00      	nop
      }

      if (status == HAL_OK)
 80071a6:	7ffb      	ldrb	r3, [r7, #31]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d110      	bne.n	80071ce <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	9300      	str	r3, [sp, #0]
 80071b0:	69bb      	ldr	r3, [r7, #24]
 80071b2:	2201      	movs	r2, #1
 80071b4:	2102      	movs	r1, #2
 80071b6:	68f8      	ldr	r0, [r7, #12]
 80071b8:	f000 f9c7 	bl	800754a <QSPI_WaitFlagStateUntilTimeout>
 80071bc:	4603      	mov	r3, r0
 80071be:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 80071c0:	7ffb      	ldrb	r3, [r7, #31]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d103      	bne.n	80071ce <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	2202      	movs	r2, #2
 80071cc:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2201      	movs	r2, #1
 80071d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80071d6:	e00a      	b.n	80071ee <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071dc:	f043 0208 	orr.w	r2, r3, #8
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 80071e4:	2301      	movs	r3, #1
 80071e6:	77fb      	strb	r3, [r7, #31]
 80071e8:	e001      	b.n	80071ee <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 80071ea:	2302      	movs	r3, #2
 80071ec:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2200      	movs	r2, #0
 80071f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 80071f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3720      	adds	r7, #32
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}

08007200 <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b08a      	sub	sp, #40	; 0x28
 8007204:	af02      	add	r7, sp, #8
 8007206:	60f8      	str	r0, [r7, #12]
 8007208:	60b9      	str	r1, [r7, #8]
 800720a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800720c:	2300      	movs	r3, #0
 800720e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8007210:	f7fc ff60 	bl	80040d4 <HAL_GetTick>
 8007214:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	699b      	ldr	r3, [r3, #24]
 800721c:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	3320      	adds	r3, #32
 8007224:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800722c:	b2db      	uxtb	r3, r3
 800722e:	2b01      	cmp	r3, #1
 8007230:	d101      	bne.n	8007236 <HAL_QSPI_Receive+0x36>
 8007232:	2302      	movs	r3, #2
 8007234:	e07d      	b.n	8007332 <HAL_QSPI_Receive+0x132>
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	2201      	movs	r2, #1
 800723a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007244:	b2db      	uxtb	r3, r3
 8007246:	2b01      	cmp	r3, #1
 8007248:	d16c      	bne.n	8007324 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2200      	movs	r2, #0
 800724e:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d05d      	beq.n	8007312 <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2222      	movs	r2, #34	; 0x22
 800725a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	691b      	ldr	r3, [r3, #16]
 8007264:	1c5a      	adds	r2, r3, #1
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	691b      	ldr	r3, [r3, #16]
 8007270:	1c5a      	adds	r2, r3, #1
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	68ba      	ldr	r2, [r7, #8]
 800727a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	695b      	ldr	r3, [r3, #20]
 8007282:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800728e:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	697a      	ldr	r2, [r7, #20]
 8007296:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8007298:	e01c      	b.n	80072d4 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	9300      	str	r3, [sp, #0]
 800729e:	69bb      	ldr	r3, [r7, #24]
 80072a0:	2201      	movs	r2, #1
 80072a2:	2106      	movs	r1, #6
 80072a4:	68f8      	ldr	r0, [r7, #12]
 80072a6:	f000 f950 	bl	800754a <QSPI_WaitFlagStateUntilTimeout>
 80072aa:	4603      	mov	r3, r0
 80072ac:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 80072ae:	7ffb      	ldrb	r3, [r7, #31]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d114      	bne.n	80072de <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072b8:	693a      	ldr	r2, [r7, #16]
 80072ba:	7812      	ldrb	r2, [r2, #0]
 80072bc:	b2d2      	uxtb	r2, r2
 80072be:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072c4:	1c5a      	adds	r2, r3, #1
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ce:	1e5a      	subs	r2, r3, #1
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d1de      	bne.n	800729a <HAL_QSPI_Receive+0x9a>
 80072dc:	e000      	b.n	80072e0 <HAL_QSPI_Receive+0xe0>
          break;
 80072de:	bf00      	nop
      }

      if (status == HAL_OK)
 80072e0:	7ffb      	ldrb	r3, [r7, #31]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d110      	bne.n	8007308 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	9300      	str	r3, [sp, #0]
 80072ea:	69bb      	ldr	r3, [r7, #24]
 80072ec:	2201      	movs	r2, #1
 80072ee:	2102      	movs	r1, #2
 80072f0:	68f8      	ldr	r0, [r7, #12]
 80072f2:	f000 f92a 	bl	800754a <QSPI_WaitFlagStateUntilTimeout>
 80072f6:	4603      	mov	r3, r0
 80072f8:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 80072fa:	7ffb      	ldrb	r3, [r7, #31]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d103      	bne.n	8007308 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	2202      	movs	r2, #2
 8007306:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2201      	movs	r2, #1
 800730c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007310:	e00a      	b.n	8007328 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007316:	f043 0208 	orr.w	r2, r3, #8
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800731e:	2301      	movs	r3, #1
 8007320:	77fb      	strb	r3, [r7, #31]
 8007322:	e001      	b.n	8007328 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 8007324:	2302      	movs	r3, #2
 8007326:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2200      	movs	r2, #0
 800732c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8007330:	7ffb      	ldrb	r3, [r7, #31]
}
 8007332:	4618      	mov	r0, r3
 8007334:	3720      	adds	r7, #32
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}

0800733a <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800733a:	b580      	push	{r7, lr}
 800733c:	b088      	sub	sp, #32
 800733e:	af02      	add	r7, sp, #8
 8007340:	60f8      	str	r0, [r7, #12]
 8007342:	60b9      	str	r1, [r7, #8]
 8007344:	607a      	str	r2, [r7, #4]
 8007346:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8007348:	f7fc fec4 	bl	80040d4 <HAL_GetTick>
 800734c:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007354:	b2db      	uxtb	r3, r3
 8007356:	2b01      	cmp	r3, #1
 8007358:	d101      	bne.n	800735e <HAL_QSPI_AutoPolling+0x24>
 800735a:	2302      	movs	r3, #2
 800735c:	e060      	b.n	8007420 <HAL_QSPI_AutoPolling+0xe6>
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2201      	movs	r2, #1
 8007362:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800736c:	b2db      	uxtb	r3, r3
 800736e:	2b01      	cmp	r3, #1
 8007370:	d14f      	bne.n	8007412 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2200      	movs	r2, #0
 8007376:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2242      	movs	r2, #66	; 0x42
 800737c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	9300      	str	r3, [sp, #0]
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	2200      	movs	r2, #0
 8007388:	2120      	movs	r1, #32
 800738a:	68f8      	ldr	r0, [r7, #12]
 800738c:	f000 f8dd 	bl	800754a <QSPI_WaitFlagStateUntilTimeout>
 8007390:	4603      	mov	r3, r0
 8007392:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8007394:	7dfb      	ldrb	r3, [r7, #23]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d13d      	bne.n	8007416 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	687a      	ldr	r2, [r7, #4]
 80073a0:	6812      	ldr	r2, [r2, #0]
 80073a2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	6852      	ldr	r2, [r2, #4]
 80073ac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	687a      	ldr	r2, [r7, #4]
 80073b4:	6892      	ldr	r2, [r2, #8]
 80073b6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	691b      	ldr	r3, [r3, #16]
 80073c6:	431a      	orrs	r2, r3
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80073d0:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	68da      	ldr	r2, [r3, #12]
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 80073da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80073de:	68b9      	ldr	r1, [r7, #8]
 80073e0:	68f8      	ldr	r0, [r7, #12]
 80073e2:	f000 f8e9 	bl	80075b8 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	9300      	str	r3, [sp, #0]
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	2201      	movs	r2, #1
 80073ee:	2108      	movs	r1, #8
 80073f0:	68f8      	ldr	r0, [r7, #12]
 80073f2:	f000 f8aa 	bl	800754a <QSPI_WaitFlagStateUntilTimeout>
 80073f6:	4603      	mov	r3, r0
 80073f8:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 80073fa:	7dfb      	ldrb	r3, [r7, #23]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d10a      	bne.n	8007416 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	2208      	movs	r2, #8
 8007406:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2201      	movs	r2, #1
 800740c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007410:	e001      	b.n	8007416 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8007412:	2302      	movs	r3, #2
 8007414:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2200      	movs	r2, #0
 800741a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800741e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007420:	4618      	mov	r0, r3
 8007422:	3718      	adds	r7, #24
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}

08007428 <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 8007428:	b480      	push	{r7}
 800742a:	b083      	sub	sp, #12
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 8007430:	bf00      	nop
 8007432:	370c      	adds	r7, #12
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr

0800743c <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800743c:	b480      	push	{r7}
 800743e:	b083      	sub	sp, #12
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 8007444:	bf00      	nop
 8007446:	370c      	adds	r7, #12
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr

08007450 <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8007450:	b480      	push	{r7}
 8007452:	b083      	sub	sp, #12
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 8007458:	bf00      	nop
 800745a:	370c      	adds	r7, #12
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr

08007464 <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8007464:	b480      	push	{r7}
 8007466:	b083      	sub	sp, #12
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 800746c:	bf00      	nop
 800746e:	370c      	adds	r7, #12
 8007470:	46bd      	mov	sp, r7
 8007472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007476:	4770      	bx	lr

08007478 <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8007478:	b480      	push	{r7}
 800747a:	b083      	sub	sp, #12
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
 8007480:	bf00      	nop
 8007482:	370c      	adds	r7, #12
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr

0800748c <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 800748c:	b480      	push	{r7}
 800748e:	b083      	sub	sp, #12
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 8007494:	bf00      	nop
 8007496:	370c      	adds	r7, #12
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr

080074a0 <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b083      	sub	sp, #12
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 80074a8:	bf00      	nop
 80074aa:	370c      	adds	r7, #12
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr

080074b4 <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b083      	sub	sp, #12
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 80074bc:	bf00      	nop
 80074be:	370c      	adds	r7, #12
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr

080074c8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80074c8:	b480      	push	{r7}
 80074ca:	b083      	sub	sp, #12
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	683a      	ldr	r2, [r7, #0]
 80074d6:	649a      	str	r2, [r3, #72]	; 0x48
}
 80074d8:	bf00      	nop
 80074da:	370c      	adds	r7, #12
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr

080074e4 <QSPI_DMAAbortCplt>:
  * @brief  DMA QSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(DMA_HandleTypeDef *hdma)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b084      	sub	sp, #16
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hdma->Parent);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074f0:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2200      	movs	r2, #0
 80074f6:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2200      	movs	r2, #0
 80074fc:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007504:	b2db      	uxtb	r3, r3
 8007506:	2b08      	cmp	r3, #8
 8007508:	d114      	bne.n	8007534 <QSPI_DMAAbortCplt+0x50>
  {
    /* DMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	2202      	movs	r2, #2
 8007510:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	681a      	ldr	r2, [r3, #0]
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007520:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	681a      	ldr	r2, [r3, #0]
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f042 0202 	orr.w	r2, r2, #2
 8007530:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 8007532:	e006      	b.n	8007542 <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2201      	movs	r2, #1
 8007538:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 800753c:	68f8      	ldr	r0, [r7, #12]
 800753e:	f7ff ff73 	bl	8007428 <HAL_QSPI_ErrorCallback>
}
 8007542:	bf00      	nop
 8007544:	3710      	adds	r7, #16
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}

0800754a <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800754a:	b580      	push	{r7, lr}
 800754c:	b084      	sub	sp, #16
 800754e:	af00      	add	r7, sp, #0
 8007550:	60f8      	str	r0, [r7, #12]
 8007552:	60b9      	str	r1, [r7, #8]
 8007554:	603b      	str	r3, [r7, #0]
 8007556:	4613      	mov	r3, r2
 8007558:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800755a:	e01a      	b.n	8007592 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800755c:	69bb      	ldr	r3, [r7, #24]
 800755e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007562:	d016      	beq.n	8007592 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007564:	f7fc fdb6 	bl	80040d4 <HAL_GetTick>
 8007568:	4602      	mov	r2, r0
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	1ad3      	subs	r3, r2, r3
 800756e:	69ba      	ldr	r2, [r7, #24]
 8007570:	429a      	cmp	r2, r3
 8007572:	d302      	bcc.n	800757a <QSPI_WaitFlagStateUntilTimeout+0x30>
 8007574:	69bb      	ldr	r3, [r7, #24]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d10b      	bne.n	8007592 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2204      	movs	r2, #4
 800757e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007586:	f043 0201 	orr.w	r2, r3, #1
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800758e:	2301      	movs	r3, #1
 8007590:	e00e      	b.n	80075b0 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	689a      	ldr	r2, [r3, #8]
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	4013      	ands	r3, r2
 800759c:	2b00      	cmp	r3, #0
 800759e:	bf14      	ite	ne
 80075a0:	2301      	movne	r3, #1
 80075a2:	2300      	moveq	r3, #0
 80075a4:	b2db      	uxtb	r3, r3
 80075a6:	461a      	mov	r2, r3
 80075a8:	79fb      	ldrb	r3, [r7, #7]
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d1d6      	bne.n	800755c <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80075ae:	2300      	movs	r3, #0
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	3710      	adds	r7, #16
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}

080075b8 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b085      	sub	sp, #20
 80075bc:	af00      	add	r7, sp, #0
 80075be:	60f8      	str	r0, [r7, #12]
 80075c0:	60b9      	str	r1, [r7, #8]
 80075c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d009      	beq.n	80075e0 <QSPI_Config+0x28>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80075d2:	d005      	beq.n	80075e0 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	3a01      	subs	r2, #1
 80075de:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	699b      	ldr	r3, [r3, #24]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	f000 80b9 	beq.w	800775c <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	6a1b      	ldr	r3, [r3, #32]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d05f      	beq.n	80076b2 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	68ba      	ldr	r2, [r7, #8]
 80075f8:	6892      	ldr	r2, [r2, #8]
 80075fa:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	69db      	ldr	r3, [r3, #28]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d031      	beq.n	8007668 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800760c:	431a      	orrs	r2, r3
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007612:	431a      	orrs	r2, r3
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007618:	431a      	orrs	r2, r3
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	695b      	ldr	r3, [r3, #20]
 800761e:	049b      	lsls	r3, r3, #18
 8007620:	431a      	orrs	r2, r3
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	691b      	ldr	r3, [r3, #16]
 8007626:	431a      	orrs	r2, r3
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	6a1b      	ldr	r3, [r3, #32]
 800762c:	431a      	orrs	r2, r3
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	68db      	ldr	r3, [r3, #12]
 8007632:	431a      	orrs	r2, r3
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	69db      	ldr	r3, [r3, #28]
 8007638:	431a      	orrs	r2, r3
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	699b      	ldr	r3, [r3, #24]
 800763e:	431a      	orrs	r2, r3
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	ea42 0103 	orr.w	r1, r2, r3
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	687a      	ldr	r2, [r7, #4]
 800764e:	430a      	orrs	r2, r1
 8007650:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007658:	f000 812e 	beq.w	80078b8 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	68ba      	ldr	r2, [r7, #8]
 8007662:	6852      	ldr	r2, [r2, #4]
 8007664:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8007666:	e127      	b.n	80078b8 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007670:	431a      	orrs	r2, r3
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007676:	431a      	orrs	r2, r3
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767c:	431a      	orrs	r2, r3
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	695b      	ldr	r3, [r3, #20]
 8007682:	049b      	lsls	r3, r3, #18
 8007684:	431a      	orrs	r2, r3
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	691b      	ldr	r3, [r3, #16]
 800768a:	431a      	orrs	r2, r3
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	6a1b      	ldr	r3, [r3, #32]
 8007690:	431a      	orrs	r2, r3
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	69db      	ldr	r3, [r3, #28]
 8007696:	431a      	orrs	r2, r3
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	699b      	ldr	r3, [r3, #24]
 800769c:	431a      	orrs	r2, r3
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	ea42 0103 	orr.w	r1, r2, r3
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	687a      	ldr	r2, [r7, #4]
 80076ac:	430a      	orrs	r2, r1
 80076ae:	615a      	str	r2, [r3, #20]
}
 80076b0:	e102      	b.n	80078b8 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	69db      	ldr	r3, [r3, #28]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d02e      	beq.n	8007718 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076c2:	431a      	orrs	r2, r3
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076c8:	431a      	orrs	r2, r3
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ce:	431a      	orrs	r2, r3
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	695b      	ldr	r3, [r3, #20]
 80076d4:	049b      	lsls	r3, r3, #18
 80076d6:	431a      	orrs	r2, r3
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	6a1b      	ldr	r3, [r3, #32]
 80076dc:	431a      	orrs	r2, r3
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	68db      	ldr	r3, [r3, #12]
 80076e2:	431a      	orrs	r2, r3
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	69db      	ldr	r3, [r3, #28]
 80076e8:	431a      	orrs	r2, r3
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	699b      	ldr	r3, [r3, #24]
 80076ee:	431a      	orrs	r2, r3
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	ea42 0103 	orr.w	r1, r2, r3
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	430a      	orrs	r2, r1
 8007700:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007708:	f000 80d6 	beq.w	80078b8 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	68ba      	ldr	r2, [r7, #8]
 8007712:	6852      	ldr	r2, [r2, #4]
 8007714:	619a      	str	r2, [r3, #24]
}
 8007716:	e0cf      	b.n	80078b8 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007720:	431a      	orrs	r2, r3
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007726:	431a      	orrs	r2, r3
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800772c:	431a      	orrs	r2, r3
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	695b      	ldr	r3, [r3, #20]
 8007732:	049b      	lsls	r3, r3, #18
 8007734:	431a      	orrs	r2, r3
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	6a1b      	ldr	r3, [r3, #32]
 800773a:	431a      	orrs	r2, r3
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	69db      	ldr	r3, [r3, #28]
 8007740:	431a      	orrs	r2, r3
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	699b      	ldr	r3, [r3, #24]
 8007746:	431a      	orrs	r2, r3
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	ea42 0103 	orr.w	r1, r2, r3
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	687a      	ldr	r2, [r7, #4]
 8007756:	430a      	orrs	r2, r1
 8007758:	615a      	str	r2, [r3, #20]
}
 800775a:	e0ad      	b.n	80078b8 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	6a1b      	ldr	r3, [r3, #32]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d058      	beq.n	8007816 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	68ba      	ldr	r2, [r7, #8]
 800776a:	6892      	ldr	r2, [r2, #8]
 800776c:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	69db      	ldr	r3, [r3, #28]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d02d      	beq.n	80077d2 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800777e:	431a      	orrs	r2, r3
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007784:	431a      	orrs	r2, r3
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800778a:	431a      	orrs	r2, r3
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	695b      	ldr	r3, [r3, #20]
 8007790:	049b      	lsls	r3, r3, #18
 8007792:	431a      	orrs	r2, r3
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	691b      	ldr	r3, [r3, #16]
 8007798:	431a      	orrs	r2, r3
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	6a1b      	ldr	r3, [r3, #32]
 800779e:	431a      	orrs	r2, r3
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	68db      	ldr	r3, [r3, #12]
 80077a4:	431a      	orrs	r2, r3
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	69db      	ldr	r3, [r3, #28]
 80077aa:	431a      	orrs	r2, r3
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	699b      	ldr	r3, [r3, #24]
 80077b0:	ea42 0103 	orr.w	r1, r2, r3
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	687a      	ldr	r2, [r7, #4]
 80077ba:	430a      	orrs	r2, r1
 80077bc:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80077c4:	d078      	beq.n	80078b8 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	68ba      	ldr	r2, [r7, #8]
 80077cc:	6852      	ldr	r2, [r2, #4]
 80077ce:	619a      	str	r2, [r3, #24]
}
 80077d0:	e072      	b.n	80078b8 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077da:	431a      	orrs	r2, r3
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077e0:	431a      	orrs	r2, r3
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e6:	431a      	orrs	r2, r3
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	695b      	ldr	r3, [r3, #20]
 80077ec:	049b      	lsls	r3, r3, #18
 80077ee:	431a      	orrs	r2, r3
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	691b      	ldr	r3, [r3, #16]
 80077f4:	431a      	orrs	r2, r3
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	6a1b      	ldr	r3, [r3, #32]
 80077fa:	431a      	orrs	r2, r3
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	69db      	ldr	r3, [r3, #28]
 8007800:	431a      	orrs	r2, r3
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	699b      	ldr	r3, [r3, #24]
 8007806:	ea42 0103 	orr.w	r1, r2, r3
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	687a      	ldr	r2, [r7, #4]
 8007810:	430a      	orrs	r2, r1
 8007812:	615a      	str	r2, [r3, #20]
}
 8007814:	e050      	b.n	80078b8 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	69db      	ldr	r3, [r3, #28]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d02a      	beq.n	8007874 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007826:	431a      	orrs	r2, r3
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800782c:	431a      	orrs	r2, r3
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007832:	431a      	orrs	r2, r3
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	695b      	ldr	r3, [r3, #20]
 8007838:	049b      	lsls	r3, r3, #18
 800783a:	431a      	orrs	r2, r3
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	6a1b      	ldr	r3, [r3, #32]
 8007840:	431a      	orrs	r2, r3
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	68db      	ldr	r3, [r3, #12]
 8007846:	431a      	orrs	r2, r3
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	69db      	ldr	r3, [r3, #28]
 800784c:	431a      	orrs	r2, r3
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	699b      	ldr	r3, [r3, #24]
 8007852:	ea42 0103 	orr.w	r1, r2, r3
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	687a      	ldr	r2, [r7, #4]
 800785c:	430a      	orrs	r2, r1
 800785e:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007866:	d027      	beq.n	80078b8 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	68ba      	ldr	r2, [r7, #8]
 800786e:	6852      	ldr	r2, [r2, #4]
 8007870:	619a      	str	r2, [r3, #24]
}
 8007872:	e021      	b.n	80078b8 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007878:	2b00      	cmp	r3, #0
 800787a:	d01d      	beq.n	80078b8 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007884:	431a      	orrs	r2, r3
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800788a:	431a      	orrs	r2, r3
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007890:	431a      	orrs	r2, r3
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	695b      	ldr	r3, [r3, #20]
 8007896:	049b      	lsls	r3, r3, #18
 8007898:	431a      	orrs	r2, r3
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	6a1b      	ldr	r3, [r3, #32]
 800789e:	431a      	orrs	r2, r3
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	69db      	ldr	r3, [r3, #28]
 80078a4:	431a      	orrs	r2, r3
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	699b      	ldr	r3, [r3, #24]
 80078aa:	ea42 0103 	orr.w	r1, r2, r3
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	687a      	ldr	r2, [r7, #4]
 80078b4:	430a      	orrs	r2, r1
 80078b6:	615a      	str	r2, [r3, #20]
}
 80078b8:	bf00      	nop
 80078ba:	3714      	adds	r7, #20
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr

080078c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b086      	sub	sp, #24
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80078cc:	2300      	movs	r3, #0
 80078ce:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d101      	bne.n	80078da <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80078d6:	2301      	movs	r3, #1
 80078d8:	e29b      	b.n	8007e12 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f003 0301 	and.w	r3, r3, #1
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	f000 8087 	beq.w	80079f6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80078e8:	4b96      	ldr	r3, [pc, #600]	; (8007b44 <HAL_RCC_OscConfig+0x280>)
 80078ea:	689b      	ldr	r3, [r3, #8]
 80078ec:	f003 030c 	and.w	r3, r3, #12
 80078f0:	2b04      	cmp	r3, #4
 80078f2:	d00c      	beq.n	800790e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80078f4:	4b93      	ldr	r3, [pc, #588]	; (8007b44 <HAL_RCC_OscConfig+0x280>)
 80078f6:	689b      	ldr	r3, [r3, #8]
 80078f8:	f003 030c 	and.w	r3, r3, #12
 80078fc:	2b08      	cmp	r3, #8
 80078fe:	d112      	bne.n	8007926 <HAL_RCC_OscConfig+0x62>
 8007900:	4b90      	ldr	r3, [pc, #576]	; (8007b44 <HAL_RCC_OscConfig+0x280>)
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007908:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800790c:	d10b      	bne.n	8007926 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800790e:	4b8d      	ldr	r3, [pc, #564]	; (8007b44 <HAL_RCC_OscConfig+0x280>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007916:	2b00      	cmp	r3, #0
 8007918:	d06c      	beq.n	80079f4 <HAL_RCC_OscConfig+0x130>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d168      	bne.n	80079f4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007922:	2301      	movs	r3, #1
 8007924:	e275      	b.n	8007e12 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800792e:	d106      	bne.n	800793e <HAL_RCC_OscConfig+0x7a>
 8007930:	4b84      	ldr	r3, [pc, #528]	; (8007b44 <HAL_RCC_OscConfig+0x280>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a83      	ldr	r2, [pc, #524]	; (8007b44 <HAL_RCC_OscConfig+0x280>)
 8007936:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800793a:	6013      	str	r3, [r2, #0]
 800793c:	e02e      	b.n	800799c <HAL_RCC_OscConfig+0xd8>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d10c      	bne.n	8007960 <HAL_RCC_OscConfig+0x9c>
 8007946:	4b7f      	ldr	r3, [pc, #508]	; (8007b44 <HAL_RCC_OscConfig+0x280>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a7e      	ldr	r2, [pc, #504]	; (8007b44 <HAL_RCC_OscConfig+0x280>)
 800794c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007950:	6013      	str	r3, [r2, #0]
 8007952:	4b7c      	ldr	r3, [pc, #496]	; (8007b44 <HAL_RCC_OscConfig+0x280>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4a7b      	ldr	r2, [pc, #492]	; (8007b44 <HAL_RCC_OscConfig+0x280>)
 8007958:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800795c:	6013      	str	r3, [r2, #0]
 800795e:	e01d      	b.n	800799c <HAL_RCC_OscConfig+0xd8>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007968:	d10c      	bne.n	8007984 <HAL_RCC_OscConfig+0xc0>
 800796a:	4b76      	ldr	r3, [pc, #472]	; (8007b44 <HAL_RCC_OscConfig+0x280>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a75      	ldr	r2, [pc, #468]	; (8007b44 <HAL_RCC_OscConfig+0x280>)
 8007970:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007974:	6013      	str	r3, [r2, #0]
 8007976:	4b73      	ldr	r3, [pc, #460]	; (8007b44 <HAL_RCC_OscConfig+0x280>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a72      	ldr	r2, [pc, #456]	; (8007b44 <HAL_RCC_OscConfig+0x280>)
 800797c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007980:	6013      	str	r3, [r2, #0]
 8007982:	e00b      	b.n	800799c <HAL_RCC_OscConfig+0xd8>
 8007984:	4b6f      	ldr	r3, [pc, #444]	; (8007b44 <HAL_RCC_OscConfig+0x280>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4a6e      	ldr	r2, [pc, #440]	; (8007b44 <HAL_RCC_OscConfig+0x280>)
 800798a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800798e:	6013      	str	r3, [r2, #0]
 8007990:	4b6c      	ldr	r3, [pc, #432]	; (8007b44 <HAL_RCC_OscConfig+0x280>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a6b      	ldr	r2, [pc, #428]	; (8007b44 <HAL_RCC_OscConfig+0x280>)
 8007996:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800799a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d013      	beq.n	80079cc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079a4:	f7fc fb96 	bl	80040d4 <HAL_GetTick>
 80079a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80079aa:	e008      	b.n	80079be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80079ac:	f7fc fb92 	bl	80040d4 <HAL_GetTick>
 80079b0:	4602      	mov	r2, r0
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	1ad3      	subs	r3, r2, r3
 80079b6:	2b64      	cmp	r3, #100	; 0x64
 80079b8:	d901      	bls.n	80079be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80079ba:	2303      	movs	r3, #3
 80079bc:	e229      	b.n	8007e12 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80079be:	4b61      	ldr	r3, [pc, #388]	; (8007b44 <HAL_RCC_OscConfig+0x280>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d0f0      	beq.n	80079ac <HAL_RCC_OscConfig+0xe8>
 80079ca:	e014      	b.n	80079f6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079cc:	f7fc fb82 	bl	80040d4 <HAL_GetTick>
 80079d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80079d2:	e008      	b.n	80079e6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80079d4:	f7fc fb7e 	bl	80040d4 <HAL_GetTick>
 80079d8:	4602      	mov	r2, r0
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	1ad3      	subs	r3, r2, r3
 80079de:	2b64      	cmp	r3, #100	; 0x64
 80079e0:	d901      	bls.n	80079e6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80079e2:	2303      	movs	r3, #3
 80079e4:	e215      	b.n	8007e12 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80079e6:	4b57      	ldr	r3, [pc, #348]	; (8007b44 <HAL_RCC_OscConfig+0x280>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d1f0      	bne.n	80079d4 <HAL_RCC_OscConfig+0x110>
 80079f2:	e000      	b.n	80079f6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80079f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f003 0302 	and.w	r3, r3, #2
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d069      	beq.n	8007ad6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007a02:	4b50      	ldr	r3, [pc, #320]	; (8007b44 <HAL_RCC_OscConfig+0x280>)
 8007a04:	689b      	ldr	r3, [r3, #8]
 8007a06:	f003 030c 	and.w	r3, r3, #12
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d00b      	beq.n	8007a26 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007a0e:	4b4d      	ldr	r3, [pc, #308]	; (8007b44 <HAL_RCC_OscConfig+0x280>)
 8007a10:	689b      	ldr	r3, [r3, #8]
 8007a12:	f003 030c 	and.w	r3, r3, #12
 8007a16:	2b08      	cmp	r3, #8
 8007a18:	d11c      	bne.n	8007a54 <HAL_RCC_OscConfig+0x190>
 8007a1a:	4b4a      	ldr	r3, [pc, #296]	; (8007b44 <HAL_RCC_OscConfig+0x280>)
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d116      	bne.n	8007a54 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007a26:	4b47      	ldr	r3, [pc, #284]	; (8007b44 <HAL_RCC_OscConfig+0x280>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f003 0302 	and.w	r3, r3, #2
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d005      	beq.n	8007a3e <HAL_RCC_OscConfig+0x17a>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	68db      	ldr	r3, [r3, #12]
 8007a36:	2b01      	cmp	r3, #1
 8007a38:	d001      	beq.n	8007a3e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	e1e9      	b.n	8007e12 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a3e:	4b41      	ldr	r3, [pc, #260]	; (8007b44 <HAL_RCC_OscConfig+0x280>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	691b      	ldr	r3, [r3, #16]
 8007a4a:	00db      	lsls	r3, r3, #3
 8007a4c:	493d      	ldr	r1, [pc, #244]	; (8007b44 <HAL_RCC_OscConfig+0x280>)
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007a52:	e040      	b.n	8007ad6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	68db      	ldr	r3, [r3, #12]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d023      	beq.n	8007aa4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007a5c:	4b39      	ldr	r3, [pc, #228]	; (8007b44 <HAL_RCC_OscConfig+0x280>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a38      	ldr	r2, [pc, #224]	; (8007b44 <HAL_RCC_OscConfig+0x280>)
 8007a62:	f043 0301 	orr.w	r3, r3, #1
 8007a66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a68:	f7fc fb34 	bl	80040d4 <HAL_GetTick>
 8007a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a6e:	e008      	b.n	8007a82 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007a70:	f7fc fb30 	bl	80040d4 <HAL_GetTick>
 8007a74:	4602      	mov	r2, r0
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	1ad3      	subs	r3, r2, r3
 8007a7a:	2b02      	cmp	r3, #2
 8007a7c:	d901      	bls.n	8007a82 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007a7e:	2303      	movs	r3, #3
 8007a80:	e1c7      	b.n	8007e12 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a82:	4b30      	ldr	r3, [pc, #192]	; (8007b44 <HAL_RCC_OscConfig+0x280>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f003 0302 	and.w	r3, r3, #2
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d0f0      	beq.n	8007a70 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a8e:	4b2d      	ldr	r3, [pc, #180]	; (8007b44 <HAL_RCC_OscConfig+0x280>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	691b      	ldr	r3, [r3, #16]
 8007a9a:	00db      	lsls	r3, r3, #3
 8007a9c:	4929      	ldr	r1, [pc, #164]	; (8007b44 <HAL_RCC_OscConfig+0x280>)
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	600b      	str	r3, [r1, #0]
 8007aa2:	e018      	b.n	8007ad6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007aa4:	4b27      	ldr	r3, [pc, #156]	; (8007b44 <HAL_RCC_OscConfig+0x280>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a26      	ldr	r2, [pc, #152]	; (8007b44 <HAL_RCC_OscConfig+0x280>)
 8007aaa:	f023 0301 	bic.w	r3, r3, #1
 8007aae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ab0:	f7fc fb10 	bl	80040d4 <HAL_GetTick>
 8007ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007ab6:	e008      	b.n	8007aca <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007ab8:	f7fc fb0c 	bl	80040d4 <HAL_GetTick>
 8007abc:	4602      	mov	r2, r0
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	1ad3      	subs	r3, r2, r3
 8007ac2:	2b02      	cmp	r3, #2
 8007ac4:	d901      	bls.n	8007aca <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007ac6:	2303      	movs	r3, #3
 8007ac8:	e1a3      	b.n	8007e12 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007aca:	4b1e      	ldr	r3, [pc, #120]	; (8007b44 <HAL_RCC_OscConfig+0x280>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f003 0302 	and.w	r3, r3, #2
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d1f0      	bne.n	8007ab8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f003 0308 	and.w	r3, r3, #8
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d038      	beq.n	8007b54 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	695b      	ldr	r3, [r3, #20]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d019      	beq.n	8007b1e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007aea:	4b16      	ldr	r3, [pc, #88]	; (8007b44 <HAL_RCC_OscConfig+0x280>)
 8007aec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007aee:	4a15      	ldr	r2, [pc, #84]	; (8007b44 <HAL_RCC_OscConfig+0x280>)
 8007af0:	f043 0301 	orr.w	r3, r3, #1
 8007af4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007af6:	f7fc faed 	bl	80040d4 <HAL_GetTick>
 8007afa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007afc:	e008      	b.n	8007b10 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007afe:	f7fc fae9 	bl	80040d4 <HAL_GetTick>
 8007b02:	4602      	mov	r2, r0
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	1ad3      	subs	r3, r2, r3
 8007b08:	2b02      	cmp	r3, #2
 8007b0a:	d901      	bls.n	8007b10 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007b0c:	2303      	movs	r3, #3
 8007b0e:	e180      	b.n	8007e12 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007b10:	4b0c      	ldr	r3, [pc, #48]	; (8007b44 <HAL_RCC_OscConfig+0x280>)
 8007b12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b14:	f003 0302 	and.w	r3, r3, #2
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d0f0      	beq.n	8007afe <HAL_RCC_OscConfig+0x23a>
 8007b1c:	e01a      	b.n	8007b54 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007b1e:	4b09      	ldr	r3, [pc, #36]	; (8007b44 <HAL_RCC_OscConfig+0x280>)
 8007b20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b22:	4a08      	ldr	r2, [pc, #32]	; (8007b44 <HAL_RCC_OscConfig+0x280>)
 8007b24:	f023 0301 	bic.w	r3, r3, #1
 8007b28:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b2a:	f7fc fad3 	bl	80040d4 <HAL_GetTick>
 8007b2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007b30:	e00a      	b.n	8007b48 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b32:	f7fc facf 	bl	80040d4 <HAL_GetTick>
 8007b36:	4602      	mov	r2, r0
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	1ad3      	subs	r3, r2, r3
 8007b3c:	2b02      	cmp	r3, #2
 8007b3e:	d903      	bls.n	8007b48 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007b40:	2303      	movs	r3, #3
 8007b42:	e166      	b.n	8007e12 <HAL_RCC_OscConfig+0x54e>
 8007b44:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007b48:	4b92      	ldr	r3, [pc, #584]	; (8007d94 <HAL_RCC_OscConfig+0x4d0>)
 8007b4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b4c:	f003 0302 	and.w	r3, r3, #2
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d1ee      	bne.n	8007b32 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f003 0304 	and.w	r3, r3, #4
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	f000 80a4 	beq.w	8007caa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007b62:	4b8c      	ldr	r3, [pc, #560]	; (8007d94 <HAL_RCC_OscConfig+0x4d0>)
 8007b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d10d      	bne.n	8007b8a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007b6e:	4b89      	ldr	r3, [pc, #548]	; (8007d94 <HAL_RCC_OscConfig+0x4d0>)
 8007b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b72:	4a88      	ldr	r2, [pc, #544]	; (8007d94 <HAL_RCC_OscConfig+0x4d0>)
 8007b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b78:	6413      	str	r3, [r2, #64]	; 0x40
 8007b7a:	4b86      	ldr	r3, [pc, #536]	; (8007d94 <HAL_RCC_OscConfig+0x4d0>)
 8007b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b82:	60bb      	str	r3, [r7, #8]
 8007b84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007b86:	2301      	movs	r3, #1
 8007b88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007b8a:	4b83      	ldr	r3, [pc, #524]	; (8007d98 <HAL_RCC_OscConfig+0x4d4>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d118      	bne.n	8007bc8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007b96:	4b80      	ldr	r3, [pc, #512]	; (8007d98 <HAL_RCC_OscConfig+0x4d4>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a7f      	ldr	r2, [pc, #508]	; (8007d98 <HAL_RCC_OscConfig+0x4d4>)
 8007b9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ba0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007ba2:	f7fc fa97 	bl	80040d4 <HAL_GetTick>
 8007ba6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007ba8:	e008      	b.n	8007bbc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007baa:	f7fc fa93 	bl	80040d4 <HAL_GetTick>
 8007bae:	4602      	mov	r2, r0
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	1ad3      	subs	r3, r2, r3
 8007bb4:	2b64      	cmp	r3, #100	; 0x64
 8007bb6:	d901      	bls.n	8007bbc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007bb8:	2303      	movs	r3, #3
 8007bba:	e12a      	b.n	8007e12 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007bbc:	4b76      	ldr	r3, [pc, #472]	; (8007d98 <HAL_RCC_OscConfig+0x4d4>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d0f0      	beq.n	8007baa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	689b      	ldr	r3, [r3, #8]
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d106      	bne.n	8007bde <HAL_RCC_OscConfig+0x31a>
 8007bd0:	4b70      	ldr	r3, [pc, #448]	; (8007d94 <HAL_RCC_OscConfig+0x4d0>)
 8007bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bd4:	4a6f      	ldr	r2, [pc, #444]	; (8007d94 <HAL_RCC_OscConfig+0x4d0>)
 8007bd6:	f043 0301 	orr.w	r3, r3, #1
 8007bda:	6713      	str	r3, [r2, #112]	; 0x70
 8007bdc:	e02d      	b.n	8007c3a <HAL_RCC_OscConfig+0x376>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	689b      	ldr	r3, [r3, #8]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d10c      	bne.n	8007c00 <HAL_RCC_OscConfig+0x33c>
 8007be6:	4b6b      	ldr	r3, [pc, #428]	; (8007d94 <HAL_RCC_OscConfig+0x4d0>)
 8007be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bea:	4a6a      	ldr	r2, [pc, #424]	; (8007d94 <HAL_RCC_OscConfig+0x4d0>)
 8007bec:	f023 0301 	bic.w	r3, r3, #1
 8007bf0:	6713      	str	r3, [r2, #112]	; 0x70
 8007bf2:	4b68      	ldr	r3, [pc, #416]	; (8007d94 <HAL_RCC_OscConfig+0x4d0>)
 8007bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bf6:	4a67      	ldr	r2, [pc, #412]	; (8007d94 <HAL_RCC_OscConfig+0x4d0>)
 8007bf8:	f023 0304 	bic.w	r3, r3, #4
 8007bfc:	6713      	str	r3, [r2, #112]	; 0x70
 8007bfe:	e01c      	b.n	8007c3a <HAL_RCC_OscConfig+0x376>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	2b05      	cmp	r3, #5
 8007c06:	d10c      	bne.n	8007c22 <HAL_RCC_OscConfig+0x35e>
 8007c08:	4b62      	ldr	r3, [pc, #392]	; (8007d94 <HAL_RCC_OscConfig+0x4d0>)
 8007c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c0c:	4a61      	ldr	r2, [pc, #388]	; (8007d94 <HAL_RCC_OscConfig+0x4d0>)
 8007c0e:	f043 0304 	orr.w	r3, r3, #4
 8007c12:	6713      	str	r3, [r2, #112]	; 0x70
 8007c14:	4b5f      	ldr	r3, [pc, #380]	; (8007d94 <HAL_RCC_OscConfig+0x4d0>)
 8007c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c18:	4a5e      	ldr	r2, [pc, #376]	; (8007d94 <HAL_RCC_OscConfig+0x4d0>)
 8007c1a:	f043 0301 	orr.w	r3, r3, #1
 8007c1e:	6713      	str	r3, [r2, #112]	; 0x70
 8007c20:	e00b      	b.n	8007c3a <HAL_RCC_OscConfig+0x376>
 8007c22:	4b5c      	ldr	r3, [pc, #368]	; (8007d94 <HAL_RCC_OscConfig+0x4d0>)
 8007c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c26:	4a5b      	ldr	r2, [pc, #364]	; (8007d94 <HAL_RCC_OscConfig+0x4d0>)
 8007c28:	f023 0301 	bic.w	r3, r3, #1
 8007c2c:	6713      	str	r3, [r2, #112]	; 0x70
 8007c2e:	4b59      	ldr	r3, [pc, #356]	; (8007d94 <HAL_RCC_OscConfig+0x4d0>)
 8007c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c32:	4a58      	ldr	r2, [pc, #352]	; (8007d94 <HAL_RCC_OscConfig+0x4d0>)
 8007c34:	f023 0304 	bic.w	r3, r3, #4
 8007c38:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	689b      	ldr	r3, [r3, #8]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d015      	beq.n	8007c6e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c42:	f7fc fa47 	bl	80040d4 <HAL_GetTick>
 8007c46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c48:	e00a      	b.n	8007c60 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c4a:	f7fc fa43 	bl	80040d4 <HAL_GetTick>
 8007c4e:	4602      	mov	r2, r0
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	1ad3      	subs	r3, r2, r3
 8007c54:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d901      	bls.n	8007c60 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007c5c:	2303      	movs	r3, #3
 8007c5e:	e0d8      	b.n	8007e12 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c60:	4b4c      	ldr	r3, [pc, #304]	; (8007d94 <HAL_RCC_OscConfig+0x4d0>)
 8007c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c64:	f003 0302 	and.w	r3, r3, #2
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d0ee      	beq.n	8007c4a <HAL_RCC_OscConfig+0x386>
 8007c6c:	e014      	b.n	8007c98 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c6e:	f7fc fa31 	bl	80040d4 <HAL_GetTick>
 8007c72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007c74:	e00a      	b.n	8007c8c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c76:	f7fc fa2d 	bl	80040d4 <HAL_GetTick>
 8007c7a:	4602      	mov	r2, r0
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	1ad3      	subs	r3, r2, r3
 8007c80:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d901      	bls.n	8007c8c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007c88:	2303      	movs	r3, #3
 8007c8a:	e0c2      	b.n	8007e12 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007c8c:	4b41      	ldr	r3, [pc, #260]	; (8007d94 <HAL_RCC_OscConfig+0x4d0>)
 8007c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c90:	f003 0302 	and.w	r3, r3, #2
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d1ee      	bne.n	8007c76 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007c98:	7dfb      	ldrb	r3, [r7, #23]
 8007c9a:	2b01      	cmp	r3, #1
 8007c9c:	d105      	bne.n	8007caa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c9e:	4b3d      	ldr	r3, [pc, #244]	; (8007d94 <HAL_RCC_OscConfig+0x4d0>)
 8007ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ca2:	4a3c      	ldr	r2, [pc, #240]	; (8007d94 <HAL_RCC_OscConfig+0x4d0>)
 8007ca4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ca8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	699b      	ldr	r3, [r3, #24]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	f000 80ae 	beq.w	8007e10 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007cb4:	4b37      	ldr	r3, [pc, #220]	; (8007d94 <HAL_RCC_OscConfig+0x4d0>)
 8007cb6:	689b      	ldr	r3, [r3, #8]
 8007cb8:	f003 030c 	and.w	r3, r3, #12
 8007cbc:	2b08      	cmp	r3, #8
 8007cbe:	d06d      	beq.n	8007d9c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	699b      	ldr	r3, [r3, #24]
 8007cc4:	2b02      	cmp	r3, #2
 8007cc6:	d14b      	bne.n	8007d60 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007cc8:	4b32      	ldr	r3, [pc, #200]	; (8007d94 <HAL_RCC_OscConfig+0x4d0>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4a31      	ldr	r2, [pc, #196]	; (8007d94 <HAL_RCC_OscConfig+0x4d0>)
 8007cce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007cd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cd4:	f7fc f9fe 	bl	80040d4 <HAL_GetTick>
 8007cd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007cda:	e008      	b.n	8007cee <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007cdc:	f7fc f9fa 	bl	80040d4 <HAL_GetTick>
 8007ce0:	4602      	mov	r2, r0
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	1ad3      	subs	r3, r2, r3
 8007ce6:	2b02      	cmp	r3, #2
 8007ce8:	d901      	bls.n	8007cee <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007cea:	2303      	movs	r3, #3
 8007cec:	e091      	b.n	8007e12 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007cee:	4b29      	ldr	r3, [pc, #164]	; (8007d94 <HAL_RCC_OscConfig+0x4d0>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d1f0      	bne.n	8007cdc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	69da      	ldr	r2, [r3, #28]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6a1b      	ldr	r3, [r3, #32]
 8007d02:	431a      	orrs	r2, r3
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d08:	019b      	lsls	r3, r3, #6
 8007d0a:	431a      	orrs	r2, r3
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d10:	085b      	lsrs	r3, r3, #1
 8007d12:	3b01      	subs	r3, #1
 8007d14:	041b      	lsls	r3, r3, #16
 8007d16:	431a      	orrs	r2, r3
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d1c:	061b      	lsls	r3, r3, #24
 8007d1e:	431a      	orrs	r2, r3
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d24:	071b      	lsls	r3, r3, #28
 8007d26:	491b      	ldr	r1, [pc, #108]	; (8007d94 <HAL_RCC_OscConfig+0x4d0>)
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007d2c:	4b19      	ldr	r3, [pc, #100]	; (8007d94 <HAL_RCC_OscConfig+0x4d0>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a18      	ldr	r2, [pc, #96]	; (8007d94 <HAL_RCC_OscConfig+0x4d0>)
 8007d32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007d36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d38:	f7fc f9cc 	bl	80040d4 <HAL_GetTick>
 8007d3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d3e:	e008      	b.n	8007d52 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d40:	f7fc f9c8 	bl	80040d4 <HAL_GetTick>
 8007d44:	4602      	mov	r2, r0
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	1ad3      	subs	r3, r2, r3
 8007d4a:	2b02      	cmp	r3, #2
 8007d4c:	d901      	bls.n	8007d52 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8007d4e:	2303      	movs	r3, #3
 8007d50:	e05f      	b.n	8007e12 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d52:	4b10      	ldr	r3, [pc, #64]	; (8007d94 <HAL_RCC_OscConfig+0x4d0>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d0f0      	beq.n	8007d40 <HAL_RCC_OscConfig+0x47c>
 8007d5e:	e057      	b.n	8007e10 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d60:	4b0c      	ldr	r3, [pc, #48]	; (8007d94 <HAL_RCC_OscConfig+0x4d0>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4a0b      	ldr	r2, [pc, #44]	; (8007d94 <HAL_RCC_OscConfig+0x4d0>)
 8007d66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007d6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d6c:	f7fc f9b2 	bl	80040d4 <HAL_GetTick>
 8007d70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d72:	e008      	b.n	8007d86 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d74:	f7fc f9ae 	bl	80040d4 <HAL_GetTick>
 8007d78:	4602      	mov	r2, r0
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	1ad3      	subs	r3, r2, r3
 8007d7e:	2b02      	cmp	r3, #2
 8007d80:	d901      	bls.n	8007d86 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8007d82:	2303      	movs	r3, #3
 8007d84:	e045      	b.n	8007e12 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d86:	4b03      	ldr	r3, [pc, #12]	; (8007d94 <HAL_RCC_OscConfig+0x4d0>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d1f0      	bne.n	8007d74 <HAL_RCC_OscConfig+0x4b0>
 8007d92:	e03d      	b.n	8007e10 <HAL_RCC_OscConfig+0x54c>
 8007d94:	40023800 	.word	0x40023800
 8007d98:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007d9c:	4b1f      	ldr	r3, [pc, #124]	; (8007e1c <HAL_RCC_OscConfig+0x558>)
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	699b      	ldr	r3, [r3, #24]
 8007da6:	2b01      	cmp	r3, #1
 8007da8:	d030      	beq.n	8007e0c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007db4:	429a      	cmp	r2, r3
 8007db6:	d129      	bne.n	8007e0c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007dc2:	429a      	cmp	r2, r3
 8007dc4:	d122      	bne.n	8007e0c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007dc6:	68fa      	ldr	r2, [r7, #12]
 8007dc8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007dcc:	4013      	ands	r3, r2
 8007dce:	687a      	ldr	r2, [r7, #4]
 8007dd0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007dd2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d119      	bne.n	8007e0c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007de2:	085b      	lsrs	r3, r3, #1
 8007de4:	3b01      	subs	r3, #1
 8007de6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007de8:	429a      	cmp	r2, r3
 8007dea:	d10f      	bne.n	8007e0c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d107      	bne.n	8007e0c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e06:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007e08:	429a      	cmp	r2, r3
 8007e0a:	d001      	beq.n	8007e10 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	e000      	b.n	8007e12 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8007e10:	2300      	movs	r3, #0
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	3718      	adds	r7, #24
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}
 8007e1a:	bf00      	nop
 8007e1c:	40023800 	.word	0x40023800

08007e20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b084      	sub	sp, #16
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d101      	bne.n	8007e38 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007e34:	2301      	movs	r3, #1
 8007e36:	e0d0      	b.n	8007fda <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007e38:	4b6a      	ldr	r3, [pc, #424]	; (8007fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f003 030f 	and.w	r3, r3, #15
 8007e40:	683a      	ldr	r2, [r7, #0]
 8007e42:	429a      	cmp	r2, r3
 8007e44:	d910      	bls.n	8007e68 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e46:	4b67      	ldr	r3, [pc, #412]	; (8007fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f023 020f 	bic.w	r2, r3, #15
 8007e4e:	4965      	ldr	r1, [pc, #404]	; (8007fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	4313      	orrs	r3, r2
 8007e54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e56:	4b63      	ldr	r3, [pc, #396]	; (8007fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f003 030f 	and.w	r3, r3, #15
 8007e5e:	683a      	ldr	r2, [r7, #0]
 8007e60:	429a      	cmp	r2, r3
 8007e62:	d001      	beq.n	8007e68 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007e64:	2301      	movs	r3, #1
 8007e66:	e0b8      	b.n	8007fda <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f003 0302 	and.w	r3, r3, #2
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d020      	beq.n	8007eb6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f003 0304 	and.w	r3, r3, #4
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d005      	beq.n	8007e8c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007e80:	4b59      	ldr	r3, [pc, #356]	; (8007fe8 <HAL_RCC_ClockConfig+0x1c8>)
 8007e82:	689b      	ldr	r3, [r3, #8]
 8007e84:	4a58      	ldr	r2, [pc, #352]	; (8007fe8 <HAL_RCC_ClockConfig+0x1c8>)
 8007e86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007e8a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f003 0308 	and.w	r3, r3, #8
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d005      	beq.n	8007ea4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007e98:	4b53      	ldr	r3, [pc, #332]	; (8007fe8 <HAL_RCC_ClockConfig+0x1c8>)
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	4a52      	ldr	r2, [pc, #328]	; (8007fe8 <HAL_RCC_ClockConfig+0x1c8>)
 8007e9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007ea2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007ea4:	4b50      	ldr	r3, [pc, #320]	; (8007fe8 <HAL_RCC_ClockConfig+0x1c8>)
 8007ea6:	689b      	ldr	r3, [r3, #8]
 8007ea8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	689b      	ldr	r3, [r3, #8]
 8007eb0:	494d      	ldr	r1, [pc, #308]	; (8007fe8 <HAL_RCC_ClockConfig+0x1c8>)
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f003 0301 	and.w	r3, r3, #1
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d040      	beq.n	8007f44 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	2b01      	cmp	r3, #1
 8007ec8:	d107      	bne.n	8007eda <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007eca:	4b47      	ldr	r3, [pc, #284]	; (8007fe8 <HAL_RCC_ClockConfig+0x1c8>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d115      	bne.n	8007f02 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	e07f      	b.n	8007fda <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	2b02      	cmp	r3, #2
 8007ee0:	d107      	bne.n	8007ef2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ee2:	4b41      	ldr	r3, [pc, #260]	; (8007fe8 <HAL_RCC_ClockConfig+0x1c8>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d109      	bne.n	8007f02 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007eee:	2301      	movs	r3, #1
 8007ef0:	e073      	b.n	8007fda <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ef2:	4b3d      	ldr	r3, [pc, #244]	; (8007fe8 <HAL_RCC_ClockConfig+0x1c8>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f003 0302 	and.w	r3, r3, #2
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d101      	bne.n	8007f02 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007efe:	2301      	movs	r3, #1
 8007f00:	e06b      	b.n	8007fda <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007f02:	4b39      	ldr	r3, [pc, #228]	; (8007fe8 <HAL_RCC_ClockConfig+0x1c8>)
 8007f04:	689b      	ldr	r3, [r3, #8]
 8007f06:	f023 0203 	bic.w	r2, r3, #3
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	4936      	ldr	r1, [pc, #216]	; (8007fe8 <HAL_RCC_ClockConfig+0x1c8>)
 8007f10:	4313      	orrs	r3, r2
 8007f12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f14:	f7fc f8de 	bl	80040d4 <HAL_GetTick>
 8007f18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f1a:	e00a      	b.n	8007f32 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f1c:	f7fc f8da 	bl	80040d4 <HAL_GetTick>
 8007f20:	4602      	mov	r2, r0
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	1ad3      	subs	r3, r2, r3
 8007f26:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d901      	bls.n	8007f32 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007f2e:	2303      	movs	r3, #3
 8007f30:	e053      	b.n	8007fda <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f32:	4b2d      	ldr	r3, [pc, #180]	; (8007fe8 <HAL_RCC_ClockConfig+0x1c8>)
 8007f34:	689b      	ldr	r3, [r3, #8]
 8007f36:	f003 020c 	and.w	r2, r3, #12
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	685b      	ldr	r3, [r3, #4]
 8007f3e:	009b      	lsls	r3, r3, #2
 8007f40:	429a      	cmp	r2, r3
 8007f42:	d1eb      	bne.n	8007f1c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007f44:	4b27      	ldr	r3, [pc, #156]	; (8007fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f003 030f 	and.w	r3, r3, #15
 8007f4c:	683a      	ldr	r2, [r7, #0]
 8007f4e:	429a      	cmp	r2, r3
 8007f50:	d210      	bcs.n	8007f74 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f52:	4b24      	ldr	r3, [pc, #144]	; (8007fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f023 020f 	bic.w	r2, r3, #15
 8007f5a:	4922      	ldr	r1, [pc, #136]	; (8007fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f62:	4b20      	ldr	r3, [pc, #128]	; (8007fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f003 030f 	and.w	r3, r3, #15
 8007f6a:	683a      	ldr	r2, [r7, #0]
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d001      	beq.n	8007f74 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007f70:	2301      	movs	r3, #1
 8007f72:	e032      	b.n	8007fda <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f003 0304 	and.w	r3, r3, #4
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d008      	beq.n	8007f92 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007f80:	4b19      	ldr	r3, [pc, #100]	; (8007fe8 <HAL_RCC_ClockConfig+0x1c8>)
 8007f82:	689b      	ldr	r3, [r3, #8]
 8007f84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	68db      	ldr	r3, [r3, #12]
 8007f8c:	4916      	ldr	r1, [pc, #88]	; (8007fe8 <HAL_RCC_ClockConfig+0x1c8>)
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f003 0308 	and.w	r3, r3, #8
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d009      	beq.n	8007fb2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007f9e:	4b12      	ldr	r3, [pc, #72]	; (8007fe8 <HAL_RCC_ClockConfig+0x1c8>)
 8007fa0:	689b      	ldr	r3, [r3, #8]
 8007fa2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	691b      	ldr	r3, [r3, #16]
 8007faa:	00db      	lsls	r3, r3, #3
 8007fac:	490e      	ldr	r1, [pc, #56]	; (8007fe8 <HAL_RCC_ClockConfig+0x1c8>)
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007fb2:	f000 f831 	bl	8008018 <HAL_RCC_GetSysClockFreq>
 8007fb6:	4601      	mov	r1, r0
 8007fb8:	4b0b      	ldr	r3, [pc, #44]	; (8007fe8 <HAL_RCC_ClockConfig+0x1c8>)
 8007fba:	689b      	ldr	r3, [r3, #8]
 8007fbc:	091b      	lsrs	r3, r3, #4
 8007fbe:	f003 030f 	and.w	r3, r3, #15
 8007fc2:	4a0a      	ldr	r2, [pc, #40]	; (8007fec <HAL_RCC_ClockConfig+0x1cc>)
 8007fc4:	5cd3      	ldrb	r3, [r2, r3]
 8007fc6:	fa21 f303 	lsr.w	r3, r1, r3
 8007fca:	4a09      	ldr	r2, [pc, #36]	; (8007ff0 <HAL_RCC_ClockConfig+0x1d0>)
 8007fcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007fce:	4b09      	ldr	r3, [pc, #36]	; (8007ff4 <HAL_RCC_ClockConfig+0x1d4>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f7fc f83a 	bl	800404c <HAL_InitTick>

  return HAL_OK;
 8007fd8:	2300      	movs	r3, #0
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3710      	adds	r7, #16
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}
 8007fe2:	bf00      	nop
 8007fe4:	40023c00 	.word	0x40023c00
 8007fe8:	40023800 	.word	0x40023800
 8007fec:	080139d8 	.word	0x080139d8
 8007ff0:	20000030 	.word	0x20000030
 8007ff4:	2000004c 	.word	0x2000004c

08007ff8 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M7 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 8007ffc:	4b05      	ldr	r3, [pc, #20]	; (8008014 <HAL_RCC_EnableCSS+0x1c>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4a04      	ldr	r2, [pc, #16]	; (8008014 <HAL_RCC_EnableCSS+0x1c>)
 8008002:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008006:	6013      	str	r3, [r2, #0]
}
 8008008:	bf00      	nop
 800800a:	46bd      	mov	sp, r7
 800800c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008010:	4770      	bx	lr
 8008012:	bf00      	nop
 8008014:	40023800 	.word	0x40023800

08008018 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800801a:	b085      	sub	sp, #20
 800801c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800801e:	2300      	movs	r3, #0
 8008020:	607b      	str	r3, [r7, #4]
 8008022:	2300      	movs	r3, #0
 8008024:	60fb      	str	r3, [r7, #12]
 8008026:	2300      	movs	r3, #0
 8008028:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800802a:	2300      	movs	r3, #0
 800802c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800802e:	4b50      	ldr	r3, [pc, #320]	; (8008170 <HAL_RCC_GetSysClockFreq+0x158>)
 8008030:	689b      	ldr	r3, [r3, #8]
 8008032:	f003 030c 	and.w	r3, r3, #12
 8008036:	2b04      	cmp	r3, #4
 8008038:	d007      	beq.n	800804a <HAL_RCC_GetSysClockFreq+0x32>
 800803a:	2b08      	cmp	r3, #8
 800803c:	d008      	beq.n	8008050 <HAL_RCC_GetSysClockFreq+0x38>
 800803e:	2b00      	cmp	r3, #0
 8008040:	f040 808d 	bne.w	800815e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008044:	4b4b      	ldr	r3, [pc, #300]	; (8008174 <HAL_RCC_GetSysClockFreq+0x15c>)
 8008046:	60bb      	str	r3, [r7, #8]
      break;
 8008048:	e08c      	b.n	8008164 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800804a:	4b4b      	ldr	r3, [pc, #300]	; (8008178 <HAL_RCC_GetSysClockFreq+0x160>)
 800804c:	60bb      	str	r3, [r7, #8]
      break;
 800804e:	e089      	b.n	8008164 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008050:	4b47      	ldr	r3, [pc, #284]	; (8008170 <HAL_RCC_GetSysClockFreq+0x158>)
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008058:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800805a:	4b45      	ldr	r3, [pc, #276]	; (8008170 <HAL_RCC_GetSysClockFreq+0x158>)
 800805c:	685b      	ldr	r3, [r3, #4]
 800805e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008062:	2b00      	cmp	r3, #0
 8008064:	d023      	beq.n	80080ae <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008066:	4b42      	ldr	r3, [pc, #264]	; (8008170 <HAL_RCC_GetSysClockFreq+0x158>)
 8008068:	685b      	ldr	r3, [r3, #4]
 800806a:	099b      	lsrs	r3, r3, #6
 800806c:	f04f 0400 	mov.w	r4, #0
 8008070:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008074:	f04f 0200 	mov.w	r2, #0
 8008078:	ea03 0501 	and.w	r5, r3, r1
 800807c:	ea04 0602 	and.w	r6, r4, r2
 8008080:	4a3d      	ldr	r2, [pc, #244]	; (8008178 <HAL_RCC_GetSysClockFreq+0x160>)
 8008082:	fb02 f106 	mul.w	r1, r2, r6
 8008086:	2200      	movs	r2, #0
 8008088:	fb02 f205 	mul.w	r2, r2, r5
 800808c:	440a      	add	r2, r1
 800808e:	493a      	ldr	r1, [pc, #232]	; (8008178 <HAL_RCC_GetSysClockFreq+0x160>)
 8008090:	fba5 0101 	umull	r0, r1, r5, r1
 8008094:	1853      	adds	r3, r2, r1
 8008096:	4619      	mov	r1, r3
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f04f 0400 	mov.w	r4, #0
 800809e:	461a      	mov	r2, r3
 80080a0:	4623      	mov	r3, r4
 80080a2:	f7f8 f935 	bl	8000310 <__aeabi_uldivmod>
 80080a6:	4603      	mov	r3, r0
 80080a8:	460c      	mov	r4, r1
 80080aa:	60fb      	str	r3, [r7, #12]
 80080ac:	e049      	b.n	8008142 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80080ae:	4b30      	ldr	r3, [pc, #192]	; (8008170 <HAL_RCC_GetSysClockFreq+0x158>)
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	099b      	lsrs	r3, r3, #6
 80080b4:	f04f 0400 	mov.w	r4, #0
 80080b8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80080bc:	f04f 0200 	mov.w	r2, #0
 80080c0:	ea03 0501 	and.w	r5, r3, r1
 80080c4:	ea04 0602 	and.w	r6, r4, r2
 80080c8:	4629      	mov	r1, r5
 80080ca:	4632      	mov	r2, r6
 80080cc:	f04f 0300 	mov.w	r3, #0
 80080d0:	f04f 0400 	mov.w	r4, #0
 80080d4:	0154      	lsls	r4, r2, #5
 80080d6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80080da:	014b      	lsls	r3, r1, #5
 80080dc:	4619      	mov	r1, r3
 80080de:	4622      	mov	r2, r4
 80080e0:	1b49      	subs	r1, r1, r5
 80080e2:	eb62 0206 	sbc.w	r2, r2, r6
 80080e6:	f04f 0300 	mov.w	r3, #0
 80080ea:	f04f 0400 	mov.w	r4, #0
 80080ee:	0194      	lsls	r4, r2, #6
 80080f0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80080f4:	018b      	lsls	r3, r1, #6
 80080f6:	1a5b      	subs	r3, r3, r1
 80080f8:	eb64 0402 	sbc.w	r4, r4, r2
 80080fc:	f04f 0100 	mov.w	r1, #0
 8008100:	f04f 0200 	mov.w	r2, #0
 8008104:	00e2      	lsls	r2, r4, #3
 8008106:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800810a:	00d9      	lsls	r1, r3, #3
 800810c:	460b      	mov	r3, r1
 800810e:	4614      	mov	r4, r2
 8008110:	195b      	adds	r3, r3, r5
 8008112:	eb44 0406 	adc.w	r4, r4, r6
 8008116:	f04f 0100 	mov.w	r1, #0
 800811a:	f04f 0200 	mov.w	r2, #0
 800811e:	02a2      	lsls	r2, r4, #10
 8008120:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8008124:	0299      	lsls	r1, r3, #10
 8008126:	460b      	mov	r3, r1
 8008128:	4614      	mov	r4, r2
 800812a:	4618      	mov	r0, r3
 800812c:	4621      	mov	r1, r4
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f04f 0400 	mov.w	r4, #0
 8008134:	461a      	mov	r2, r3
 8008136:	4623      	mov	r3, r4
 8008138:	f7f8 f8ea 	bl	8000310 <__aeabi_uldivmod>
 800813c:	4603      	mov	r3, r0
 800813e:	460c      	mov	r4, r1
 8008140:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8008142:	4b0b      	ldr	r3, [pc, #44]	; (8008170 <HAL_RCC_GetSysClockFreq+0x158>)
 8008144:	685b      	ldr	r3, [r3, #4]
 8008146:	0c1b      	lsrs	r3, r3, #16
 8008148:	f003 0303 	and.w	r3, r3, #3
 800814c:	3301      	adds	r3, #1
 800814e:	005b      	lsls	r3, r3, #1
 8008150:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8008152:	68fa      	ldr	r2, [r7, #12]
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	fbb2 f3f3 	udiv	r3, r2, r3
 800815a:	60bb      	str	r3, [r7, #8]
      break;
 800815c:	e002      	b.n	8008164 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800815e:	4b05      	ldr	r3, [pc, #20]	; (8008174 <HAL_RCC_GetSysClockFreq+0x15c>)
 8008160:	60bb      	str	r3, [r7, #8]
      break;
 8008162:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008164:	68bb      	ldr	r3, [r7, #8]
}
 8008166:	4618      	mov	r0, r3
 8008168:	3714      	adds	r7, #20
 800816a:	46bd      	mov	sp, r7
 800816c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800816e:	bf00      	nop
 8008170:	40023800 	.word	0x40023800
 8008174:	00f42400 	.word	0x00f42400
 8008178:	017d7840 	.word	0x017d7840

0800817c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800817c:	b480      	push	{r7}
 800817e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008180:	4b03      	ldr	r3, [pc, #12]	; (8008190 <HAL_RCC_GetHCLKFreq+0x14>)
 8008182:	681b      	ldr	r3, [r3, #0]
}
 8008184:	4618      	mov	r0, r3
 8008186:	46bd      	mov	sp, r7
 8008188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818c:	4770      	bx	lr
 800818e:	bf00      	nop
 8008190:	20000030 	.word	0x20000030

08008194 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008198:	f7ff fff0 	bl	800817c <HAL_RCC_GetHCLKFreq>
 800819c:	4601      	mov	r1, r0
 800819e:	4b05      	ldr	r3, [pc, #20]	; (80081b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80081a0:	689b      	ldr	r3, [r3, #8]
 80081a2:	0a9b      	lsrs	r3, r3, #10
 80081a4:	f003 0307 	and.w	r3, r3, #7
 80081a8:	4a03      	ldr	r2, [pc, #12]	; (80081b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80081aa:	5cd3      	ldrb	r3, [r2, r3]
 80081ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	bd80      	pop	{r7, pc}
 80081b4:	40023800 	.word	0x40023800
 80081b8:	080139e8 	.word	0x080139e8

080081bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80081c0:	f7ff ffdc 	bl	800817c <HAL_RCC_GetHCLKFreq>
 80081c4:	4601      	mov	r1, r0
 80081c6:	4b05      	ldr	r3, [pc, #20]	; (80081dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80081c8:	689b      	ldr	r3, [r3, #8]
 80081ca:	0b5b      	lsrs	r3, r3, #13
 80081cc:	f003 0307 	and.w	r3, r3, #7
 80081d0:	4a03      	ldr	r2, [pc, #12]	; (80081e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80081d2:	5cd3      	ldrb	r3, [r2, r3]
 80081d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80081d8:	4618      	mov	r0, r3
 80081da:	bd80      	pop	{r7, pc}
 80081dc:	40023800 	.word	0x40023800
 80081e0:	080139e8 	.word	0x080139e8

080081e4 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 80081e8:	4b06      	ldr	r3, [pc, #24]	; (8008204 <HAL_RCC_NMI_IRQHandler+0x20>)
 80081ea:	68db      	ldr	r3, [r3, #12]
 80081ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081f0:	2b80      	cmp	r3, #128	; 0x80
 80081f2:	d104      	bne.n	80081fe <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80081f4:	f000 f80a 	bl	800820c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80081f8:	4b03      	ldr	r3, [pc, #12]	; (8008208 <HAL_RCC_NMI_IRQHandler+0x24>)
 80081fa:	2280      	movs	r2, #128	; 0x80
 80081fc:	701a      	strb	r2, [r3, #0]
  }
}
 80081fe:	bf00      	nop
 8008200:	bd80      	pop	{r7, pc}
 8008202:	bf00      	nop
 8008204:	40023800 	.word	0x40023800
 8008208:	4002380e 	.word	0x4002380e

0800820c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800820c:	b480      	push	{r7}
 800820e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8008210:	bf00      	nop
 8008212:	46bd      	mov	sp, r7
 8008214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008218:	4770      	bx	lr
	...

0800821c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b088      	sub	sp, #32
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008224:	2300      	movs	r3, #0
 8008226:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8008228:	2300      	movs	r3, #0
 800822a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800822c:	2300      	movs	r3, #0
 800822e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8008230:	2300      	movs	r3, #0
 8008232:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8008234:	2300      	movs	r3, #0
 8008236:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f003 0301 	and.w	r3, r3, #1
 8008240:	2b00      	cmp	r3, #0
 8008242:	d012      	beq.n	800826a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008244:	4b69      	ldr	r3, [pc, #420]	; (80083ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008246:	689b      	ldr	r3, [r3, #8]
 8008248:	4a68      	ldr	r2, [pc, #416]	; (80083ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800824a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800824e:	6093      	str	r3, [r2, #8]
 8008250:	4b66      	ldr	r3, [pc, #408]	; (80083ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008252:	689a      	ldr	r2, [r3, #8]
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008258:	4964      	ldr	r1, [pc, #400]	; (80083ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800825a:	4313      	orrs	r3, r2
 800825c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008262:	2b00      	cmp	r3, #0
 8008264:	d101      	bne.n	800826a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8008266:	2301      	movs	r3, #1
 8008268:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008272:	2b00      	cmp	r3, #0
 8008274:	d017      	beq.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008276:	4b5d      	ldr	r3, [pc, #372]	; (80083ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008278:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800827c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008284:	4959      	ldr	r1, [pc, #356]	; (80083ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008286:	4313      	orrs	r3, r2
 8008288:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008290:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008294:	d101      	bne.n	800829a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8008296:	2301      	movs	r3, #1
 8008298:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d101      	bne.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80082a2:	2301      	movs	r3, #1
 80082a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d017      	beq.n	80082e2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80082b2:	4b4e      	ldr	r3, [pc, #312]	; (80083ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082b8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082c0:	494a      	ldr	r1, [pc, #296]	; (80083ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082c2:	4313      	orrs	r3, r2
 80082c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80082d0:	d101      	bne.n	80082d6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80082d2:	2301      	movs	r3, #1
 80082d4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d101      	bne.n	80082e2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80082de:	2301      	movs	r3, #1
 80082e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d001      	beq.n	80082f2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80082ee:	2301      	movs	r3, #1
 80082f0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f003 0320 	and.w	r3, r3, #32
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	f000 808b 	beq.w	8008416 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008300:	4b3a      	ldr	r3, [pc, #232]	; (80083ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008304:	4a39      	ldr	r2, [pc, #228]	; (80083ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008306:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800830a:	6413      	str	r3, [r2, #64]	; 0x40
 800830c:	4b37      	ldr	r3, [pc, #220]	; (80083ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800830e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008310:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008314:	60bb      	str	r3, [r7, #8]
 8008316:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008318:	4b35      	ldr	r3, [pc, #212]	; (80083f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	4a34      	ldr	r2, [pc, #208]	; (80083f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800831e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008322:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008324:	f7fb fed6 	bl	80040d4 <HAL_GetTick>
 8008328:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800832a:	e008      	b.n	800833e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800832c:	f7fb fed2 	bl	80040d4 <HAL_GetTick>
 8008330:	4602      	mov	r2, r0
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	1ad3      	subs	r3, r2, r3
 8008336:	2b64      	cmp	r3, #100	; 0x64
 8008338:	d901      	bls.n	800833e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800833a:	2303      	movs	r3, #3
 800833c:	e38d      	b.n	8008a5a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800833e:	4b2c      	ldr	r3, [pc, #176]	; (80083f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008346:	2b00      	cmp	r3, #0
 8008348:	d0f0      	beq.n	800832c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800834a:	4b28      	ldr	r3, [pc, #160]	; (80083ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800834c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800834e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008352:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008354:	693b      	ldr	r3, [r7, #16]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d035      	beq.n	80083c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800835e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008362:	693a      	ldr	r2, [r7, #16]
 8008364:	429a      	cmp	r2, r3
 8008366:	d02e      	beq.n	80083c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008368:	4b20      	ldr	r3, [pc, #128]	; (80083ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800836a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800836c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008370:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008372:	4b1e      	ldr	r3, [pc, #120]	; (80083ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008376:	4a1d      	ldr	r2, [pc, #116]	; (80083ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008378:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800837c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800837e:	4b1b      	ldr	r3, [pc, #108]	; (80083ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008382:	4a1a      	ldr	r2, [pc, #104]	; (80083ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008384:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008388:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800838a:	4a18      	ldr	r2, [pc, #96]	; (80083ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800838c:	693b      	ldr	r3, [r7, #16]
 800838e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008390:	4b16      	ldr	r3, [pc, #88]	; (80083ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008394:	f003 0301 	and.w	r3, r3, #1
 8008398:	2b01      	cmp	r3, #1
 800839a:	d114      	bne.n	80083c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800839c:	f7fb fe9a 	bl	80040d4 <HAL_GetTick>
 80083a0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083a2:	e00a      	b.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80083a4:	f7fb fe96 	bl	80040d4 <HAL_GetTick>
 80083a8:	4602      	mov	r2, r0
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	1ad3      	subs	r3, r2, r3
 80083ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d901      	bls.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80083b6:	2303      	movs	r3, #3
 80083b8:	e34f      	b.n	8008a5a <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083ba:	4b0c      	ldr	r3, [pc, #48]	; (80083ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083be:	f003 0302 	and.w	r3, r3, #2
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d0ee      	beq.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80083d2:	d111      	bne.n	80083f8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80083d4:	4b05      	ldr	r3, [pc, #20]	; (80083ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083d6:	689b      	ldr	r3, [r3, #8]
 80083d8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80083e0:	4b04      	ldr	r3, [pc, #16]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80083e2:	400b      	ands	r3, r1
 80083e4:	4901      	ldr	r1, [pc, #4]	; (80083ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083e6:	4313      	orrs	r3, r2
 80083e8:	608b      	str	r3, [r1, #8]
 80083ea:	e00b      	b.n	8008404 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80083ec:	40023800 	.word	0x40023800
 80083f0:	40007000 	.word	0x40007000
 80083f4:	0ffffcff 	.word	0x0ffffcff
 80083f8:	4bb3      	ldr	r3, [pc, #716]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80083fa:	689b      	ldr	r3, [r3, #8]
 80083fc:	4ab2      	ldr	r2, [pc, #712]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80083fe:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008402:	6093      	str	r3, [r2, #8]
 8008404:	4bb0      	ldr	r3, [pc, #704]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008406:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800840c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008410:	49ad      	ldr	r1, [pc, #692]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008412:	4313      	orrs	r3, r2
 8008414:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f003 0310 	and.w	r3, r3, #16
 800841e:	2b00      	cmp	r3, #0
 8008420:	d010      	beq.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008422:	4ba9      	ldr	r3, [pc, #676]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008424:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008428:	4aa7      	ldr	r2, [pc, #668]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800842a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800842e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8008432:	4ba5      	ldr	r3, [pc, #660]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008434:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800843c:	49a2      	ldr	r1, [pc, #648]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800843e:	4313      	orrs	r3, r2
 8008440:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800844c:	2b00      	cmp	r3, #0
 800844e:	d00a      	beq.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008450:	4b9d      	ldr	r3, [pc, #628]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008456:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800845e:	499a      	ldr	r1, [pc, #616]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008460:	4313      	orrs	r3, r2
 8008462:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800846e:	2b00      	cmp	r3, #0
 8008470:	d00a      	beq.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008472:	4b95      	ldr	r3, [pc, #596]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008474:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008478:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008480:	4991      	ldr	r1, [pc, #580]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008482:	4313      	orrs	r3, r2
 8008484:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008490:	2b00      	cmp	r3, #0
 8008492:	d00a      	beq.n	80084aa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008494:	4b8c      	ldr	r3, [pc, #560]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800849a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084a2:	4989      	ldr	r1, [pc, #548]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80084a4:	4313      	orrs	r3, r2
 80084a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d00a      	beq.n	80084cc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80084b6:	4b84      	ldr	r3, [pc, #528]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80084b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084bc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084c4:	4980      	ldr	r1, [pc, #512]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80084c6:	4313      	orrs	r3, r2
 80084c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d00a      	beq.n	80084ee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80084d8:	4b7b      	ldr	r3, [pc, #492]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80084da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084de:	f023 0203 	bic.w	r2, r3, #3
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084e6:	4978      	ldr	r1, [pc, #480]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80084e8:	4313      	orrs	r3, r2
 80084ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d00a      	beq.n	8008510 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80084fa:	4b73      	ldr	r3, [pc, #460]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80084fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008500:	f023 020c 	bic.w	r2, r3, #12
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008508:	496f      	ldr	r1, [pc, #444]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800850a:	4313      	orrs	r3, r2
 800850c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008518:	2b00      	cmp	r3, #0
 800851a:	d00a      	beq.n	8008532 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800851c:	4b6a      	ldr	r3, [pc, #424]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800851e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008522:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800852a:	4967      	ldr	r1, [pc, #412]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800852c:	4313      	orrs	r3, r2
 800852e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800853a:	2b00      	cmp	r3, #0
 800853c:	d00a      	beq.n	8008554 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800853e:	4b62      	ldr	r3, [pc, #392]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008544:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800854c:	495e      	ldr	r1, [pc, #376]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800854e:	4313      	orrs	r3, r2
 8008550:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800855c:	2b00      	cmp	r3, #0
 800855e:	d00a      	beq.n	8008576 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008560:	4b59      	ldr	r3, [pc, #356]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008566:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800856e:	4956      	ldr	r1, [pc, #344]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008570:	4313      	orrs	r3, r2
 8008572:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800857e:	2b00      	cmp	r3, #0
 8008580:	d00a      	beq.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8008582:	4b51      	ldr	r3, [pc, #324]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008588:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008590:	494d      	ldr	r1, [pc, #308]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008592:	4313      	orrs	r3, r2
 8008594:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d00a      	beq.n	80085ba <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80085a4:	4b48      	ldr	r3, [pc, #288]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80085a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085aa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085b2:	4945      	ldr	r1, [pc, #276]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80085b4:	4313      	orrs	r3, r2
 80085b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d00a      	beq.n	80085dc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80085c6:	4b40      	ldr	r3, [pc, #256]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80085c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085cc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085d4:	493c      	ldr	r1, [pc, #240]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80085d6:	4313      	orrs	r3, r2
 80085d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d00a      	beq.n	80085fe <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80085e8:	4b37      	ldr	r3, [pc, #220]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80085ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085ee:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80085f6:	4934      	ldr	r1, [pc, #208]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80085f8:	4313      	orrs	r3, r2
 80085fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008606:	2b00      	cmp	r3, #0
 8008608:	d011      	beq.n	800862e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800860a:	4b2f      	ldr	r3, [pc, #188]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800860c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008610:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008618:	492b      	ldr	r1, [pc, #172]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800861a:	4313      	orrs	r3, r2
 800861c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008624:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008628:	d101      	bne.n	800862e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800862a:	2301      	movs	r3, #1
 800862c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f003 0308 	and.w	r3, r3, #8
 8008636:	2b00      	cmp	r3, #0
 8008638:	d001      	beq.n	800863e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800863a:	2301      	movs	r3, #1
 800863c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008646:	2b00      	cmp	r3, #0
 8008648:	d00a      	beq.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800864a:	4b1f      	ldr	r3, [pc, #124]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800864c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008650:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008658:	491b      	ldr	r1, [pc, #108]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800865a:	4313      	orrs	r3, r2
 800865c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008668:	2b00      	cmp	r3, #0
 800866a:	d00b      	beq.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800866c:	4b16      	ldr	r3, [pc, #88]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800866e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008672:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800867c:	4912      	ldr	r1, [pc, #72]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800867e:	4313      	orrs	r3, r2
 8008680:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800868c:	2b00      	cmp	r3, #0
 800868e:	d00b      	beq.n	80086a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8008690:	4b0d      	ldr	r3, [pc, #52]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008696:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086a0:	4909      	ldr	r1, [pc, #36]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80086a2:	4313      	orrs	r3, r2
 80086a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d00f      	beq.n	80086d4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80086b4:	4b04      	ldr	r3, [pc, #16]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80086b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80086ba:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086c4:	e002      	b.n	80086cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80086c6:	bf00      	nop
 80086c8:	40023800 	.word	0x40023800
 80086cc:	4985      	ldr	r1, [pc, #532]	; (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80086ce:	4313      	orrs	r3, r2
 80086d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d00b      	beq.n	80086f8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80086e0:	4b80      	ldr	r3, [pc, #512]	; (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80086e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80086e6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80086f0:	497c      	ldr	r1, [pc, #496]	; (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80086f2:	4313      	orrs	r3, r2
 80086f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80086f8:	69fb      	ldr	r3, [r7, #28]
 80086fa:	2b01      	cmp	r3, #1
 80086fc:	d005      	beq.n	800870a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008706:	f040 80d6 	bne.w	80088b6 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800870a:	4b76      	ldr	r3, [pc, #472]	; (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4a75      	ldr	r2, [pc, #468]	; (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008710:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008714:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008716:	f7fb fcdd 	bl	80040d4 <HAL_GetTick>
 800871a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800871c:	e008      	b.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800871e:	f7fb fcd9 	bl	80040d4 <HAL_GetTick>
 8008722:	4602      	mov	r2, r0
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	1ad3      	subs	r3, r2, r3
 8008728:	2b64      	cmp	r3, #100	; 0x64
 800872a:	d901      	bls.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800872c:	2303      	movs	r3, #3
 800872e:	e194      	b.n	8008a5a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008730:	4b6c      	ldr	r3, [pc, #432]	; (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008738:	2b00      	cmp	r3, #0
 800873a:	d1f0      	bne.n	800871e <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f003 0301 	and.w	r3, r3, #1
 8008744:	2b00      	cmp	r3, #0
 8008746:	d021      	beq.n	800878c <HAL_RCCEx_PeriphCLKConfig+0x570>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800874c:	2b00      	cmp	r3, #0
 800874e:	d11d      	bne.n	800878c <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008750:	4b64      	ldr	r3, [pc, #400]	; (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008752:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008756:	0c1b      	lsrs	r3, r3, #16
 8008758:	f003 0303 	and.w	r3, r3, #3
 800875c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800875e:	4b61      	ldr	r3, [pc, #388]	; (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008760:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008764:	0e1b      	lsrs	r3, r3, #24
 8008766:	f003 030f 	and.w	r3, r3, #15
 800876a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	685b      	ldr	r3, [r3, #4]
 8008770:	019a      	lsls	r2, r3, #6
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	041b      	lsls	r3, r3, #16
 8008776:	431a      	orrs	r2, r3
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	061b      	lsls	r3, r3, #24
 800877c:	431a      	orrs	r2, r3
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	689b      	ldr	r3, [r3, #8]
 8008782:	071b      	lsls	r3, r3, #28
 8008784:	4957      	ldr	r1, [pc, #348]	; (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008786:	4313      	orrs	r3, r2
 8008788:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008794:	2b00      	cmp	r3, #0
 8008796:	d004      	beq.n	80087a2 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800879c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80087a0:	d00a      	beq.n	80087b8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d02e      	beq.n	800880c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80087b6:	d129      	bne.n	800880c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80087b8:	4b4a      	ldr	r3, [pc, #296]	; (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80087ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087be:	0c1b      	lsrs	r3, r3, #16
 80087c0:	f003 0303 	and.w	r3, r3, #3
 80087c4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80087c6:	4b47      	ldr	r3, [pc, #284]	; (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80087c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087cc:	0f1b      	lsrs	r3, r3, #28
 80087ce:	f003 0307 	and.w	r3, r3, #7
 80087d2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	685b      	ldr	r3, [r3, #4]
 80087d8:	019a      	lsls	r2, r3, #6
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	041b      	lsls	r3, r3, #16
 80087de:	431a      	orrs	r2, r3
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	68db      	ldr	r3, [r3, #12]
 80087e4:	061b      	lsls	r3, r3, #24
 80087e6:	431a      	orrs	r2, r3
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	071b      	lsls	r3, r3, #28
 80087ec:	493d      	ldr	r1, [pc, #244]	; (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80087ee:	4313      	orrs	r3, r2
 80087f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80087f4:	4b3b      	ldr	r3, [pc, #236]	; (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80087f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80087fa:	f023 021f 	bic.w	r2, r3, #31
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008802:	3b01      	subs	r3, #1
 8008804:	4937      	ldr	r1, [pc, #220]	; (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008806:	4313      	orrs	r3, r2
 8008808:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008814:	2b00      	cmp	r3, #0
 8008816:	d01d      	beq.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008818:	4b32      	ldr	r3, [pc, #200]	; (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800881a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800881e:	0e1b      	lsrs	r3, r3, #24
 8008820:	f003 030f 	and.w	r3, r3, #15
 8008824:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008826:	4b2f      	ldr	r3, [pc, #188]	; (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008828:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800882c:	0f1b      	lsrs	r3, r3, #28
 800882e:	f003 0307 	and.w	r3, r3, #7
 8008832:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	019a      	lsls	r2, r3, #6
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	691b      	ldr	r3, [r3, #16]
 800883e:	041b      	lsls	r3, r3, #16
 8008840:	431a      	orrs	r2, r3
 8008842:	693b      	ldr	r3, [r7, #16]
 8008844:	061b      	lsls	r3, r3, #24
 8008846:	431a      	orrs	r2, r3
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	071b      	lsls	r3, r3, #28
 800884c:	4925      	ldr	r1, [pc, #148]	; (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800884e:	4313      	orrs	r3, r2
 8008850:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800885c:	2b00      	cmp	r3, #0
 800885e:	d011      	beq.n	8008884 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	685b      	ldr	r3, [r3, #4]
 8008864:	019a      	lsls	r2, r3, #6
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	691b      	ldr	r3, [r3, #16]
 800886a:	041b      	lsls	r3, r3, #16
 800886c:	431a      	orrs	r2, r3
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	68db      	ldr	r3, [r3, #12]
 8008872:	061b      	lsls	r3, r3, #24
 8008874:	431a      	orrs	r2, r3
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	689b      	ldr	r3, [r3, #8]
 800887a:	071b      	lsls	r3, r3, #28
 800887c:	4919      	ldr	r1, [pc, #100]	; (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800887e:	4313      	orrs	r3, r2
 8008880:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008884:	4b17      	ldr	r3, [pc, #92]	; (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	4a16      	ldr	r2, [pc, #88]	; (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800888a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800888e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008890:	f7fb fc20 	bl	80040d4 <HAL_GetTick>
 8008894:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008896:	e008      	b.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008898:	f7fb fc1c 	bl	80040d4 <HAL_GetTick>
 800889c:	4602      	mov	r2, r0
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	1ad3      	subs	r3, r2, r3
 80088a2:	2b64      	cmp	r3, #100	; 0x64
 80088a4:	d901      	bls.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80088a6:	2303      	movs	r3, #3
 80088a8:	e0d7      	b.n	8008a5a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80088aa:	4b0e      	ldr	r3, [pc, #56]	; (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d0f0      	beq.n	8008898 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80088b6:	69bb      	ldr	r3, [r7, #24]
 80088b8:	2b01      	cmp	r3, #1
 80088ba:	f040 80cd 	bne.w	8008a58 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80088be:	4b09      	ldr	r3, [pc, #36]	; (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4a08      	ldr	r2, [pc, #32]	; (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80088c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80088c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088ca:	f7fb fc03 	bl	80040d4 <HAL_GetTick>
 80088ce:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80088d0:	e00a      	b.n	80088e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80088d2:	f7fb fbff 	bl	80040d4 <HAL_GetTick>
 80088d6:	4602      	mov	r2, r0
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	1ad3      	subs	r3, r2, r3
 80088dc:	2b64      	cmp	r3, #100	; 0x64
 80088de:	d903      	bls.n	80088e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80088e0:	2303      	movs	r3, #3
 80088e2:	e0ba      	b.n	8008a5a <HAL_RCCEx_PeriphCLKConfig+0x83e>
 80088e4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80088e8:	4b5e      	ldr	r3, [pc, #376]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80088f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088f4:	d0ed      	beq.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d003      	beq.n	800890a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008906:	2b00      	cmp	r3, #0
 8008908:	d009      	beq.n	800891e <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008912:	2b00      	cmp	r3, #0
 8008914:	d02e      	beq.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800891a:	2b00      	cmp	r3, #0
 800891c:	d12a      	bne.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800891e:	4b51      	ldr	r3, [pc, #324]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008924:	0c1b      	lsrs	r3, r3, #16
 8008926:	f003 0303 	and.w	r3, r3, #3
 800892a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800892c:	4b4d      	ldr	r3, [pc, #308]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800892e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008932:	0f1b      	lsrs	r3, r3, #28
 8008934:	f003 0307 	and.w	r3, r3, #7
 8008938:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	695b      	ldr	r3, [r3, #20]
 800893e:	019a      	lsls	r2, r3, #6
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	041b      	lsls	r3, r3, #16
 8008944:	431a      	orrs	r2, r3
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	699b      	ldr	r3, [r3, #24]
 800894a:	061b      	lsls	r3, r3, #24
 800894c:	431a      	orrs	r2, r3
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	071b      	lsls	r3, r3, #28
 8008952:	4944      	ldr	r1, [pc, #272]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008954:	4313      	orrs	r3, r2
 8008956:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800895a:	4b42      	ldr	r3, [pc, #264]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800895c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008960:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008968:	3b01      	subs	r3, #1
 800896a:	021b      	lsls	r3, r3, #8
 800896c:	493d      	ldr	r1, [pc, #244]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800896e:	4313      	orrs	r3, r2
 8008970:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800897c:	2b00      	cmp	r3, #0
 800897e:	d022      	beq.n	80089c6 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008984:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008988:	d11d      	bne.n	80089c6 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800898a:	4b36      	ldr	r3, [pc, #216]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800898c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008990:	0e1b      	lsrs	r3, r3, #24
 8008992:	f003 030f 	and.w	r3, r3, #15
 8008996:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008998:	4b32      	ldr	r3, [pc, #200]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800899a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800899e:	0f1b      	lsrs	r3, r3, #28
 80089a0:	f003 0307 	and.w	r3, r3, #7
 80089a4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	695b      	ldr	r3, [r3, #20]
 80089aa:	019a      	lsls	r2, r3, #6
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6a1b      	ldr	r3, [r3, #32]
 80089b0:	041b      	lsls	r3, r3, #16
 80089b2:	431a      	orrs	r2, r3
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	061b      	lsls	r3, r3, #24
 80089b8:	431a      	orrs	r2, r3
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	071b      	lsls	r3, r3, #28
 80089be:	4929      	ldr	r1, [pc, #164]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80089c0:	4313      	orrs	r3, r2
 80089c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f003 0308 	and.w	r3, r3, #8
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d028      	beq.n	8008a24 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80089d2:	4b24      	ldr	r3, [pc, #144]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80089d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089d8:	0e1b      	lsrs	r3, r3, #24
 80089da:	f003 030f 	and.w	r3, r3, #15
 80089de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80089e0:	4b20      	ldr	r3, [pc, #128]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80089e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089e6:	0c1b      	lsrs	r3, r3, #16
 80089e8:	f003 0303 	and.w	r3, r3, #3
 80089ec:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	695b      	ldr	r3, [r3, #20]
 80089f2:	019a      	lsls	r2, r3, #6
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	041b      	lsls	r3, r3, #16
 80089f8:	431a      	orrs	r2, r3
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	061b      	lsls	r3, r3, #24
 80089fe:	431a      	orrs	r2, r3
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	69db      	ldr	r3, [r3, #28]
 8008a04:	071b      	lsls	r3, r3, #28
 8008a06:	4917      	ldr	r1, [pc, #92]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008a08:	4313      	orrs	r3, r2
 8008a0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008a0e:	4b15      	ldr	r3, [pc, #84]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008a10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a14:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a1c:	4911      	ldr	r1, [pc, #68]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008a1e:	4313      	orrs	r3, r2
 8008a20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008a24:	4b0f      	ldr	r3, [pc, #60]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4a0e      	ldr	r2, [pc, #56]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008a2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a30:	f7fb fb50 	bl	80040d4 <HAL_GetTick>
 8008a34:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008a36:	e008      	b.n	8008a4a <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008a38:	f7fb fb4c 	bl	80040d4 <HAL_GetTick>
 8008a3c:	4602      	mov	r2, r0
 8008a3e:	697b      	ldr	r3, [r7, #20]
 8008a40:	1ad3      	subs	r3, r2, r3
 8008a42:	2b64      	cmp	r3, #100	; 0x64
 8008a44:	d901      	bls.n	8008a4a <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008a46:	2303      	movs	r3, #3
 8008a48:	e007      	b.n	8008a5a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008a4a:	4b06      	ldr	r3, [pc, #24]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a56:	d1ef      	bne.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8008a58:	2300      	movs	r3, #0
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3720      	adds	r7, #32
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}
 8008a62:	bf00      	nop
 8008a64:	40023800 	.word	0x40023800

08008a68 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b082      	sub	sp, #8
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d101      	bne.n	8008a7a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8008a76:	2301      	movs	r3, #1
 8008a78:	e06b      	b.n	8008b52 <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	7f5b      	ldrb	r3, [r3, #29]
 8008a7e:	b2db      	uxtb	r3, r3
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d105      	bne.n	8008a90 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2200      	movs	r2, #0
 8008a88:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f7fa fe1e 	bl	80036cc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2202      	movs	r2, #2
 8008a94:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	22ca      	movs	r2, #202	; 0xca
 8008a9c:	625a      	str	r2, [r3, #36]	; 0x24
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	2253      	movs	r2, #83	; 0x53
 8008aa4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f000 f9e8 	bl	8008e7c <RTC_EnterInitMode>
 8008aac:	4603      	mov	r3, r0
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d008      	beq.n	8008ac4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	22ff      	movs	r2, #255	; 0xff
 8008ab8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2204      	movs	r2, #4
 8008abe:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	e046      	b.n	8008b52 <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	6899      	ldr	r1, [r3, #8]
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681a      	ldr	r2, [r3, #0]
 8008ace:	4b23      	ldr	r3, [pc, #140]	; (8008b5c <HAL_RTC_Init+0xf4>)
 8008ad0:	400b      	ands	r3, r1
 8008ad2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	6899      	ldr	r1, [r3, #8]
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	685a      	ldr	r2, [r3, #4]
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	691b      	ldr	r3, [r3, #16]
 8008ae2:	431a      	orrs	r2, r3
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	695b      	ldr	r3, [r3, #20]
 8008ae8:	431a      	orrs	r2, r3
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	430a      	orrs	r2, r1
 8008af0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	687a      	ldr	r2, [r7, #4]
 8008af8:	68d2      	ldr	r2, [r2, #12]
 8008afa:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	6919      	ldr	r1, [r3, #16]
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	689b      	ldr	r3, [r3, #8]
 8008b06:	041a      	lsls	r2, r3, #16
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	430a      	orrs	r2, r1
 8008b0e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	68da      	ldr	r2, [r3, #12]
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008b1e:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f022 0208 	bic.w	r2, r2, #8
 8008b2e:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	699a      	ldr	r2, [r3, #24]
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	430a      	orrs	r2, r1
 8008b40:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	22ff      	movs	r2, #255	; 0xff
 8008b48:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2201      	movs	r2, #1
 8008b4e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8008b50:	2300      	movs	r3, #0
  }
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	3708      	adds	r7, #8
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}
 8008b5a:	bf00      	nop
 8008b5c:	ff8fffbf 	.word	0xff8fffbf

08008b60 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008b60:	b590      	push	{r4, r7, lr}
 8008b62:	b087      	sub	sp, #28
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	60f8      	str	r0, [r7, #12]
 8008b68:	60b9      	str	r1, [r7, #8]
 8008b6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	7f1b      	ldrb	r3, [r3, #28]
 8008b74:	2b01      	cmp	r3, #1
 8008b76:	d101      	bne.n	8008b7c <HAL_RTC_SetTime+0x1c>
 8008b78:	2302      	movs	r3, #2
 8008b7a:	e0a8      	b.n	8008cce <HAL_RTC_SetTime+0x16e>
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	2201      	movs	r2, #1
 8008b80:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	2202      	movs	r2, #2
 8008b86:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d126      	bne.n	8008bdc <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	689b      	ldr	r3, [r3, #8]
 8008b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d102      	bne.n	8008ba2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	781b      	ldrb	r3, [r3, #0]
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f000 f994 	bl	8008ed4 <RTC_ByteToBcd2>
 8008bac:	4603      	mov	r3, r0
 8008bae:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	785b      	ldrb	r3, [r3, #1]
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f000 f98d 	bl	8008ed4 <RTC_ByteToBcd2>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008bbe:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	789b      	ldrb	r3, [r3, #2]
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f000 f985 	bl	8008ed4 <RTC_ByteToBcd2>
 8008bca:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8008bcc:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	7b1b      	ldrb	r3, [r3, #12]
 8008bd4:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	617b      	str	r3, [r7, #20]
 8008bda:	e018      	b.n	8008c0e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	689b      	ldr	r3, [r3, #8]
 8008be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d102      	bne.n	8008bf0 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	2200      	movs	r2, #0
 8008bee:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	781b      	ldrb	r3, [r3, #0]
 8008bf4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	785b      	ldrb	r3, [r3, #1]
 8008bfa:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008bfc:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8008bfe:	68ba      	ldr	r2, [r7, #8]
 8008c00:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8008c02:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	7b1b      	ldrb	r3, [r3, #12]
 8008c08:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008c0a:	4313      	orrs	r3, r2
 8008c0c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	22ca      	movs	r2, #202	; 0xca
 8008c14:	625a      	str	r2, [r3, #36]	; 0x24
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	2253      	movs	r2, #83	; 0x53
 8008c1c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008c1e:	68f8      	ldr	r0, [r7, #12]
 8008c20:	f000 f92c 	bl	8008e7c <RTC_EnterInitMode>
 8008c24:	4603      	mov	r3, r0
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d00b      	beq.n	8008c42 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	22ff      	movs	r2, #255	; 0xff
 8008c30:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	2204      	movs	r2, #4
 8008c36:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008c3e:	2301      	movs	r3, #1
 8008c40:	e045      	b.n	8008cce <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	681a      	ldr	r2, [r3, #0]
 8008c46:	6979      	ldr	r1, [r7, #20]
 8008c48:	4b23      	ldr	r3, [pc, #140]	; (8008cd8 <HAL_RTC_SetTime+0x178>)
 8008c4a:	400b      	ands	r3, r1
 8008c4c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	689a      	ldr	r2, [r3, #8]
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008c5c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	6899      	ldr	r1, [r3, #8]
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	691a      	ldr	r2, [r3, #16]
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	695b      	ldr	r3, [r3, #20]
 8008c6c:	431a      	orrs	r2, r3
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	430a      	orrs	r2, r1
 8008c74:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	68da      	ldr	r2, [r3, #12]
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008c84:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	689b      	ldr	r3, [r3, #8]
 8008c8c:	f003 0320 	and.w	r3, r3, #32
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d111      	bne.n	8008cb8 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008c94:	68f8      	ldr	r0, [r7, #12]
 8008c96:	f000 f8c9 	bl	8008e2c <HAL_RTC_WaitForSynchro>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d00b      	beq.n	8008cb8 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	22ff      	movs	r2, #255	; 0xff
 8008ca6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	2204      	movs	r2, #4
 8008cac:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	e00a      	b.n	8008cce <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	22ff      	movs	r2, #255	; 0xff
 8008cbe:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8008ccc:	2300      	movs	r3, #0
  }
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	371c      	adds	r7, #28
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd90      	pop	{r4, r7, pc}
 8008cd6:	bf00      	nop
 8008cd8:	007f7f7f 	.word	0x007f7f7f

08008cdc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008cdc:	b590      	push	{r4, r7, lr}
 8008cde:	b087      	sub	sp, #28
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	60f8      	str	r0, [r7, #12]
 8008ce4:	60b9      	str	r1, [r7, #8]
 8008ce6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	7f1b      	ldrb	r3, [r3, #28]
 8008cf0:	2b01      	cmp	r3, #1
 8008cf2:	d101      	bne.n	8008cf8 <HAL_RTC_SetDate+0x1c>
 8008cf4:	2302      	movs	r3, #2
 8008cf6:	e092      	b.n	8008e1e <HAL_RTC_SetDate+0x142>
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	2202      	movs	r2, #2
 8008d02:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d10e      	bne.n	8008d28 <HAL_RTC_SetDate+0x4c>
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	785b      	ldrb	r3, [r3, #1]
 8008d0e:	f003 0310 	and.w	r3, r3, #16
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d008      	beq.n	8008d28 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	785b      	ldrb	r3, [r3, #1]
 8008d1a:	f023 0310 	bic.w	r3, r3, #16
 8008d1e:	b2db      	uxtb	r3, r3
 8008d20:	330a      	adds	r3, #10
 8008d22:	b2da      	uxtb	r2, r3
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d11c      	bne.n	8008d68 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	78db      	ldrb	r3, [r3, #3]
 8008d32:	4618      	mov	r0, r3
 8008d34:	f000 f8ce 	bl	8008ed4 <RTC_ByteToBcd2>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	785b      	ldrb	r3, [r3, #1]
 8008d40:	4618      	mov	r0, r3
 8008d42:	f000 f8c7 	bl	8008ed4 <RTC_ByteToBcd2>
 8008d46:	4603      	mov	r3, r0
 8008d48:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008d4a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	789b      	ldrb	r3, [r3, #2]
 8008d50:	4618      	mov	r0, r3
 8008d52:	f000 f8bf 	bl	8008ed4 <RTC_ByteToBcd2>
 8008d56:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8008d58:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	781b      	ldrb	r3, [r3, #0]
 8008d60:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008d62:	4313      	orrs	r3, r2
 8008d64:	617b      	str	r3, [r7, #20]
 8008d66:	e00e      	b.n	8008d86 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	78db      	ldrb	r3, [r3, #3]
 8008d6c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	785b      	ldrb	r3, [r3, #1]
 8008d72:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008d74:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8008d76:	68ba      	ldr	r2, [r7, #8]
 8008d78:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8008d7a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	781b      	ldrb	r3, [r3, #0]
 8008d80:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008d82:	4313      	orrs	r3, r2
 8008d84:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	22ca      	movs	r2, #202	; 0xca
 8008d8c:	625a      	str	r2, [r3, #36]	; 0x24
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	2253      	movs	r2, #83	; 0x53
 8008d94:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008d96:	68f8      	ldr	r0, [r7, #12]
 8008d98:	f000 f870 	bl	8008e7c <RTC_EnterInitMode>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d00b      	beq.n	8008dba <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	22ff      	movs	r2, #255	; 0xff
 8008da8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	2204      	movs	r2, #4
 8008dae:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	2200      	movs	r2, #0
 8008db4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008db6:	2301      	movs	r3, #1
 8008db8:	e031      	b.n	8008e1e <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	681a      	ldr	r2, [r3, #0]
 8008dbe:	6979      	ldr	r1, [r7, #20]
 8008dc0:	4b19      	ldr	r3, [pc, #100]	; (8008e28 <HAL_RTC_SetDate+0x14c>)
 8008dc2:	400b      	ands	r3, r1
 8008dc4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	68da      	ldr	r2, [r3, #12]
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008dd4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	689b      	ldr	r3, [r3, #8]
 8008ddc:	f003 0320 	and.w	r3, r3, #32
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d111      	bne.n	8008e08 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008de4:	68f8      	ldr	r0, [r7, #12]
 8008de6:	f000 f821 	bl	8008e2c <HAL_RTC_WaitForSynchro>
 8008dea:	4603      	mov	r3, r0
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d00b      	beq.n	8008e08 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	22ff      	movs	r2, #255	; 0xff
 8008df6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	2204      	movs	r2, #4
 8008dfc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	2200      	movs	r2, #0
 8008e02:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008e04:	2301      	movs	r3, #1
 8008e06:	e00a      	b.n	8008e1e <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	22ff      	movs	r2, #255	; 0xff
 8008e0e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	2201      	movs	r2, #1
 8008e14:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8008e1c:	2300      	movs	r3, #0
  }
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	371c      	adds	r7, #28
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd90      	pop	{r4, r7, pc}
 8008e26:	bf00      	nop
 8008e28:	00ffff3f 	.word	0x00ffff3f

08008e2c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b084      	sub	sp, #16
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008e34:	2300      	movs	r3, #0
 8008e36:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	68da      	ldr	r2, [r3, #12]
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008e46:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008e48:	f7fb f944 	bl	80040d4 <HAL_GetTick>
 8008e4c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008e4e:	e009      	b.n	8008e64 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008e50:	f7fb f940 	bl	80040d4 <HAL_GetTick>
 8008e54:	4602      	mov	r2, r0
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	1ad3      	subs	r3, r2, r3
 8008e5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008e5e:	d901      	bls.n	8008e64 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008e60:	2303      	movs	r3, #3
 8008e62:	e007      	b.n	8008e74 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	68db      	ldr	r3, [r3, #12]
 8008e6a:	f003 0320 	and.w	r3, r3, #32
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d0ee      	beq.n	8008e50 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8008e72:	2300      	movs	r3, #0
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	3710      	adds	r7, #16
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}

08008e7c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b084      	sub	sp, #16
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008e84:	2300      	movs	r3, #0
 8008e86:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	68db      	ldr	r3, [r3, #12]
 8008e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d119      	bne.n	8008eca <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f04f 32ff 	mov.w	r2, #4294967295
 8008e9e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008ea0:	f7fb f918 	bl	80040d4 <HAL_GetTick>
 8008ea4:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008ea6:	e009      	b.n	8008ebc <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008ea8:	f7fb f914 	bl	80040d4 <HAL_GetTick>
 8008eac:	4602      	mov	r2, r0
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	1ad3      	subs	r3, r2, r3
 8008eb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008eb6:	d901      	bls.n	8008ebc <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8008eb8:	2303      	movs	r3, #3
 8008eba:	e007      	b.n	8008ecc <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	68db      	ldr	r3, [r3, #12]
 8008ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d0ee      	beq.n	8008ea8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8008eca:	2300      	movs	r3, #0
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	3710      	adds	r7, #16
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bd80      	pop	{r7, pc}

08008ed4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b085      	sub	sp, #20
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	4603      	mov	r3, r0
 8008edc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8008ee2:	e005      	b.n	8008ef0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	3301      	adds	r3, #1
 8008ee8:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8008eea:	79fb      	ldrb	r3, [r7, #7]
 8008eec:	3b0a      	subs	r3, #10
 8008eee:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8008ef0:	79fb      	ldrb	r3, [r7, #7]
 8008ef2:	2b09      	cmp	r3, #9
 8008ef4:	d8f6      	bhi.n	8008ee4 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	b2db      	uxtb	r3, r3
 8008efa:	011b      	lsls	r3, r3, #4
 8008efc:	b2da      	uxtb	r2, r3
 8008efe:	79fb      	ldrb	r3, [r7, #7]
 8008f00:	4313      	orrs	r3, r2
 8008f02:	b2db      	uxtb	r3, r3
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	3714      	adds	r7, #20
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0e:	4770      	bx	lr

08008f10 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b084      	sub	sp, #16
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d101      	bne.n	8008f22 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008f1e:	2301      	movs	r3, #1
 8008f20:	e084      	b.n	800902c <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2200      	movs	r2, #0
 8008f26:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008f2e:	b2db      	uxtb	r3, r3
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d106      	bne.n	8008f42 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2200      	movs	r2, #0
 8008f38:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f7fa fc41 	bl	80037c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2202      	movs	r2, #2
 8008f46:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	681a      	ldr	r2, [r3, #0]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f58:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	68db      	ldr	r3, [r3, #12]
 8008f5e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008f62:	d902      	bls.n	8008f6a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008f64:	2300      	movs	r3, #0
 8008f66:	60fb      	str	r3, [r7, #12]
 8008f68:	e002      	b.n	8008f70 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008f6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f6e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	68db      	ldr	r3, [r3, #12]
 8008f74:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008f78:	d007      	beq.n	8008f8a <HAL_SPI_Init+0x7a>
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	68db      	ldr	r3, [r3, #12]
 8008f7e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008f82:	d002      	beq.n	8008f8a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2200      	movs	r2, #0
 8008f88:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d10b      	bne.n	8008faa <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	68db      	ldr	r3, [r3, #12]
 8008f96:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008f9a:	d903      	bls.n	8008fa4 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2202      	movs	r2, #2
 8008fa0:	631a      	str	r2, [r3, #48]	; 0x30
 8008fa2:	e002      	b.n	8008faa <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	685a      	ldr	r2, [r3, #4]
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	689b      	ldr	r3, [r3, #8]
 8008fb2:	431a      	orrs	r2, r3
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	691b      	ldr	r3, [r3, #16]
 8008fb8:	431a      	orrs	r2, r3
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	695b      	ldr	r3, [r3, #20]
 8008fbe:	431a      	orrs	r2, r3
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	699b      	ldr	r3, [r3, #24]
 8008fc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008fc8:	431a      	orrs	r2, r3
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	69db      	ldr	r3, [r3, #28]
 8008fce:	431a      	orrs	r2, r3
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6a1b      	ldr	r3, [r3, #32]
 8008fd4:	ea42 0103 	orr.w	r1, r2, r3
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	430a      	orrs	r2, r1
 8008fe2:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	699b      	ldr	r3, [r3, #24]
 8008fe8:	0c1b      	lsrs	r3, r3, #16
 8008fea:	f003 0204 	and.w	r2, r3, #4
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ff2:	431a      	orrs	r2, r3
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ff8:	431a      	orrs	r2, r3
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	68db      	ldr	r3, [r3, #12]
 8008ffe:	ea42 0103 	orr.w	r1, r2, r3
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	68fa      	ldr	r2, [r7, #12]
 8009008:	430a      	orrs	r2, r1
 800900a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	69da      	ldr	r2, [r3, #28]
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800901a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2200      	movs	r2, #0
 8009020:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2201      	movs	r2, #1
 8009026:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800902a:	2300      	movs	r3, #0
}
 800902c:	4618      	mov	r0, r3
 800902e:	3710      	adds	r7, #16
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}

08009034 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b088      	sub	sp, #32
 8009038:	af00      	add	r7, sp, #0
 800903a:	60f8      	str	r0, [r7, #12]
 800903c:	60b9      	str	r1, [r7, #8]
 800903e:	603b      	str	r3, [r7, #0]
 8009040:	4613      	mov	r3, r2
 8009042:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009044:	2300      	movs	r3, #0
 8009046:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800904e:	2b01      	cmp	r3, #1
 8009050:	d101      	bne.n	8009056 <HAL_SPI_Transmit+0x22>
 8009052:	2302      	movs	r3, #2
 8009054:	e150      	b.n	80092f8 <HAL_SPI_Transmit+0x2c4>
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	2201      	movs	r2, #1
 800905a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800905e:	f7fb f839 	bl	80040d4 <HAL_GetTick>
 8009062:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009064:	88fb      	ldrh	r3, [r7, #6]
 8009066:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800906e:	b2db      	uxtb	r3, r3
 8009070:	2b01      	cmp	r3, #1
 8009072:	d002      	beq.n	800907a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009074:	2302      	movs	r3, #2
 8009076:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009078:	e135      	b.n	80092e6 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d002      	beq.n	8009086 <HAL_SPI_Transmit+0x52>
 8009080:	88fb      	ldrh	r3, [r7, #6]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d102      	bne.n	800908c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009086:	2301      	movs	r3, #1
 8009088:	77fb      	strb	r3, [r7, #31]
    goto error;
 800908a:	e12c      	b.n	80092e6 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	2203      	movs	r2, #3
 8009090:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	2200      	movs	r2, #0
 8009098:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	68ba      	ldr	r2, [r7, #8]
 800909e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	88fa      	ldrh	r2, [r7, #6]
 80090a4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	88fa      	ldrh	r2, [r7, #6]
 80090aa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	2200      	movs	r2, #0
 80090b0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	2200      	movs	r2, #0
 80090b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	2200      	movs	r2, #0
 80090be:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	2200      	movs	r2, #0
 80090c6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	2200      	movs	r2, #0
 80090cc:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	689b      	ldr	r3, [r3, #8]
 80090d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80090d6:	d107      	bne.n	80090e8 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	681a      	ldr	r2, [r3, #0]
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80090e6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090f2:	2b40      	cmp	r3, #64	; 0x40
 80090f4:	d007      	beq.n	8009106 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	681a      	ldr	r2, [r3, #0]
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009104:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	68db      	ldr	r3, [r3, #12]
 800910a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800910e:	d94b      	bls.n	80091a8 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	685b      	ldr	r3, [r3, #4]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d002      	beq.n	800911e <HAL_SPI_Transmit+0xea>
 8009118:	8afb      	ldrh	r3, [r7, #22]
 800911a:	2b01      	cmp	r3, #1
 800911c:	d13e      	bne.n	800919c <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009122:	881a      	ldrh	r2, [r3, #0]
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800912e:	1c9a      	adds	r2, r3, #2
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009138:	b29b      	uxth	r3, r3
 800913a:	3b01      	subs	r3, #1
 800913c:	b29a      	uxth	r2, r3
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009142:	e02b      	b.n	800919c <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	689b      	ldr	r3, [r3, #8]
 800914a:	f003 0302 	and.w	r3, r3, #2
 800914e:	2b02      	cmp	r3, #2
 8009150:	d112      	bne.n	8009178 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009156:	881a      	ldrh	r2, [r3, #0]
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009162:	1c9a      	adds	r2, r3, #2
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800916c:	b29b      	uxth	r3, r3
 800916e:	3b01      	subs	r3, #1
 8009170:	b29a      	uxth	r2, r3
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009176:	e011      	b.n	800919c <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009178:	f7fa ffac 	bl	80040d4 <HAL_GetTick>
 800917c:	4602      	mov	r2, r0
 800917e:	69bb      	ldr	r3, [r7, #24]
 8009180:	1ad3      	subs	r3, r2, r3
 8009182:	683a      	ldr	r2, [r7, #0]
 8009184:	429a      	cmp	r2, r3
 8009186:	d803      	bhi.n	8009190 <HAL_SPI_Transmit+0x15c>
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800918e:	d102      	bne.n	8009196 <HAL_SPI_Transmit+0x162>
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d102      	bne.n	800919c <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8009196:	2303      	movs	r3, #3
 8009198:	77fb      	strb	r3, [r7, #31]
          goto error;
 800919a:	e0a4      	b.n	80092e6 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80091a0:	b29b      	uxth	r3, r3
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d1ce      	bne.n	8009144 <HAL_SPI_Transmit+0x110>
 80091a6:	e07c      	b.n	80092a2 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	685b      	ldr	r3, [r3, #4]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d002      	beq.n	80091b6 <HAL_SPI_Transmit+0x182>
 80091b0:	8afb      	ldrh	r3, [r7, #22]
 80091b2:	2b01      	cmp	r3, #1
 80091b4:	d170      	bne.n	8009298 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80091ba:	b29b      	uxth	r3, r3
 80091bc:	2b01      	cmp	r3, #1
 80091be:	d912      	bls.n	80091e6 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091c4:	881a      	ldrh	r2, [r3, #0]
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091d0:	1c9a      	adds	r2, r3, #2
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80091da:	b29b      	uxth	r3, r3
 80091dc:	3b02      	subs	r3, #2
 80091de:	b29a      	uxth	r2, r3
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80091e4:	e058      	b.n	8009298 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	330c      	adds	r3, #12
 80091f0:	7812      	ldrb	r2, [r2, #0]
 80091f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091f8:	1c5a      	adds	r2, r3, #1
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009202:	b29b      	uxth	r3, r3
 8009204:	3b01      	subs	r3, #1
 8009206:	b29a      	uxth	r2, r3
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800920c:	e044      	b.n	8009298 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	689b      	ldr	r3, [r3, #8]
 8009214:	f003 0302 	and.w	r3, r3, #2
 8009218:	2b02      	cmp	r3, #2
 800921a:	d12b      	bne.n	8009274 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009220:	b29b      	uxth	r3, r3
 8009222:	2b01      	cmp	r3, #1
 8009224:	d912      	bls.n	800924c <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800922a:	881a      	ldrh	r2, [r3, #0]
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009236:	1c9a      	adds	r2, r3, #2
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009240:	b29b      	uxth	r3, r3
 8009242:	3b02      	subs	r3, #2
 8009244:	b29a      	uxth	r2, r3
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	87da      	strh	r2, [r3, #62]	; 0x3e
 800924a:	e025      	b.n	8009298 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	330c      	adds	r3, #12
 8009256:	7812      	ldrb	r2, [r2, #0]
 8009258:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800925e:	1c5a      	adds	r2, r3, #1
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009268:	b29b      	uxth	r3, r3
 800926a:	3b01      	subs	r3, #1
 800926c:	b29a      	uxth	r2, r3
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009272:	e011      	b.n	8009298 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009274:	f7fa ff2e 	bl	80040d4 <HAL_GetTick>
 8009278:	4602      	mov	r2, r0
 800927a:	69bb      	ldr	r3, [r7, #24]
 800927c:	1ad3      	subs	r3, r2, r3
 800927e:	683a      	ldr	r2, [r7, #0]
 8009280:	429a      	cmp	r2, r3
 8009282:	d803      	bhi.n	800928c <HAL_SPI_Transmit+0x258>
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800928a:	d102      	bne.n	8009292 <HAL_SPI_Transmit+0x25e>
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d102      	bne.n	8009298 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8009292:	2303      	movs	r3, #3
 8009294:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009296:	e026      	b.n	80092e6 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800929c:	b29b      	uxth	r3, r3
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d1b5      	bne.n	800920e <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80092a2:	69ba      	ldr	r2, [r7, #24]
 80092a4:	6839      	ldr	r1, [r7, #0]
 80092a6:	68f8      	ldr	r0, [r7, #12]
 80092a8:	f000 fca2 	bl	8009bf0 <SPI_EndRxTxTransaction>
 80092ac:	4603      	mov	r3, r0
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d002      	beq.n	80092b8 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	2220      	movs	r2, #32
 80092b6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	689b      	ldr	r3, [r3, #8]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d10a      	bne.n	80092d6 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80092c0:	2300      	movs	r3, #0
 80092c2:	613b      	str	r3, [r7, #16]
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	68db      	ldr	r3, [r3, #12]
 80092ca:	613b      	str	r3, [r7, #16]
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	689b      	ldr	r3, [r3, #8]
 80092d2:	613b      	str	r3, [r7, #16]
 80092d4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d002      	beq.n	80092e4 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 80092de:	2301      	movs	r3, #1
 80092e0:	77fb      	strb	r3, [r7, #31]
 80092e2:	e000      	b.n	80092e6 <HAL_SPI_Transmit+0x2b2>
  }

error:
 80092e4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	2201      	movs	r2, #1
 80092ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	2200      	movs	r2, #0
 80092f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80092f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	3720      	adds	r7, #32
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}

08009300 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b088      	sub	sp, #32
 8009304:	af02      	add	r7, sp, #8
 8009306:	60f8      	str	r0, [r7, #12]
 8009308:	60b9      	str	r1, [r7, #8]
 800930a:	603b      	str	r3, [r7, #0]
 800930c:	4613      	mov	r3, r2
 800930e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009310:	2300      	movs	r3, #0
 8009312:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	685b      	ldr	r3, [r3, #4]
 8009318:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800931c:	d112      	bne.n	8009344 <HAL_SPI_Receive+0x44>
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	689b      	ldr	r3, [r3, #8]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d10e      	bne.n	8009344 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	2204      	movs	r2, #4
 800932a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800932e:	88fa      	ldrh	r2, [r7, #6]
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	9300      	str	r3, [sp, #0]
 8009334:	4613      	mov	r3, r2
 8009336:	68ba      	ldr	r2, [r7, #8]
 8009338:	68b9      	ldr	r1, [r7, #8]
 800933a:	68f8      	ldr	r0, [r7, #12]
 800933c:	f000 f908 	bl	8009550 <HAL_SPI_TransmitReceive>
 8009340:	4603      	mov	r3, r0
 8009342:	e101      	b.n	8009548 <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800934a:	2b01      	cmp	r3, #1
 800934c:	d101      	bne.n	8009352 <HAL_SPI_Receive+0x52>
 800934e:	2302      	movs	r3, #2
 8009350:	e0fa      	b.n	8009548 <HAL_SPI_Receive+0x248>
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	2201      	movs	r2, #1
 8009356:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800935a:	f7fa febb 	bl	80040d4 <HAL_GetTick>
 800935e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009366:	b2db      	uxtb	r3, r3
 8009368:	2b01      	cmp	r3, #1
 800936a:	d002      	beq.n	8009372 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800936c:	2302      	movs	r3, #2
 800936e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009370:	e0e1      	b.n	8009536 <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d002      	beq.n	800937e <HAL_SPI_Receive+0x7e>
 8009378:	88fb      	ldrh	r3, [r7, #6]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d102      	bne.n	8009384 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800937e:	2301      	movs	r3, #1
 8009380:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009382:	e0d8      	b.n	8009536 <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	2204      	movs	r2, #4
 8009388:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	2200      	movs	r2, #0
 8009390:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	68ba      	ldr	r2, [r7, #8]
 8009396:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	88fa      	ldrh	r2, [r7, #6]
 800939c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	88fa      	ldrh	r2, [r7, #6]
 80093a4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	2200      	movs	r2, #0
 80093ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	2200      	movs	r2, #0
 80093b2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	2200      	movs	r2, #0
 80093b8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	2200      	movs	r2, #0
 80093be:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	2200      	movs	r2, #0
 80093c4:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	68db      	ldr	r3, [r3, #12]
 80093ca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80093ce:	d908      	bls.n	80093e2 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	685a      	ldr	r2, [r3, #4]
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80093de:	605a      	str	r2, [r3, #4]
 80093e0:	e007      	b.n	80093f2 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	685a      	ldr	r2, [r3, #4]
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80093f0:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	689b      	ldr	r3, [r3, #8]
 80093f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80093fa:	d107      	bne.n	800940c <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	681a      	ldr	r2, [r3, #0]
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800940a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009416:	2b40      	cmp	r3, #64	; 0x40
 8009418:	d007      	beq.n	800942a <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	681a      	ldr	r2, [r3, #0]
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009428:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	68db      	ldr	r3, [r3, #12]
 800942e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009432:	d867      	bhi.n	8009504 <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009434:	e030      	b.n	8009498 <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	689b      	ldr	r3, [r3, #8]
 800943c:	f003 0301 	and.w	r3, r3, #1
 8009440:	2b01      	cmp	r3, #1
 8009442:	d117      	bne.n	8009474 <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f103 020c 	add.w	r2, r3, #12
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009450:	7812      	ldrb	r2, [r2, #0]
 8009452:	b2d2      	uxtb	r2, r2
 8009454:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800945a:	1c5a      	adds	r2, r3, #1
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009466:	b29b      	uxth	r3, r3
 8009468:	3b01      	subs	r3, #1
 800946a:	b29a      	uxth	r2, r3
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8009472:	e011      	b.n	8009498 <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009474:	f7fa fe2e 	bl	80040d4 <HAL_GetTick>
 8009478:	4602      	mov	r2, r0
 800947a:	693b      	ldr	r3, [r7, #16]
 800947c:	1ad3      	subs	r3, r2, r3
 800947e:	683a      	ldr	r2, [r7, #0]
 8009480:	429a      	cmp	r2, r3
 8009482:	d803      	bhi.n	800948c <HAL_SPI_Receive+0x18c>
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800948a:	d102      	bne.n	8009492 <HAL_SPI_Receive+0x192>
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d102      	bne.n	8009498 <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 8009492:	2303      	movs	r3, #3
 8009494:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009496:	e04e      	b.n	8009536 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800949e:	b29b      	uxth	r3, r3
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d1c8      	bne.n	8009436 <HAL_SPI_Receive+0x136>
 80094a4:	e034      	b.n	8009510 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	689b      	ldr	r3, [r3, #8]
 80094ac:	f003 0301 	and.w	r3, r3, #1
 80094b0:	2b01      	cmp	r3, #1
 80094b2:	d115      	bne.n	80094e0 <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	68da      	ldr	r2, [r3, #12]
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094be:	b292      	uxth	r2, r2
 80094c0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094c6:	1c9a      	adds	r2, r3, #2
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80094d2:	b29b      	uxth	r3, r3
 80094d4:	3b01      	subs	r3, #1
 80094d6:	b29a      	uxth	r2, r3
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80094de:	e011      	b.n	8009504 <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80094e0:	f7fa fdf8 	bl	80040d4 <HAL_GetTick>
 80094e4:	4602      	mov	r2, r0
 80094e6:	693b      	ldr	r3, [r7, #16]
 80094e8:	1ad3      	subs	r3, r2, r3
 80094ea:	683a      	ldr	r2, [r7, #0]
 80094ec:	429a      	cmp	r2, r3
 80094ee:	d803      	bhi.n	80094f8 <HAL_SPI_Receive+0x1f8>
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094f6:	d102      	bne.n	80094fe <HAL_SPI_Receive+0x1fe>
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d102      	bne.n	8009504 <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 80094fe:	2303      	movs	r3, #3
 8009500:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009502:	e018      	b.n	8009536 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800950a:	b29b      	uxth	r3, r3
 800950c:	2b00      	cmp	r3, #0
 800950e:	d1ca      	bne.n	80094a6 <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009510:	693a      	ldr	r2, [r7, #16]
 8009512:	6839      	ldr	r1, [r7, #0]
 8009514:	68f8      	ldr	r0, [r7, #12]
 8009516:	f000 fb13 	bl	8009b40 <SPI_EndRxTransaction>
 800951a:	4603      	mov	r3, r0
 800951c:	2b00      	cmp	r3, #0
 800951e:	d002      	beq.n	8009526 <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	2220      	movs	r2, #32
 8009524:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800952a:	2b00      	cmp	r3, #0
 800952c:	d002      	beq.n	8009534 <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 800952e:	2301      	movs	r3, #1
 8009530:	75fb      	strb	r3, [r7, #23]
 8009532:	e000      	b.n	8009536 <HAL_SPI_Receive+0x236>
  }

error :
 8009534:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	2201      	movs	r2, #1
 800953a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	2200      	movs	r2, #0
 8009542:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009546:	7dfb      	ldrb	r3, [r7, #23]
}
 8009548:	4618      	mov	r0, r3
 800954a:	3718      	adds	r7, #24
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}

08009550 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b08a      	sub	sp, #40	; 0x28
 8009554:	af00      	add	r7, sp, #0
 8009556:	60f8      	str	r0, [r7, #12]
 8009558:	60b9      	str	r1, [r7, #8]
 800955a:	607a      	str	r2, [r7, #4]
 800955c:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800955e:	2301      	movs	r3, #1
 8009560:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009562:	2300      	movs	r3, #0
 8009564:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800956e:	2b01      	cmp	r3, #1
 8009570:	d101      	bne.n	8009576 <HAL_SPI_TransmitReceive+0x26>
 8009572:	2302      	movs	r3, #2
 8009574:	e1fb      	b.n	800996e <HAL_SPI_TransmitReceive+0x41e>
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	2201      	movs	r2, #1
 800957a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800957e:	f7fa fda9 	bl	80040d4 <HAL_GetTick>
 8009582:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800958a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	685b      	ldr	r3, [r3, #4]
 8009590:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8009592:	887b      	ldrh	r3, [r7, #2]
 8009594:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8009596:	887b      	ldrh	r3, [r7, #2]
 8009598:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800959a:	7efb      	ldrb	r3, [r7, #27]
 800959c:	2b01      	cmp	r3, #1
 800959e:	d00e      	beq.n	80095be <HAL_SPI_TransmitReceive+0x6e>
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80095a6:	d106      	bne.n	80095b6 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	689b      	ldr	r3, [r3, #8]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d102      	bne.n	80095b6 <HAL_SPI_TransmitReceive+0x66>
 80095b0:	7efb      	ldrb	r3, [r7, #27]
 80095b2:	2b04      	cmp	r3, #4
 80095b4:	d003      	beq.n	80095be <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80095b6:	2302      	movs	r3, #2
 80095b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80095bc:	e1cd      	b.n	800995a <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d005      	beq.n	80095d0 <HAL_SPI_TransmitReceive+0x80>
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d002      	beq.n	80095d0 <HAL_SPI_TransmitReceive+0x80>
 80095ca:	887b      	ldrh	r3, [r7, #2]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d103      	bne.n	80095d8 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80095d0:	2301      	movs	r3, #1
 80095d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80095d6:	e1c0      	b.n	800995a <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80095de:	b2db      	uxtb	r3, r3
 80095e0:	2b04      	cmp	r3, #4
 80095e2:	d003      	beq.n	80095ec <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	2205      	movs	r2, #5
 80095e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	2200      	movs	r2, #0
 80095f0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	687a      	ldr	r2, [r7, #4]
 80095f6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	887a      	ldrh	r2, [r7, #2]
 80095fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	887a      	ldrh	r2, [r7, #2]
 8009604:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	68ba      	ldr	r2, [r7, #8]
 800960c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	887a      	ldrh	r2, [r7, #2]
 8009612:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	887a      	ldrh	r2, [r7, #2]
 8009618:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	2200      	movs	r2, #0
 800961e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	2200      	movs	r2, #0
 8009624:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	68db      	ldr	r3, [r3, #12]
 800962a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800962e:	d802      	bhi.n	8009636 <HAL_SPI_TransmitReceive+0xe6>
 8009630:	8a3b      	ldrh	r3, [r7, #16]
 8009632:	2b01      	cmp	r3, #1
 8009634:	d908      	bls.n	8009648 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	685a      	ldr	r2, [r3, #4]
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009644:	605a      	str	r2, [r3, #4]
 8009646:	e007      	b.n	8009658 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	685a      	ldr	r2, [r3, #4]
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009656:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009662:	2b40      	cmp	r3, #64	; 0x40
 8009664:	d007      	beq.n	8009676 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	681a      	ldr	r2, [r3, #0]
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009674:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	68db      	ldr	r3, [r3, #12]
 800967a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800967e:	d97c      	bls.n	800977a <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	685b      	ldr	r3, [r3, #4]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d002      	beq.n	800968e <HAL_SPI_TransmitReceive+0x13e>
 8009688:	8a7b      	ldrh	r3, [r7, #18]
 800968a:	2b01      	cmp	r3, #1
 800968c:	d169      	bne.n	8009762 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009692:	881a      	ldrh	r2, [r3, #0]
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800969e:	1c9a      	adds	r2, r3, #2
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80096a8:	b29b      	uxth	r3, r3
 80096aa:	3b01      	subs	r3, #1
 80096ac:	b29a      	uxth	r2, r3
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80096b2:	e056      	b.n	8009762 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	689b      	ldr	r3, [r3, #8]
 80096ba:	f003 0302 	and.w	r3, r3, #2
 80096be:	2b02      	cmp	r3, #2
 80096c0:	d11b      	bne.n	80096fa <HAL_SPI_TransmitReceive+0x1aa>
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80096c6:	b29b      	uxth	r3, r3
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d016      	beq.n	80096fa <HAL_SPI_TransmitReceive+0x1aa>
 80096cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ce:	2b01      	cmp	r3, #1
 80096d0:	d113      	bne.n	80096fa <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096d6:	881a      	ldrh	r2, [r3, #0]
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096e2:	1c9a      	adds	r2, r3, #2
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80096ec:	b29b      	uxth	r3, r3
 80096ee:	3b01      	subs	r3, #1
 80096f0:	b29a      	uxth	r2, r3
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80096f6:	2300      	movs	r3, #0
 80096f8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	689b      	ldr	r3, [r3, #8]
 8009700:	f003 0301 	and.w	r3, r3, #1
 8009704:	2b01      	cmp	r3, #1
 8009706:	d11c      	bne.n	8009742 <HAL_SPI_TransmitReceive+0x1f2>
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800970e:	b29b      	uxth	r3, r3
 8009710:	2b00      	cmp	r3, #0
 8009712:	d016      	beq.n	8009742 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	68da      	ldr	r2, [r3, #12]
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800971e:	b292      	uxth	r2, r2
 8009720:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009726:	1c9a      	adds	r2, r3, #2
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009732:	b29b      	uxth	r3, r3
 8009734:	3b01      	subs	r3, #1
 8009736:	b29a      	uxth	r2, r3
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800973e:	2301      	movs	r3, #1
 8009740:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009742:	f7fa fcc7 	bl	80040d4 <HAL_GetTick>
 8009746:	4602      	mov	r2, r0
 8009748:	69fb      	ldr	r3, [r7, #28]
 800974a:	1ad3      	subs	r3, r2, r3
 800974c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800974e:	429a      	cmp	r2, r3
 8009750:	d807      	bhi.n	8009762 <HAL_SPI_TransmitReceive+0x212>
 8009752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009758:	d003      	beq.n	8009762 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800975a:	2303      	movs	r3, #3
 800975c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8009760:	e0fb      	b.n	800995a <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009766:	b29b      	uxth	r3, r3
 8009768:	2b00      	cmp	r3, #0
 800976a:	d1a3      	bne.n	80096b4 <HAL_SPI_TransmitReceive+0x164>
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009772:	b29b      	uxth	r3, r3
 8009774:	2b00      	cmp	r3, #0
 8009776:	d19d      	bne.n	80096b4 <HAL_SPI_TransmitReceive+0x164>
 8009778:	e0df      	b.n	800993a <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	685b      	ldr	r3, [r3, #4]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d003      	beq.n	800978a <HAL_SPI_TransmitReceive+0x23a>
 8009782:	8a7b      	ldrh	r3, [r7, #18]
 8009784:	2b01      	cmp	r3, #1
 8009786:	f040 80cb 	bne.w	8009920 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800978e:	b29b      	uxth	r3, r3
 8009790:	2b01      	cmp	r3, #1
 8009792:	d912      	bls.n	80097ba <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009798:	881a      	ldrh	r2, [r3, #0]
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097a4:	1c9a      	adds	r2, r3, #2
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80097ae:	b29b      	uxth	r3, r3
 80097b0:	3b02      	subs	r3, #2
 80097b2:	b29a      	uxth	r2, r3
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80097b8:	e0b2      	b.n	8009920 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	330c      	adds	r3, #12
 80097c4:	7812      	ldrb	r2, [r2, #0]
 80097c6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097cc:	1c5a      	adds	r2, r3, #1
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80097d6:	b29b      	uxth	r3, r3
 80097d8:	3b01      	subs	r3, #1
 80097da:	b29a      	uxth	r2, r3
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80097e0:	e09e      	b.n	8009920 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	689b      	ldr	r3, [r3, #8]
 80097e8:	f003 0302 	and.w	r3, r3, #2
 80097ec:	2b02      	cmp	r3, #2
 80097ee:	d134      	bne.n	800985a <HAL_SPI_TransmitReceive+0x30a>
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80097f4:	b29b      	uxth	r3, r3
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d02f      	beq.n	800985a <HAL_SPI_TransmitReceive+0x30a>
 80097fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097fc:	2b01      	cmp	r3, #1
 80097fe:	d12c      	bne.n	800985a <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009804:	b29b      	uxth	r3, r3
 8009806:	2b01      	cmp	r3, #1
 8009808:	d912      	bls.n	8009830 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800980e:	881a      	ldrh	r2, [r3, #0]
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800981a:	1c9a      	adds	r2, r3, #2
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009824:	b29b      	uxth	r3, r3
 8009826:	3b02      	subs	r3, #2
 8009828:	b29a      	uxth	r2, r3
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800982e:	e012      	b.n	8009856 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	330c      	adds	r3, #12
 800983a:	7812      	ldrb	r2, [r2, #0]
 800983c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009842:	1c5a      	adds	r2, r3, #1
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800984c:	b29b      	uxth	r3, r3
 800984e:	3b01      	subs	r3, #1
 8009850:	b29a      	uxth	r2, r3
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009856:	2300      	movs	r3, #0
 8009858:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	689b      	ldr	r3, [r3, #8]
 8009860:	f003 0301 	and.w	r3, r3, #1
 8009864:	2b01      	cmp	r3, #1
 8009866:	d148      	bne.n	80098fa <HAL_SPI_TransmitReceive+0x3aa>
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800986e:	b29b      	uxth	r3, r3
 8009870:	2b00      	cmp	r3, #0
 8009872:	d042      	beq.n	80098fa <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800987a:	b29b      	uxth	r3, r3
 800987c:	2b01      	cmp	r3, #1
 800987e:	d923      	bls.n	80098c8 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	68da      	ldr	r2, [r3, #12]
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800988a:	b292      	uxth	r2, r2
 800988c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009892:	1c9a      	adds	r2, r3, #2
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800989e:	b29b      	uxth	r3, r3
 80098a0:	3b02      	subs	r3, #2
 80098a2:	b29a      	uxth	r2, r3
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80098b0:	b29b      	uxth	r3, r3
 80098b2:	2b01      	cmp	r3, #1
 80098b4:	d81f      	bhi.n	80098f6 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	685a      	ldr	r2, [r3, #4]
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80098c4:	605a      	str	r2, [r3, #4]
 80098c6:	e016      	b.n	80098f6 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f103 020c 	add.w	r2, r3, #12
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098d4:	7812      	ldrb	r2, [r2, #0]
 80098d6:	b2d2      	uxtb	r2, r2
 80098d8:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098de:	1c5a      	adds	r2, r3, #1
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80098ea:	b29b      	uxth	r3, r3
 80098ec:	3b01      	subs	r3, #1
 80098ee:	b29a      	uxth	r2, r3
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80098f6:	2301      	movs	r3, #1
 80098f8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80098fa:	f7fa fbeb 	bl	80040d4 <HAL_GetTick>
 80098fe:	4602      	mov	r2, r0
 8009900:	69fb      	ldr	r3, [r7, #28]
 8009902:	1ad3      	subs	r3, r2, r3
 8009904:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009906:	429a      	cmp	r2, r3
 8009908:	d803      	bhi.n	8009912 <HAL_SPI_TransmitReceive+0x3c2>
 800990a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800990c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009910:	d102      	bne.n	8009918 <HAL_SPI_TransmitReceive+0x3c8>
 8009912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009914:	2b00      	cmp	r3, #0
 8009916:	d103      	bne.n	8009920 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8009918:	2303      	movs	r3, #3
 800991a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800991e:	e01c      	b.n	800995a <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009924:	b29b      	uxth	r3, r3
 8009926:	2b00      	cmp	r3, #0
 8009928:	f47f af5b 	bne.w	80097e2 <HAL_SPI_TransmitReceive+0x292>
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009932:	b29b      	uxth	r3, r3
 8009934:	2b00      	cmp	r3, #0
 8009936:	f47f af54 	bne.w	80097e2 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800993a:	69fa      	ldr	r2, [r7, #28]
 800993c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800993e:	68f8      	ldr	r0, [r7, #12]
 8009940:	f000 f956 	bl	8009bf0 <SPI_EndRxTxTransaction>
 8009944:	4603      	mov	r3, r0
 8009946:	2b00      	cmp	r3, #0
 8009948:	d006      	beq.n	8009958 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800994a:	2301      	movs	r3, #1
 800994c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	2220      	movs	r2, #32
 8009954:	661a      	str	r2, [r3, #96]	; 0x60
 8009956:	e000      	b.n	800995a <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8009958:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	2201      	movs	r2, #1
 800995e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	2200      	movs	r2, #0
 8009966:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800996a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800996e:	4618      	mov	r0, r3
 8009970:	3728      	adds	r7, #40	; 0x28
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}

08009976 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8009976:	b480      	push	{r7}
 8009978:	b083      	sub	sp, #12
 800997a:	af00      	add	r7, sp, #0
 800997c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009984:	b2db      	uxtb	r3, r3
}
 8009986:	4618      	mov	r0, r3
 8009988:	370c      	adds	r7, #12
 800998a:	46bd      	mov	sp, r7
 800998c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009990:	4770      	bx	lr

08009992 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009992:	b580      	push	{r7, lr}
 8009994:	b084      	sub	sp, #16
 8009996:	af00      	add	r7, sp, #0
 8009998:	60f8      	str	r0, [r7, #12]
 800999a:	60b9      	str	r1, [r7, #8]
 800999c:	603b      	str	r3, [r7, #0]
 800999e:	4613      	mov	r3, r2
 80099a0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80099a2:	e04c      	b.n	8009a3e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099aa:	d048      	beq.n	8009a3e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80099ac:	f7fa fb92 	bl	80040d4 <HAL_GetTick>
 80099b0:	4602      	mov	r2, r0
 80099b2:	69bb      	ldr	r3, [r7, #24]
 80099b4:	1ad3      	subs	r3, r2, r3
 80099b6:	683a      	ldr	r2, [r7, #0]
 80099b8:	429a      	cmp	r2, r3
 80099ba:	d902      	bls.n	80099c2 <SPI_WaitFlagStateUntilTimeout+0x30>
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d13d      	bne.n	8009a3e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	685a      	ldr	r2, [r3, #4]
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80099d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	685b      	ldr	r3, [r3, #4]
 80099d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80099da:	d111      	bne.n	8009a00 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	689b      	ldr	r3, [r3, #8]
 80099e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80099e4:	d004      	beq.n	80099f0 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	689b      	ldr	r3, [r3, #8]
 80099ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80099ee:	d107      	bne.n	8009a00 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	681a      	ldr	r2, [r3, #0]
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80099fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a08:	d10f      	bne.n	8009a2a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	681a      	ldr	r2, [r3, #0]
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009a18:	601a      	str	r2, [r3, #0]
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	681a      	ldr	r2, [r3, #0]
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009a28:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	2201      	movs	r2, #1
 8009a2e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	2200      	movs	r2, #0
 8009a36:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009a3a:	2303      	movs	r3, #3
 8009a3c:	e00f      	b.n	8009a5e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	689a      	ldr	r2, [r3, #8]
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	4013      	ands	r3, r2
 8009a48:	68ba      	ldr	r2, [r7, #8]
 8009a4a:	429a      	cmp	r2, r3
 8009a4c:	bf0c      	ite	eq
 8009a4e:	2301      	moveq	r3, #1
 8009a50:	2300      	movne	r3, #0
 8009a52:	b2db      	uxtb	r3, r3
 8009a54:	461a      	mov	r2, r3
 8009a56:	79fb      	ldrb	r3, [r7, #7]
 8009a58:	429a      	cmp	r2, r3
 8009a5a:	d1a3      	bne.n	80099a4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8009a5c:	2300      	movs	r3, #0
}
 8009a5e:	4618      	mov	r0, r3
 8009a60:	3710      	adds	r7, #16
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd80      	pop	{r7, pc}

08009a66 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009a66:	b580      	push	{r7, lr}
 8009a68:	b084      	sub	sp, #16
 8009a6a:	af00      	add	r7, sp, #0
 8009a6c:	60f8      	str	r0, [r7, #12]
 8009a6e:	60b9      	str	r1, [r7, #8]
 8009a70:	607a      	str	r2, [r7, #4]
 8009a72:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8009a74:	e057      	b.n	8009b26 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009a76:	68bb      	ldr	r3, [r7, #8]
 8009a78:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009a7c:	d106      	bne.n	8009a8c <SPI_WaitFifoStateUntilTimeout+0x26>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d103      	bne.n	8009a8c <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	330c      	adds	r3, #12
 8009a8a:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a92:	d048      	beq.n	8009b26 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8009a94:	f7fa fb1e 	bl	80040d4 <HAL_GetTick>
 8009a98:	4602      	mov	r2, r0
 8009a9a:	69bb      	ldr	r3, [r7, #24]
 8009a9c:	1ad3      	subs	r3, r2, r3
 8009a9e:	683a      	ldr	r2, [r7, #0]
 8009aa0:	429a      	cmp	r2, r3
 8009aa2:	d902      	bls.n	8009aaa <SPI_WaitFifoStateUntilTimeout+0x44>
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d13d      	bne.n	8009b26 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	685a      	ldr	r2, [r3, #4]
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009ab8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	685b      	ldr	r3, [r3, #4]
 8009abe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009ac2:	d111      	bne.n	8009ae8 <SPI_WaitFifoStateUntilTimeout+0x82>
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	689b      	ldr	r3, [r3, #8]
 8009ac8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009acc:	d004      	beq.n	8009ad8 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	689b      	ldr	r3, [r3, #8]
 8009ad2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ad6:	d107      	bne.n	8009ae8 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	681a      	ldr	r2, [r3, #0]
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009ae6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009af0:	d10f      	bne.n	8009b12 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	681a      	ldr	r2, [r3, #0]
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009b00:	601a      	str	r2, [r3, #0]
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	681a      	ldr	r2, [r3, #0]
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009b10:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	2201      	movs	r2, #1
 8009b16:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009b22:	2303      	movs	r3, #3
 8009b24:	e008      	b.n	8009b38 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	689a      	ldr	r2, [r3, #8]
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	4013      	ands	r3, r2
 8009b30:	687a      	ldr	r2, [r7, #4]
 8009b32:	429a      	cmp	r2, r3
 8009b34:	d19f      	bne.n	8009a76 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8009b36:	2300      	movs	r3, #0
}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	3710      	adds	r7, #16
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bd80      	pop	{r7, pc}

08009b40 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b086      	sub	sp, #24
 8009b44:	af02      	add	r7, sp, #8
 8009b46:	60f8      	str	r0, [r7, #12]
 8009b48:	60b9      	str	r1, [r7, #8]
 8009b4a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	685b      	ldr	r3, [r3, #4]
 8009b50:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009b54:	d111      	bne.n	8009b7a <SPI_EndRxTransaction+0x3a>
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	689b      	ldr	r3, [r3, #8]
 8009b5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b5e:	d004      	beq.n	8009b6a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	689b      	ldr	r3, [r3, #8]
 8009b64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b68:	d107      	bne.n	8009b7a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	681a      	ldr	r2, [r3, #0]
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b78:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	9300      	str	r3, [sp, #0]
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	2200      	movs	r2, #0
 8009b82:	2180      	movs	r1, #128	; 0x80
 8009b84:	68f8      	ldr	r0, [r7, #12]
 8009b86:	f7ff ff04 	bl	8009992 <SPI_WaitFlagStateUntilTimeout>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d007      	beq.n	8009ba0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b94:	f043 0220 	orr.w	r2, r3, #32
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009b9c:	2303      	movs	r3, #3
 8009b9e:	e023      	b.n	8009be8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	685b      	ldr	r3, [r3, #4]
 8009ba4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009ba8:	d11d      	bne.n	8009be6 <SPI_EndRxTransaction+0xa6>
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	689b      	ldr	r3, [r3, #8]
 8009bae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009bb2:	d004      	beq.n	8009bbe <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	689b      	ldr	r3, [r3, #8]
 8009bb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009bbc:	d113      	bne.n	8009be6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	9300      	str	r3, [sp, #0]
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009bca:	68f8      	ldr	r0, [r7, #12]
 8009bcc:	f7ff ff4b 	bl	8009a66 <SPI_WaitFifoStateUntilTimeout>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d007      	beq.n	8009be6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009bda:	f043 0220 	orr.w	r2, r3, #32
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8009be2:	2303      	movs	r3, #3
 8009be4:	e000      	b.n	8009be8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8009be6:	2300      	movs	r3, #0
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	3710      	adds	r7, #16
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}

08009bf0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b086      	sub	sp, #24
 8009bf4:	af02      	add	r7, sp, #8
 8009bf6:	60f8      	str	r0, [r7, #12]
 8009bf8:	60b9      	str	r1, [r7, #8]
 8009bfa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	9300      	str	r3, [sp, #0]
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	2200      	movs	r2, #0
 8009c04:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009c08:	68f8      	ldr	r0, [r7, #12]
 8009c0a:	f7ff ff2c 	bl	8009a66 <SPI_WaitFifoStateUntilTimeout>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d007      	beq.n	8009c24 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c18:	f043 0220 	orr.w	r2, r3, #32
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009c20:	2303      	movs	r3, #3
 8009c22:	e027      	b.n	8009c74 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	9300      	str	r3, [sp, #0]
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	2180      	movs	r1, #128	; 0x80
 8009c2e:	68f8      	ldr	r0, [r7, #12]
 8009c30:	f7ff feaf 	bl	8009992 <SPI_WaitFlagStateUntilTimeout>
 8009c34:	4603      	mov	r3, r0
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d007      	beq.n	8009c4a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c3e:	f043 0220 	orr.w	r2, r3, #32
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009c46:	2303      	movs	r3, #3
 8009c48:	e014      	b.n	8009c74 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	9300      	str	r3, [sp, #0]
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	2200      	movs	r2, #0
 8009c52:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009c56:	68f8      	ldr	r0, [r7, #12]
 8009c58:	f7ff ff05 	bl	8009a66 <SPI_WaitFifoStateUntilTimeout>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d007      	beq.n	8009c72 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c66:	f043 0220 	orr.w	r2, r3, #32
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009c6e:	2303      	movs	r3, #3
 8009c70:	e000      	b.n	8009c74 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009c72:	2300      	movs	r3, #0
}
 8009c74:	4618      	mov	r0, r3
 8009c76:	3710      	adds	r7, #16
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}

08009c7c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b082      	sub	sp, #8
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d101      	bne.n	8009c8e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	e01d      	b.n	8009cca <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c94:	b2db      	uxtb	r3, r3
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d106      	bne.n	8009ca8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f7f9 fe16 	bl	80038d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2202      	movs	r2, #2
 8009cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681a      	ldr	r2, [r3, #0]
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	3304      	adds	r3, #4
 8009cb8:	4619      	mov	r1, r3
 8009cba:	4610      	mov	r0, r2
 8009cbc:	f000 fa2e 	bl	800a11c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2201      	movs	r2, #1
 8009cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009cc8:	2300      	movs	r3, #0
}
 8009cca:	4618      	mov	r0, r3
 8009ccc:	3708      	adds	r7, #8
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd80      	pop	{r7, pc}
	...

08009cd4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b084      	sub	sp, #16
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
 8009cdc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	2201      	movs	r2, #1
 8009ce4:	6839      	ldr	r1, [r7, #0]
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f000 fe40 	bl	800a96c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	4a17      	ldr	r2, [pc, #92]	; (8009d50 <HAL_TIM_PWM_Start+0x7c>)
 8009cf2:	4293      	cmp	r3, r2
 8009cf4:	d004      	beq.n	8009d00 <HAL_TIM_PWM_Start+0x2c>
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	4a16      	ldr	r2, [pc, #88]	; (8009d54 <HAL_TIM_PWM_Start+0x80>)
 8009cfc:	4293      	cmp	r3, r2
 8009cfe:	d101      	bne.n	8009d04 <HAL_TIM_PWM_Start+0x30>
 8009d00:	2301      	movs	r3, #1
 8009d02:	e000      	b.n	8009d06 <HAL_TIM_PWM_Start+0x32>
 8009d04:	2300      	movs	r3, #0
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d007      	beq.n	8009d1a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009d18:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	689a      	ldr	r2, [r3, #8]
 8009d20:	4b0d      	ldr	r3, [pc, #52]	; (8009d58 <HAL_TIM_PWM_Start+0x84>)
 8009d22:	4013      	ands	r3, r2
 8009d24:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	2b06      	cmp	r3, #6
 8009d2a:	d00b      	beq.n	8009d44 <HAL_TIM_PWM_Start+0x70>
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d32:	d007      	beq.n	8009d44 <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	681a      	ldr	r2, [r3, #0]
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f042 0201 	orr.w	r2, r2, #1
 8009d42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009d44:	2300      	movs	r3, #0
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	3710      	adds	r7, #16
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}
 8009d4e:	bf00      	nop
 8009d50:	40010000 	.word	0x40010000
 8009d54:	40010400 	.word	0x40010400
 8009d58:	00010007 	.word	0x00010007

08009d5c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b082      	sub	sp, #8
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d101      	bne.n	8009d6e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8009d6a:	2301      	movs	r3, #1
 8009d6c:	e01d      	b.n	8009daa <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d74:	b2db      	uxtb	r3, r3
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d106      	bne.n	8009d88 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f7f9 fd62 	bl	800384c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2202      	movs	r2, #2
 8009d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681a      	ldr	r2, [r3, #0]
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	3304      	adds	r3, #4
 8009d98:	4619      	mov	r1, r3
 8009d9a:	4610      	mov	r0, r2
 8009d9c:	f000 f9be 	bl	800a11c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2201      	movs	r2, #1
 8009da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009da8:	2300      	movs	r3, #0
}
 8009daa:	4618      	mov	r0, r3
 8009dac:	3708      	adds	r7, #8
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}

08009db2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009db2:	b580      	push	{r7, lr}
 8009db4:	b084      	sub	sp, #16
 8009db6:	af00      	add	r7, sp, #0
 8009db8:	60f8      	str	r0, [r7, #12]
 8009dba:	60b9      	str	r1, [r7, #8]
 8009dbc:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009dc4:	2b01      	cmp	r3, #1
 8009dc6:	d101      	bne.n	8009dcc <HAL_TIM_IC_ConfigChannel+0x1a>
 8009dc8:	2302      	movs	r3, #2
 8009dca:	e08a      	b.n	8009ee2 <HAL_TIM_IC_ConfigChannel+0x130>
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	2201      	movs	r2, #1
 8009dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	2202      	movs	r2, #2
 8009dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d11b      	bne.n	8009e1a <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	6818      	ldr	r0, [r3, #0]
 8009de6:	68bb      	ldr	r3, [r7, #8]
 8009de8:	6819      	ldr	r1, [r3, #0]
 8009dea:	68bb      	ldr	r3, [r7, #8]
 8009dec:	685a      	ldr	r2, [r3, #4]
 8009dee:	68bb      	ldr	r3, [r7, #8]
 8009df0:	68db      	ldr	r3, [r3, #12]
 8009df2:	f000 fc91 	bl	800a718 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	699a      	ldr	r2, [r3, #24]
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	f022 020c 	bic.w	r2, r2, #12
 8009e04:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	6999      	ldr	r1, [r3, #24]
 8009e0c:	68bb      	ldr	r3, [r7, #8]
 8009e0e:	689a      	ldr	r2, [r3, #8]
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	430a      	orrs	r2, r1
 8009e16:	619a      	str	r2, [r3, #24]
 8009e18:	e05a      	b.n	8009ed0 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2b04      	cmp	r3, #4
 8009e1e:	d11c      	bne.n	8009e5a <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	6818      	ldr	r0, [r3, #0]
 8009e24:	68bb      	ldr	r3, [r7, #8]
 8009e26:	6819      	ldr	r1, [r3, #0]
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	685a      	ldr	r2, [r3, #4]
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	68db      	ldr	r3, [r3, #12]
 8009e30:	f000 fce6 	bl	800a800 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	699a      	ldr	r2, [r3, #24]
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009e42:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	6999      	ldr	r1, [r3, #24]
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	689b      	ldr	r3, [r3, #8]
 8009e4e:	021a      	lsls	r2, r3, #8
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	430a      	orrs	r2, r1
 8009e56:	619a      	str	r2, [r3, #24]
 8009e58:	e03a      	b.n	8009ed0 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2b08      	cmp	r3, #8
 8009e5e:	d11b      	bne.n	8009e98 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	6818      	ldr	r0, [r3, #0]
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	6819      	ldr	r1, [r3, #0]
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	685a      	ldr	r2, [r3, #4]
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	68db      	ldr	r3, [r3, #12]
 8009e70:	f000 fd03 	bl	800a87a <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	69da      	ldr	r2, [r3, #28]
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	f022 020c 	bic.w	r2, r2, #12
 8009e82:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	69d9      	ldr	r1, [r3, #28]
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	689a      	ldr	r2, [r3, #8]
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	430a      	orrs	r2, r1
 8009e94:	61da      	str	r2, [r3, #28]
 8009e96:	e01b      	b.n	8009ed0 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	6818      	ldr	r0, [r3, #0]
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	6819      	ldr	r1, [r3, #0]
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	685a      	ldr	r2, [r3, #4]
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	68db      	ldr	r3, [r3, #12]
 8009ea8:	f000 fd23 	bl	800a8f2 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	69da      	ldr	r2, [r3, #28]
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009eba:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	69d9      	ldr	r1, [r3, #28]
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	689b      	ldr	r3, [r3, #8]
 8009ec6:	021a      	lsls	r2, r3, #8
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	430a      	orrs	r2, r1
 8009ece:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	2201      	movs	r2, #1
 8009ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	2200      	movs	r2, #0
 8009edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009ee0:	2300      	movs	r3, #0
}
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	3710      	adds	r7, #16
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}
	...

08009eec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b084      	sub	sp, #16
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	60f8      	str	r0, [r7, #12]
 8009ef4:	60b9      	str	r1, [r7, #8]
 8009ef6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009efe:	2b01      	cmp	r3, #1
 8009f00:	d101      	bne.n	8009f06 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009f02:	2302      	movs	r3, #2
 8009f04:	e105      	b.n	800a112 <HAL_TIM_PWM_ConfigChannel+0x226>
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	2201      	movs	r2, #1
 8009f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	2202      	movs	r2, #2
 8009f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2b14      	cmp	r3, #20
 8009f1a:	f200 80f0 	bhi.w	800a0fe <HAL_TIM_PWM_ConfigChannel+0x212>
 8009f1e:	a201      	add	r2, pc, #4	; (adr r2, 8009f24 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8009f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f24:	08009f79 	.word	0x08009f79
 8009f28:	0800a0ff 	.word	0x0800a0ff
 8009f2c:	0800a0ff 	.word	0x0800a0ff
 8009f30:	0800a0ff 	.word	0x0800a0ff
 8009f34:	08009fb9 	.word	0x08009fb9
 8009f38:	0800a0ff 	.word	0x0800a0ff
 8009f3c:	0800a0ff 	.word	0x0800a0ff
 8009f40:	0800a0ff 	.word	0x0800a0ff
 8009f44:	08009ffb 	.word	0x08009ffb
 8009f48:	0800a0ff 	.word	0x0800a0ff
 8009f4c:	0800a0ff 	.word	0x0800a0ff
 8009f50:	0800a0ff 	.word	0x0800a0ff
 8009f54:	0800a03b 	.word	0x0800a03b
 8009f58:	0800a0ff 	.word	0x0800a0ff
 8009f5c:	0800a0ff 	.word	0x0800a0ff
 8009f60:	0800a0ff 	.word	0x0800a0ff
 8009f64:	0800a07d 	.word	0x0800a07d
 8009f68:	0800a0ff 	.word	0x0800a0ff
 8009f6c:	0800a0ff 	.word	0x0800a0ff
 8009f70:	0800a0ff 	.word	0x0800a0ff
 8009f74:	0800a0bd 	.word	0x0800a0bd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	68b9      	ldr	r1, [r7, #8]
 8009f7e:	4618      	mov	r0, r3
 8009f80:	f000 f96c 	bl	800a25c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	699a      	ldr	r2, [r3, #24]
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f042 0208 	orr.w	r2, r2, #8
 8009f92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	699a      	ldr	r2, [r3, #24]
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f022 0204 	bic.w	r2, r2, #4
 8009fa2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	6999      	ldr	r1, [r3, #24]
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	691a      	ldr	r2, [r3, #16]
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	430a      	orrs	r2, r1
 8009fb4:	619a      	str	r2, [r3, #24]
      break;
 8009fb6:	e0a3      	b.n	800a100 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	68b9      	ldr	r1, [r7, #8]
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f000 f9be 	bl	800a340 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	699a      	ldr	r2, [r3, #24]
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009fd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	699a      	ldr	r2, [r3, #24]
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009fe2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	6999      	ldr	r1, [r3, #24]
 8009fea:	68bb      	ldr	r3, [r7, #8]
 8009fec:	691b      	ldr	r3, [r3, #16]
 8009fee:	021a      	lsls	r2, r3, #8
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	430a      	orrs	r2, r1
 8009ff6:	619a      	str	r2, [r3, #24]
      break;
 8009ff8:	e082      	b.n	800a100 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	68b9      	ldr	r1, [r7, #8]
 800a000:	4618      	mov	r0, r3
 800a002:	f000 fa15 	bl	800a430 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	69da      	ldr	r2, [r3, #28]
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f042 0208 	orr.w	r2, r2, #8
 800a014:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	69da      	ldr	r2, [r3, #28]
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	f022 0204 	bic.w	r2, r2, #4
 800a024:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	69d9      	ldr	r1, [r3, #28]
 800a02c:	68bb      	ldr	r3, [r7, #8]
 800a02e:	691a      	ldr	r2, [r3, #16]
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	430a      	orrs	r2, r1
 800a036:	61da      	str	r2, [r3, #28]
      break;
 800a038:	e062      	b.n	800a100 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	68b9      	ldr	r1, [r7, #8]
 800a040:	4618      	mov	r0, r3
 800a042:	f000 fa6b 	bl	800a51c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	69da      	ldr	r2, [r3, #28]
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a054:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	69da      	ldr	r2, [r3, #28]
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a064:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	69d9      	ldr	r1, [r3, #28]
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	691b      	ldr	r3, [r3, #16]
 800a070:	021a      	lsls	r2, r3, #8
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	430a      	orrs	r2, r1
 800a078:	61da      	str	r2, [r3, #28]
      break;
 800a07a:	e041      	b.n	800a100 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	68b9      	ldr	r1, [r7, #8]
 800a082:	4618      	mov	r0, r3
 800a084:	f000 faa2 	bl	800a5cc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	f042 0208 	orr.w	r2, r2, #8
 800a096:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	f022 0204 	bic.w	r2, r2, #4
 800a0a6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a0ae:	68bb      	ldr	r3, [r7, #8]
 800a0b0:	691a      	ldr	r2, [r3, #16]
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	430a      	orrs	r2, r1
 800a0b8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a0ba:	e021      	b.n	800a100 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	68b9      	ldr	r1, [r7, #8]
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	f000 fad4 	bl	800a670 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a0d6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a0e6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a0ee:	68bb      	ldr	r3, [r7, #8]
 800a0f0:	691b      	ldr	r3, [r3, #16]
 800a0f2:	021a      	lsls	r2, r3, #8
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	430a      	orrs	r2, r1
 800a0fa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a0fc:	e000      	b.n	800a100 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800a0fe:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	2201      	movs	r2, #1
 800a104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	2200      	movs	r2, #0
 800a10c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a110:	2300      	movs	r3, #0
}
 800a112:	4618      	mov	r0, r3
 800a114:	3710      	adds	r7, #16
 800a116:	46bd      	mov	sp, r7
 800a118:	bd80      	pop	{r7, pc}
 800a11a:	bf00      	nop

0800a11c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a11c:	b480      	push	{r7}
 800a11e:	b085      	sub	sp, #20
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
 800a124:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	4a40      	ldr	r2, [pc, #256]	; (800a230 <TIM_Base_SetConfig+0x114>)
 800a130:	4293      	cmp	r3, r2
 800a132:	d013      	beq.n	800a15c <TIM_Base_SetConfig+0x40>
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a13a:	d00f      	beq.n	800a15c <TIM_Base_SetConfig+0x40>
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	4a3d      	ldr	r2, [pc, #244]	; (800a234 <TIM_Base_SetConfig+0x118>)
 800a140:	4293      	cmp	r3, r2
 800a142:	d00b      	beq.n	800a15c <TIM_Base_SetConfig+0x40>
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	4a3c      	ldr	r2, [pc, #240]	; (800a238 <TIM_Base_SetConfig+0x11c>)
 800a148:	4293      	cmp	r3, r2
 800a14a:	d007      	beq.n	800a15c <TIM_Base_SetConfig+0x40>
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	4a3b      	ldr	r2, [pc, #236]	; (800a23c <TIM_Base_SetConfig+0x120>)
 800a150:	4293      	cmp	r3, r2
 800a152:	d003      	beq.n	800a15c <TIM_Base_SetConfig+0x40>
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	4a3a      	ldr	r2, [pc, #232]	; (800a240 <TIM_Base_SetConfig+0x124>)
 800a158:	4293      	cmp	r3, r2
 800a15a:	d108      	bne.n	800a16e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a162:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	685b      	ldr	r3, [r3, #4]
 800a168:	68fa      	ldr	r2, [r7, #12]
 800a16a:	4313      	orrs	r3, r2
 800a16c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	4a2f      	ldr	r2, [pc, #188]	; (800a230 <TIM_Base_SetConfig+0x114>)
 800a172:	4293      	cmp	r3, r2
 800a174:	d02b      	beq.n	800a1ce <TIM_Base_SetConfig+0xb2>
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a17c:	d027      	beq.n	800a1ce <TIM_Base_SetConfig+0xb2>
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	4a2c      	ldr	r2, [pc, #176]	; (800a234 <TIM_Base_SetConfig+0x118>)
 800a182:	4293      	cmp	r3, r2
 800a184:	d023      	beq.n	800a1ce <TIM_Base_SetConfig+0xb2>
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	4a2b      	ldr	r2, [pc, #172]	; (800a238 <TIM_Base_SetConfig+0x11c>)
 800a18a:	4293      	cmp	r3, r2
 800a18c:	d01f      	beq.n	800a1ce <TIM_Base_SetConfig+0xb2>
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	4a2a      	ldr	r2, [pc, #168]	; (800a23c <TIM_Base_SetConfig+0x120>)
 800a192:	4293      	cmp	r3, r2
 800a194:	d01b      	beq.n	800a1ce <TIM_Base_SetConfig+0xb2>
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	4a29      	ldr	r2, [pc, #164]	; (800a240 <TIM_Base_SetConfig+0x124>)
 800a19a:	4293      	cmp	r3, r2
 800a19c:	d017      	beq.n	800a1ce <TIM_Base_SetConfig+0xb2>
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	4a28      	ldr	r2, [pc, #160]	; (800a244 <TIM_Base_SetConfig+0x128>)
 800a1a2:	4293      	cmp	r3, r2
 800a1a4:	d013      	beq.n	800a1ce <TIM_Base_SetConfig+0xb2>
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	4a27      	ldr	r2, [pc, #156]	; (800a248 <TIM_Base_SetConfig+0x12c>)
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	d00f      	beq.n	800a1ce <TIM_Base_SetConfig+0xb2>
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	4a26      	ldr	r2, [pc, #152]	; (800a24c <TIM_Base_SetConfig+0x130>)
 800a1b2:	4293      	cmp	r3, r2
 800a1b4:	d00b      	beq.n	800a1ce <TIM_Base_SetConfig+0xb2>
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	4a25      	ldr	r2, [pc, #148]	; (800a250 <TIM_Base_SetConfig+0x134>)
 800a1ba:	4293      	cmp	r3, r2
 800a1bc:	d007      	beq.n	800a1ce <TIM_Base_SetConfig+0xb2>
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	4a24      	ldr	r2, [pc, #144]	; (800a254 <TIM_Base_SetConfig+0x138>)
 800a1c2:	4293      	cmp	r3, r2
 800a1c4:	d003      	beq.n	800a1ce <TIM_Base_SetConfig+0xb2>
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	4a23      	ldr	r2, [pc, #140]	; (800a258 <TIM_Base_SetConfig+0x13c>)
 800a1ca:	4293      	cmp	r3, r2
 800a1cc:	d108      	bne.n	800a1e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a1d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	68db      	ldr	r3, [r3, #12]
 800a1da:	68fa      	ldr	r2, [r7, #12]
 800a1dc:	4313      	orrs	r3, r2
 800a1de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	695b      	ldr	r3, [r3, #20]
 800a1ea:	4313      	orrs	r3, r2
 800a1ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	68fa      	ldr	r2, [r7, #12]
 800a1f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	689a      	ldr	r2, [r3, #8]
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	681a      	ldr	r2, [r3, #0]
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	4a0a      	ldr	r2, [pc, #40]	; (800a230 <TIM_Base_SetConfig+0x114>)
 800a208:	4293      	cmp	r3, r2
 800a20a:	d003      	beq.n	800a214 <TIM_Base_SetConfig+0xf8>
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	4a0c      	ldr	r2, [pc, #48]	; (800a240 <TIM_Base_SetConfig+0x124>)
 800a210:	4293      	cmp	r3, r2
 800a212:	d103      	bne.n	800a21c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	691a      	ldr	r2, [r3, #16]
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2201      	movs	r2, #1
 800a220:	615a      	str	r2, [r3, #20]
}
 800a222:	bf00      	nop
 800a224:	3714      	adds	r7, #20
 800a226:	46bd      	mov	sp, r7
 800a228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22c:	4770      	bx	lr
 800a22e:	bf00      	nop
 800a230:	40010000 	.word	0x40010000
 800a234:	40000400 	.word	0x40000400
 800a238:	40000800 	.word	0x40000800
 800a23c:	40000c00 	.word	0x40000c00
 800a240:	40010400 	.word	0x40010400
 800a244:	40014000 	.word	0x40014000
 800a248:	40014400 	.word	0x40014400
 800a24c:	40014800 	.word	0x40014800
 800a250:	40001800 	.word	0x40001800
 800a254:	40001c00 	.word	0x40001c00
 800a258:	40002000 	.word	0x40002000

0800a25c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a25c:	b480      	push	{r7}
 800a25e:	b087      	sub	sp, #28
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
 800a264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6a1b      	ldr	r3, [r3, #32]
 800a26a:	f023 0201 	bic.w	r2, r3, #1
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6a1b      	ldr	r3, [r3, #32]
 800a276:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	685b      	ldr	r3, [r3, #4]
 800a27c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	699b      	ldr	r3, [r3, #24]
 800a282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a284:	68fa      	ldr	r2, [r7, #12]
 800a286:	4b2b      	ldr	r3, [pc, #172]	; (800a334 <TIM_OC1_SetConfig+0xd8>)
 800a288:	4013      	ands	r3, r2
 800a28a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	f023 0303 	bic.w	r3, r3, #3
 800a292:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	68fa      	ldr	r2, [r7, #12]
 800a29a:	4313      	orrs	r3, r2
 800a29c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a29e:	697b      	ldr	r3, [r7, #20]
 800a2a0:	f023 0302 	bic.w	r3, r3, #2
 800a2a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	689b      	ldr	r3, [r3, #8]
 800a2aa:	697a      	ldr	r2, [r7, #20]
 800a2ac:	4313      	orrs	r3, r2
 800a2ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	4a21      	ldr	r2, [pc, #132]	; (800a338 <TIM_OC1_SetConfig+0xdc>)
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	d003      	beq.n	800a2c0 <TIM_OC1_SetConfig+0x64>
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	4a20      	ldr	r2, [pc, #128]	; (800a33c <TIM_OC1_SetConfig+0xe0>)
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	d10c      	bne.n	800a2da <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a2c0:	697b      	ldr	r3, [r7, #20]
 800a2c2:	f023 0308 	bic.w	r3, r3, #8
 800a2c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	68db      	ldr	r3, [r3, #12]
 800a2cc:	697a      	ldr	r2, [r7, #20]
 800a2ce:	4313      	orrs	r3, r2
 800a2d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	f023 0304 	bic.w	r3, r3, #4
 800a2d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	4a16      	ldr	r2, [pc, #88]	; (800a338 <TIM_OC1_SetConfig+0xdc>)
 800a2de:	4293      	cmp	r3, r2
 800a2e0:	d003      	beq.n	800a2ea <TIM_OC1_SetConfig+0x8e>
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	4a15      	ldr	r2, [pc, #84]	; (800a33c <TIM_OC1_SetConfig+0xe0>)
 800a2e6:	4293      	cmp	r3, r2
 800a2e8:	d111      	bne.n	800a30e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a2ea:	693b      	ldr	r3, [r7, #16]
 800a2ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a2f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a2f2:	693b      	ldr	r3, [r7, #16]
 800a2f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a2f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a2fa:	683b      	ldr	r3, [r7, #0]
 800a2fc:	695b      	ldr	r3, [r3, #20]
 800a2fe:	693a      	ldr	r2, [r7, #16]
 800a300:	4313      	orrs	r3, r2
 800a302:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	699b      	ldr	r3, [r3, #24]
 800a308:	693a      	ldr	r2, [r7, #16]
 800a30a:	4313      	orrs	r3, r2
 800a30c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	693a      	ldr	r2, [r7, #16]
 800a312:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	68fa      	ldr	r2, [r7, #12]
 800a318:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	685a      	ldr	r2, [r3, #4]
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	697a      	ldr	r2, [r7, #20]
 800a326:	621a      	str	r2, [r3, #32]
}
 800a328:	bf00      	nop
 800a32a:	371c      	adds	r7, #28
 800a32c:	46bd      	mov	sp, r7
 800a32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a332:	4770      	bx	lr
 800a334:	fffeff8f 	.word	0xfffeff8f
 800a338:	40010000 	.word	0x40010000
 800a33c:	40010400 	.word	0x40010400

0800a340 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a340:	b480      	push	{r7}
 800a342:	b087      	sub	sp, #28
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
 800a348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6a1b      	ldr	r3, [r3, #32]
 800a34e:	f023 0210 	bic.w	r2, r3, #16
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6a1b      	ldr	r3, [r3, #32]
 800a35a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	685b      	ldr	r3, [r3, #4]
 800a360:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	699b      	ldr	r3, [r3, #24]
 800a366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a368:	68fa      	ldr	r2, [r7, #12]
 800a36a:	4b2e      	ldr	r3, [pc, #184]	; (800a424 <TIM_OC2_SetConfig+0xe4>)
 800a36c:	4013      	ands	r3, r2
 800a36e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a376:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	021b      	lsls	r3, r3, #8
 800a37e:	68fa      	ldr	r2, [r7, #12]
 800a380:	4313      	orrs	r3, r2
 800a382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a384:	697b      	ldr	r3, [r7, #20]
 800a386:	f023 0320 	bic.w	r3, r3, #32
 800a38a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	689b      	ldr	r3, [r3, #8]
 800a390:	011b      	lsls	r3, r3, #4
 800a392:	697a      	ldr	r2, [r7, #20]
 800a394:	4313      	orrs	r3, r2
 800a396:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	4a23      	ldr	r2, [pc, #140]	; (800a428 <TIM_OC2_SetConfig+0xe8>)
 800a39c:	4293      	cmp	r3, r2
 800a39e:	d003      	beq.n	800a3a8 <TIM_OC2_SetConfig+0x68>
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	4a22      	ldr	r2, [pc, #136]	; (800a42c <TIM_OC2_SetConfig+0xec>)
 800a3a4:	4293      	cmp	r3, r2
 800a3a6:	d10d      	bne.n	800a3c4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a3a8:	697b      	ldr	r3, [r7, #20]
 800a3aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a3ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	68db      	ldr	r3, [r3, #12]
 800a3b4:	011b      	lsls	r3, r3, #4
 800a3b6:	697a      	ldr	r2, [r7, #20]
 800a3b8:	4313      	orrs	r3, r2
 800a3ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a3bc:	697b      	ldr	r3, [r7, #20]
 800a3be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a3c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	4a18      	ldr	r2, [pc, #96]	; (800a428 <TIM_OC2_SetConfig+0xe8>)
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	d003      	beq.n	800a3d4 <TIM_OC2_SetConfig+0x94>
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	4a17      	ldr	r2, [pc, #92]	; (800a42c <TIM_OC2_SetConfig+0xec>)
 800a3d0:	4293      	cmp	r3, r2
 800a3d2:	d113      	bne.n	800a3fc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a3d4:	693b      	ldr	r3, [r7, #16]
 800a3d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a3da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a3dc:	693b      	ldr	r3, [r7, #16]
 800a3de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a3e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	695b      	ldr	r3, [r3, #20]
 800a3e8:	009b      	lsls	r3, r3, #2
 800a3ea:	693a      	ldr	r2, [r7, #16]
 800a3ec:	4313      	orrs	r3, r2
 800a3ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	699b      	ldr	r3, [r3, #24]
 800a3f4:	009b      	lsls	r3, r3, #2
 800a3f6:	693a      	ldr	r2, [r7, #16]
 800a3f8:	4313      	orrs	r3, r2
 800a3fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	693a      	ldr	r2, [r7, #16]
 800a400:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	68fa      	ldr	r2, [r7, #12]
 800a406:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	685a      	ldr	r2, [r3, #4]
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	697a      	ldr	r2, [r7, #20]
 800a414:	621a      	str	r2, [r3, #32]
}
 800a416:	bf00      	nop
 800a418:	371c      	adds	r7, #28
 800a41a:	46bd      	mov	sp, r7
 800a41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a420:	4770      	bx	lr
 800a422:	bf00      	nop
 800a424:	feff8fff 	.word	0xfeff8fff
 800a428:	40010000 	.word	0x40010000
 800a42c:	40010400 	.word	0x40010400

0800a430 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a430:	b480      	push	{r7}
 800a432:	b087      	sub	sp, #28
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
 800a438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	6a1b      	ldr	r3, [r3, #32]
 800a43e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	6a1b      	ldr	r3, [r3, #32]
 800a44a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	685b      	ldr	r3, [r3, #4]
 800a450:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	69db      	ldr	r3, [r3, #28]
 800a456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a458:	68fa      	ldr	r2, [r7, #12]
 800a45a:	4b2d      	ldr	r3, [pc, #180]	; (800a510 <TIM_OC3_SetConfig+0xe0>)
 800a45c:	4013      	ands	r3, r2
 800a45e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	f023 0303 	bic.w	r3, r3, #3
 800a466:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	68fa      	ldr	r2, [r7, #12]
 800a46e:	4313      	orrs	r3, r2
 800a470:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a472:	697b      	ldr	r3, [r7, #20]
 800a474:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a478:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	689b      	ldr	r3, [r3, #8]
 800a47e:	021b      	lsls	r3, r3, #8
 800a480:	697a      	ldr	r2, [r7, #20]
 800a482:	4313      	orrs	r3, r2
 800a484:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	4a22      	ldr	r2, [pc, #136]	; (800a514 <TIM_OC3_SetConfig+0xe4>)
 800a48a:	4293      	cmp	r3, r2
 800a48c:	d003      	beq.n	800a496 <TIM_OC3_SetConfig+0x66>
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	4a21      	ldr	r2, [pc, #132]	; (800a518 <TIM_OC3_SetConfig+0xe8>)
 800a492:	4293      	cmp	r3, r2
 800a494:	d10d      	bne.n	800a4b2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a496:	697b      	ldr	r3, [r7, #20]
 800a498:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a49c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	68db      	ldr	r3, [r3, #12]
 800a4a2:	021b      	lsls	r3, r3, #8
 800a4a4:	697a      	ldr	r2, [r7, #20]
 800a4a6:	4313      	orrs	r3, r2
 800a4a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a4aa:	697b      	ldr	r3, [r7, #20]
 800a4ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a4b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	4a17      	ldr	r2, [pc, #92]	; (800a514 <TIM_OC3_SetConfig+0xe4>)
 800a4b6:	4293      	cmp	r3, r2
 800a4b8:	d003      	beq.n	800a4c2 <TIM_OC3_SetConfig+0x92>
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	4a16      	ldr	r2, [pc, #88]	; (800a518 <TIM_OC3_SetConfig+0xe8>)
 800a4be:	4293      	cmp	r3, r2
 800a4c0:	d113      	bne.n	800a4ea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a4c2:	693b      	ldr	r3, [r7, #16]
 800a4c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a4c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a4d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	695b      	ldr	r3, [r3, #20]
 800a4d6:	011b      	lsls	r3, r3, #4
 800a4d8:	693a      	ldr	r2, [r7, #16]
 800a4da:	4313      	orrs	r3, r2
 800a4dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	699b      	ldr	r3, [r3, #24]
 800a4e2:	011b      	lsls	r3, r3, #4
 800a4e4:	693a      	ldr	r2, [r7, #16]
 800a4e6:	4313      	orrs	r3, r2
 800a4e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	693a      	ldr	r2, [r7, #16]
 800a4ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	68fa      	ldr	r2, [r7, #12]
 800a4f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	685a      	ldr	r2, [r3, #4]
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	697a      	ldr	r2, [r7, #20]
 800a502:	621a      	str	r2, [r3, #32]
}
 800a504:	bf00      	nop
 800a506:	371c      	adds	r7, #28
 800a508:	46bd      	mov	sp, r7
 800a50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50e:	4770      	bx	lr
 800a510:	fffeff8f 	.word	0xfffeff8f
 800a514:	40010000 	.word	0x40010000
 800a518:	40010400 	.word	0x40010400

0800a51c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a51c:	b480      	push	{r7}
 800a51e:	b087      	sub	sp, #28
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
 800a524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	6a1b      	ldr	r3, [r3, #32]
 800a52a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	6a1b      	ldr	r3, [r3, #32]
 800a536:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	685b      	ldr	r3, [r3, #4]
 800a53c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	69db      	ldr	r3, [r3, #28]
 800a542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a544:	68fa      	ldr	r2, [r7, #12]
 800a546:	4b1e      	ldr	r3, [pc, #120]	; (800a5c0 <TIM_OC4_SetConfig+0xa4>)
 800a548:	4013      	ands	r3, r2
 800a54a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a552:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	021b      	lsls	r3, r3, #8
 800a55a:	68fa      	ldr	r2, [r7, #12]
 800a55c:	4313      	orrs	r3, r2
 800a55e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a560:	693b      	ldr	r3, [r7, #16]
 800a562:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a566:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	689b      	ldr	r3, [r3, #8]
 800a56c:	031b      	lsls	r3, r3, #12
 800a56e:	693a      	ldr	r2, [r7, #16]
 800a570:	4313      	orrs	r3, r2
 800a572:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	4a13      	ldr	r2, [pc, #76]	; (800a5c4 <TIM_OC4_SetConfig+0xa8>)
 800a578:	4293      	cmp	r3, r2
 800a57a:	d003      	beq.n	800a584 <TIM_OC4_SetConfig+0x68>
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	4a12      	ldr	r2, [pc, #72]	; (800a5c8 <TIM_OC4_SetConfig+0xac>)
 800a580:	4293      	cmp	r3, r2
 800a582:	d109      	bne.n	800a598 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a584:	697b      	ldr	r3, [r7, #20]
 800a586:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a58a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	695b      	ldr	r3, [r3, #20]
 800a590:	019b      	lsls	r3, r3, #6
 800a592:	697a      	ldr	r2, [r7, #20]
 800a594:	4313      	orrs	r3, r2
 800a596:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	697a      	ldr	r2, [r7, #20]
 800a59c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	68fa      	ldr	r2, [r7, #12]
 800a5a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	685a      	ldr	r2, [r3, #4]
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	693a      	ldr	r2, [r7, #16]
 800a5b0:	621a      	str	r2, [r3, #32]
}
 800a5b2:	bf00      	nop
 800a5b4:	371c      	adds	r7, #28
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5bc:	4770      	bx	lr
 800a5be:	bf00      	nop
 800a5c0:	feff8fff 	.word	0xfeff8fff
 800a5c4:	40010000 	.word	0x40010000
 800a5c8:	40010400 	.word	0x40010400

0800a5cc <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	b087      	sub	sp, #28
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
 800a5d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6a1b      	ldr	r3, [r3, #32]
 800a5da:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6a1b      	ldr	r3, [r3, #32]
 800a5e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	685b      	ldr	r3, [r3, #4]
 800a5ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a5f4:	68fa      	ldr	r2, [r7, #12]
 800a5f6:	4b1b      	ldr	r3, [pc, #108]	; (800a664 <TIM_OC5_SetConfig+0x98>)
 800a5f8:	4013      	ands	r3, r2
 800a5fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	68fa      	ldr	r2, [r7, #12]
 800a602:	4313      	orrs	r3, r2
 800a604:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a606:	693b      	ldr	r3, [r7, #16]
 800a608:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a60c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	689b      	ldr	r3, [r3, #8]
 800a612:	041b      	lsls	r3, r3, #16
 800a614:	693a      	ldr	r2, [r7, #16]
 800a616:	4313      	orrs	r3, r2
 800a618:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	4a12      	ldr	r2, [pc, #72]	; (800a668 <TIM_OC5_SetConfig+0x9c>)
 800a61e:	4293      	cmp	r3, r2
 800a620:	d003      	beq.n	800a62a <TIM_OC5_SetConfig+0x5e>
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	4a11      	ldr	r2, [pc, #68]	; (800a66c <TIM_OC5_SetConfig+0xa0>)
 800a626:	4293      	cmp	r3, r2
 800a628:	d109      	bne.n	800a63e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a62a:	697b      	ldr	r3, [r7, #20]
 800a62c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a630:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	695b      	ldr	r3, [r3, #20]
 800a636:	021b      	lsls	r3, r3, #8
 800a638:	697a      	ldr	r2, [r7, #20]
 800a63a:	4313      	orrs	r3, r2
 800a63c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	697a      	ldr	r2, [r7, #20]
 800a642:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	68fa      	ldr	r2, [r7, #12]
 800a648:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	685a      	ldr	r2, [r3, #4]
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	693a      	ldr	r2, [r7, #16]
 800a656:	621a      	str	r2, [r3, #32]
}
 800a658:	bf00      	nop
 800a65a:	371c      	adds	r7, #28
 800a65c:	46bd      	mov	sp, r7
 800a65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a662:	4770      	bx	lr
 800a664:	fffeff8f 	.word	0xfffeff8f
 800a668:	40010000 	.word	0x40010000
 800a66c:	40010400 	.word	0x40010400

0800a670 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a670:	b480      	push	{r7}
 800a672:	b087      	sub	sp, #28
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
 800a678:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	6a1b      	ldr	r3, [r3, #32]
 800a67e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	6a1b      	ldr	r3, [r3, #32]
 800a68a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	685b      	ldr	r3, [r3, #4]
 800a690:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a698:	68fa      	ldr	r2, [r7, #12]
 800a69a:	4b1c      	ldr	r3, [pc, #112]	; (800a70c <TIM_OC6_SetConfig+0x9c>)
 800a69c:	4013      	ands	r3, r2
 800a69e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	021b      	lsls	r3, r3, #8
 800a6a6:	68fa      	ldr	r2, [r7, #12]
 800a6a8:	4313      	orrs	r3, r2
 800a6aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a6ac:	693b      	ldr	r3, [r7, #16]
 800a6ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a6b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	689b      	ldr	r3, [r3, #8]
 800a6b8:	051b      	lsls	r3, r3, #20
 800a6ba:	693a      	ldr	r2, [r7, #16]
 800a6bc:	4313      	orrs	r3, r2
 800a6be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	4a13      	ldr	r2, [pc, #76]	; (800a710 <TIM_OC6_SetConfig+0xa0>)
 800a6c4:	4293      	cmp	r3, r2
 800a6c6:	d003      	beq.n	800a6d0 <TIM_OC6_SetConfig+0x60>
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	4a12      	ldr	r2, [pc, #72]	; (800a714 <TIM_OC6_SetConfig+0xa4>)
 800a6cc:	4293      	cmp	r3, r2
 800a6ce:	d109      	bne.n	800a6e4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a6d0:	697b      	ldr	r3, [r7, #20]
 800a6d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a6d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	695b      	ldr	r3, [r3, #20]
 800a6dc:	029b      	lsls	r3, r3, #10
 800a6de:	697a      	ldr	r2, [r7, #20]
 800a6e0:	4313      	orrs	r3, r2
 800a6e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	697a      	ldr	r2, [r7, #20]
 800a6e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	68fa      	ldr	r2, [r7, #12]
 800a6ee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	685a      	ldr	r2, [r3, #4]
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	693a      	ldr	r2, [r7, #16]
 800a6fc:	621a      	str	r2, [r3, #32]
}
 800a6fe:	bf00      	nop
 800a700:	371c      	adds	r7, #28
 800a702:	46bd      	mov	sp, r7
 800a704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a708:	4770      	bx	lr
 800a70a:	bf00      	nop
 800a70c:	feff8fff 	.word	0xfeff8fff
 800a710:	40010000 	.word	0x40010000
 800a714:	40010400 	.word	0x40010400

0800a718 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a718:	b480      	push	{r7}
 800a71a:	b087      	sub	sp, #28
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	60f8      	str	r0, [r7, #12]
 800a720:	60b9      	str	r1, [r7, #8]
 800a722:	607a      	str	r2, [r7, #4]
 800a724:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	6a1b      	ldr	r3, [r3, #32]
 800a72a:	f023 0201 	bic.w	r2, r3, #1
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	699b      	ldr	r3, [r3, #24]
 800a736:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	6a1b      	ldr	r3, [r3, #32]
 800a73c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	4a28      	ldr	r2, [pc, #160]	; (800a7e4 <TIM_TI1_SetConfig+0xcc>)
 800a742:	4293      	cmp	r3, r2
 800a744:	d01b      	beq.n	800a77e <TIM_TI1_SetConfig+0x66>
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a74c:	d017      	beq.n	800a77e <TIM_TI1_SetConfig+0x66>
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	4a25      	ldr	r2, [pc, #148]	; (800a7e8 <TIM_TI1_SetConfig+0xd0>)
 800a752:	4293      	cmp	r3, r2
 800a754:	d013      	beq.n	800a77e <TIM_TI1_SetConfig+0x66>
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	4a24      	ldr	r2, [pc, #144]	; (800a7ec <TIM_TI1_SetConfig+0xd4>)
 800a75a:	4293      	cmp	r3, r2
 800a75c:	d00f      	beq.n	800a77e <TIM_TI1_SetConfig+0x66>
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	4a23      	ldr	r2, [pc, #140]	; (800a7f0 <TIM_TI1_SetConfig+0xd8>)
 800a762:	4293      	cmp	r3, r2
 800a764:	d00b      	beq.n	800a77e <TIM_TI1_SetConfig+0x66>
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	4a22      	ldr	r2, [pc, #136]	; (800a7f4 <TIM_TI1_SetConfig+0xdc>)
 800a76a:	4293      	cmp	r3, r2
 800a76c:	d007      	beq.n	800a77e <TIM_TI1_SetConfig+0x66>
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	4a21      	ldr	r2, [pc, #132]	; (800a7f8 <TIM_TI1_SetConfig+0xe0>)
 800a772:	4293      	cmp	r3, r2
 800a774:	d003      	beq.n	800a77e <TIM_TI1_SetConfig+0x66>
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	4a20      	ldr	r2, [pc, #128]	; (800a7fc <TIM_TI1_SetConfig+0xe4>)
 800a77a:	4293      	cmp	r3, r2
 800a77c:	d101      	bne.n	800a782 <TIM_TI1_SetConfig+0x6a>
 800a77e:	2301      	movs	r3, #1
 800a780:	e000      	b.n	800a784 <TIM_TI1_SetConfig+0x6c>
 800a782:	2300      	movs	r3, #0
 800a784:	2b00      	cmp	r3, #0
 800a786:	d008      	beq.n	800a79a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a788:	697b      	ldr	r3, [r7, #20]
 800a78a:	f023 0303 	bic.w	r3, r3, #3
 800a78e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a790:	697a      	ldr	r2, [r7, #20]
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	4313      	orrs	r3, r2
 800a796:	617b      	str	r3, [r7, #20]
 800a798:	e003      	b.n	800a7a2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a79a:	697b      	ldr	r3, [r7, #20]
 800a79c:	f043 0301 	orr.w	r3, r3, #1
 800a7a0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a7a2:	697b      	ldr	r3, [r7, #20]
 800a7a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a7a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	011b      	lsls	r3, r3, #4
 800a7ae:	b2db      	uxtb	r3, r3
 800a7b0:	697a      	ldr	r2, [r7, #20]
 800a7b2:	4313      	orrs	r3, r2
 800a7b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a7b6:	693b      	ldr	r3, [r7, #16]
 800a7b8:	f023 030a 	bic.w	r3, r3, #10
 800a7bc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a7be:	68bb      	ldr	r3, [r7, #8]
 800a7c0:	f003 030a 	and.w	r3, r3, #10
 800a7c4:	693a      	ldr	r2, [r7, #16]
 800a7c6:	4313      	orrs	r3, r2
 800a7c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	697a      	ldr	r2, [r7, #20]
 800a7ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	693a      	ldr	r2, [r7, #16]
 800a7d4:	621a      	str	r2, [r3, #32]
}
 800a7d6:	bf00      	nop
 800a7d8:	371c      	adds	r7, #28
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e0:	4770      	bx	lr
 800a7e2:	bf00      	nop
 800a7e4:	40010000 	.word	0x40010000
 800a7e8:	40000400 	.word	0x40000400
 800a7ec:	40000800 	.word	0x40000800
 800a7f0:	40000c00 	.word	0x40000c00
 800a7f4:	40010400 	.word	0x40010400
 800a7f8:	40014000 	.word	0x40014000
 800a7fc:	40001800 	.word	0x40001800

0800a800 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a800:	b480      	push	{r7}
 800a802:	b087      	sub	sp, #28
 800a804:	af00      	add	r7, sp, #0
 800a806:	60f8      	str	r0, [r7, #12]
 800a808:	60b9      	str	r1, [r7, #8]
 800a80a:	607a      	str	r2, [r7, #4]
 800a80c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	6a1b      	ldr	r3, [r3, #32]
 800a812:	f023 0210 	bic.w	r2, r3, #16
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	699b      	ldr	r3, [r3, #24]
 800a81e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	6a1b      	ldr	r3, [r3, #32]
 800a824:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a826:	697b      	ldr	r3, [r7, #20]
 800a828:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a82c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	021b      	lsls	r3, r3, #8
 800a832:	697a      	ldr	r2, [r7, #20]
 800a834:	4313      	orrs	r3, r2
 800a836:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a838:	697b      	ldr	r3, [r7, #20]
 800a83a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a83e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	031b      	lsls	r3, r3, #12
 800a844:	b29b      	uxth	r3, r3
 800a846:	697a      	ldr	r2, [r7, #20]
 800a848:	4313      	orrs	r3, r2
 800a84a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a84c:	693b      	ldr	r3, [r7, #16]
 800a84e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a852:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a854:	68bb      	ldr	r3, [r7, #8]
 800a856:	011b      	lsls	r3, r3, #4
 800a858:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800a85c:	693a      	ldr	r2, [r7, #16]
 800a85e:	4313      	orrs	r3, r2
 800a860:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	697a      	ldr	r2, [r7, #20]
 800a866:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	693a      	ldr	r2, [r7, #16]
 800a86c:	621a      	str	r2, [r3, #32]
}
 800a86e:	bf00      	nop
 800a870:	371c      	adds	r7, #28
 800a872:	46bd      	mov	sp, r7
 800a874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a878:	4770      	bx	lr

0800a87a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a87a:	b480      	push	{r7}
 800a87c:	b087      	sub	sp, #28
 800a87e:	af00      	add	r7, sp, #0
 800a880:	60f8      	str	r0, [r7, #12]
 800a882:	60b9      	str	r1, [r7, #8]
 800a884:	607a      	str	r2, [r7, #4]
 800a886:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	6a1b      	ldr	r3, [r3, #32]
 800a88c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	69db      	ldr	r3, [r3, #28]
 800a898:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	6a1b      	ldr	r3, [r3, #32]
 800a89e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a8a0:	697b      	ldr	r3, [r7, #20]
 800a8a2:	f023 0303 	bic.w	r3, r3, #3
 800a8a6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800a8a8:	697a      	ldr	r2, [r7, #20]
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	4313      	orrs	r3, r2
 800a8ae:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a8b0:	697b      	ldr	r3, [r7, #20]
 800a8b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a8b6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	011b      	lsls	r3, r3, #4
 800a8bc:	b2db      	uxtb	r3, r3
 800a8be:	697a      	ldr	r2, [r7, #20]
 800a8c0:	4313      	orrs	r3, r2
 800a8c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a8c4:	693b      	ldr	r3, [r7, #16]
 800a8c6:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800a8ca:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a8cc:	68bb      	ldr	r3, [r7, #8]
 800a8ce:	021b      	lsls	r3, r3, #8
 800a8d0:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800a8d4:	693a      	ldr	r2, [r7, #16]
 800a8d6:	4313      	orrs	r3, r2
 800a8d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	697a      	ldr	r2, [r7, #20]
 800a8de:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	693a      	ldr	r2, [r7, #16]
 800a8e4:	621a      	str	r2, [r3, #32]
}
 800a8e6:	bf00      	nop
 800a8e8:	371c      	adds	r7, #28
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f0:	4770      	bx	lr

0800a8f2 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a8f2:	b480      	push	{r7}
 800a8f4:	b087      	sub	sp, #28
 800a8f6:	af00      	add	r7, sp, #0
 800a8f8:	60f8      	str	r0, [r7, #12]
 800a8fa:	60b9      	str	r1, [r7, #8]
 800a8fc:	607a      	str	r2, [r7, #4]
 800a8fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	6a1b      	ldr	r3, [r3, #32]
 800a904:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	69db      	ldr	r3, [r3, #28]
 800a910:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	6a1b      	ldr	r3, [r3, #32]
 800a916:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a918:	697b      	ldr	r3, [r7, #20]
 800a91a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a91e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	021b      	lsls	r3, r3, #8
 800a924:	697a      	ldr	r2, [r7, #20]
 800a926:	4313      	orrs	r3, r2
 800a928:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a92a:	697b      	ldr	r3, [r7, #20]
 800a92c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a930:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	031b      	lsls	r3, r3, #12
 800a936:	b29b      	uxth	r3, r3
 800a938:	697a      	ldr	r2, [r7, #20]
 800a93a:	4313      	orrs	r3, r2
 800a93c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a93e:	693b      	ldr	r3, [r7, #16]
 800a940:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800a944:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a946:	68bb      	ldr	r3, [r7, #8]
 800a948:	031b      	lsls	r3, r3, #12
 800a94a:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800a94e:	693a      	ldr	r2, [r7, #16]
 800a950:	4313      	orrs	r3, r2
 800a952:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	697a      	ldr	r2, [r7, #20]
 800a958:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	693a      	ldr	r2, [r7, #16]
 800a95e:	621a      	str	r2, [r3, #32]
}
 800a960:	bf00      	nop
 800a962:	371c      	adds	r7, #28
 800a964:	46bd      	mov	sp, r7
 800a966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96a:	4770      	bx	lr

0800a96c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a96c:	b480      	push	{r7}
 800a96e:	b087      	sub	sp, #28
 800a970:	af00      	add	r7, sp, #0
 800a972:	60f8      	str	r0, [r7, #12]
 800a974:	60b9      	str	r1, [r7, #8]
 800a976:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a978:	68bb      	ldr	r3, [r7, #8]
 800a97a:	f003 031f 	and.w	r3, r3, #31
 800a97e:	2201      	movs	r2, #1
 800a980:	fa02 f303 	lsl.w	r3, r2, r3
 800a984:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	6a1a      	ldr	r2, [r3, #32]
 800a98a:	697b      	ldr	r3, [r7, #20]
 800a98c:	43db      	mvns	r3, r3
 800a98e:	401a      	ands	r2, r3
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	6a1a      	ldr	r2, [r3, #32]
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	f003 031f 	and.w	r3, r3, #31
 800a99e:	6879      	ldr	r1, [r7, #4]
 800a9a0:	fa01 f303 	lsl.w	r3, r1, r3
 800a9a4:	431a      	orrs	r2, r3
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	621a      	str	r2, [r3, #32]
}
 800a9aa:	bf00      	nop
 800a9ac:	371c      	adds	r7, #28
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b4:	4770      	bx	lr
	...

0800a9b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a9b8:	b480      	push	{r7}
 800a9ba:	b085      	sub	sp, #20
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
 800a9c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a9c8:	2b01      	cmp	r3, #1
 800a9ca:	d101      	bne.n	800a9d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a9cc:	2302      	movs	r3, #2
 800a9ce:	e06d      	b.n	800aaac <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2201      	movs	r2, #1
 800a9d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2202      	movs	r2, #2
 800a9dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	685b      	ldr	r3, [r3, #4]
 800a9e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	689b      	ldr	r3, [r3, #8]
 800a9ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	4a30      	ldr	r2, [pc, #192]	; (800aab8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a9f6:	4293      	cmp	r3, r2
 800a9f8:	d004      	beq.n	800aa04 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	4a2f      	ldr	r2, [pc, #188]	; (800aabc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800aa00:	4293      	cmp	r3, r2
 800aa02:	d108      	bne.n	800aa16 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800aa0a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	685b      	ldr	r3, [r3, #4]
 800aa10:	68fa      	ldr	r2, [r7, #12]
 800aa12:	4313      	orrs	r3, r2
 800aa14:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa1c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	68fa      	ldr	r2, [r7, #12]
 800aa24:	4313      	orrs	r3, r2
 800aa26:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	68fa      	ldr	r2, [r7, #12]
 800aa2e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	4a20      	ldr	r2, [pc, #128]	; (800aab8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800aa36:	4293      	cmp	r3, r2
 800aa38:	d022      	beq.n	800aa80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa42:	d01d      	beq.n	800aa80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	4a1d      	ldr	r2, [pc, #116]	; (800aac0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800aa4a:	4293      	cmp	r3, r2
 800aa4c:	d018      	beq.n	800aa80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	4a1c      	ldr	r2, [pc, #112]	; (800aac4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800aa54:	4293      	cmp	r3, r2
 800aa56:	d013      	beq.n	800aa80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	4a1a      	ldr	r2, [pc, #104]	; (800aac8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800aa5e:	4293      	cmp	r3, r2
 800aa60:	d00e      	beq.n	800aa80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	4a15      	ldr	r2, [pc, #84]	; (800aabc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800aa68:	4293      	cmp	r3, r2
 800aa6a:	d009      	beq.n	800aa80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	4a16      	ldr	r2, [pc, #88]	; (800aacc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800aa72:	4293      	cmp	r3, r2
 800aa74:	d004      	beq.n	800aa80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	4a15      	ldr	r2, [pc, #84]	; (800aad0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800aa7c:	4293      	cmp	r3, r2
 800aa7e:	d10c      	bne.n	800aa9a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800aa80:	68bb      	ldr	r3, [r7, #8]
 800aa82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa86:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	689b      	ldr	r3, [r3, #8]
 800aa8c:	68ba      	ldr	r2, [r7, #8]
 800aa8e:	4313      	orrs	r3, r2
 800aa90:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	68ba      	ldr	r2, [r7, #8]
 800aa98:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2201      	movs	r2, #1
 800aa9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aaaa:	2300      	movs	r3, #0
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	3714      	adds	r7, #20
 800aab0:	46bd      	mov	sp, r7
 800aab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab6:	4770      	bx	lr
 800aab8:	40010000 	.word	0x40010000
 800aabc:	40010400 	.word	0x40010400
 800aac0:	40000400 	.word	0x40000400
 800aac4:	40000800 	.word	0x40000800
 800aac8:	40000c00 	.word	0x40000c00
 800aacc:	40014000 	.word	0x40014000
 800aad0:	40001800 	.word	0x40001800

0800aad4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800aad4:	b480      	push	{r7}
 800aad6:	b085      	sub	sp, #20
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
 800aadc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800aade:	2300      	movs	r3, #0
 800aae0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aae8:	2b01      	cmp	r3, #1
 800aaea:	d101      	bne.n	800aaf0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800aaec:	2302      	movs	r3, #2
 800aaee:	e065      	b.n	800abbc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2201      	movs	r2, #1
 800aaf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	68db      	ldr	r3, [r3, #12]
 800ab02:	4313      	orrs	r3, r2
 800ab04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	689b      	ldr	r3, [r3, #8]
 800ab10:	4313      	orrs	r3, r2
 800ab12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	685b      	ldr	r3, [r3, #4]
 800ab1e:	4313      	orrs	r3, r2
 800ab20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	4313      	orrs	r3, r2
 800ab2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	691b      	ldr	r3, [r3, #16]
 800ab3a:	4313      	orrs	r3, r2
 800ab3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	695b      	ldr	r3, [r3, #20]
 800ab48:	4313      	orrs	r3, r2
 800ab4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab56:	4313      	orrs	r3, r2
 800ab58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	699b      	ldr	r3, [r3, #24]
 800ab64:	041b      	lsls	r3, r3, #16
 800ab66:	4313      	orrs	r3, r2
 800ab68:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	4a16      	ldr	r2, [pc, #88]	; (800abc8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800ab70:	4293      	cmp	r3, r2
 800ab72:	d004      	beq.n	800ab7e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	4a14      	ldr	r2, [pc, #80]	; (800abcc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800ab7a:	4293      	cmp	r3, r2
 800ab7c:	d115      	bne.n	800abaa <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab88:	051b      	lsls	r3, r3, #20
 800ab8a:	4313      	orrs	r3, r2
 800ab8c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	69db      	ldr	r3, [r3, #28]
 800ab98:	4313      	orrs	r3, r2
 800ab9a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	6a1b      	ldr	r3, [r3, #32]
 800aba6:	4313      	orrs	r3, r2
 800aba8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	68fa      	ldr	r2, [r7, #12]
 800abb0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	2200      	movs	r2, #0
 800abb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800abba:	2300      	movs	r3, #0
}
 800abbc:	4618      	mov	r0, r3
 800abbe:	3714      	adds	r7, #20
 800abc0:	46bd      	mov	sp, r7
 800abc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc6:	4770      	bx	lr
 800abc8:	40010000 	.word	0x40010000
 800abcc:	40010400 	.word	0x40010400

0800abd0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b082      	sub	sp, #8
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d101      	bne.n	800abe2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800abde:	2301      	movs	r3, #1
 800abe0:	e040      	b.n	800ac64 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d106      	bne.n	800abf8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2200      	movs	r2, #0
 800abee:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800abf2:	6878      	ldr	r0, [r7, #4]
 800abf4:	f7f8 ff22 	bl	8003a3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2224      	movs	r2, #36	; 0x24
 800abfc:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	681a      	ldr	r2, [r3, #0]
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	f022 0201 	bic.w	r2, r2, #1
 800ac0c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ac0e:	6878      	ldr	r0, [r7, #4]
 800ac10:	f000 fb54 	bl	800b2bc <UART_SetConfig>
 800ac14:	4603      	mov	r3, r0
 800ac16:	2b01      	cmp	r3, #1
 800ac18:	d101      	bne.n	800ac1e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800ac1a:	2301      	movs	r3, #1
 800ac1c:	e022      	b.n	800ac64 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d002      	beq.n	800ac2c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	f000 fdf2 	bl	800b810 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	685a      	ldr	r2, [r3, #4]
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ac3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	689a      	ldr	r2, [r3, #8]
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ac4a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	681a      	ldr	r2, [r3, #0]
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	f042 0201 	orr.w	r2, r2, #1
 800ac5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ac5c:	6878      	ldr	r0, [r7, #4]
 800ac5e:	f000 fe79 	bl	800b954 <UART_CheckIdleState>
 800ac62:	4603      	mov	r3, r0
}
 800ac64:	4618      	mov	r0, r3
 800ac66:	3708      	adds	r7, #8
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	bd80      	pop	{r7, pc}

0800ac6c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b08a      	sub	sp, #40	; 0x28
 800ac70:	af02      	add	r7, sp, #8
 800ac72:	60f8      	str	r0, [r7, #12]
 800ac74:	60b9      	str	r1, [r7, #8]
 800ac76:	603b      	str	r3, [r7, #0]
 800ac78:	4613      	mov	r3, r2
 800ac7a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac80:	2b20      	cmp	r3, #32
 800ac82:	d17f      	bne.n	800ad84 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800ac84:	68bb      	ldr	r3, [r7, #8]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d002      	beq.n	800ac90 <HAL_UART_Transmit+0x24>
 800ac8a:	88fb      	ldrh	r3, [r7, #6]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d101      	bne.n	800ac94 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800ac90:	2301      	movs	r3, #1
 800ac92:	e078      	b.n	800ad86 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800ac9a:	2b01      	cmp	r3, #1
 800ac9c:	d101      	bne.n	800aca2 <HAL_UART_Transmit+0x36>
 800ac9e:	2302      	movs	r3, #2
 800aca0:	e071      	b.n	800ad86 <HAL_UART_Transmit+0x11a>
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	2201      	movs	r2, #1
 800aca6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	2200      	movs	r2, #0
 800acae:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	2221      	movs	r2, #33	; 0x21
 800acb4:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800acb6:	f7f9 fa0d 	bl	80040d4 <HAL_GetTick>
 800acba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	88fa      	ldrh	r2, [r7, #6]
 800acc0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	88fa      	ldrh	r2, [r7, #6]
 800acc8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	689b      	ldr	r3, [r3, #8]
 800acd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800acd4:	d108      	bne.n	800ace8 <HAL_UART_Transmit+0x7c>
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	691b      	ldr	r3, [r3, #16]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d104      	bne.n	800ace8 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800acde:	2300      	movs	r3, #0
 800ace0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800ace2:	68bb      	ldr	r3, [r7, #8]
 800ace4:	61bb      	str	r3, [r7, #24]
 800ace6:	e003      	b.n	800acf0 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 800ace8:	68bb      	ldr	r3, [r7, #8]
 800acea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800acec:	2300      	movs	r3, #0
 800acee:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	2200      	movs	r2, #0
 800acf4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800acf8:	e02c      	b.n	800ad54 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	9300      	str	r3, [sp, #0]
 800acfe:	697b      	ldr	r3, [r7, #20]
 800ad00:	2200      	movs	r2, #0
 800ad02:	2180      	movs	r1, #128	; 0x80
 800ad04:	68f8      	ldr	r0, [r7, #12]
 800ad06:	f000 fe6a 	bl	800b9de <UART_WaitOnFlagUntilTimeout>
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d001      	beq.n	800ad14 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 800ad10:	2303      	movs	r3, #3
 800ad12:	e038      	b.n	800ad86 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 800ad14:	69fb      	ldr	r3, [r7, #28]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d10b      	bne.n	800ad32 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ad1a:	69bb      	ldr	r3, [r7, #24]
 800ad1c:	881b      	ldrh	r3, [r3, #0]
 800ad1e:	461a      	mov	r2, r3
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ad28:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ad2a:	69bb      	ldr	r3, [r7, #24]
 800ad2c:	3302      	adds	r3, #2
 800ad2e:	61bb      	str	r3, [r7, #24]
 800ad30:	e007      	b.n	800ad42 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ad32:	69fb      	ldr	r3, [r7, #28]
 800ad34:	781a      	ldrb	r2, [r3, #0]
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ad3c:	69fb      	ldr	r3, [r7, #28]
 800ad3e:	3301      	adds	r3, #1
 800ad40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ad48:	b29b      	uxth	r3, r3
 800ad4a:	3b01      	subs	r3, #1
 800ad4c:	b29a      	uxth	r2, r3
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ad5a:	b29b      	uxth	r3, r3
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d1cc      	bne.n	800acfa <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	9300      	str	r3, [sp, #0]
 800ad64:	697b      	ldr	r3, [r7, #20]
 800ad66:	2200      	movs	r2, #0
 800ad68:	2140      	movs	r1, #64	; 0x40
 800ad6a:	68f8      	ldr	r0, [r7, #12]
 800ad6c:	f000 fe37 	bl	800b9de <UART_WaitOnFlagUntilTimeout>
 800ad70:	4603      	mov	r3, r0
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d001      	beq.n	800ad7a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800ad76:	2303      	movs	r3, #3
 800ad78:	e005      	b.n	800ad86 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	2220      	movs	r2, #32
 800ad7e:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800ad80:	2300      	movs	r3, #0
 800ad82:	e000      	b.n	800ad86 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 800ad84:	2302      	movs	r3, #2
  }
}
 800ad86:	4618      	mov	r0, r3
 800ad88:	3720      	adds	r7, #32
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	bd80      	pop	{r7, pc}
	...

0800ad90 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b084      	sub	sp, #16
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	60f8      	str	r0, [r7, #12]
 800ad98:	60b9      	str	r1, [r7, #8]
 800ad9a:	4613      	mov	r3, r2
 800ad9c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ada2:	2b20      	cmp	r3, #32
 800ada4:	d16c      	bne.n	800ae80 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 800ada6:	68bb      	ldr	r3, [r7, #8]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d002      	beq.n	800adb2 <HAL_UART_Receive_DMA+0x22>
 800adac:	88fb      	ldrh	r3, [r7, #6]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d101      	bne.n	800adb6 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 800adb2:	2301      	movs	r3, #1
 800adb4:	e065      	b.n	800ae82 <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800adbc:	2b01      	cmp	r3, #1
 800adbe:	d101      	bne.n	800adc4 <HAL_UART_Receive_DMA+0x34>
 800adc0:	2302      	movs	r3, #2
 800adc2:	e05e      	b.n	800ae82 <HAL_UART_Receive_DMA+0xf2>
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	2201      	movs	r2, #1
 800adc8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	68ba      	ldr	r2, [r7, #8]
 800add0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	88fa      	ldrh	r2, [r7, #6]
 800add6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	2200      	movs	r2, #0
 800adde:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	2222      	movs	r2, #34	; 0x22
 800ade4:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800adea:	2b00      	cmp	r3, #0
 800adec:	d02a      	beq.n	800ae44 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800adf2:	4a26      	ldr	r2, [pc, #152]	; (800ae8c <HAL_UART_Receive_DMA+0xfc>)
 800adf4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800adfa:	4a25      	ldr	r2, [pc, #148]	; (800ae90 <HAL_UART_Receive_DMA+0x100>)
 800adfc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae02:	4a24      	ldr	r2, [pc, #144]	; (800ae94 <HAL_UART_Receive_DMA+0x104>)
 800ae04:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	3324      	adds	r3, #36	; 0x24
 800ae18:	4619      	mov	r1, r3
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae1e:	461a      	mov	r2, r3
 800ae20:	88fb      	ldrh	r3, [r7, #6]
 800ae22:	f7fa f803 	bl	8004e2c <HAL_DMA_Start_IT>
 800ae26:	4603      	mov	r3, r0
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d00b      	beq.n	800ae44 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	2210      	movs	r2, #16
 800ae30:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	2200      	movs	r2, #0
 800ae36:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	2220      	movs	r2, #32
 800ae3e:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 800ae40:	2301      	movs	r3, #1
 800ae42:	e01e      	b.n	800ae82 <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	2200      	movs	r2, #0
 800ae48:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	681a      	ldr	r2, [r3, #0]
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ae5a:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	689a      	ldr	r2, [r3, #8]
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	f042 0201 	orr.w	r2, r2, #1
 800ae6a:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	689a      	ldr	r2, [r3, #8]
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ae7a:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	e000      	b.n	800ae82 <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 800ae80:	2302      	movs	r3, #2
  }
}
 800ae82:	4618      	mov	r0, r3
 800ae84:	3710      	adds	r7, #16
 800ae86:	46bd      	mov	sp, r7
 800ae88:	bd80      	pop	{r7, pc}
 800ae8a:	bf00      	nop
 800ae8c:	0800bb3f 	.word	0x0800bb3f
 800ae90:	0800bba3 	.word	0x0800bba3
 800ae94:	0800bbbf 	.word	0x0800bbbf

0800ae98 <HAL_UART_DMAPause>:
  * @brief Pause the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
{
 800ae98:	b480      	push	{r7}
 800ae9a:	b085      	sub	sp, #20
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aea4:	60fb      	str	r3, [r7, #12]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aeaa:	60bb      	str	r3, [r7, #8]

  __HAL_LOCK(huart);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800aeb2:	2b01      	cmp	r3, #1
 800aeb4:	d101      	bne.n	800aeba <HAL_UART_DMAPause+0x22>
 800aeb6:	2302      	movs	r3, #2
 800aeb8:	e03c      	b.n	800af34 <HAL_UART_DMAPause+0x9c>
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2201      	movs	r2, #1
 800aebe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	689b      	ldr	r3, [r3, #8]
 800aec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aecc:	2b80      	cmp	r3, #128	; 0x80
 800aece:	d10a      	bne.n	800aee6 <HAL_UART_DMAPause+0x4e>
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	2b21      	cmp	r3, #33	; 0x21
 800aed4:	d107      	bne.n	800aee6 <HAL_UART_DMAPause+0x4e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    /* Disable the UART DMA Tx request */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	689a      	ldr	r2, [r3, #8]
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800aee4:	609a      	str	r2, [r3, #8]
  }
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	689b      	ldr	r3, [r3, #8]
 800aeec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aef0:	2b40      	cmp	r3, #64	; 0x40
 800aef2:	d11a      	bne.n	800af2a <HAL_UART_DMAPause+0x92>
 800aef4:	68bb      	ldr	r3, [r7, #8]
 800aef6:	2b22      	cmp	r3, #34	; 0x22
 800aef8:	d117      	bne.n	800af2a <HAL_UART_DMAPause+0x92>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	681a      	ldr	r2, [r3, #0]
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800af08:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	689a      	ldr	r2, [r3, #8]
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	f022 0201 	bic.w	r2, r2, #1
 800af18:	609a      	str	r2, [r3, #8]

    /* Disable the UART DMA Rx request */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	689a      	ldr	r2, [r3, #8]
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800af28:	609a      	str	r2, [r3, #8]
  }

  __HAL_UNLOCK(huart);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2200      	movs	r2, #0
 800af2e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800af32:	2300      	movs	r3, #0
}
 800af34:	4618      	mov	r0, r3
 800af36:	3714      	adds	r7, #20
 800af38:	46bd      	mov	sp, r7
 800af3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3e:	4770      	bx	lr

0800af40 <HAL_UART_DMAResume>:
  * @brief Resume the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
{
 800af40:	b480      	push	{r7}
 800af42:	b083      	sub	sp, #12
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800af4e:	2b01      	cmp	r3, #1
 800af50:	d101      	bne.n	800af56 <HAL_UART_DMAResume+0x16>
 800af52:	2302      	movs	r3, #2
 800af54:	e034      	b.n	800afc0 <HAL_UART_DMAResume+0x80>
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	2201      	movs	r2, #1
 800af5a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af62:	2b21      	cmp	r3, #33	; 0x21
 800af64:	d107      	bne.n	800af76 <HAL_UART_DMAResume+0x36>
  {
    /* Enable the UART DMA Tx request */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	689a      	ldr	r2, [r3, #8]
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800af74:	609a      	str	r2, [r3, #8]
  }
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800af7a:	2b22      	cmp	r3, #34	; 0x22
 800af7c:	d11b      	bne.n	800afb6 <HAL_UART_DMAResume+0x76>
  {
    /* Clear the Overrun flag before resuming the Rx transfer */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	2208      	movs	r2, #8
 800af84:	621a      	str	r2, [r3, #32]

    /* Reenable PE and ERR (Frame error, noise error, overrun error) interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	681a      	ldr	r2, [r3, #0]
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800af94:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	689a      	ldr	r2, [r3, #8]
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	f042 0201 	orr.w	r2, r2, #1
 800afa4:	609a      	str	r2, [r3, #8]

    /* Enable the UART DMA Rx request */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	689a      	ldr	r2, [r3, #8]
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800afb4:	609a      	str	r2, [r3, #8]
  }

  __HAL_UNLOCK(huart);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	2200      	movs	r2, #0
 800afba:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800afbe:	2300      	movs	r3, #0
}
 800afc0:	4618      	mov	r0, r3
 800afc2:	370c      	adds	r7, #12
 800afc4:	46bd      	mov	sp, r7
 800afc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afca:	4770      	bx	lr

0800afcc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b088      	sub	sp, #32
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	69db      	ldr	r3, [r3, #28]
 800afda:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	689b      	ldr	r3, [r3, #8]
 800afea:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800afec:	69fa      	ldr	r2, [r7, #28]
 800afee:	f640 030f 	movw	r3, #2063	; 0x80f
 800aff2:	4013      	ands	r3, r2
 800aff4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800aff6:	693b      	ldr	r3, [r7, #16]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d113      	bne.n	800b024 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800affc:	69fb      	ldr	r3, [r7, #28]
 800affe:	f003 0320 	and.w	r3, r3, #32
 800b002:	2b00      	cmp	r3, #0
 800b004:	d00e      	beq.n	800b024 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b006:	69bb      	ldr	r3, [r7, #24]
 800b008:	f003 0320 	and.w	r3, r3, #32
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d009      	beq.n	800b024 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b014:	2b00      	cmp	r3, #0
 800b016:	f000 8114 	beq.w	800b242 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	4798      	blx	r3
      }
      return;
 800b022:	e10e      	b.n	800b242 <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b024:	693b      	ldr	r3, [r7, #16]
 800b026:	2b00      	cmp	r3, #0
 800b028:	f000 80d6 	beq.w	800b1d8 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800b02c:	697b      	ldr	r3, [r7, #20]
 800b02e:	f003 0301 	and.w	r3, r3, #1
 800b032:	2b00      	cmp	r3, #0
 800b034:	d105      	bne.n	800b042 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800b036:	69bb      	ldr	r3, [r7, #24]
 800b038:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	f000 80cb 	beq.w	800b1d8 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b042:	69fb      	ldr	r3, [r7, #28]
 800b044:	f003 0301 	and.w	r3, r3, #1
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d00e      	beq.n	800b06a <HAL_UART_IRQHandler+0x9e>
 800b04c:	69bb      	ldr	r3, [r7, #24]
 800b04e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b052:	2b00      	cmp	r3, #0
 800b054:	d009      	beq.n	800b06a <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	2201      	movs	r2, #1
 800b05c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b062:	f043 0201 	orr.w	r2, r3, #1
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b06a:	69fb      	ldr	r3, [r7, #28]
 800b06c:	f003 0302 	and.w	r3, r3, #2
 800b070:	2b00      	cmp	r3, #0
 800b072:	d00e      	beq.n	800b092 <HAL_UART_IRQHandler+0xc6>
 800b074:	697b      	ldr	r3, [r7, #20]
 800b076:	f003 0301 	and.w	r3, r3, #1
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d009      	beq.n	800b092 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	2202      	movs	r2, #2
 800b084:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b08a:	f043 0204 	orr.w	r2, r3, #4
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b092:	69fb      	ldr	r3, [r7, #28]
 800b094:	f003 0304 	and.w	r3, r3, #4
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d00e      	beq.n	800b0ba <HAL_UART_IRQHandler+0xee>
 800b09c:	697b      	ldr	r3, [r7, #20]
 800b09e:	f003 0301 	and.w	r3, r3, #1
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d009      	beq.n	800b0ba <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	2204      	movs	r2, #4
 800b0ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b0b2:	f043 0202 	orr.w	r2, r3, #2
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b0ba:	69fb      	ldr	r3, [r7, #28]
 800b0bc:	f003 0308 	and.w	r3, r3, #8
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d013      	beq.n	800b0ec <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b0c4:	69bb      	ldr	r3, [r7, #24]
 800b0c6:	f003 0320 	and.w	r3, r3, #32
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d104      	bne.n	800b0d8 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800b0ce:	697b      	ldr	r3, [r7, #20]
 800b0d0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d009      	beq.n	800b0ec <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	2208      	movs	r2, #8
 800b0de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b0e4:	f043 0208 	orr.w	r2, r3, #8
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b0ec:	69fb      	ldr	r3, [r7, #28]
 800b0ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d00f      	beq.n	800b116 <HAL_UART_IRQHandler+0x14a>
 800b0f6:	69bb      	ldr	r3, [r7, #24]
 800b0f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d00a      	beq.n	800b116 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b108:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b10e:	f043 0220 	orr.w	r2, r3, #32
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	f000 8093 	beq.w	800b246 <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800b120:	69fb      	ldr	r3, [r7, #28]
 800b122:	f003 0320 	and.w	r3, r3, #32
 800b126:	2b00      	cmp	r3, #0
 800b128:	d00c      	beq.n	800b144 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b12a:	69bb      	ldr	r3, [r7, #24]
 800b12c:	f003 0320 	and.w	r3, r3, #32
 800b130:	2b00      	cmp	r3, #0
 800b132:	d007      	beq.n	800b144 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d003      	beq.n	800b144 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b148:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	689b      	ldr	r3, [r3, #8]
 800b150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b154:	2b40      	cmp	r3, #64	; 0x40
 800b156:	d004      	beq.n	800b162 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d031      	beq.n	800b1c6 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b162:	6878      	ldr	r0, [r7, #4]
 800b164:	f000 fccb 	bl	800bafe <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	689b      	ldr	r3, [r3, #8]
 800b16e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b172:	2b40      	cmp	r3, #64	; 0x40
 800b174:	d123      	bne.n	800b1be <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	689a      	ldr	r2, [r3, #8]
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b184:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d013      	beq.n	800b1b6 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b192:	4a30      	ldr	r2, [pc, #192]	; (800b254 <HAL_UART_IRQHandler+0x288>)
 800b194:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b19a:	4618      	mov	r0, r3
 800b19c:	f7f9 fea6 	bl	8004eec <HAL_DMA_Abort_IT>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d016      	beq.n	800b1d4 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b1aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1ac:	687a      	ldr	r2, [r7, #4]
 800b1ae:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800b1b0:	4610      	mov	r0, r2
 800b1b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1b4:	e00e      	b.n	800b1d4 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	f000 f86c 	bl	800b294 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1bc:	e00a      	b.n	800b1d4 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b1be:	6878      	ldr	r0, [r7, #4]
 800b1c0:	f000 f868 	bl	800b294 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1c4:	e006      	b.n	800b1d4 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b1c6:	6878      	ldr	r0, [r7, #4]
 800b1c8:	f000 f864 	bl	800b294 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800b1d2:	e038      	b.n	800b246 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1d4:	bf00      	nop
    return;
 800b1d6:	e036      	b.n	800b246 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b1d8:	69fb      	ldr	r3, [r7, #28]
 800b1da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d00d      	beq.n	800b1fe <HAL_UART_IRQHandler+0x232>
 800b1e2:	697b      	ldr	r3, [r7, #20]
 800b1e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d008      	beq.n	800b1fe <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b1f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f000 f856 	bl	800b2a8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b1fc:	e026      	b.n	800b24c <HAL_UART_IRQHandler+0x280>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800b1fe:	69fb      	ldr	r3, [r7, #28]
 800b200:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b204:	2b00      	cmp	r3, #0
 800b206:	d00d      	beq.n	800b224 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800b208:	69bb      	ldr	r3, [r7, #24]
 800b20a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d008      	beq.n	800b224 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b216:	2b00      	cmp	r3, #0
 800b218:	d017      	beq.n	800b24a <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b21e:	6878      	ldr	r0, [r7, #4]
 800b220:	4798      	blx	r3
    }
    return;
 800b222:	e012      	b.n	800b24a <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b224:	69fb      	ldr	r3, [r7, #28]
 800b226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d00e      	beq.n	800b24c <HAL_UART_IRQHandler+0x280>
 800b22e:	69bb      	ldr	r3, [r7, #24]
 800b230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b234:	2b00      	cmp	r3, #0
 800b236:	d009      	beq.n	800b24c <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 800b238:	6878      	ldr	r0, [r7, #4]
 800b23a:	f000 fd12 	bl	800bc62 <UART_EndTransmit_IT>
    return;
 800b23e:	bf00      	nop
 800b240:	e004      	b.n	800b24c <HAL_UART_IRQHandler+0x280>
      return;
 800b242:	bf00      	nop
 800b244:	e002      	b.n	800b24c <HAL_UART_IRQHandler+0x280>
    return;
 800b246:	bf00      	nop
 800b248:	e000      	b.n	800b24c <HAL_UART_IRQHandler+0x280>
    return;
 800b24a:	bf00      	nop
  }

}
 800b24c:	3720      	adds	r7, #32
 800b24e:	46bd      	mov	sp, r7
 800b250:	bd80      	pop	{r7, pc}
 800b252:	bf00      	nop
 800b254:	0800bc37 	.word	0x0800bc37

0800b258 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b258:	b480      	push	{r7}
 800b25a:	b083      	sub	sp, #12
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b260:	bf00      	nop
 800b262:	370c      	adds	r7, #12
 800b264:	46bd      	mov	sp, r7
 800b266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26a:	4770      	bx	lr

0800b26c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b26c:	b480      	push	{r7}
 800b26e:	b083      	sub	sp, #12
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800b274:	bf00      	nop
 800b276:	370c      	adds	r7, #12
 800b278:	46bd      	mov	sp, r7
 800b27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27e:	4770      	bx	lr

0800b280 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b280:	b480      	push	{r7}
 800b282:	b083      	sub	sp, #12
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800b288:	bf00      	nop
 800b28a:	370c      	adds	r7, #12
 800b28c:	46bd      	mov	sp, r7
 800b28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b292:	4770      	bx	lr

0800b294 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b294:	b480      	push	{r7}
 800b296:	b083      	sub	sp, #12
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b29c:	bf00      	nop
 800b29e:	370c      	adds	r7, #12
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a6:	4770      	bx	lr

0800b2a8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b2a8:	b480      	push	{r7}
 800b2aa:	b083      	sub	sp, #12
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b2b0:	bf00      	nop
 800b2b2:	370c      	adds	r7, #12
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ba:	4770      	bx	lr

0800b2bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b088      	sub	sp, #32
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	689a      	ldr	r2, [r3, #8]
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	691b      	ldr	r3, [r3, #16]
 800b2d4:	431a      	orrs	r2, r3
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	695b      	ldr	r3, [r3, #20]
 800b2da:	431a      	orrs	r2, r3
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	69db      	ldr	r3, [r3, #28]
 800b2e0:	4313      	orrs	r3, r2
 800b2e2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	681a      	ldr	r2, [r3, #0]
 800b2ea:	4bb1      	ldr	r3, [pc, #708]	; (800b5b0 <UART_SetConfig+0x2f4>)
 800b2ec:	4013      	ands	r3, r2
 800b2ee:	687a      	ldr	r2, [r7, #4]
 800b2f0:	6812      	ldr	r2, [r2, #0]
 800b2f2:	6939      	ldr	r1, [r7, #16]
 800b2f4:	430b      	orrs	r3, r1
 800b2f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	685b      	ldr	r3, [r3, #4]
 800b2fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	68da      	ldr	r2, [r3, #12]
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	430a      	orrs	r2, r1
 800b30c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	699b      	ldr	r3, [r3, #24]
 800b312:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	6a1b      	ldr	r3, [r3, #32]
 800b318:	693a      	ldr	r2, [r7, #16]
 800b31a:	4313      	orrs	r3, r2
 800b31c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	689b      	ldr	r3, [r3, #8]
 800b324:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	693a      	ldr	r2, [r7, #16]
 800b32e:	430a      	orrs	r2, r1
 800b330:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	4a9f      	ldr	r2, [pc, #636]	; (800b5b4 <UART_SetConfig+0x2f8>)
 800b338:	4293      	cmp	r3, r2
 800b33a:	d121      	bne.n	800b380 <UART_SetConfig+0xc4>
 800b33c:	4b9e      	ldr	r3, [pc, #632]	; (800b5b8 <UART_SetConfig+0x2fc>)
 800b33e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b342:	f003 0303 	and.w	r3, r3, #3
 800b346:	2b03      	cmp	r3, #3
 800b348:	d816      	bhi.n	800b378 <UART_SetConfig+0xbc>
 800b34a:	a201      	add	r2, pc, #4	; (adr r2, 800b350 <UART_SetConfig+0x94>)
 800b34c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b350:	0800b361 	.word	0x0800b361
 800b354:	0800b36d 	.word	0x0800b36d
 800b358:	0800b367 	.word	0x0800b367
 800b35c:	0800b373 	.word	0x0800b373
 800b360:	2301      	movs	r3, #1
 800b362:	77fb      	strb	r3, [r7, #31]
 800b364:	e151      	b.n	800b60a <UART_SetConfig+0x34e>
 800b366:	2302      	movs	r3, #2
 800b368:	77fb      	strb	r3, [r7, #31]
 800b36a:	e14e      	b.n	800b60a <UART_SetConfig+0x34e>
 800b36c:	2304      	movs	r3, #4
 800b36e:	77fb      	strb	r3, [r7, #31]
 800b370:	e14b      	b.n	800b60a <UART_SetConfig+0x34e>
 800b372:	2308      	movs	r3, #8
 800b374:	77fb      	strb	r3, [r7, #31]
 800b376:	e148      	b.n	800b60a <UART_SetConfig+0x34e>
 800b378:	2310      	movs	r3, #16
 800b37a:	77fb      	strb	r3, [r7, #31]
 800b37c:	bf00      	nop
 800b37e:	e144      	b.n	800b60a <UART_SetConfig+0x34e>
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	4a8d      	ldr	r2, [pc, #564]	; (800b5bc <UART_SetConfig+0x300>)
 800b386:	4293      	cmp	r3, r2
 800b388:	d134      	bne.n	800b3f4 <UART_SetConfig+0x138>
 800b38a:	4b8b      	ldr	r3, [pc, #556]	; (800b5b8 <UART_SetConfig+0x2fc>)
 800b38c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b390:	f003 030c 	and.w	r3, r3, #12
 800b394:	2b0c      	cmp	r3, #12
 800b396:	d829      	bhi.n	800b3ec <UART_SetConfig+0x130>
 800b398:	a201      	add	r2, pc, #4	; (adr r2, 800b3a0 <UART_SetConfig+0xe4>)
 800b39a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b39e:	bf00      	nop
 800b3a0:	0800b3d5 	.word	0x0800b3d5
 800b3a4:	0800b3ed 	.word	0x0800b3ed
 800b3a8:	0800b3ed 	.word	0x0800b3ed
 800b3ac:	0800b3ed 	.word	0x0800b3ed
 800b3b0:	0800b3e1 	.word	0x0800b3e1
 800b3b4:	0800b3ed 	.word	0x0800b3ed
 800b3b8:	0800b3ed 	.word	0x0800b3ed
 800b3bc:	0800b3ed 	.word	0x0800b3ed
 800b3c0:	0800b3db 	.word	0x0800b3db
 800b3c4:	0800b3ed 	.word	0x0800b3ed
 800b3c8:	0800b3ed 	.word	0x0800b3ed
 800b3cc:	0800b3ed 	.word	0x0800b3ed
 800b3d0:	0800b3e7 	.word	0x0800b3e7
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	77fb      	strb	r3, [r7, #31]
 800b3d8:	e117      	b.n	800b60a <UART_SetConfig+0x34e>
 800b3da:	2302      	movs	r3, #2
 800b3dc:	77fb      	strb	r3, [r7, #31]
 800b3de:	e114      	b.n	800b60a <UART_SetConfig+0x34e>
 800b3e0:	2304      	movs	r3, #4
 800b3e2:	77fb      	strb	r3, [r7, #31]
 800b3e4:	e111      	b.n	800b60a <UART_SetConfig+0x34e>
 800b3e6:	2308      	movs	r3, #8
 800b3e8:	77fb      	strb	r3, [r7, #31]
 800b3ea:	e10e      	b.n	800b60a <UART_SetConfig+0x34e>
 800b3ec:	2310      	movs	r3, #16
 800b3ee:	77fb      	strb	r3, [r7, #31]
 800b3f0:	bf00      	nop
 800b3f2:	e10a      	b.n	800b60a <UART_SetConfig+0x34e>
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	4a71      	ldr	r2, [pc, #452]	; (800b5c0 <UART_SetConfig+0x304>)
 800b3fa:	4293      	cmp	r3, r2
 800b3fc:	d120      	bne.n	800b440 <UART_SetConfig+0x184>
 800b3fe:	4b6e      	ldr	r3, [pc, #440]	; (800b5b8 <UART_SetConfig+0x2fc>)
 800b400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b404:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b408:	2b10      	cmp	r3, #16
 800b40a:	d00f      	beq.n	800b42c <UART_SetConfig+0x170>
 800b40c:	2b10      	cmp	r3, #16
 800b40e:	d802      	bhi.n	800b416 <UART_SetConfig+0x15a>
 800b410:	2b00      	cmp	r3, #0
 800b412:	d005      	beq.n	800b420 <UART_SetConfig+0x164>
 800b414:	e010      	b.n	800b438 <UART_SetConfig+0x17c>
 800b416:	2b20      	cmp	r3, #32
 800b418:	d005      	beq.n	800b426 <UART_SetConfig+0x16a>
 800b41a:	2b30      	cmp	r3, #48	; 0x30
 800b41c:	d009      	beq.n	800b432 <UART_SetConfig+0x176>
 800b41e:	e00b      	b.n	800b438 <UART_SetConfig+0x17c>
 800b420:	2300      	movs	r3, #0
 800b422:	77fb      	strb	r3, [r7, #31]
 800b424:	e0f1      	b.n	800b60a <UART_SetConfig+0x34e>
 800b426:	2302      	movs	r3, #2
 800b428:	77fb      	strb	r3, [r7, #31]
 800b42a:	e0ee      	b.n	800b60a <UART_SetConfig+0x34e>
 800b42c:	2304      	movs	r3, #4
 800b42e:	77fb      	strb	r3, [r7, #31]
 800b430:	e0eb      	b.n	800b60a <UART_SetConfig+0x34e>
 800b432:	2308      	movs	r3, #8
 800b434:	77fb      	strb	r3, [r7, #31]
 800b436:	e0e8      	b.n	800b60a <UART_SetConfig+0x34e>
 800b438:	2310      	movs	r3, #16
 800b43a:	77fb      	strb	r3, [r7, #31]
 800b43c:	bf00      	nop
 800b43e:	e0e4      	b.n	800b60a <UART_SetConfig+0x34e>
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	4a5f      	ldr	r2, [pc, #380]	; (800b5c4 <UART_SetConfig+0x308>)
 800b446:	4293      	cmp	r3, r2
 800b448:	d120      	bne.n	800b48c <UART_SetConfig+0x1d0>
 800b44a:	4b5b      	ldr	r3, [pc, #364]	; (800b5b8 <UART_SetConfig+0x2fc>)
 800b44c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b450:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b454:	2b40      	cmp	r3, #64	; 0x40
 800b456:	d00f      	beq.n	800b478 <UART_SetConfig+0x1bc>
 800b458:	2b40      	cmp	r3, #64	; 0x40
 800b45a:	d802      	bhi.n	800b462 <UART_SetConfig+0x1a6>
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d005      	beq.n	800b46c <UART_SetConfig+0x1b0>
 800b460:	e010      	b.n	800b484 <UART_SetConfig+0x1c8>
 800b462:	2b80      	cmp	r3, #128	; 0x80
 800b464:	d005      	beq.n	800b472 <UART_SetConfig+0x1b6>
 800b466:	2bc0      	cmp	r3, #192	; 0xc0
 800b468:	d009      	beq.n	800b47e <UART_SetConfig+0x1c2>
 800b46a:	e00b      	b.n	800b484 <UART_SetConfig+0x1c8>
 800b46c:	2300      	movs	r3, #0
 800b46e:	77fb      	strb	r3, [r7, #31]
 800b470:	e0cb      	b.n	800b60a <UART_SetConfig+0x34e>
 800b472:	2302      	movs	r3, #2
 800b474:	77fb      	strb	r3, [r7, #31]
 800b476:	e0c8      	b.n	800b60a <UART_SetConfig+0x34e>
 800b478:	2304      	movs	r3, #4
 800b47a:	77fb      	strb	r3, [r7, #31]
 800b47c:	e0c5      	b.n	800b60a <UART_SetConfig+0x34e>
 800b47e:	2308      	movs	r3, #8
 800b480:	77fb      	strb	r3, [r7, #31]
 800b482:	e0c2      	b.n	800b60a <UART_SetConfig+0x34e>
 800b484:	2310      	movs	r3, #16
 800b486:	77fb      	strb	r3, [r7, #31]
 800b488:	bf00      	nop
 800b48a:	e0be      	b.n	800b60a <UART_SetConfig+0x34e>
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	4a4d      	ldr	r2, [pc, #308]	; (800b5c8 <UART_SetConfig+0x30c>)
 800b492:	4293      	cmp	r3, r2
 800b494:	d124      	bne.n	800b4e0 <UART_SetConfig+0x224>
 800b496:	4b48      	ldr	r3, [pc, #288]	; (800b5b8 <UART_SetConfig+0x2fc>)
 800b498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b49c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b4a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b4a4:	d012      	beq.n	800b4cc <UART_SetConfig+0x210>
 800b4a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b4aa:	d802      	bhi.n	800b4b2 <UART_SetConfig+0x1f6>
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d007      	beq.n	800b4c0 <UART_SetConfig+0x204>
 800b4b0:	e012      	b.n	800b4d8 <UART_SetConfig+0x21c>
 800b4b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b4b6:	d006      	beq.n	800b4c6 <UART_SetConfig+0x20a>
 800b4b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b4bc:	d009      	beq.n	800b4d2 <UART_SetConfig+0x216>
 800b4be:	e00b      	b.n	800b4d8 <UART_SetConfig+0x21c>
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	77fb      	strb	r3, [r7, #31]
 800b4c4:	e0a1      	b.n	800b60a <UART_SetConfig+0x34e>
 800b4c6:	2302      	movs	r3, #2
 800b4c8:	77fb      	strb	r3, [r7, #31]
 800b4ca:	e09e      	b.n	800b60a <UART_SetConfig+0x34e>
 800b4cc:	2304      	movs	r3, #4
 800b4ce:	77fb      	strb	r3, [r7, #31]
 800b4d0:	e09b      	b.n	800b60a <UART_SetConfig+0x34e>
 800b4d2:	2308      	movs	r3, #8
 800b4d4:	77fb      	strb	r3, [r7, #31]
 800b4d6:	e098      	b.n	800b60a <UART_SetConfig+0x34e>
 800b4d8:	2310      	movs	r3, #16
 800b4da:	77fb      	strb	r3, [r7, #31]
 800b4dc:	bf00      	nop
 800b4de:	e094      	b.n	800b60a <UART_SetConfig+0x34e>
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	4a39      	ldr	r2, [pc, #228]	; (800b5cc <UART_SetConfig+0x310>)
 800b4e6:	4293      	cmp	r3, r2
 800b4e8:	d124      	bne.n	800b534 <UART_SetConfig+0x278>
 800b4ea:	4b33      	ldr	r3, [pc, #204]	; (800b5b8 <UART_SetConfig+0x2fc>)
 800b4ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b4f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b4f8:	d012      	beq.n	800b520 <UART_SetConfig+0x264>
 800b4fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b4fe:	d802      	bhi.n	800b506 <UART_SetConfig+0x24a>
 800b500:	2b00      	cmp	r3, #0
 800b502:	d007      	beq.n	800b514 <UART_SetConfig+0x258>
 800b504:	e012      	b.n	800b52c <UART_SetConfig+0x270>
 800b506:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b50a:	d006      	beq.n	800b51a <UART_SetConfig+0x25e>
 800b50c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b510:	d009      	beq.n	800b526 <UART_SetConfig+0x26a>
 800b512:	e00b      	b.n	800b52c <UART_SetConfig+0x270>
 800b514:	2301      	movs	r3, #1
 800b516:	77fb      	strb	r3, [r7, #31]
 800b518:	e077      	b.n	800b60a <UART_SetConfig+0x34e>
 800b51a:	2302      	movs	r3, #2
 800b51c:	77fb      	strb	r3, [r7, #31]
 800b51e:	e074      	b.n	800b60a <UART_SetConfig+0x34e>
 800b520:	2304      	movs	r3, #4
 800b522:	77fb      	strb	r3, [r7, #31]
 800b524:	e071      	b.n	800b60a <UART_SetConfig+0x34e>
 800b526:	2308      	movs	r3, #8
 800b528:	77fb      	strb	r3, [r7, #31]
 800b52a:	e06e      	b.n	800b60a <UART_SetConfig+0x34e>
 800b52c:	2310      	movs	r3, #16
 800b52e:	77fb      	strb	r3, [r7, #31]
 800b530:	bf00      	nop
 800b532:	e06a      	b.n	800b60a <UART_SetConfig+0x34e>
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	4a25      	ldr	r2, [pc, #148]	; (800b5d0 <UART_SetConfig+0x314>)
 800b53a:	4293      	cmp	r3, r2
 800b53c:	d124      	bne.n	800b588 <UART_SetConfig+0x2cc>
 800b53e:	4b1e      	ldr	r3, [pc, #120]	; (800b5b8 <UART_SetConfig+0x2fc>)
 800b540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b544:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800b548:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b54c:	d012      	beq.n	800b574 <UART_SetConfig+0x2b8>
 800b54e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b552:	d802      	bhi.n	800b55a <UART_SetConfig+0x29e>
 800b554:	2b00      	cmp	r3, #0
 800b556:	d007      	beq.n	800b568 <UART_SetConfig+0x2ac>
 800b558:	e012      	b.n	800b580 <UART_SetConfig+0x2c4>
 800b55a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b55e:	d006      	beq.n	800b56e <UART_SetConfig+0x2b2>
 800b560:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b564:	d009      	beq.n	800b57a <UART_SetConfig+0x2be>
 800b566:	e00b      	b.n	800b580 <UART_SetConfig+0x2c4>
 800b568:	2300      	movs	r3, #0
 800b56a:	77fb      	strb	r3, [r7, #31]
 800b56c:	e04d      	b.n	800b60a <UART_SetConfig+0x34e>
 800b56e:	2302      	movs	r3, #2
 800b570:	77fb      	strb	r3, [r7, #31]
 800b572:	e04a      	b.n	800b60a <UART_SetConfig+0x34e>
 800b574:	2304      	movs	r3, #4
 800b576:	77fb      	strb	r3, [r7, #31]
 800b578:	e047      	b.n	800b60a <UART_SetConfig+0x34e>
 800b57a:	2308      	movs	r3, #8
 800b57c:	77fb      	strb	r3, [r7, #31]
 800b57e:	e044      	b.n	800b60a <UART_SetConfig+0x34e>
 800b580:	2310      	movs	r3, #16
 800b582:	77fb      	strb	r3, [r7, #31]
 800b584:	bf00      	nop
 800b586:	e040      	b.n	800b60a <UART_SetConfig+0x34e>
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	4a11      	ldr	r2, [pc, #68]	; (800b5d4 <UART_SetConfig+0x318>)
 800b58e:	4293      	cmp	r3, r2
 800b590:	d139      	bne.n	800b606 <UART_SetConfig+0x34a>
 800b592:	4b09      	ldr	r3, [pc, #36]	; (800b5b8 <UART_SetConfig+0x2fc>)
 800b594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b598:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b59c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b5a0:	d027      	beq.n	800b5f2 <UART_SetConfig+0x336>
 800b5a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b5a6:	d817      	bhi.n	800b5d8 <UART_SetConfig+0x31c>
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d01c      	beq.n	800b5e6 <UART_SetConfig+0x32a>
 800b5ac:	e027      	b.n	800b5fe <UART_SetConfig+0x342>
 800b5ae:	bf00      	nop
 800b5b0:	efff69f3 	.word	0xefff69f3
 800b5b4:	40011000 	.word	0x40011000
 800b5b8:	40023800 	.word	0x40023800
 800b5bc:	40004400 	.word	0x40004400
 800b5c0:	40004800 	.word	0x40004800
 800b5c4:	40004c00 	.word	0x40004c00
 800b5c8:	40005000 	.word	0x40005000
 800b5cc:	40011400 	.word	0x40011400
 800b5d0:	40007800 	.word	0x40007800
 800b5d4:	40007c00 	.word	0x40007c00
 800b5d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b5dc:	d006      	beq.n	800b5ec <UART_SetConfig+0x330>
 800b5de:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b5e2:	d009      	beq.n	800b5f8 <UART_SetConfig+0x33c>
 800b5e4:	e00b      	b.n	800b5fe <UART_SetConfig+0x342>
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	77fb      	strb	r3, [r7, #31]
 800b5ea:	e00e      	b.n	800b60a <UART_SetConfig+0x34e>
 800b5ec:	2302      	movs	r3, #2
 800b5ee:	77fb      	strb	r3, [r7, #31]
 800b5f0:	e00b      	b.n	800b60a <UART_SetConfig+0x34e>
 800b5f2:	2304      	movs	r3, #4
 800b5f4:	77fb      	strb	r3, [r7, #31]
 800b5f6:	e008      	b.n	800b60a <UART_SetConfig+0x34e>
 800b5f8:	2308      	movs	r3, #8
 800b5fa:	77fb      	strb	r3, [r7, #31]
 800b5fc:	e005      	b.n	800b60a <UART_SetConfig+0x34e>
 800b5fe:	2310      	movs	r3, #16
 800b600:	77fb      	strb	r3, [r7, #31]
 800b602:	bf00      	nop
 800b604:	e001      	b.n	800b60a <UART_SetConfig+0x34e>
 800b606:	2310      	movs	r3, #16
 800b608:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	69db      	ldr	r3, [r3, #28]
 800b60e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b612:	d17f      	bne.n	800b714 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800b614:	7ffb      	ldrb	r3, [r7, #31]
 800b616:	2b08      	cmp	r3, #8
 800b618:	d85c      	bhi.n	800b6d4 <UART_SetConfig+0x418>
 800b61a:	a201      	add	r2, pc, #4	; (adr r2, 800b620 <UART_SetConfig+0x364>)
 800b61c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b620:	0800b645 	.word	0x0800b645
 800b624:	0800b665 	.word	0x0800b665
 800b628:	0800b685 	.word	0x0800b685
 800b62c:	0800b6d5 	.word	0x0800b6d5
 800b630:	0800b69d 	.word	0x0800b69d
 800b634:	0800b6d5 	.word	0x0800b6d5
 800b638:	0800b6d5 	.word	0x0800b6d5
 800b63c:	0800b6d5 	.word	0x0800b6d5
 800b640:	0800b6bd 	.word	0x0800b6bd
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b644:	f7fc fda6 	bl	8008194 <HAL_RCC_GetPCLK1Freq>
 800b648:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	005a      	lsls	r2, r3, #1
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	685b      	ldr	r3, [r3, #4]
 800b652:	085b      	lsrs	r3, r3, #1
 800b654:	441a      	add	r2, r3
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	685b      	ldr	r3, [r3, #4]
 800b65a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b65e:	b29b      	uxth	r3, r3
 800b660:	61bb      	str	r3, [r7, #24]
        break;
 800b662:	e03a      	b.n	800b6da <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b664:	f7fc fdaa 	bl	80081bc <HAL_RCC_GetPCLK2Freq>
 800b668:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	005a      	lsls	r2, r3, #1
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	685b      	ldr	r3, [r3, #4]
 800b672:	085b      	lsrs	r3, r3, #1
 800b674:	441a      	add	r2, r3
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	685b      	ldr	r3, [r3, #4]
 800b67a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b67e:	b29b      	uxth	r3, r3
 800b680:	61bb      	str	r3, [r7, #24]
        break;
 800b682:	e02a      	b.n	800b6da <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	685b      	ldr	r3, [r3, #4]
 800b688:	085a      	lsrs	r2, r3, #1
 800b68a:	4b5f      	ldr	r3, [pc, #380]	; (800b808 <UART_SetConfig+0x54c>)
 800b68c:	4413      	add	r3, r2
 800b68e:	687a      	ldr	r2, [r7, #4]
 800b690:	6852      	ldr	r2, [r2, #4]
 800b692:	fbb3 f3f2 	udiv	r3, r3, r2
 800b696:	b29b      	uxth	r3, r3
 800b698:	61bb      	str	r3, [r7, #24]
        break;
 800b69a:	e01e      	b.n	800b6da <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b69c:	f7fc fcbc 	bl	8008018 <HAL_RCC_GetSysClockFreq>
 800b6a0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	005a      	lsls	r2, r3, #1
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	685b      	ldr	r3, [r3, #4]
 800b6aa:	085b      	lsrs	r3, r3, #1
 800b6ac:	441a      	add	r2, r3
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	685b      	ldr	r3, [r3, #4]
 800b6b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6b6:	b29b      	uxth	r3, r3
 800b6b8:	61bb      	str	r3, [r7, #24]
        break;
 800b6ba:	e00e      	b.n	800b6da <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	685b      	ldr	r3, [r3, #4]
 800b6c0:	085b      	lsrs	r3, r3, #1
 800b6c2:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	685b      	ldr	r3, [r3, #4]
 800b6ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6ce:	b29b      	uxth	r3, r3
 800b6d0:	61bb      	str	r3, [r7, #24]
        break;
 800b6d2:	e002      	b.n	800b6da <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800b6d4:	2301      	movs	r3, #1
 800b6d6:	75fb      	strb	r3, [r7, #23]
        break;
 800b6d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b6da:	69bb      	ldr	r3, [r7, #24]
 800b6dc:	2b0f      	cmp	r3, #15
 800b6de:	d916      	bls.n	800b70e <UART_SetConfig+0x452>
 800b6e0:	69bb      	ldr	r3, [r7, #24]
 800b6e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b6e6:	d212      	bcs.n	800b70e <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b6e8:	69bb      	ldr	r3, [r7, #24]
 800b6ea:	b29b      	uxth	r3, r3
 800b6ec:	f023 030f 	bic.w	r3, r3, #15
 800b6f0:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b6f2:	69bb      	ldr	r3, [r7, #24]
 800b6f4:	085b      	lsrs	r3, r3, #1
 800b6f6:	b29b      	uxth	r3, r3
 800b6f8:	f003 0307 	and.w	r3, r3, #7
 800b6fc:	b29a      	uxth	r2, r3
 800b6fe:	897b      	ldrh	r3, [r7, #10]
 800b700:	4313      	orrs	r3, r2
 800b702:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	897a      	ldrh	r2, [r7, #10]
 800b70a:	60da      	str	r2, [r3, #12]
 800b70c:	e070      	b.n	800b7f0 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800b70e:	2301      	movs	r3, #1
 800b710:	75fb      	strb	r3, [r7, #23]
 800b712:	e06d      	b.n	800b7f0 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800b714:	7ffb      	ldrb	r3, [r7, #31]
 800b716:	2b08      	cmp	r3, #8
 800b718:	d859      	bhi.n	800b7ce <UART_SetConfig+0x512>
 800b71a:	a201      	add	r2, pc, #4	; (adr r2, 800b720 <UART_SetConfig+0x464>)
 800b71c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b720:	0800b745 	.word	0x0800b745
 800b724:	0800b763 	.word	0x0800b763
 800b728:	0800b781 	.word	0x0800b781
 800b72c:	0800b7cf 	.word	0x0800b7cf
 800b730:	0800b799 	.word	0x0800b799
 800b734:	0800b7cf 	.word	0x0800b7cf
 800b738:	0800b7cf 	.word	0x0800b7cf
 800b73c:	0800b7cf 	.word	0x0800b7cf
 800b740:	0800b7b7 	.word	0x0800b7b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b744:	f7fc fd26 	bl	8008194 <HAL_RCC_GetPCLK1Freq>
 800b748:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	685b      	ldr	r3, [r3, #4]
 800b74e:	085a      	lsrs	r2, r3, #1
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	441a      	add	r2, r3
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	685b      	ldr	r3, [r3, #4]
 800b758:	fbb2 f3f3 	udiv	r3, r2, r3
 800b75c:	b29b      	uxth	r3, r3
 800b75e:	61bb      	str	r3, [r7, #24]
        break;
 800b760:	e038      	b.n	800b7d4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b762:	f7fc fd2b 	bl	80081bc <HAL_RCC_GetPCLK2Freq>
 800b766:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	685b      	ldr	r3, [r3, #4]
 800b76c:	085a      	lsrs	r2, r3, #1
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	441a      	add	r2, r3
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	685b      	ldr	r3, [r3, #4]
 800b776:	fbb2 f3f3 	udiv	r3, r2, r3
 800b77a:	b29b      	uxth	r3, r3
 800b77c:	61bb      	str	r3, [r7, #24]
        break;
 800b77e:	e029      	b.n	800b7d4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	685b      	ldr	r3, [r3, #4]
 800b784:	085a      	lsrs	r2, r3, #1
 800b786:	4b21      	ldr	r3, [pc, #132]	; (800b80c <UART_SetConfig+0x550>)
 800b788:	4413      	add	r3, r2
 800b78a:	687a      	ldr	r2, [r7, #4]
 800b78c:	6852      	ldr	r2, [r2, #4]
 800b78e:	fbb3 f3f2 	udiv	r3, r3, r2
 800b792:	b29b      	uxth	r3, r3
 800b794:	61bb      	str	r3, [r7, #24]
        break;
 800b796:	e01d      	b.n	800b7d4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b798:	f7fc fc3e 	bl	8008018 <HAL_RCC_GetSysClockFreq>
 800b79c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	685b      	ldr	r3, [r3, #4]
 800b7a2:	085a      	lsrs	r2, r3, #1
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	441a      	add	r2, r3
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	685b      	ldr	r3, [r3, #4]
 800b7ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7b0:	b29b      	uxth	r3, r3
 800b7b2:	61bb      	str	r3, [r7, #24]
        break;
 800b7b4:	e00e      	b.n	800b7d4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	685b      	ldr	r3, [r3, #4]
 800b7ba:	085b      	lsrs	r3, r3, #1
 800b7bc:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	685b      	ldr	r3, [r3, #4]
 800b7c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7c8:	b29b      	uxth	r3, r3
 800b7ca:	61bb      	str	r3, [r7, #24]
        break;
 800b7cc:	e002      	b.n	800b7d4 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800b7ce:	2301      	movs	r3, #1
 800b7d0:	75fb      	strb	r3, [r7, #23]
        break;
 800b7d2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b7d4:	69bb      	ldr	r3, [r7, #24]
 800b7d6:	2b0f      	cmp	r3, #15
 800b7d8:	d908      	bls.n	800b7ec <UART_SetConfig+0x530>
 800b7da:	69bb      	ldr	r3, [r7, #24]
 800b7dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b7e0:	d204      	bcs.n	800b7ec <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	69ba      	ldr	r2, [r7, #24]
 800b7e8:	60da      	str	r2, [r3, #12]
 800b7ea:	e001      	b.n	800b7f0 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800b7ec:	2301      	movs	r3, #1
 800b7ee:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800b7fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7fe:	4618      	mov	r0, r3
 800b800:	3720      	adds	r7, #32
 800b802:	46bd      	mov	sp, r7
 800b804:	bd80      	pop	{r7, pc}
 800b806:	bf00      	nop
 800b808:	01e84800 	.word	0x01e84800
 800b80c:	00f42400 	.word	0x00f42400

0800b810 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b810:	b480      	push	{r7}
 800b812:	b083      	sub	sp, #12
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b81c:	f003 0301 	and.w	r3, r3, #1
 800b820:	2b00      	cmp	r3, #0
 800b822:	d00a      	beq.n	800b83a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	685b      	ldr	r3, [r3, #4]
 800b82a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	430a      	orrs	r2, r1
 800b838:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b83e:	f003 0302 	and.w	r3, r3, #2
 800b842:	2b00      	cmp	r3, #0
 800b844:	d00a      	beq.n	800b85c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	685b      	ldr	r3, [r3, #4]
 800b84c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	430a      	orrs	r2, r1
 800b85a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b860:	f003 0304 	and.w	r3, r3, #4
 800b864:	2b00      	cmp	r3, #0
 800b866:	d00a      	beq.n	800b87e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	685b      	ldr	r3, [r3, #4]
 800b86e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	430a      	orrs	r2, r1
 800b87c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b882:	f003 0308 	and.w	r3, r3, #8
 800b886:	2b00      	cmp	r3, #0
 800b888:	d00a      	beq.n	800b8a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	685b      	ldr	r3, [r3, #4]
 800b890:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	430a      	orrs	r2, r1
 800b89e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8a4:	f003 0310 	and.w	r3, r3, #16
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d00a      	beq.n	800b8c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	689b      	ldr	r3, [r3, #8]
 800b8b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	430a      	orrs	r2, r1
 800b8c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8c6:	f003 0320 	and.w	r3, r3, #32
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d00a      	beq.n	800b8e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	689b      	ldr	r3, [r3, #8]
 800b8d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	430a      	orrs	r2, r1
 800b8e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d01a      	beq.n	800b926 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	685b      	ldr	r3, [r3, #4]
 800b8f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	430a      	orrs	r2, r1
 800b904:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b90a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b90e:	d10a      	bne.n	800b926 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	685b      	ldr	r3, [r3, #4]
 800b916:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	430a      	orrs	r2, r1
 800b924:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b92a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d00a      	beq.n	800b948 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	685b      	ldr	r3, [r3, #4]
 800b938:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	430a      	orrs	r2, r1
 800b946:	605a      	str	r2, [r3, #4]
  }
}
 800b948:	bf00      	nop
 800b94a:	370c      	adds	r7, #12
 800b94c:	46bd      	mov	sp, r7
 800b94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b952:	4770      	bx	lr

0800b954 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b086      	sub	sp, #24
 800b958:	af02      	add	r7, sp, #8
 800b95a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2200      	movs	r2, #0
 800b960:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800b962:	f7f8 fbb7 	bl	80040d4 <HAL_GetTick>
 800b966:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	f003 0308 	and.w	r3, r3, #8
 800b972:	2b08      	cmp	r3, #8
 800b974:	d10e      	bne.n	800b994 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b976:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b97a:	9300      	str	r3, [sp, #0]
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	2200      	movs	r2, #0
 800b980:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b984:	6878      	ldr	r0, [r7, #4]
 800b986:	f000 f82a 	bl	800b9de <UART_WaitOnFlagUntilTimeout>
 800b98a:	4603      	mov	r3, r0
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d001      	beq.n	800b994 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b990:	2303      	movs	r3, #3
 800b992:	e020      	b.n	800b9d6 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	f003 0304 	and.w	r3, r3, #4
 800b99e:	2b04      	cmp	r3, #4
 800b9a0:	d10e      	bne.n	800b9c0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b9a2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b9a6:	9300      	str	r3, [sp, #0]
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b9b0:	6878      	ldr	r0, [r7, #4]
 800b9b2:	f000 f814 	bl	800b9de <UART_WaitOnFlagUntilTimeout>
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d001      	beq.n	800b9c0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b9bc:	2303      	movs	r3, #3
 800b9be:	e00a      	b.n	800b9d6 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2220      	movs	r2, #32
 800b9c4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	2220      	movs	r2, #32
 800b9ca:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800b9d4:	2300      	movs	r3, #0
}
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	3710      	adds	r7, #16
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	bd80      	pop	{r7, pc}

0800b9de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b9de:	b580      	push	{r7, lr}
 800b9e0:	b084      	sub	sp, #16
 800b9e2:	af00      	add	r7, sp, #0
 800b9e4:	60f8      	str	r0, [r7, #12]
 800b9e6:	60b9      	str	r1, [r7, #8]
 800b9e8:	603b      	str	r3, [r7, #0]
 800b9ea:	4613      	mov	r3, r2
 800b9ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b9ee:	e05d      	b.n	800baac <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b9f0:	69bb      	ldr	r3, [r7, #24]
 800b9f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9f6:	d059      	beq.n	800baac <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b9f8:	f7f8 fb6c 	bl	80040d4 <HAL_GetTick>
 800b9fc:	4602      	mov	r2, r0
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	1ad3      	subs	r3, r2, r3
 800ba02:	69ba      	ldr	r2, [r7, #24]
 800ba04:	429a      	cmp	r2, r3
 800ba06:	d302      	bcc.n	800ba0e <UART_WaitOnFlagUntilTimeout+0x30>
 800ba08:	69bb      	ldr	r3, [r7, #24]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d11b      	bne.n	800ba46 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	681a      	ldr	r2, [r3, #0]
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ba1c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	689a      	ldr	r2, [r3, #8]
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	f022 0201 	bic.w	r2, r2, #1
 800ba2c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	2220      	movs	r2, #32
 800ba32:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	2220      	movs	r2, #32
 800ba38:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800ba42:	2303      	movs	r3, #3
 800ba44:	e042      	b.n	800bacc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	f003 0304 	and.w	r3, r3, #4
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d02b      	beq.n	800baac <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	69db      	ldr	r3, [r3, #28]
 800ba5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ba5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ba62:	d123      	bne.n	800baac <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ba6c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	681a      	ldr	r2, [r3, #0]
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ba7c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	689a      	ldr	r2, [r3, #8]
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	f022 0201 	bic.w	r2, r2, #1
 800ba8c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	2220      	movs	r2, #32
 800ba92:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	2220      	movs	r2, #32
 800ba98:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	2220      	movs	r2, #32
 800ba9e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	2200      	movs	r2, #0
 800baa4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800baa8:	2303      	movs	r3, #3
 800baaa:	e00f      	b.n	800bacc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	69da      	ldr	r2, [r3, #28]
 800bab2:	68bb      	ldr	r3, [r7, #8]
 800bab4:	4013      	ands	r3, r2
 800bab6:	68ba      	ldr	r2, [r7, #8]
 800bab8:	429a      	cmp	r2, r3
 800baba:	bf0c      	ite	eq
 800babc:	2301      	moveq	r3, #1
 800babe:	2300      	movne	r3, #0
 800bac0:	b2db      	uxtb	r3, r3
 800bac2:	461a      	mov	r2, r3
 800bac4:	79fb      	ldrb	r3, [r7, #7]
 800bac6:	429a      	cmp	r2, r3
 800bac8:	d092      	beq.n	800b9f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800baca:	2300      	movs	r3, #0
}
 800bacc:	4618      	mov	r0, r3
 800bace:	3710      	adds	r7, #16
 800bad0:	46bd      	mov	sp, r7
 800bad2:	bd80      	pop	{r7, pc}

0800bad4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bad4:	b480      	push	{r7}
 800bad6:	b083      	sub	sp, #12
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	681a      	ldr	r2, [r3, #0]
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800baea:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2220      	movs	r2, #32
 800baf0:	675a      	str	r2, [r3, #116]	; 0x74
}
 800baf2:	bf00      	nop
 800baf4:	370c      	adds	r7, #12
 800baf6:	46bd      	mov	sp, r7
 800baf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafc:	4770      	bx	lr

0800bafe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bafe:	b480      	push	{r7}
 800bb00:	b083      	sub	sp, #12
 800bb02:	af00      	add	r7, sp, #0
 800bb04:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	681a      	ldr	r2, [r3, #0]
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800bb14:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	689a      	ldr	r2, [r3, #8]
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	f022 0201 	bic.w	r2, r2, #1
 800bb24:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	2220      	movs	r2, #32
 800bb2a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	2200      	movs	r2, #0
 800bb30:	661a      	str	r2, [r3, #96]	; 0x60
}
 800bb32:	bf00      	nop
 800bb34:	370c      	adds	r7, #12
 800bb36:	46bd      	mov	sp, r7
 800bb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3c:	4770      	bx	lr

0800bb3e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800bb3e:	b580      	push	{r7, lr}
 800bb40:	b084      	sub	sp, #16
 800bb42:	af00      	add	r7, sp, #0
 800bb44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb4a:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	69db      	ldr	r3, [r3, #28]
 800bb50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb54:	d01e      	beq.n	800bb94 <UART_DMAReceiveCplt+0x56>
  {
    huart->RxXferCount = 0U;
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	2200      	movs	r2, #0
 800bb5a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	681a      	ldr	r2, [r3, #0]
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bb6c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	689a      	ldr	r2, [r3, #8]
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	f022 0201 	bic.w	r2, r2, #1
 800bb7c:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	689a      	ldr	r2, [r3, #8]
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bb8c:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	2220      	movs	r2, #32
 800bb92:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800bb94:	68f8      	ldr	r0, [r7, #12]
 800bb96:	f7ff fb69 	bl	800b26c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bb9a:	bf00      	nop
 800bb9c:	3710      	adds	r7, #16
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	bd80      	pop	{r7, pc}

0800bba2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bba2:	b580      	push	{r7, lr}
 800bba4:	b084      	sub	sp, #16
 800bba6:	af00      	add	r7, sp, #0
 800bba8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbae:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800bbb0:	68f8      	ldr	r0, [r7, #12]
 800bbb2:	f7ff fb65 	bl	800b280 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bbb6:	bf00      	nop
 800bbb8:	3710      	adds	r7, #16
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	bd80      	pop	{r7, pc}

0800bbbe <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bbbe:	b580      	push	{r7, lr}
 800bbc0:	b086      	sub	sp, #24
 800bbc2:	af00      	add	r7, sp, #0
 800bbc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbca:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800bbcc:	697b      	ldr	r3, [r7, #20]
 800bbce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bbd0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800bbd2:	697b      	ldr	r3, [r7, #20]
 800bbd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bbd6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bbd8:	697b      	ldr	r3, [r7, #20]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	689b      	ldr	r3, [r3, #8]
 800bbde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbe2:	2b80      	cmp	r3, #128	; 0x80
 800bbe4:	d109      	bne.n	800bbfa <UART_DMAError+0x3c>
 800bbe6:	693b      	ldr	r3, [r7, #16]
 800bbe8:	2b21      	cmp	r3, #33	; 0x21
 800bbea:	d106      	bne.n	800bbfa <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800bbec:	697b      	ldr	r3, [r7, #20]
 800bbee:	2200      	movs	r2, #0
 800bbf0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800bbf4:	6978      	ldr	r0, [r7, #20]
 800bbf6:	f7ff ff6d 	bl	800bad4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800bbfa:	697b      	ldr	r3, [r7, #20]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	689b      	ldr	r3, [r3, #8]
 800bc00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc04:	2b40      	cmp	r3, #64	; 0x40
 800bc06:	d109      	bne.n	800bc1c <UART_DMAError+0x5e>
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	2b22      	cmp	r3, #34	; 0x22
 800bc0c:	d106      	bne.n	800bc1c <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800bc0e:	697b      	ldr	r3, [r7, #20]
 800bc10:	2200      	movs	r2, #0
 800bc12:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800bc16:	6978      	ldr	r0, [r7, #20]
 800bc18:	f7ff ff71 	bl	800bafe <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bc1c:	697b      	ldr	r3, [r7, #20]
 800bc1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc20:	f043 0210 	orr.w	r2, r3, #16
 800bc24:	697b      	ldr	r3, [r7, #20]
 800bc26:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bc28:	6978      	ldr	r0, [r7, #20]
 800bc2a:	f7ff fb33 	bl	800b294 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc2e:	bf00      	nop
 800bc30:	3718      	adds	r7, #24
 800bc32:	46bd      	mov	sp, r7
 800bc34:	bd80      	pop	{r7, pc}

0800bc36 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bc36:	b580      	push	{r7, lr}
 800bc38:	b084      	sub	sp, #16
 800bc3a:	af00      	add	r7, sp, #0
 800bc3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc42:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	2200      	movs	r2, #0
 800bc48:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	2200      	movs	r2, #0
 800bc50:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bc54:	68f8      	ldr	r0, [r7, #12]
 800bc56:	f7ff fb1d 	bl	800b294 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc5a:	bf00      	nop
 800bc5c:	3710      	adds	r7, #16
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	bd80      	pop	{r7, pc}

0800bc62 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bc62:	b580      	push	{r7, lr}
 800bc64:	b082      	sub	sp, #8
 800bc66:	af00      	add	r7, sp, #0
 800bc68:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	681a      	ldr	r2, [r3, #0]
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bc78:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	2220      	movs	r2, #32
 800bc7e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	2200      	movs	r2, #0
 800bc84:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bc86:	6878      	ldr	r0, [r7, #4]
 800bc88:	f7ff fae6 	bl	800b258 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc8c:	bf00      	nop
 800bc8e:	3708      	adds	r7, #8
 800bc90:	46bd      	mov	sp, r7
 800bc92:	bd80      	pop	{r7, pc}

0800bc94 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800bc94:	b084      	sub	sp, #16
 800bc96:	b480      	push	{r7}
 800bc98:	b085      	sub	sp, #20
 800bc9a:	af00      	add	r7, sp, #0
 800bc9c:	6078      	str	r0, [r7, #4]
 800bc9e:	f107 001c 	add.w	r0, r7, #28
 800bca2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800bca6:	2300      	movs	r3, #0
 800bca8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800bcaa:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800bcac:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800bcae:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800bcb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800bcb2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800bcb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800bcb6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800bcb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800bcba:	431a      	orrs	r2, r3
             Init.ClockDiv
 800bcbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800bcbe:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800bcc0:	68fa      	ldr	r2, [r7, #12]
 800bcc2:	4313      	orrs	r3, r2
 800bcc4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	685a      	ldr	r2, [r3, #4]
 800bcca:	4b07      	ldr	r3, [pc, #28]	; (800bce8 <SDMMC_Init+0x54>)
 800bccc:	4013      	ands	r3, r2
 800bcce:	68fa      	ldr	r2, [r7, #12]
 800bcd0:	431a      	orrs	r2, r3
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800bcd6:	2300      	movs	r3, #0
}
 800bcd8:	4618      	mov	r0, r3
 800bcda:	3714      	adds	r7, #20
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce2:	b004      	add	sp, #16
 800bce4:	4770      	bx	lr
 800bce6:	bf00      	nop
 800bce8:	ffff8100 	.word	0xffff8100

0800bcec <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b082      	sub	sp, #8
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	2203      	movs	r2, #3
 800bcf8:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800bcfa:	2002      	movs	r0, #2
 800bcfc:	f7f8 f9f6 	bl	80040ec <HAL_Delay>
  
  return HAL_OK;
 800bd00:	2300      	movs	r3, #0
}
 800bd02:	4618      	mov	r0, r3
 800bd04:	3708      	adds	r7, #8
 800bd06:	46bd      	mov	sp, r7
 800bd08:	bd80      	pop	{r7, pc}

0800bd0a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800bd0a:	b480      	push	{r7}
 800bd0c:	b083      	sub	sp, #12
 800bd0e:	af00      	add	r7, sp, #0
 800bd10:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	f003 0303 	and.w	r3, r3, #3
}
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	370c      	adds	r7, #12
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd24:	4770      	bx	lr
	...

0800bd28 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800bd28:	b480      	push	{r7}
 800bd2a:	b085      	sub	sp, #20
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]
 800bd30:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800bd32:	2300      	movs	r3, #0
 800bd34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800bd36:	683b      	ldr	r3, [r7, #0]
 800bd38:	681a      	ldr	r2, [r3, #0]
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800bd42:	683b      	ldr	r3, [r7, #0]
 800bd44:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bd46:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800bd4c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800bd52:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bd54:	68fa      	ldr	r2, [r7, #12]
 800bd56:	4313      	orrs	r3, r2
 800bd58:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	68da      	ldr	r2, [r3, #12]
 800bd5e:	4b06      	ldr	r3, [pc, #24]	; (800bd78 <SDMMC_SendCommand+0x50>)
 800bd60:	4013      	ands	r3, r2
 800bd62:	68fa      	ldr	r2, [r7, #12]
 800bd64:	431a      	orrs	r2, r3
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800bd6a:	2300      	movs	r3, #0
}
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	3714      	adds	r7, #20
 800bd70:	46bd      	mov	sp, r7
 800bd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd76:	4770      	bx	lr
 800bd78:	fffff000 	.word	0xfffff000

0800bd7c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800bd7c:	b480      	push	{r7}
 800bd7e:	b083      	sub	sp, #12
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	691b      	ldr	r3, [r3, #16]
 800bd88:	b2db      	uxtb	r3, r3
}
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	370c      	adds	r7, #12
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd94:	4770      	bx	lr

0800bd96 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800bd96:	b480      	push	{r7}
 800bd98:	b085      	sub	sp, #20
 800bd9a:	af00      	add	r7, sp, #0
 800bd9c:	6078      	str	r0, [r7, #4]
 800bd9e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	3314      	adds	r3, #20
 800bda4:	461a      	mov	r2, r3
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	4413      	add	r3, r2
 800bdaa:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	681b      	ldr	r3, [r3, #0]
}  
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	3714      	adds	r7, #20
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdba:	4770      	bx	lr

0800bdbc <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	b08a      	sub	sp, #40	; 0x28
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	60f8      	str	r0, [r7, #12]
 800bdc4:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800bdc8:	683b      	ldr	r3, [r7, #0]
 800bdca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800bdcc:	2307      	movs	r3, #7
 800bdce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bdd0:	2340      	movs	r3, #64	; 0x40
 800bdd2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bdd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bddc:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bdde:	f107 0310 	add.w	r3, r7, #16
 800bde2:	4619      	mov	r1, r3
 800bde4:	68f8      	ldr	r0, [r7, #12]
 800bde6:	f7ff ff9f 	bl	800bd28 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800bdea:	f241 3288 	movw	r2, #5000	; 0x1388
 800bdee:	2107      	movs	r1, #7
 800bdf0:	68f8      	ldr	r0, [r7, #12]
 800bdf2:	f000 f8c9 	bl	800bf88 <SDMMC_GetCmdResp1>
 800bdf6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800bdf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	3728      	adds	r7, #40	; 0x28
 800bdfe:	46bd      	mov	sp, r7
 800be00:	bd80      	pop	{r7, pc}

0800be02 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800be02:	b580      	push	{r7, lr}
 800be04:	b088      	sub	sp, #32
 800be06:	af00      	add	r7, sp, #0
 800be08:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800be0a:	2300      	movs	r3, #0
 800be0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800be0e:	2300      	movs	r3, #0
 800be10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800be12:	2300      	movs	r3, #0
 800be14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800be16:	2300      	movs	r3, #0
 800be18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800be1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be1e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800be20:	f107 0308 	add.w	r3, r7, #8
 800be24:	4619      	mov	r1, r3
 800be26:	6878      	ldr	r0, [r7, #4]
 800be28:	f7ff ff7e 	bl	800bd28 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800be2c:	6878      	ldr	r0, [r7, #4]
 800be2e:	f000 f883 	bl	800bf38 <SDMMC_GetCmdError>
 800be32:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be34:	69fb      	ldr	r3, [r7, #28]
}
 800be36:	4618      	mov	r0, r3
 800be38:	3720      	adds	r7, #32
 800be3a:	46bd      	mov	sp, r7
 800be3c:	bd80      	pop	{r7, pc}

0800be3e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800be3e:	b580      	push	{r7, lr}
 800be40:	b088      	sub	sp, #32
 800be42:	af00      	add	r7, sp, #0
 800be44:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800be46:	2300      	movs	r3, #0
 800be48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800be4a:	2302      	movs	r3, #2
 800be4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800be4e:	23c0      	movs	r3, #192	; 0xc0
 800be50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800be52:	2300      	movs	r3, #0
 800be54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800be56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be5a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800be5c:	f107 0308 	add.w	r3, r7, #8
 800be60:	4619      	mov	r1, r3
 800be62:	6878      	ldr	r0, [r7, #4]
 800be64:	f7ff ff60 	bl	800bd28 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800be68:	6878      	ldr	r0, [r7, #4]
 800be6a:	f000 f979 	bl	800c160 <SDMMC_GetCmdResp2>
 800be6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be70:	69fb      	ldr	r3, [r7, #28]
}
 800be72:	4618      	mov	r0, r3
 800be74:	3720      	adds	r7, #32
 800be76:	46bd      	mov	sp, r7
 800be78:	bd80      	pop	{r7, pc}

0800be7a <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800be7a:	b580      	push	{r7, lr}
 800be7c:	b088      	sub	sp, #32
 800be7e:	af00      	add	r7, sp, #0
 800be80:	6078      	str	r0, [r7, #4]
 800be82:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800be84:	683b      	ldr	r3, [r7, #0]
 800be86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800be88:	2309      	movs	r3, #9
 800be8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800be8c:	23c0      	movs	r3, #192	; 0xc0
 800be8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800be90:	2300      	movs	r3, #0
 800be92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800be94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be98:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800be9a:	f107 0308 	add.w	r3, r7, #8
 800be9e:	4619      	mov	r1, r3
 800bea0:	6878      	ldr	r0, [r7, #4]
 800bea2:	f7ff ff41 	bl	800bd28 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800bea6:	6878      	ldr	r0, [r7, #4]
 800bea8:	f000 f95a 	bl	800c160 <SDMMC_GetCmdResp2>
 800beac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800beae:	69fb      	ldr	r3, [r7, #28]
}
 800beb0:	4618      	mov	r0, r3
 800beb2:	3720      	adds	r7, #32
 800beb4:	46bd      	mov	sp, r7
 800beb6:	bd80      	pop	{r7, pc}

0800beb8 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b088      	sub	sp, #32
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
 800bec0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800bec2:	2300      	movs	r3, #0
 800bec4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800bec6:	2303      	movs	r3, #3
 800bec8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800beca:	2340      	movs	r3, #64	; 0x40
 800becc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bece:	2300      	movs	r3, #0
 800bed0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bed2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bed6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bed8:	f107 0308 	add.w	r3, r7, #8
 800bedc:	4619      	mov	r1, r3
 800bede:	6878      	ldr	r0, [r7, #4]
 800bee0:	f7ff ff22 	bl	800bd28 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800bee4:	683a      	ldr	r2, [r7, #0]
 800bee6:	2103      	movs	r1, #3
 800bee8:	6878      	ldr	r0, [r7, #4]
 800beea:	f000 f9b9 	bl	800c260 <SDMMC_GetCmdResp6>
 800beee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bef0:	69fb      	ldr	r3, [r7, #28]
}
 800bef2:	4618      	mov	r0, r3
 800bef4:	3720      	adds	r7, #32
 800bef6:	46bd      	mov	sp, r7
 800bef8:	bd80      	pop	{r7, pc}

0800befa <SDMMC_CmdOpCondition>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @parame Argument: Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdOpCondition(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800befa:	b580      	push	{r7, lr}
 800befc:	b088      	sub	sp, #32
 800befe:	af00      	add	r7, sp, #0
 800bf00:	6078      	str	r0, [r7, #4]
 800bf02:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800bf04:	683b      	ldr	r3, [r7, #0]
 800bf06:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_OP_COND;
 800bf08:	2301      	movs	r3, #1
 800bf0a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf0c:	2340      	movs	r3, #64	; 0x40
 800bf0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf10:	2300      	movs	r3, #0
 800bf12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf18:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf1a:	f107 0308 	add.w	r3, r7, #8
 800bf1e:	4619      	mov	r1, r3
 800bf20:	6878      	ldr	r0, [r7, #4]
 800bf22:	f7ff ff01 	bl	800bd28 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800bf26:	6878      	ldr	r0, [r7, #4]
 800bf28:	f000 f960 	bl	800c1ec <SDMMC_GetCmdResp3>
 800bf2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf2e:	69fb      	ldr	r3, [r7, #28]
}
 800bf30:	4618      	mov	r0, r3
 800bf32:	3720      	adds	r7, #32
 800bf34:	46bd      	mov	sp, r7
 800bf36:	bd80      	pop	{r7, pc}

0800bf38 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800bf38:	b490      	push	{r4, r7}
 800bf3a:	b082      	sub	sp, #8
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bf40:	4b0f      	ldr	r3, [pc, #60]	; (800bf80 <SDMMC_GetCmdError+0x48>)
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	4a0f      	ldr	r2, [pc, #60]	; (800bf84 <SDMMC_GetCmdError+0x4c>)
 800bf46:	fba2 2303 	umull	r2, r3, r2, r3
 800bf4a:	0a5b      	lsrs	r3, r3, #9
 800bf4c:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf50:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800bf54:	4623      	mov	r3, r4
 800bf56:	1e5c      	subs	r4, r3, #1
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d102      	bne.n	800bf62 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bf5c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bf60:	e009      	b.n	800bf76 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d0f2      	beq.n	800bf54 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	22c5      	movs	r2, #197	; 0xc5
 800bf72:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800bf74:	2300      	movs	r3, #0
}
 800bf76:	4618      	mov	r0, r3
 800bf78:	3708      	adds	r7, #8
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	bc90      	pop	{r4, r7}
 800bf7e:	4770      	bx	lr
 800bf80:	20000030 	.word	0x20000030
 800bf84:	10624dd3 	.word	0x10624dd3

0800bf88 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800bf88:	b590      	push	{r4, r7, lr}
 800bf8a:	b087      	sub	sp, #28
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	60f8      	str	r0, [r7, #12]
 800bf90:	460b      	mov	r3, r1
 800bf92:	607a      	str	r2, [r7, #4]
 800bf94:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800bf96:	4b6f      	ldr	r3, [pc, #444]	; (800c154 <SDMMC_GetCmdResp1+0x1cc>)
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	4a6f      	ldr	r2, [pc, #444]	; (800c158 <SDMMC_GetCmdResp1+0x1d0>)
 800bf9c:	fba2 2303 	umull	r2, r3, r2, r3
 800bfa0:	0a5b      	lsrs	r3, r3, #9
 800bfa2:	687a      	ldr	r2, [r7, #4]
 800bfa4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800bfa8:	4623      	mov	r3, r4
 800bfaa:	1e5c      	subs	r4, r3, #1
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d102      	bne.n	800bfb6 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bfb0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bfb4:	e0c9      	b.n	800c14a <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfba:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bfbc:	697b      	ldr	r3, [r7, #20]
 800bfbe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d0f0      	beq.n	800bfa8 <SDMMC_GetCmdResp1+0x20>
 800bfc6:	697b      	ldr	r3, [r7, #20]
 800bfc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d1eb      	bne.n	800bfa8 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfd4:	f003 0304 	and.w	r3, r3, #4
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d004      	beq.n	800bfe6 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	2204      	movs	r2, #4
 800bfe0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bfe2:	2304      	movs	r3, #4
 800bfe4:	e0b1      	b.n	800c14a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfea:	f003 0301 	and.w	r3, r3, #1
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d004      	beq.n	800bffc <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	2201      	movs	r2, #1
 800bff6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bff8:	2301      	movs	r3, #1
 800bffa:	e0a6      	b.n	800c14a <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	22c5      	movs	r2, #197	; 0xc5
 800c000:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c002:	68f8      	ldr	r0, [r7, #12]
 800c004:	f7ff feba 	bl	800bd7c <SDMMC_GetCommandResponse>
 800c008:	4603      	mov	r3, r0
 800c00a:	461a      	mov	r2, r3
 800c00c:	7afb      	ldrb	r3, [r7, #11]
 800c00e:	4293      	cmp	r3, r2
 800c010:	d001      	beq.n	800c016 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c012:	2301      	movs	r3, #1
 800c014:	e099      	b.n	800c14a <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c016:	2100      	movs	r1, #0
 800c018:	68f8      	ldr	r0, [r7, #12]
 800c01a:	f7ff febc 	bl	800bd96 <SDMMC_GetResponse>
 800c01e:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c020:	693a      	ldr	r2, [r7, #16]
 800c022:	4b4e      	ldr	r3, [pc, #312]	; (800c15c <SDMMC_GetCmdResp1+0x1d4>)
 800c024:	4013      	ands	r3, r2
 800c026:	2b00      	cmp	r3, #0
 800c028:	d101      	bne.n	800c02e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800c02a:	2300      	movs	r3, #0
 800c02c:	e08d      	b.n	800c14a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c02e:	693b      	ldr	r3, [r7, #16]
 800c030:	2b00      	cmp	r3, #0
 800c032:	da02      	bge.n	800c03a <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c034:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c038:	e087      	b.n	800c14a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c03a:	693b      	ldr	r3, [r7, #16]
 800c03c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c040:	2b00      	cmp	r3, #0
 800c042:	d001      	beq.n	800c048 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c044:	2340      	movs	r3, #64	; 0x40
 800c046:	e080      	b.n	800c14a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c048:	693b      	ldr	r3, [r7, #16]
 800c04a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d001      	beq.n	800c056 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c052:	2380      	movs	r3, #128	; 0x80
 800c054:	e079      	b.n	800c14a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c056:	693b      	ldr	r3, [r7, #16]
 800c058:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d002      	beq.n	800c066 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c060:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c064:	e071      	b.n	800c14a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c066:	693b      	ldr	r3, [r7, #16]
 800c068:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d002      	beq.n	800c076 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c070:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c074:	e069      	b.n	800c14a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c076:	693b      	ldr	r3, [r7, #16]
 800c078:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d002      	beq.n	800c086 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c080:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c084:	e061      	b.n	800c14a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c086:	693b      	ldr	r3, [r7, #16]
 800c088:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d002      	beq.n	800c096 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c090:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c094:	e059      	b.n	800c14a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c096:	693b      	ldr	r3, [r7, #16]
 800c098:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d002      	beq.n	800c0a6 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c0a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c0a4:	e051      	b.n	800c14a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c0a6:	693b      	ldr	r3, [r7, #16]
 800c0a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d002      	beq.n	800c0b6 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c0b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c0b4:	e049      	b.n	800c14a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c0b6:	693b      	ldr	r3, [r7, #16]
 800c0b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d002      	beq.n	800c0c6 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c0c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c0c4:	e041      	b.n	800c14a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c0c6:	693b      	ldr	r3, [r7, #16]
 800c0c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d002      	beq.n	800c0d6 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800c0d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c0d4:	e039      	b.n	800c14a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c0d6:	693b      	ldr	r3, [r7, #16]
 800c0d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d002      	beq.n	800c0e6 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c0e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c0e4:	e031      	b.n	800c14a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c0e6:	693b      	ldr	r3, [r7, #16]
 800c0e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d002      	beq.n	800c0f6 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c0f0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c0f4:	e029      	b.n	800c14a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c0f6:	693b      	ldr	r3, [r7, #16]
 800c0f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d002      	beq.n	800c106 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c100:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c104:	e021      	b.n	800c14a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c106:	693b      	ldr	r3, [r7, #16]
 800c108:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d002      	beq.n	800c116 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c110:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c114:	e019      	b.n	800c14a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c116:	693b      	ldr	r3, [r7, #16]
 800c118:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d002      	beq.n	800c126 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c120:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c124:	e011      	b.n	800c14a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c126:	693b      	ldr	r3, [r7, #16]
 800c128:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d002      	beq.n	800c136 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c130:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c134:	e009      	b.n	800c14a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c136:	693b      	ldr	r3, [r7, #16]
 800c138:	f003 0308 	and.w	r3, r3, #8
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d002      	beq.n	800c146 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c140:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c144:	e001      	b.n	800c14a <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c146:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c14a:	4618      	mov	r0, r3
 800c14c:	371c      	adds	r7, #28
 800c14e:	46bd      	mov	sp, r7
 800c150:	bd90      	pop	{r4, r7, pc}
 800c152:	bf00      	nop
 800c154:	20000030 	.word	0x20000030
 800c158:	10624dd3 	.word	0x10624dd3
 800c15c:	fdffe008 	.word	0xfdffe008

0800c160 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800c160:	b490      	push	{r4, r7}
 800c162:	b084      	sub	sp, #16
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c168:	4b1e      	ldr	r3, [pc, #120]	; (800c1e4 <SDMMC_GetCmdResp2+0x84>)
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	4a1e      	ldr	r2, [pc, #120]	; (800c1e8 <SDMMC_GetCmdResp2+0x88>)
 800c16e:	fba2 2303 	umull	r2, r3, r2, r3
 800c172:	0a5b      	lsrs	r3, r3, #9
 800c174:	f241 3288 	movw	r2, #5000	; 0x1388
 800c178:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c17c:	4623      	mov	r3, r4
 800c17e:	1e5c      	subs	r4, r3, #1
 800c180:	2b00      	cmp	r3, #0
 800c182:	d102      	bne.n	800c18a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c184:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c188:	e026      	b.n	800c1d8 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c18e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c196:	2b00      	cmp	r3, #0
 800c198:	d0f0      	beq.n	800c17c <SDMMC_GetCmdResp2+0x1c>
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d1eb      	bne.n	800c17c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1a8:	f003 0304 	and.w	r3, r3, #4
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d004      	beq.n	800c1ba <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	2204      	movs	r2, #4
 800c1b4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c1b6:	2304      	movs	r3, #4
 800c1b8:	e00e      	b.n	800c1d8 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1be:	f003 0301 	and.w	r3, r3, #1
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d004      	beq.n	800c1d0 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	2201      	movs	r2, #1
 800c1ca:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c1cc:	2301      	movs	r3, #1
 800c1ce:	e003      	b.n	800c1d8 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	22c5      	movs	r2, #197	; 0xc5
 800c1d4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c1d6:	2300      	movs	r3, #0
}
 800c1d8:	4618      	mov	r0, r3
 800c1da:	3710      	adds	r7, #16
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	bc90      	pop	{r4, r7}
 800c1e0:	4770      	bx	lr
 800c1e2:	bf00      	nop
 800c1e4:	20000030 	.word	0x20000030
 800c1e8:	10624dd3 	.word	0x10624dd3

0800c1ec <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800c1ec:	b490      	push	{r4, r7}
 800c1ee:	b084      	sub	sp, #16
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c1f4:	4b18      	ldr	r3, [pc, #96]	; (800c258 <SDMMC_GetCmdResp3+0x6c>)
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	4a18      	ldr	r2, [pc, #96]	; (800c25c <SDMMC_GetCmdResp3+0x70>)
 800c1fa:	fba2 2303 	umull	r2, r3, r2, r3
 800c1fe:	0a5b      	lsrs	r3, r3, #9
 800c200:	f241 3288 	movw	r2, #5000	; 0x1388
 800c204:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c208:	4623      	mov	r3, r4
 800c20a:	1e5c      	subs	r4, r3, #1
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d102      	bne.n	800c216 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c210:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c214:	e01b      	b.n	800c24e <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c21a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c222:	2b00      	cmp	r3, #0
 800c224:	d0f0      	beq.n	800c208 <SDMMC_GetCmdResp3+0x1c>
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d1eb      	bne.n	800c208 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c234:	f003 0304 	and.w	r3, r3, #4
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d004      	beq.n	800c246 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	2204      	movs	r2, #4
 800c240:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c242:	2304      	movs	r3, #4
 800c244:	e003      	b.n	800c24e <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	22c5      	movs	r2, #197	; 0xc5
 800c24a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c24c:	2300      	movs	r3, #0
}
 800c24e:	4618      	mov	r0, r3
 800c250:	3710      	adds	r7, #16
 800c252:	46bd      	mov	sp, r7
 800c254:	bc90      	pop	{r4, r7}
 800c256:	4770      	bx	lr
 800c258:	20000030 	.word	0x20000030
 800c25c:	10624dd3 	.word	0x10624dd3

0800c260 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c260:	b590      	push	{r4, r7, lr}
 800c262:	b087      	sub	sp, #28
 800c264:	af00      	add	r7, sp, #0
 800c266:	60f8      	str	r0, [r7, #12]
 800c268:	460b      	mov	r3, r1
 800c26a:	607a      	str	r2, [r7, #4]
 800c26c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c26e:	4b34      	ldr	r3, [pc, #208]	; (800c340 <SDMMC_GetCmdResp6+0xe0>)
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	4a34      	ldr	r2, [pc, #208]	; (800c344 <SDMMC_GetCmdResp6+0xe4>)
 800c274:	fba2 2303 	umull	r2, r3, r2, r3
 800c278:	0a5b      	lsrs	r3, r3, #9
 800c27a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c27e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c282:	4623      	mov	r3, r4
 800c284:	1e5c      	subs	r4, r3, #1
 800c286:	2b00      	cmp	r3, #0
 800c288:	d102      	bne.n	800c290 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c28a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c28e:	e052      	b.n	800c336 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c294:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c296:	697b      	ldr	r3, [r7, #20]
 800c298:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d0f0      	beq.n	800c282 <SDMMC_GetCmdResp6+0x22>
 800c2a0:	697b      	ldr	r3, [r7, #20]
 800c2a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d1eb      	bne.n	800c282 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2ae:	f003 0304 	and.w	r3, r3, #4
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d004      	beq.n	800c2c0 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	2204      	movs	r2, #4
 800c2ba:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c2bc:	2304      	movs	r3, #4
 800c2be:	e03a      	b.n	800c336 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2c4:	f003 0301 	and.w	r3, r3, #1
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d004      	beq.n	800c2d6 <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	2201      	movs	r2, #1
 800c2d0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c2d2:	2301      	movs	r3, #1
 800c2d4:	e02f      	b.n	800c336 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c2d6:	68f8      	ldr	r0, [r7, #12]
 800c2d8:	f7ff fd50 	bl	800bd7c <SDMMC_GetCommandResponse>
 800c2dc:	4603      	mov	r3, r0
 800c2de:	461a      	mov	r2, r3
 800c2e0:	7afb      	ldrb	r3, [r7, #11]
 800c2e2:	4293      	cmp	r3, r2
 800c2e4:	d001      	beq.n	800c2ea <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c2e6:	2301      	movs	r3, #1
 800c2e8:	e025      	b.n	800c336 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	22c5      	movs	r2, #197	; 0xc5
 800c2ee:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c2f0:	2100      	movs	r1, #0
 800c2f2:	68f8      	ldr	r0, [r7, #12]
 800c2f4:	f7ff fd4f 	bl	800bd96 <SDMMC_GetResponse>
 800c2f8:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800c2fa:	693b      	ldr	r3, [r7, #16]
 800c2fc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c300:	2b00      	cmp	r3, #0
 800c302:	d106      	bne.n	800c312 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800c304:	693b      	ldr	r3, [r7, #16]
 800c306:	0c1b      	lsrs	r3, r3, #16
 800c308:	b29a      	uxth	r2, r3
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800c30e:	2300      	movs	r3, #0
 800c310:	e011      	b.n	800c336 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c312:	693b      	ldr	r3, [r7, #16]
 800c314:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d002      	beq.n	800c322 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c31c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c320:	e009      	b.n	800c336 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c322:	693b      	ldr	r3, [r7, #16]
 800c324:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d002      	beq.n	800c332 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c32c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c330:	e001      	b.n	800c336 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c332:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c336:	4618      	mov	r0, r3
 800c338:	371c      	adds	r7, #28
 800c33a:	46bd      	mov	sp, r7
 800c33c:	bd90      	pop	{r4, r7, pc}
 800c33e:	bf00      	nop
 800c340:	20000030 	.word	0x20000030
 800c344:	10624dd3 	.word	0x10624dd3

0800c348 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b084      	sub	sp, #16
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	4603      	mov	r3, r0
 800c350:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c352:	79fb      	ldrb	r3, [r7, #7]
 800c354:	4a08      	ldr	r2, [pc, #32]	; (800c378 <disk_status+0x30>)
 800c356:	009b      	lsls	r3, r3, #2
 800c358:	4413      	add	r3, r2
 800c35a:	685b      	ldr	r3, [r3, #4]
 800c35c:	685b      	ldr	r3, [r3, #4]
 800c35e:	79fa      	ldrb	r2, [r7, #7]
 800c360:	4905      	ldr	r1, [pc, #20]	; (800c378 <disk_status+0x30>)
 800c362:	440a      	add	r2, r1
 800c364:	7a12      	ldrb	r2, [r2, #8]
 800c366:	4610      	mov	r0, r2
 800c368:	4798      	blx	r3
 800c36a:	4603      	mov	r3, r0
 800c36c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800c36e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c370:	4618      	mov	r0, r3
 800c372:	3710      	adds	r7, #16
 800c374:	46bd      	mov	sp, r7
 800c376:	bd80      	pop	{r7, pc}
 800c378:	2000131c 	.word	0x2000131c

0800c37c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b084      	sub	sp, #16
 800c380:	af00      	add	r7, sp, #0
 800c382:	4603      	mov	r3, r0
 800c384:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800c386:	2300      	movs	r3, #0
 800c388:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800c38a:	79fb      	ldrb	r3, [r7, #7]
 800c38c:	4a0d      	ldr	r2, [pc, #52]	; (800c3c4 <disk_initialize+0x48>)
 800c38e:	5cd3      	ldrb	r3, [r2, r3]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d111      	bne.n	800c3b8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800c394:	79fb      	ldrb	r3, [r7, #7]
 800c396:	4a0b      	ldr	r2, [pc, #44]	; (800c3c4 <disk_initialize+0x48>)
 800c398:	2101      	movs	r1, #1
 800c39a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c39c:	79fb      	ldrb	r3, [r7, #7]
 800c39e:	4a09      	ldr	r2, [pc, #36]	; (800c3c4 <disk_initialize+0x48>)
 800c3a0:	009b      	lsls	r3, r3, #2
 800c3a2:	4413      	add	r3, r2
 800c3a4:	685b      	ldr	r3, [r3, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	79fa      	ldrb	r2, [r7, #7]
 800c3aa:	4906      	ldr	r1, [pc, #24]	; (800c3c4 <disk_initialize+0x48>)
 800c3ac:	440a      	add	r2, r1
 800c3ae:	7a12      	ldrb	r2, [r2, #8]
 800c3b0:	4610      	mov	r0, r2
 800c3b2:	4798      	blx	r3
 800c3b4:	4603      	mov	r3, r0
 800c3b6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800c3b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	3710      	adds	r7, #16
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	bd80      	pop	{r7, pc}
 800c3c2:	bf00      	nop
 800c3c4:	2000131c 	.word	0x2000131c

0800c3c8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c3c8:	b590      	push	{r4, r7, lr}
 800c3ca:	b087      	sub	sp, #28
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	60b9      	str	r1, [r7, #8]
 800c3d0:	607a      	str	r2, [r7, #4]
 800c3d2:	603b      	str	r3, [r7, #0]
 800c3d4:	4603      	mov	r3, r0
 800c3d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c3d8:	7bfb      	ldrb	r3, [r7, #15]
 800c3da:	4a0a      	ldr	r2, [pc, #40]	; (800c404 <disk_read+0x3c>)
 800c3dc:	009b      	lsls	r3, r3, #2
 800c3de:	4413      	add	r3, r2
 800c3e0:	685b      	ldr	r3, [r3, #4]
 800c3e2:	689c      	ldr	r4, [r3, #8]
 800c3e4:	7bfb      	ldrb	r3, [r7, #15]
 800c3e6:	4a07      	ldr	r2, [pc, #28]	; (800c404 <disk_read+0x3c>)
 800c3e8:	4413      	add	r3, r2
 800c3ea:	7a18      	ldrb	r0, [r3, #8]
 800c3ec:	683b      	ldr	r3, [r7, #0]
 800c3ee:	687a      	ldr	r2, [r7, #4]
 800c3f0:	68b9      	ldr	r1, [r7, #8]
 800c3f2:	47a0      	blx	r4
 800c3f4:	4603      	mov	r3, r0
 800c3f6:	75fb      	strb	r3, [r7, #23]
  return res;
 800c3f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	371c      	adds	r7, #28
 800c3fe:	46bd      	mov	sp, r7
 800c400:	bd90      	pop	{r4, r7, pc}
 800c402:	bf00      	nop
 800c404:	2000131c 	.word	0x2000131c

0800c408 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c408:	b590      	push	{r4, r7, lr}
 800c40a:	b087      	sub	sp, #28
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	60b9      	str	r1, [r7, #8]
 800c410:	607a      	str	r2, [r7, #4]
 800c412:	603b      	str	r3, [r7, #0]
 800c414:	4603      	mov	r3, r0
 800c416:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c418:	7bfb      	ldrb	r3, [r7, #15]
 800c41a:	4a0a      	ldr	r2, [pc, #40]	; (800c444 <disk_write+0x3c>)
 800c41c:	009b      	lsls	r3, r3, #2
 800c41e:	4413      	add	r3, r2
 800c420:	685b      	ldr	r3, [r3, #4]
 800c422:	68dc      	ldr	r4, [r3, #12]
 800c424:	7bfb      	ldrb	r3, [r7, #15]
 800c426:	4a07      	ldr	r2, [pc, #28]	; (800c444 <disk_write+0x3c>)
 800c428:	4413      	add	r3, r2
 800c42a:	7a18      	ldrb	r0, [r3, #8]
 800c42c:	683b      	ldr	r3, [r7, #0]
 800c42e:	687a      	ldr	r2, [r7, #4]
 800c430:	68b9      	ldr	r1, [r7, #8]
 800c432:	47a0      	blx	r4
 800c434:	4603      	mov	r3, r0
 800c436:	75fb      	strb	r3, [r7, #23]
  return res;
 800c438:	7dfb      	ldrb	r3, [r7, #23]
}
 800c43a:	4618      	mov	r0, r3
 800c43c:	371c      	adds	r7, #28
 800c43e:	46bd      	mov	sp, r7
 800c440:	bd90      	pop	{r4, r7, pc}
 800c442:	bf00      	nop
 800c444:	2000131c 	.word	0x2000131c

0800c448 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b084      	sub	sp, #16
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	4603      	mov	r3, r0
 800c450:	603a      	str	r2, [r7, #0]
 800c452:	71fb      	strb	r3, [r7, #7]
 800c454:	460b      	mov	r3, r1
 800c456:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c458:	79fb      	ldrb	r3, [r7, #7]
 800c45a:	4a09      	ldr	r2, [pc, #36]	; (800c480 <disk_ioctl+0x38>)
 800c45c:	009b      	lsls	r3, r3, #2
 800c45e:	4413      	add	r3, r2
 800c460:	685b      	ldr	r3, [r3, #4]
 800c462:	691b      	ldr	r3, [r3, #16]
 800c464:	79fa      	ldrb	r2, [r7, #7]
 800c466:	4906      	ldr	r1, [pc, #24]	; (800c480 <disk_ioctl+0x38>)
 800c468:	440a      	add	r2, r1
 800c46a:	7a10      	ldrb	r0, [r2, #8]
 800c46c:	79b9      	ldrb	r1, [r7, #6]
 800c46e:	683a      	ldr	r2, [r7, #0]
 800c470:	4798      	blx	r3
 800c472:	4603      	mov	r3, r0
 800c474:	73fb      	strb	r3, [r7, #15]
  return res;
 800c476:	7bfb      	ldrb	r3, [r7, #15]
}
 800c478:	4618      	mov	r0, r3
 800c47a:	3710      	adds	r7, #16
 800c47c:	46bd      	mov	sp, r7
 800c47e:	bd80      	pop	{r7, pc}
 800c480:	2000131c 	.word	0x2000131c

0800c484 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c484:	b480      	push	{r7}
 800c486:	b085      	sub	sp, #20
 800c488:	af00      	add	r7, sp, #0
 800c48a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	3301      	adds	r3, #1
 800c490:	781b      	ldrb	r3, [r3, #0]
 800c492:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c494:	89fb      	ldrh	r3, [r7, #14]
 800c496:	021b      	lsls	r3, r3, #8
 800c498:	b21a      	sxth	r2, r3
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	781b      	ldrb	r3, [r3, #0]
 800c49e:	b21b      	sxth	r3, r3
 800c4a0:	4313      	orrs	r3, r2
 800c4a2:	b21b      	sxth	r3, r3
 800c4a4:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c4a6:	89fb      	ldrh	r3, [r7, #14]
}
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	3714      	adds	r7, #20
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b2:	4770      	bx	lr

0800c4b4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c4b4:	b480      	push	{r7}
 800c4b6:	b085      	sub	sp, #20
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	3303      	adds	r3, #3
 800c4c0:	781b      	ldrb	r3, [r3, #0]
 800c4c2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	021b      	lsls	r3, r3, #8
 800c4c8:	687a      	ldr	r2, [r7, #4]
 800c4ca:	3202      	adds	r2, #2
 800c4cc:	7812      	ldrb	r2, [r2, #0]
 800c4ce:	4313      	orrs	r3, r2
 800c4d0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	021b      	lsls	r3, r3, #8
 800c4d6:	687a      	ldr	r2, [r7, #4]
 800c4d8:	3201      	adds	r2, #1
 800c4da:	7812      	ldrb	r2, [r2, #0]
 800c4dc:	4313      	orrs	r3, r2
 800c4de:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	021b      	lsls	r3, r3, #8
 800c4e4:	687a      	ldr	r2, [r7, #4]
 800c4e6:	7812      	ldrb	r2, [r2, #0]
 800c4e8:	4313      	orrs	r3, r2
 800c4ea:	60fb      	str	r3, [r7, #12]
	return rv;
 800c4ec:	68fb      	ldr	r3, [r7, #12]
}
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	3714      	adds	r7, #20
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f8:	4770      	bx	lr

0800c4fa <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c4fa:	b480      	push	{r7}
 800c4fc:	b083      	sub	sp, #12
 800c4fe:	af00      	add	r7, sp, #0
 800c500:	6078      	str	r0, [r7, #4]
 800c502:	460b      	mov	r3, r1
 800c504:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	1c5a      	adds	r2, r3, #1
 800c50a:	607a      	str	r2, [r7, #4]
 800c50c:	887a      	ldrh	r2, [r7, #2]
 800c50e:	b2d2      	uxtb	r2, r2
 800c510:	701a      	strb	r2, [r3, #0]
 800c512:	887b      	ldrh	r3, [r7, #2]
 800c514:	0a1b      	lsrs	r3, r3, #8
 800c516:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	1c5a      	adds	r2, r3, #1
 800c51c:	607a      	str	r2, [r7, #4]
 800c51e:	887a      	ldrh	r2, [r7, #2]
 800c520:	b2d2      	uxtb	r2, r2
 800c522:	701a      	strb	r2, [r3, #0]
}
 800c524:	bf00      	nop
 800c526:	370c      	adds	r7, #12
 800c528:	46bd      	mov	sp, r7
 800c52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52e:	4770      	bx	lr

0800c530 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c530:	b480      	push	{r7}
 800c532:	b083      	sub	sp, #12
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
 800c538:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	1c5a      	adds	r2, r3, #1
 800c53e:	607a      	str	r2, [r7, #4]
 800c540:	683a      	ldr	r2, [r7, #0]
 800c542:	b2d2      	uxtb	r2, r2
 800c544:	701a      	strb	r2, [r3, #0]
 800c546:	683b      	ldr	r3, [r7, #0]
 800c548:	0a1b      	lsrs	r3, r3, #8
 800c54a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	1c5a      	adds	r2, r3, #1
 800c550:	607a      	str	r2, [r7, #4]
 800c552:	683a      	ldr	r2, [r7, #0]
 800c554:	b2d2      	uxtb	r2, r2
 800c556:	701a      	strb	r2, [r3, #0]
 800c558:	683b      	ldr	r3, [r7, #0]
 800c55a:	0a1b      	lsrs	r3, r3, #8
 800c55c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	1c5a      	adds	r2, r3, #1
 800c562:	607a      	str	r2, [r7, #4]
 800c564:	683a      	ldr	r2, [r7, #0]
 800c566:	b2d2      	uxtb	r2, r2
 800c568:	701a      	strb	r2, [r3, #0]
 800c56a:	683b      	ldr	r3, [r7, #0]
 800c56c:	0a1b      	lsrs	r3, r3, #8
 800c56e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	1c5a      	adds	r2, r3, #1
 800c574:	607a      	str	r2, [r7, #4]
 800c576:	683a      	ldr	r2, [r7, #0]
 800c578:	b2d2      	uxtb	r2, r2
 800c57a:	701a      	strb	r2, [r3, #0]
}
 800c57c:	bf00      	nop
 800c57e:	370c      	adds	r7, #12
 800c580:	46bd      	mov	sp, r7
 800c582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c586:	4770      	bx	lr

0800c588 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c588:	b480      	push	{r7}
 800c58a:	b087      	sub	sp, #28
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	60f8      	str	r0, [r7, #12]
 800c590:	60b9      	str	r1, [r7, #8]
 800c592:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c598:	68bb      	ldr	r3, [r7, #8]
 800c59a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d00d      	beq.n	800c5be <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c5a2:	693a      	ldr	r2, [r7, #16]
 800c5a4:	1c53      	adds	r3, r2, #1
 800c5a6:	613b      	str	r3, [r7, #16]
 800c5a8:	697b      	ldr	r3, [r7, #20]
 800c5aa:	1c59      	adds	r1, r3, #1
 800c5ac:	6179      	str	r1, [r7, #20]
 800c5ae:	7812      	ldrb	r2, [r2, #0]
 800c5b0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	3b01      	subs	r3, #1
 800c5b6:	607b      	str	r3, [r7, #4]
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d1f1      	bne.n	800c5a2 <mem_cpy+0x1a>
	}
}
 800c5be:	bf00      	nop
 800c5c0:	371c      	adds	r7, #28
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c8:	4770      	bx	lr

0800c5ca <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c5ca:	b480      	push	{r7}
 800c5cc:	b087      	sub	sp, #28
 800c5ce:	af00      	add	r7, sp, #0
 800c5d0:	60f8      	str	r0, [r7, #12]
 800c5d2:	60b9      	str	r1, [r7, #8]
 800c5d4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c5da:	697b      	ldr	r3, [r7, #20]
 800c5dc:	1c5a      	adds	r2, r3, #1
 800c5de:	617a      	str	r2, [r7, #20]
 800c5e0:	68ba      	ldr	r2, [r7, #8]
 800c5e2:	b2d2      	uxtb	r2, r2
 800c5e4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	3b01      	subs	r3, #1
 800c5ea:	607b      	str	r3, [r7, #4]
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d1f3      	bne.n	800c5da <mem_set+0x10>
}
 800c5f2:	bf00      	nop
 800c5f4:	371c      	adds	r7, #28
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fc:	4770      	bx	lr

0800c5fe <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c5fe:	b480      	push	{r7}
 800c600:	b089      	sub	sp, #36	; 0x24
 800c602:	af00      	add	r7, sp, #0
 800c604:	60f8      	str	r0, [r7, #12]
 800c606:	60b9      	str	r1, [r7, #8]
 800c608:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	61fb      	str	r3, [r7, #28]
 800c60e:	68bb      	ldr	r3, [r7, #8]
 800c610:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c612:	2300      	movs	r3, #0
 800c614:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c616:	69fb      	ldr	r3, [r7, #28]
 800c618:	1c5a      	adds	r2, r3, #1
 800c61a:	61fa      	str	r2, [r7, #28]
 800c61c:	781b      	ldrb	r3, [r3, #0]
 800c61e:	4619      	mov	r1, r3
 800c620:	69bb      	ldr	r3, [r7, #24]
 800c622:	1c5a      	adds	r2, r3, #1
 800c624:	61ba      	str	r2, [r7, #24]
 800c626:	781b      	ldrb	r3, [r3, #0]
 800c628:	1acb      	subs	r3, r1, r3
 800c62a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	3b01      	subs	r3, #1
 800c630:	607b      	str	r3, [r7, #4]
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d002      	beq.n	800c63e <mem_cmp+0x40>
 800c638:	697b      	ldr	r3, [r7, #20]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d0eb      	beq.n	800c616 <mem_cmp+0x18>

	return r;
 800c63e:	697b      	ldr	r3, [r7, #20]
}
 800c640:	4618      	mov	r0, r3
 800c642:	3724      	adds	r7, #36	; 0x24
 800c644:	46bd      	mov	sp, r7
 800c646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64a:	4770      	bx	lr

0800c64c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c64c:	b480      	push	{r7}
 800c64e:	b083      	sub	sp, #12
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]
 800c654:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c656:	e002      	b.n	800c65e <chk_chr+0x12>
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	3301      	adds	r3, #1
 800c65c:	607b      	str	r3, [r7, #4]
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	781b      	ldrb	r3, [r3, #0]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d005      	beq.n	800c672 <chk_chr+0x26>
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	781b      	ldrb	r3, [r3, #0]
 800c66a:	461a      	mov	r2, r3
 800c66c:	683b      	ldr	r3, [r7, #0]
 800c66e:	4293      	cmp	r3, r2
 800c670:	d1f2      	bne.n	800c658 <chk_chr+0xc>
	return *str;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	781b      	ldrb	r3, [r3, #0]
}
 800c676:	4618      	mov	r0, r3
 800c678:	370c      	adds	r7, #12
 800c67a:	46bd      	mov	sp, r7
 800c67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c680:	4770      	bx	lr
	...

0800c684 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c684:	b480      	push	{r7}
 800c686:	b085      	sub	sp, #20
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
 800c68c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c68e:	2300      	movs	r3, #0
 800c690:	60bb      	str	r3, [r7, #8]
 800c692:	68bb      	ldr	r3, [r7, #8]
 800c694:	60fb      	str	r3, [r7, #12]
 800c696:	e029      	b.n	800c6ec <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c698:	4a27      	ldr	r2, [pc, #156]	; (800c738 <chk_lock+0xb4>)
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	011b      	lsls	r3, r3, #4
 800c69e:	4413      	add	r3, r2
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d01d      	beq.n	800c6e2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c6a6:	4a24      	ldr	r2, [pc, #144]	; (800c738 <chk_lock+0xb4>)
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	011b      	lsls	r3, r3, #4
 800c6ac:	4413      	add	r3, r2
 800c6ae:	681a      	ldr	r2, [r3, #0]
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	429a      	cmp	r2, r3
 800c6b6:	d116      	bne.n	800c6e6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c6b8:	4a1f      	ldr	r2, [pc, #124]	; (800c738 <chk_lock+0xb4>)
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	011b      	lsls	r3, r3, #4
 800c6be:	4413      	add	r3, r2
 800c6c0:	3304      	adds	r3, #4
 800c6c2:	681a      	ldr	r2, [r3, #0]
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c6c8:	429a      	cmp	r2, r3
 800c6ca:	d10c      	bne.n	800c6e6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c6cc:	4a1a      	ldr	r2, [pc, #104]	; (800c738 <chk_lock+0xb4>)
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	011b      	lsls	r3, r3, #4
 800c6d2:	4413      	add	r3, r2
 800c6d4:	3308      	adds	r3, #8
 800c6d6:	681a      	ldr	r2, [r3, #0]
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800c6dc:	429a      	cmp	r2, r3
 800c6de:	d102      	bne.n	800c6e6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c6e0:	e007      	b.n	800c6f2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c6e2:	2301      	movs	r3, #1
 800c6e4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	3301      	adds	r3, #1
 800c6ea:	60fb      	str	r3, [r7, #12]
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	2b01      	cmp	r3, #1
 800c6f0:	d9d2      	bls.n	800c698 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	2b02      	cmp	r3, #2
 800c6f6:	d109      	bne.n	800c70c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c6f8:	68bb      	ldr	r3, [r7, #8]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d102      	bne.n	800c704 <chk_lock+0x80>
 800c6fe:	683b      	ldr	r3, [r7, #0]
 800c700:	2b02      	cmp	r3, #2
 800c702:	d101      	bne.n	800c708 <chk_lock+0x84>
 800c704:	2300      	movs	r3, #0
 800c706:	e010      	b.n	800c72a <chk_lock+0xa6>
 800c708:	2312      	movs	r3, #18
 800c70a:	e00e      	b.n	800c72a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c70c:	683b      	ldr	r3, [r7, #0]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d108      	bne.n	800c724 <chk_lock+0xa0>
 800c712:	4a09      	ldr	r2, [pc, #36]	; (800c738 <chk_lock+0xb4>)
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	011b      	lsls	r3, r3, #4
 800c718:	4413      	add	r3, r2
 800c71a:	330c      	adds	r3, #12
 800c71c:	881b      	ldrh	r3, [r3, #0]
 800c71e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c722:	d101      	bne.n	800c728 <chk_lock+0xa4>
 800c724:	2310      	movs	r3, #16
 800c726:	e000      	b.n	800c72a <chk_lock+0xa6>
 800c728:	2300      	movs	r3, #0
}
 800c72a:	4618      	mov	r0, r3
 800c72c:	3714      	adds	r7, #20
 800c72e:	46bd      	mov	sp, r7
 800c730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c734:	4770      	bx	lr
 800c736:	bf00      	nop
 800c738:	200010fc 	.word	0x200010fc

0800c73c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c73c:	b480      	push	{r7}
 800c73e:	b083      	sub	sp, #12
 800c740:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c742:	2300      	movs	r3, #0
 800c744:	607b      	str	r3, [r7, #4]
 800c746:	e002      	b.n	800c74e <enq_lock+0x12>
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	3301      	adds	r3, #1
 800c74c:	607b      	str	r3, [r7, #4]
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	2b01      	cmp	r3, #1
 800c752:	d806      	bhi.n	800c762 <enq_lock+0x26>
 800c754:	4a09      	ldr	r2, [pc, #36]	; (800c77c <enq_lock+0x40>)
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	011b      	lsls	r3, r3, #4
 800c75a:	4413      	add	r3, r2
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d1f2      	bne.n	800c748 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	2b02      	cmp	r3, #2
 800c766:	bf14      	ite	ne
 800c768:	2301      	movne	r3, #1
 800c76a:	2300      	moveq	r3, #0
 800c76c:	b2db      	uxtb	r3, r3
}
 800c76e:	4618      	mov	r0, r3
 800c770:	370c      	adds	r7, #12
 800c772:	46bd      	mov	sp, r7
 800c774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c778:	4770      	bx	lr
 800c77a:	bf00      	nop
 800c77c:	200010fc 	.word	0x200010fc

0800c780 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c780:	b480      	push	{r7}
 800c782:	b085      	sub	sp, #20
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
 800c788:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c78a:	2300      	movs	r3, #0
 800c78c:	60fb      	str	r3, [r7, #12]
 800c78e:	e01f      	b.n	800c7d0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c790:	4a41      	ldr	r2, [pc, #260]	; (800c898 <inc_lock+0x118>)
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	011b      	lsls	r3, r3, #4
 800c796:	4413      	add	r3, r2
 800c798:	681a      	ldr	r2, [r3, #0]
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	429a      	cmp	r2, r3
 800c7a0:	d113      	bne.n	800c7ca <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c7a2:	4a3d      	ldr	r2, [pc, #244]	; (800c898 <inc_lock+0x118>)
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	011b      	lsls	r3, r3, #4
 800c7a8:	4413      	add	r3, r2
 800c7aa:	3304      	adds	r3, #4
 800c7ac:	681a      	ldr	r2, [r3, #0]
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c7b2:	429a      	cmp	r2, r3
 800c7b4:	d109      	bne.n	800c7ca <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c7b6:	4a38      	ldr	r2, [pc, #224]	; (800c898 <inc_lock+0x118>)
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	011b      	lsls	r3, r3, #4
 800c7bc:	4413      	add	r3, r2
 800c7be:	3308      	adds	r3, #8
 800c7c0:	681a      	ldr	r2, [r3, #0]
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800c7c6:	429a      	cmp	r2, r3
 800c7c8:	d006      	beq.n	800c7d8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	3301      	adds	r3, #1
 800c7ce:	60fb      	str	r3, [r7, #12]
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	2b01      	cmp	r3, #1
 800c7d4:	d9dc      	bls.n	800c790 <inc_lock+0x10>
 800c7d6:	e000      	b.n	800c7da <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c7d8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	2b02      	cmp	r3, #2
 800c7de:	d132      	bne.n	800c846 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	60fb      	str	r3, [r7, #12]
 800c7e4:	e002      	b.n	800c7ec <inc_lock+0x6c>
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	3301      	adds	r3, #1
 800c7ea:	60fb      	str	r3, [r7, #12]
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	2b01      	cmp	r3, #1
 800c7f0:	d806      	bhi.n	800c800 <inc_lock+0x80>
 800c7f2:	4a29      	ldr	r2, [pc, #164]	; (800c898 <inc_lock+0x118>)
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	011b      	lsls	r3, r3, #4
 800c7f8:	4413      	add	r3, r2
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d1f2      	bne.n	800c7e6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	2b02      	cmp	r3, #2
 800c804:	d101      	bne.n	800c80a <inc_lock+0x8a>
 800c806:	2300      	movs	r3, #0
 800c808:	e040      	b.n	800c88c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681a      	ldr	r2, [r3, #0]
 800c80e:	4922      	ldr	r1, [pc, #136]	; (800c898 <inc_lock+0x118>)
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	011b      	lsls	r3, r3, #4
 800c814:	440b      	add	r3, r1
 800c816:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	689a      	ldr	r2, [r3, #8]
 800c81c:	491e      	ldr	r1, [pc, #120]	; (800c898 <inc_lock+0x118>)
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	011b      	lsls	r3, r3, #4
 800c822:	440b      	add	r3, r1
 800c824:	3304      	adds	r3, #4
 800c826:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	695a      	ldr	r2, [r3, #20]
 800c82c:	491a      	ldr	r1, [pc, #104]	; (800c898 <inc_lock+0x118>)
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	011b      	lsls	r3, r3, #4
 800c832:	440b      	add	r3, r1
 800c834:	3308      	adds	r3, #8
 800c836:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c838:	4a17      	ldr	r2, [pc, #92]	; (800c898 <inc_lock+0x118>)
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	011b      	lsls	r3, r3, #4
 800c83e:	4413      	add	r3, r2
 800c840:	330c      	adds	r3, #12
 800c842:	2200      	movs	r2, #0
 800c844:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c846:	683b      	ldr	r3, [r7, #0]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d009      	beq.n	800c860 <inc_lock+0xe0>
 800c84c:	4a12      	ldr	r2, [pc, #72]	; (800c898 <inc_lock+0x118>)
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	011b      	lsls	r3, r3, #4
 800c852:	4413      	add	r3, r2
 800c854:	330c      	adds	r3, #12
 800c856:	881b      	ldrh	r3, [r3, #0]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d001      	beq.n	800c860 <inc_lock+0xe0>
 800c85c:	2300      	movs	r3, #0
 800c85e:	e015      	b.n	800c88c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c860:	683b      	ldr	r3, [r7, #0]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d108      	bne.n	800c878 <inc_lock+0xf8>
 800c866:	4a0c      	ldr	r2, [pc, #48]	; (800c898 <inc_lock+0x118>)
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	011b      	lsls	r3, r3, #4
 800c86c:	4413      	add	r3, r2
 800c86e:	330c      	adds	r3, #12
 800c870:	881b      	ldrh	r3, [r3, #0]
 800c872:	3301      	adds	r3, #1
 800c874:	b29a      	uxth	r2, r3
 800c876:	e001      	b.n	800c87c <inc_lock+0xfc>
 800c878:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c87c:	4906      	ldr	r1, [pc, #24]	; (800c898 <inc_lock+0x118>)
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	011b      	lsls	r3, r3, #4
 800c882:	440b      	add	r3, r1
 800c884:	330c      	adds	r3, #12
 800c886:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	3301      	adds	r3, #1
}
 800c88c:	4618      	mov	r0, r3
 800c88e:	3714      	adds	r7, #20
 800c890:	46bd      	mov	sp, r7
 800c892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c896:	4770      	bx	lr
 800c898:	200010fc 	.word	0x200010fc

0800c89c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800c89c:	b480      	push	{r7}
 800c89e:	b085      	sub	sp, #20
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	3b01      	subs	r3, #1
 800c8a8:	607b      	str	r3, [r7, #4]
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	2b01      	cmp	r3, #1
 800c8ae:	d825      	bhi.n	800c8fc <dec_lock+0x60>
		n = Files[i].ctr;
 800c8b0:	4a17      	ldr	r2, [pc, #92]	; (800c910 <dec_lock+0x74>)
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	011b      	lsls	r3, r3, #4
 800c8b6:	4413      	add	r3, r2
 800c8b8:	330c      	adds	r3, #12
 800c8ba:	881b      	ldrh	r3, [r3, #0]
 800c8bc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c8be:	89fb      	ldrh	r3, [r7, #14]
 800c8c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c8c4:	d101      	bne.n	800c8ca <dec_lock+0x2e>
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800c8ca:	89fb      	ldrh	r3, [r7, #14]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d002      	beq.n	800c8d6 <dec_lock+0x3a>
 800c8d0:	89fb      	ldrh	r3, [r7, #14]
 800c8d2:	3b01      	subs	r3, #1
 800c8d4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800c8d6:	4a0e      	ldr	r2, [pc, #56]	; (800c910 <dec_lock+0x74>)
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	011b      	lsls	r3, r3, #4
 800c8dc:	4413      	add	r3, r2
 800c8de:	330c      	adds	r3, #12
 800c8e0:	89fa      	ldrh	r2, [r7, #14]
 800c8e2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c8e4:	89fb      	ldrh	r3, [r7, #14]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d105      	bne.n	800c8f6 <dec_lock+0x5a>
 800c8ea:	4a09      	ldr	r2, [pc, #36]	; (800c910 <dec_lock+0x74>)
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	011b      	lsls	r3, r3, #4
 800c8f0:	4413      	add	r3, r2
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	737b      	strb	r3, [r7, #13]
 800c8fa:	e001      	b.n	800c900 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c8fc:	2302      	movs	r3, #2
 800c8fe:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800c900:	7b7b      	ldrb	r3, [r7, #13]
}
 800c902:	4618      	mov	r0, r3
 800c904:	3714      	adds	r7, #20
 800c906:	46bd      	mov	sp, r7
 800c908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90c:	4770      	bx	lr
 800c90e:	bf00      	nop
 800c910:	200010fc 	.word	0x200010fc

0800c914 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c914:	b480      	push	{r7}
 800c916:	b085      	sub	sp, #20
 800c918:	af00      	add	r7, sp, #0
 800c91a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c91c:	2300      	movs	r3, #0
 800c91e:	60fb      	str	r3, [r7, #12]
 800c920:	e010      	b.n	800c944 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c922:	4a0d      	ldr	r2, [pc, #52]	; (800c958 <clear_lock+0x44>)
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	011b      	lsls	r3, r3, #4
 800c928:	4413      	add	r3, r2
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	687a      	ldr	r2, [r7, #4]
 800c92e:	429a      	cmp	r2, r3
 800c930:	d105      	bne.n	800c93e <clear_lock+0x2a>
 800c932:	4a09      	ldr	r2, [pc, #36]	; (800c958 <clear_lock+0x44>)
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	011b      	lsls	r3, r3, #4
 800c938:	4413      	add	r3, r2
 800c93a:	2200      	movs	r2, #0
 800c93c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	3301      	adds	r3, #1
 800c942:	60fb      	str	r3, [r7, #12]
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	2b01      	cmp	r3, #1
 800c948:	d9eb      	bls.n	800c922 <clear_lock+0xe>
	}
}
 800c94a:	bf00      	nop
 800c94c:	3714      	adds	r7, #20
 800c94e:	46bd      	mov	sp, r7
 800c950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c954:	4770      	bx	lr
 800c956:	bf00      	nop
 800c958:	200010fc 	.word	0x200010fc

0800c95c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b086      	sub	sp, #24
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c964:	2300      	movs	r3, #0
 800c966:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	78db      	ldrb	r3, [r3, #3]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d034      	beq.n	800c9da <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c974:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	7858      	ldrb	r0, [r3, #1]
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c980:	2301      	movs	r3, #1
 800c982:	697a      	ldr	r2, [r7, #20]
 800c984:	f7ff fd40 	bl	800c408 <disk_write>
 800c988:	4603      	mov	r3, r0
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d002      	beq.n	800c994 <sync_window+0x38>
			res = FR_DISK_ERR;
 800c98e:	2301      	movs	r3, #1
 800c990:	73fb      	strb	r3, [r7, #15]
 800c992:	e022      	b.n	800c9da <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	2200      	movs	r2, #0
 800c998:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c99e:	697a      	ldr	r2, [r7, #20]
 800c9a0:	1ad2      	subs	r2, r2, r3
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	69db      	ldr	r3, [r3, #28]
 800c9a6:	429a      	cmp	r2, r3
 800c9a8:	d217      	bcs.n	800c9da <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	789b      	ldrb	r3, [r3, #2]
 800c9ae:	613b      	str	r3, [r7, #16]
 800c9b0:	e010      	b.n	800c9d4 <sync_window+0x78>
					wsect += fs->fsize;
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	69db      	ldr	r3, [r3, #28]
 800c9b6:	697a      	ldr	r2, [r7, #20]
 800c9b8:	4413      	add	r3, r2
 800c9ba:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	7858      	ldrb	r0, [r3, #1]
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c9c6:	2301      	movs	r3, #1
 800c9c8:	697a      	ldr	r2, [r7, #20]
 800c9ca:	f7ff fd1d 	bl	800c408 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c9ce:	693b      	ldr	r3, [r7, #16]
 800c9d0:	3b01      	subs	r3, #1
 800c9d2:	613b      	str	r3, [r7, #16]
 800c9d4:	693b      	ldr	r3, [r7, #16]
 800c9d6:	2b01      	cmp	r3, #1
 800c9d8:	d8eb      	bhi.n	800c9b2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c9da:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9dc:	4618      	mov	r0, r3
 800c9de:	3718      	adds	r7, #24
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	bd80      	pop	{r7, pc}

0800c9e4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b084      	sub	sp, #16
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
 800c9ec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9f6:	683a      	ldr	r2, [r7, #0]
 800c9f8:	429a      	cmp	r2, r3
 800c9fa:	d01b      	beq.n	800ca34 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c9fc:	6878      	ldr	r0, [r7, #4]
 800c9fe:	f7ff ffad 	bl	800c95c <sync_window>
 800ca02:	4603      	mov	r3, r0
 800ca04:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800ca06:	7bfb      	ldrb	r3, [r7, #15]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d113      	bne.n	800ca34 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	7858      	ldrb	r0, [r3, #1]
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ca16:	2301      	movs	r3, #1
 800ca18:	683a      	ldr	r2, [r7, #0]
 800ca1a:	f7ff fcd5 	bl	800c3c8 <disk_read>
 800ca1e:	4603      	mov	r3, r0
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d004      	beq.n	800ca2e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ca24:	f04f 33ff 	mov.w	r3, #4294967295
 800ca28:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ca2a:	2301      	movs	r3, #1
 800ca2c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	683a      	ldr	r2, [r7, #0]
 800ca32:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800ca34:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca36:	4618      	mov	r0, r3
 800ca38:	3710      	adds	r7, #16
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	bd80      	pop	{r7, pc}
	...

0800ca40 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800ca40:	b580      	push	{r7, lr}
 800ca42:	b084      	sub	sp, #16
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800ca48:	6878      	ldr	r0, [r7, #4]
 800ca4a:	f7ff ff87 	bl	800c95c <sync_window>
 800ca4e:	4603      	mov	r3, r0
 800ca50:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ca52:	7bfb      	ldrb	r3, [r7, #15]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d158      	bne.n	800cb0a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	781b      	ldrb	r3, [r3, #0]
 800ca5c:	2b03      	cmp	r3, #3
 800ca5e:	d148      	bne.n	800caf2 <sync_fs+0xb2>
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	791b      	ldrb	r3, [r3, #4]
 800ca64:	2b01      	cmp	r3, #1
 800ca66:	d144      	bne.n	800caf2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	3334      	adds	r3, #52	; 0x34
 800ca6c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ca70:	2100      	movs	r1, #0
 800ca72:	4618      	mov	r0, r3
 800ca74:	f7ff fda9 	bl	800c5ca <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	3334      	adds	r3, #52	; 0x34
 800ca7c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ca80:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800ca84:	4618      	mov	r0, r3
 800ca86:	f7ff fd38 	bl	800c4fa <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	3334      	adds	r3, #52	; 0x34
 800ca8e:	4921      	ldr	r1, [pc, #132]	; (800cb14 <sync_fs+0xd4>)
 800ca90:	4618      	mov	r0, r3
 800ca92:	f7ff fd4d 	bl	800c530 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	3334      	adds	r3, #52	; 0x34
 800ca9a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ca9e:	491e      	ldr	r1, [pc, #120]	; (800cb18 <sync_fs+0xd8>)
 800caa0:	4618      	mov	r0, r3
 800caa2:	f7ff fd45 	bl	800c530 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	3334      	adds	r3, #52	; 0x34
 800caaa:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	695b      	ldr	r3, [r3, #20]
 800cab2:	4619      	mov	r1, r3
 800cab4:	4610      	mov	r0, r2
 800cab6:	f7ff fd3b 	bl	800c530 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	3334      	adds	r3, #52	; 0x34
 800cabe:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	691b      	ldr	r3, [r3, #16]
 800cac6:	4619      	mov	r1, r3
 800cac8:	4610      	mov	r0, r2
 800caca:	f7ff fd31 	bl	800c530 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	6a1b      	ldr	r3, [r3, #32]
 800cad2:	1c5a      	adds	r2, r3, #1
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	7858      	ldrb	r0, [r3, #1]
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cae6:	2301      	movs	r3, #1
 800cae8:	f7ff fc8e 	bl	800c408 <disk_write>
			fs->fsi_flag = 0;
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	2200      	movs	r2, #0
 800caf0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	785b      	ldrb	r3, [r3, #1]
 800caf6:	2200      	movs	r2, #0
 800caf8:	2100      	movs	r1, #0
 800cafa:	4618      	mov	r0, r3
 800cafc:	f7ff fca4 	bl	800c448 <disk_ioctl>
 800cb00:	4603      	mov	r3, r0
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d001      	beq.n	800cb0a <sync_fs+0xca>
 800cb06:	2301      	movs	r3, #1
 800cb08:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800cb0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	3710      	adds	r7, #16
 800cb10:	46bd      	mov	sp, r7
 800cb12:	bd80      	pop	{r7, pc}
 800cb14:	41615252 	.word	0x41615252
 800cb18:	61417272 	.word	0x61417272

0800cb1c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800cb1c:	b480      	push	{r7}
 800cb1e:	b083      	sub	sp, #12
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	6078      	str	r0, [r7, #4]
 800cb24:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800cb26:	683b      	ldr	r3, [r7, #0]
 800cb28:	3b02      	subs	r3, #2
 800cb2a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	699b      	ldr	r3, [r3, #24]
 800cb30:	3b02      	subs	r3, #2
 800cb32:	683a      	ldr	r2, [r7, #0]
 800cb34:	429a      	cmp	r2, r3
 800cb36:	d301      	bcc.n	800cb3c <clust2sect+0x20>
 800cb38:	2300      	movs	r3, #0
 800cb3a:	e008      	b.n	800cb4e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	895b      	ldrh	r3, [r3, #10]
 800cb40:	461a      	mov	r2, r3
 800cb42:	683b      	ldr	r3, [r7, #0]
 800cb44:	fb03 f202 	mul.w	r2, r3, r2
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb4c:	4413      	add	r3, r2
}
 800cb4e:	4618      	mov	r0, r3
 800cb50:	370c      	adds	r7, #12
 800cb52:	46bd      	mov	sp, r7
 800cb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb58:	4770      	bx	lr

0800cb5a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800cb5a:	b580      	push	{r7, lr}
 800cb5c:	b086      	sub	sp, #24
 800cb5e:	af00      	add	r7, sp, #0
 800cb60:	6078      	str	r0, [r7, #4]
 800cb62:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800cb6a:	683b      	ldr	r3, [r7, #0]
 800cb6c:	2b01      	cmp	r3, #1
 800cb6e:	d904      	bls.n	800cb7a <get_fat+0x20>
 800cb70:	693b      	ldr	r3, [r7, #16]
 800cb72:	699b      	ldr	r3, [r3, #24]
 800cb74:	683a      	ldr	r2, [r7, #0]
 800cb76:	429a      	cmp	r2, r3
 800cb78:	d302      	bcc.n	800cb80 <get_fat+0x26>
		val = 1;	/* Internal error */
 800cb7a:	2301      	movs	r3, #1
 800cb7c:	617b      	str	r3, [r7, #20]
 800cb7e:	e08e      	b.n	800cc9e <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800cb80:	f04f 33ff 	mov.w	r3, #4294967295
 800cb84:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800cb86:	693b      	ldr	r3, [r7, #16]
 800cb88:	781b      	ldrb	r3, [r3, #0]
 800cb8a:	2b02      	cmp	r3, #2
 800cb8c:	d045      	beq.n	800cc1a <get_fat+0xc0>
 800cb8e:	2b03      	cmp	r3, #3
 800cb90:	d05e      	beq.n	800cc50 <get_fat+0xf6>
 800cb92:	2b01      	cmp	r3, #1
 800cb94:	d179      	bne.n	800cc8a <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800cb96:	683b      	ldr	r3, [r7, #0]
 800cb98:	60fb      	str	r3, [r7, #12]
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	085b      	lsrs	r3, r3, #1
 800cb9e:	68fa      	ldr	r2, [r7, #12]
 800cba0:	4413      	add	r3, r2
 800cba2:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cba4:	693b      	ldr	r3, [r7, #16]
 800cba6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	0b1b      	lsrs	r3, r3, #12
 800cbac:	4413      	add	r3, r2
 800cbae:	4619      	mov	r1, r3
 800cbb0:	6938      	ldr	r0, [r7, #16]
 800cbb2:	f7ff ff17 	bl	800c9e4 <move_window>
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d169      	bne.n	800cc90 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	1c5a      	adds	r2, r3, #1
 800cbc0:	60fa      	str	r2, [r7, #12]
 800cbc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cbc6:	693a      	ldr	r2, [r7, #16]
 800cbc8:	4413      	add	r3, r2
 800cbca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cbce:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cbd0:	693b      	ldr	r3, [r7, #16]
 800cbd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	0b1b      	lsrs	r3, r3, #12
 800cbd8:	4413      	add	r3, r2
 800cbda:	4619      	mov	r1, r3
 800cbdc:	6938      	ldr	r0, [r7, #16]
 800cbde:	f7ff ff01 	bl	800c9e4 <move_window>
 800cbe2:	4603      	mov	r3, r0
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d155      	bne.n	800cc94 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cbee:	693a      	ldr	r2, [r7, #16]
 800cbf0:	4413      	add	r3, r2
 800cbf2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cbf6:	021b      	lsls	r3, r3, #8
 800cbf8:	461a      	mov	r2, r3
 800cbfa:	68bb      	ldr	r3, [r7, #8]
 800cbfc:	4313      	orrs	r3, r2
 800cbfe:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800cc00:	683b      	ldr	r3, [r7, #0]
 800cc02:	f003 0301 	and.w	r3, r3, #1
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d002      	beq.n	800cc10 <get_fat+0xb6>
 800cc0a:	68bb      	ldr	r3, [r7, #8]
 800cc0c:	091b      	lsrs	r3, r3, #4
 800cc0e:	e002      	b.n	800cc16 <get_fat+0xbc>
 800cc10:	68bb      	ldr	r3, [r7, #8]
 800cc12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cc16:	617b      	str	r3, [r7, #20]
			break;
 800cc18:	e041      	b.n	800cc9e <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800cc1a:	693b      	ldr	r3, [r7, #16]
 800cc1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cc1e:	683b      	ldr	r3, [r7, #0]
 800cc20:	0adb      	lsrs	r3, r3, #11
 800cc22:	4413      	add	r3, r2
 800cc24:	4619      	mov	r1, r3
 800cc26:	6938      	ldr	r0, [r7, #16]
 800cc28:	f7ff fedc 	bl	800c9e4 <move_window>
 800cc2c:	4603      	mov	r3, r0
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d132      	bne.n	800cc98 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800cc32:	693b      	ldr	r3, [r7, #16]
 800cc34:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cc38:	683b      	ldr	r3, [r7, #0]
 800cc3a:	0059      	lsls	r1, r3, #1
 800cc3c:	f640 73fe 	movw	r3, #4094	; 0xffe
 800cc40:	400b      	ands	r3, r1
 800cc42:	4413      	add	r3, r2
 800cc44:	4618      	mov	r0, r3
 800cc46:	f7ff fc1d 	bl	800c484 <ld_word>
 800cc4a:	4603      	mov	r3, r0
 800cc4c:	617b      	str	r3, [r7, #20]
			break;
 800cc4e:	e026      	b.n	800cc9e <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cc50:	693b      	ldr	r3, [r7, #16]
 800cc52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cc54:	683b      	ldr	r3, [r7, #0]
 800cc56:	0a9b      	lsrs	r3, r3, #10
 800cc58:	4413      	add	r3, r2
 800cc5a:	4619      	mov	r1, r3
 800cc5c:	6938      	ldr	r0, [r7, #16]
 800cc5e:	f7ff fec1 	bl	800c9e4 <move_window>
 800cc62:	4603      	mov	r3, r0
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d119      	bne.n	800cc9c <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800cc68:	693b      	ldr	r3, [r7, #16]
 800cc6a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cc6e:	683b      	ldr	r3, [r7, #0]
 800cc70:	0099      	lsls	r1, r3, #2
 800cc72:	f640 73fc 	movw	r3, #4092	; 0xffc
 800cc76:	400b      	ands	r3, r1
 800cc78:	4413      	add	r3, r2
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	f7ff fc1a 	bl	800c4b4 <ld_dword>
 800cc80:	4603      	mov	r3, r0
 800cc82:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800cc86:	617b      	str	r3, [r7, #20]
			break;
 800cc88:	e009      	b.n	800cc9e <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800cc8a:	2301      	movs	r3, #1
 800cc8c:	617b      	str	r3, [r7, #20]
 800cc8e:	e006      	b.n	800cc9e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cc90:	bf00      	nop
 800cc92:	e004      	b.n	800cc9e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cc94:	bf00      	nop
 800cc96:	e002      	b.n	800cc9e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800cc98:	bf00      	nop
 800cc9a:	e000      	b.n	800cc9e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cc9c:	bf00      	nop
		}
	}

	return val;
 800cc9e:	697b      	ldr	r3, [r7, #20]
}
 800cca0:	4618      	mov	r0, r3
 800cca2:	3718      	adds	r7, #24
 800cca4:	46bd      	mov	sp, r7
 800cca6:	bd80      	pop	{r7, pc}

0800cca8 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800cca8:	b590      	push	{r4, r7, lr}
 800ccaa:	b089      	sub	sp, #36	; 0x24
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	60f8      	str	r0, [r7, #12]
 800ccb0:	60b9      	str	r1, [r7, #8]
 800ccb2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800ccb4:	2302      	movs	r3, #2
 800ccb6:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800ccb8:	68bb      	ldr	r3, [r7, #8]
 800ccba:	2b01      	cmp	r3, #1
 800ccbc:	f240 80d9 	bls.w	800ce72 <put_fat+0x1ca>
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	699b      	ldr	r3, [r3, #24]
 800ccc4:	68ba      	ldr	r2, [r7, #8]
 800ccc6:	429a      	cmp	r2, r3
 800ccc8:	f080 80d3 	bcs.w	800ce72 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	781b      	ldrb	r3, [r3, #0]
 800ccd0:	2b02      	cmp	r3, #2
 800ccd2:	d073      	beq.n	800cdbc <put_fat+0x114>
 800ccd4:	2b03      	cmp	r3, #3
 800ccd6:	f000 8092 	beq.w	800cdfe <put_fat+0x156>
 800ccda:	2b01      	cmp	r3, #1
 800ccdc:	f040 80c9 	bne.w	800ce72 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800cce0:	68bb      	ldr	r3, [r7, #8]
 800cce2:	61bb      	str	r3, [r7, #24]
 800cce4:	69bb      	ldr	r3, [r7, #24]
 800cce6:	085b      	lsrs	r3, r3, #1
 800cce8:	69ba      	ldr	r2, [r7, #24]
 800ccea:	4413      	add	r3, r2
 800ccec:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ccf2:	69bb      	ldr	r3, [r7, #24]
 800ccf4:	0b1b      	lsrs	r3, r3, #12
 800ccf6:	4413      	add	r3, r2
 800ccf8:	4619      	mov	r1, r3
 800ccfa:	68f8      	ldr	r0, [r7, #12]
 800ccfc:	f7ff fe72 	bl	800c9e4 <move_window>
 800cd00:	4603      	mov	r3, r0
 800cd02:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cd04:	7ffb      	ldrb	r3, [r7, #31]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	f040 80ac 	bne.w	800ce64 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cd12:	69bb      	ldr	r3, [r7, #24]
 800cd14:	1c59      	adds	r1, r3, #1
 800cd16:	61b9      	str	r1, [r7, #24]
 800cd18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cd1c:	4413      	add	r3, r2
 800cd1e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800cd20:	68bb      	ldr	r3, [r7, #8]
 800cd22:	f003 0301 	and.w	r3, r3, #1
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d00d      	beq.n	800cd46 <put_fat+0x9e>
 800cd2a:	697b      	ldr	r3, [r7, #20]
 800cd2c:	781b      	ldrb	r3, [r3, #0]
 800cd2e:	b25b      	sxtb	r3, r3
 800cd30:	f003 030f 	and.w	r3, r3, #15
 800cd34:	b25a      	sxtb	r2, r3
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	b2db      	uxtb	r3, r3
 800cd3a:	011b      	lsls	r3, r3, #4
 800cd3c:	b25b      	sxtb	r3, r3
 800cd3e:	4313      	orrs	r3, r2
 800cd40:	b25b      	sxtb	r3, r3
 800cd42:	b2db      	uxtb	r3, r3
 800cd44:	e001      	b.n	800cd4a <put_fat+0xa2>
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	b2db      	uxtb	r3, r3
 800cd4a:	697a      	ldr	r2, [r7, #20]
 800cd4c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	2201      	movs	r2, #1
 800cd52:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cd58:	69bb      	ldr	r3, [r7, #24]
 800cd5a:	0b1b      	lsrs	r3, r3, #12
 800cd5c:	4413      	add	r3, r2
 800cd5e:	4619      	mov	r1, r3
 800cd60:	68f8      	ldr	r0, [r7, #12]
 800cd62:	f7ff fe3f 	bl	800c9e4 <move_window>
 800cd66:	4603      	mov	r3, r0
 800cd68:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cd6a:	7ffb      	ldrb	r3, [r7, #31]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d17b      	bne.n	800ce68 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cd76:	69bb      	ldr	r3, [r7, #24]
 800cd78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cd7c:	4413      	add	r3, r2
 800cd7e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800cd80:	68bb      	ldr	r3, [r7, #8]
 800cd82:	f003 0301 	and.w	r3, r3, #1
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d003      	beq.n	800cd92 <put_fat+0xea>
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	091b      	lsrs	r3, r3, #4
 800cd8e:	b2db      	uxtb	r3, r3
 800cd90:	e00e      	b.n	800cdb0 <put_fat+0x108>
 800cd92:	697b      	ldr	r3, [r7, #20]
 800cd94:	781b      	ldrb	r3, [r3, #0]
 800cd96:	b25b      	sxtb	r3, r3
 800cd98:	f023 030f 	bic.w	r3, r3, #15
 800cd9c:	b25a      	sxtb	r2, r3
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	0a1b      	lsrs	r3, r3, #8
 800cda2:	b25b      	sxtb	r3, r3
 800cda4:	f003 030f 	and.w	r3, r3, #15
 800cda8:	b25b      	sxtb	r3, r3
 800cdaa:	4313      	orrs	r3, r2
 800cdac:	b25b      	sxtb	r3, r3
 800cdae:	b2db      	uxtb	r3, r3
 800cdb0:	697a      	ldr	r2, [r7, #20]
 800cdb2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	2201      	movs	r2, #1
 800cdb8:	70da      	strb	r2, [r3, #3]
			break;
 800cdba:	e05a      	b.n	800ce72 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cdc0:	68bb      	ldr	r3, [r7, #8]
 800cdc2:	0adb      	lsrs	r3, r3, #11
 800cdc4:	4413      	add	r3, r2
 800cdc6:	4619      	mov	r1, r3
 800cdc8:	68f8      	ldr	r0, [r7, #12]
 800cdca:	f7ff fe0b 	bl	800c9e4 <move_window>
 800cdce:	4603      	mov	r3, r0
 800cdd0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cdd2:	7ffb      	ldrb	r3, [r7, #31]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d149      	bne.n	800ce6c <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cdde:	68bb      	ldr	r3, [r7, #8]
 800cde0:	0059      	lsls	r1, r3, #1
 800cde2:	f640 73fe 	movw	r3, #4094	; 0xffe
 800cde6:	400b      	ands	r3, r1
 800cde8:	4413      	add	r3, r2
 800cdea:	687a      	ldr	r2, [r7, #4]
 800cdec:	b292      	uxth	r2, r2
 800cdee:	4611      	mov	r1, r2
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	f7ff fb82 	bl	800c4fa <st_word>
			fs->wflag = 1;
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	2201      	movs	r2, #1
 800cdfa:	70da      	strb	r2, [r3, #3]
			break;
 800cdfc:	e039      	b.n	800ce72 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ce02:	68bb      	ldr	r3, [r7, #8]
 800ce04:	0a9b      	lsrs	r3, r3, #10
 800ce06:	4413      	add	r3, r2
 800ce08:	4619      	mov	r1, r3
 800ce0a:	68f8      	ldr	r0, [r7, #12]
 800ce0c:	f7ff fdea 	bl	800c9e4 <move_window>
 800ce10:	4603      	mov	r3, r0
 800ce12:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ce14:	7ffb      	ldrb	r3, [r7, #31]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d12a      	bne.n	800ce70 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ce26:	68bb      	ldr	r3, [r7, #8]
 800ce28:	0099      	lsls	r1, r3, #2
 800ce2a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800ce2e:	400b      	ands	r3, r1
 800ce30:	4413      	add	r3, r2
 800ce32:	4618      	mov	r0, r3
 800ce34:	f7ff fb3e 	bl	800c4b4 <ld_dword>
 800ce38:	4603      	mov	r3, r0
 800ce3a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ce3e:	4323      	orrs	r3, r4
 800ce40:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ce48:	68bb      	ldr	r3, [r7, #8]
 800ce4a:	0099      	lsls	r1, r3, #2
 800ce4c:	f640 73fc 	movw	r3, #4092	; 0xffc
 800ce50:	400b      	ands	r3, r1
 800ce52:	4413      	add	r3, r2
 800ce54:	6879      	ldr	r1, [r7, #4]
 800ce56:	4618      	mov	r0, r3
 800ce58:	f7ff fb6a 	bl	800c530 <st_dword>
			fs->wflag = 1;
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	2201      	movs	r2, #1
 800ce60:	70da      	strb	r2, [r3, #3]
			break;
 800ce62:	e006      	b.n	800ce72 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ce64:	bf00      	nop
 800ce66:	e004      	b.n	800ce72 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ce68:	bf00      	nop
 800ce6a:	e002      	b.n	800ce72 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ce6c:	bf00      	nop
 800ce6e:	e000      	b.n	800ce72 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ce70:	bf00      	nop
		}
	}
	return res;
 800ce72:	7ffb      	ldrb	r3, [r7, #31]
}
 800ce74:	4618      	mov	r0, r3
 800ce76:	3724      	adds	r7, #36	; 0x24
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	bd90      	pop	{r4, r7, pc}

0800ce7c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b088      	sub	sp, #32
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	60f8      	str	r0, [r7, #12]
 800ce84:	60b9      	str	r1, [r7, #8]
 800ce86:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ce88:	2300      	movs	r3, #0
 800ce8a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ce92:	68bb      	ldr	r3, [r7, #8]
 800ce94:	2b01      	cmp	r3, #1
 800ce96:	d904      	bls.n	800cea2 <remove_chain+0x26>
 800ce98:	69bb      	ldr	r3, [r7, #24]
 800ce9a:	699b      	ldr	r3, [r3, #24]
 800ce9c:	68ba      	ldr	r2, [r7, #8]
 800ce9e:	429a      	cmp	r2, r3
 800cea0:	d301      	bcc.n	800cea6 <remove_chain+0x2a>
 800cea2:	2302      	movs	r3, #2
 800cea4:	e04b      	b.n	800cf3e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d00c      	beq.n	800cec6 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800ceac:	f04f 32ff 	mov.w	r2, #4294967295
 800ceb0:	6879      	ldr	r1, [r7, #4]
 800ceb2:	69b8      	ldr	r0, [r7, #24]
 800ceb4:	f7ff fef8 	bl	800cca8 <put_fat>
 800ceb8:	4603      	mov	r3, r0
 800ceba:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800cebc:	7ffb      	ldrb	r3, [r7, #31]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d001      	beq.n	800cec6 <remove_chain+0x4a>
 800cec2:	7ffb      	ldrb	r3, [r7, #31]
 800cec4:	e03b      	b.n	800cf3e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800cec6:	68b9      	ldr	r1, [r7, #8]
 800cec8:	68f8      	ldr	r0, [r7, #12]
 800ceca:	f7ff fe46 	bl	800cb5a <get_fat>
 800cece:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800ced0:	697b      	ldr	r3, [r7, #20]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d031      	beq.n	800cf3a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800ced6:	697b      	ldr	r3, [r7, #20]
 800ced8:	2b01      	cmp	r3, #1
 800ceda:	d101      	bne.n	800cee0 <remove_chain+0x64>
 800cedc:	2302      	movs	r3, #2
 800cede:	e02e      	b.n	800cf3e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800cee0:	697b      	ldr	r3, [r7, #20]
 800cee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cee6:	d101      	bne.n	800ceec <remove_chain+0x70>
 800cee8:	2301      	movs	r3, #1
 800ceea:	e028      	b.n	800cf3e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800ceec:	2200      	movs	r2, #0
 800ceee:	68b9      	ldr	r1, [r7, #8]
 800cef0:	69b8      	ldr	r0, [r7, #24]
 800cef2:	f7ff fed9 	bl	800cca8 <put_fat>
 800cef6:	4603      	mov	r3, r0
 800cef8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800cefa:	7ffb      	ldrb	r3, [r7, #31]
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d001      	beq.n	800cf04 <remove_chain+0x88>
 800cf00:	7ffb      	ldrb	r3, [r7, #31]
 800cf02:	e01c      	b.n	800cf3e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800cf04:	69bb      	ldr	r3, [r7, #24]
 800cf06:	695a      	ldr	r2, [r3, #20]
 800cf08:	69bb      	ldr	r3, [r7, #24]
 800cf0a:	699b      	ldr	r3, [r3, #24]
 800cf0c:	3b02      	subs	r3, #2
 800cf0e:	429a      	cmp	r2, r3
 800cf10:	d20b      	bcs.n	800cf2a <remove_chain+0xae>
			fs->free_clst++;
 800cf12:	69bb      	ldr	r3, [r7, #24]
 800cf14:	695b      	ldr	r3, [r3, #20]
 800cf16:	1c5a      	adds	r2, r3, #1
 800cf18:	69bb      	ldr	r3, [r7, #24]
 800cf1a:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800cf1c:	69bb      	ldr	r3, [r7, #24]
 800cf1e:	791b      	ldrb	r3, [r3, #4]
 800cf20:	f043 0301 	orr.w	r3, r3, #1
 800cf24:	b2da      	uxtb	r2, r3
 800cf26:	69bb      	ldr	r3, [r7, #24]
 800cf28:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800cf2a:	697b      	ldr	r3, [r7, #20]
 800cf2c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800cf2e:	69bb      	ldr	r3, [r7, #24]
 800cf30:	699b      	ldr	r3, [r3, #24]
 800cf32:	68ba      	ldr	r2, [r7, #8]
 800cf34:	429a      	cmp	r2, r3
 800cf36:	d3c6      	bcc.n	800cec6 <remove_chain+0x4a>
 800cf38:	e000      	b.n	800cf3c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800cf3a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800cf3c:	2300      	movs	r3, #0
}
 800cf3e:	4618      	mov	r0, r3
 800cf40:	3720      	adds	r7, #32
 800cf42:	46bd      	mov	sp, r7
 800cf44:	bd80      	pop	{r7, pc}

0800cf46 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800cf46:	b580      	push	{r7, lr}
 800cf48:	b088      	sub	sp, #32
 800cf4a:	af00      	add	r7, sp, #0
 800cf4c:	6078      	str	r0, [r7, #4]
 800cf4e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800cf56:	683b      	ldr	r3, [r7, #0]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d10d      	bne.n	800cf78 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800cf5c:	693b      	ldr	r3, [r7, #16]
 800cf5e:	691b      	ldr	r3, [r3, #16]
 800cf60:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800cf62:	69bb      	ldr	r3, [r7, #24]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d004      	beq.n	800cf72 <create_chain+0x2c>
 800cf68:	693b      	ldr	r3, [r7, #16]
 800cf6a:	699b      	ldr	r3, [r3, #24]
 800cf6c:	69ba      	ldr	r2, [r7, #24]
 800cf6e:	429a      	cmp	r2, r3
 800cf70:	d31b      	bcc.n	800cfaa <create_chain+0x64>
 800cf72:	2301      	movs	r3, #1
 800cf74:	61bb      	str	r3, [r7, #24]
 800cf76:	e018      	b.n	800cfaa <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800cf78:	6839      	ldr	r1, [r7, #0]
 800cf7a:	6878      	ldr	r0, [r7, #4]
 800cf7c:	f7ff fded 	bl	800cb5a <get_fat>
 800cf80:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	2b01      	cmp	r3, #1
 800cf86:	d801      	bhi.n	800cf8c <create_chain+0x46>
 800cf88:	2301      	movs	r3, #1
 800cf8a:	e070      	b.n	800d06e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf92:	d101      	bne.n	800cf98 <create_chain+0x52>
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	e06a      	b.n	800d06e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800cf98:	693b      	ldr	r3, [r7, #16]
 800cf9a:	699b      	ldr	r3, [r3, #24]
 800cf9c:	68fa      	ldr	r2, [r7, #12]
 800cf9e:	429a      	cmp	r2, r3
 800cfa0:	d201      	bcs.n	800cfa6 <create_chain+0x60>
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	e063      	b.n	800d06e <create_chain+0x128>
		scl = clst;
 800cfa6:	683b      	ldr	r3, [r7, #0]
 800cfa8:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800cfaa:	69bb      	ldr	r3, [r7, #24]
 800cfac:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800cfae:	69fb      	ldr	r3, [r7, #28]
 800cfb0:	3301      	adds	r3, #1
 800cfb2:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800cfb4:	693b      	ldr	r3, [r7, #16]
 800cfb6:	699b      	ldr	r3, [r3, #24]
 800cfb8:	69fa      	ldr	r2, [r7, #28]
 800cfba:	429a      	cmp	r2, r3
 800cfbc:	d307      	bcc.n	800cfce <create_chain+0x88>
				ncl = 2;
 800cfbe:	2302      	movs	r3, #2
 800cfc0:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800cfc2:	69fa      	ldr	r2, [r7, #28]
 800cfc4:	69bb      	ldr	r3, [r7, #24]
 800cfc6:	429a      	cmp	r2, r3
 800cfc8:	d901      	bls.n	800cfce <create_chain+0x88>
 800cfca:	2300      	movs	r3, #0
 800cfcc:	e04f      	b.n	800d06e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800cfce:	69f9      	ldr	r1, [r7, #28]
 800cfd0:	6878      	ldr	r0, [r7, #4]
 800cfd2:	f7ff fdc2 	bl	800cb5a <get_fat>
 800cfd6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d00e      	beq.n	800cffc <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	2b01      	cmp	r3, #1
 800cfe2:	d003      	beq.n	800cfec <create_chain+0xa6>
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfea:	d101      	bne.n	800cff0 <create_chain+0xaa>
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	e03e      	b.n	800d06e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800cff0:	69fa      	ldr	r2, [r7, #28]
 800cff2:	69bb      	ldr	r3, [r7, #24]
 800cff4:	429a      	cmp	r2, r3
 800cff6:	d1da      	bne.n	800cfae <create_chain+0x68>
 800cff8:	2300      	movs	r3, #0
 800cffa:	e038      	b.n	800d06e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800cffc:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800cffe:	f04f 32ff 	mov.w	r2, #4294967295
 800d002:	69f9      	ldr	r1, [r7, #28]
 800d004:	6938      	ldr	r0, [r7, #16]
 800d006:	f7ff fe4f 	bl	800cca8 <put_fat>
 800d00a:	4603      	mov	r3, r0
 800d00c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800d00e:	7dfb      	ldrb	r3, [r7, #23]
 800d010:	2b00      	cmp	r3, #0
 800d012:	d109      	bne.n	800d028 <create_chain+0xe2>
 800d014:	683b      	ldr	r3, [r7, #0]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d006      	beq.n	800d028 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800d01a:	69fa      	ldr	r2, [r7, #28]
 800d01c:	6839      	ldr	r1, [r7, #0]
 800d01e:	6938      	ldr	r0, [r7, #16]
 800d020:	f7ff fe42 	bl	800cca8 <put_fat>
 800d024:	4603      	mov	r3, r0
 800d026:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d028:	7dfb      	ldrb	r3, [r7, #23]
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d116      	bne.n	800d05c <create_chain+0x116>
		fs->last_clst = ncl;
 800d02e:	693b      	ldr	r3, [r7, #16]
 800d030:	69fa      	ldr	r2, [r7, #28]
 800d032:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d034:	693b      	ldr	r3, [r7, #16]
 800d036:	695a      	ldr	r2, [r3, #20]
 800d038:	693b      	ldr	r3, [r7, #16]
 800d03a:	699b      	ldr	r3, [r3, #24]
 800d03c:	3b02      	subs	r3, #2
 800d03e:	429a      	cmp	r2, r3
 800d040:	d804      	bhi.n	800d04c <create_chain+0x106>
 800d042:	693b      	ldr	r3, [r7, #16]
 800d044:	695b      	ldr	r3, [r3, #20]
 800d046:	1e5a      	subs	r2, r3, #1
 800d048:	693b      	ldr	r3, [r7, #16]
 800d04a:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800d04c:	693b      	ldr	r3, [r7, #16]
 800d04e:	791b      	ldrb	r3, [r3, #4]
 800d050:	f043 0301 	orr.w	r3, r3, #1
 800d054:	b2da      	uxtb	r2, r3
 800d056:	693b      	ldr	r3, [r7, #16]
 800d058:	711a      	strb	r2, [r3, #4]
 800d05a:	e007      	b.n	800d06c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d05c:	7dfb      	ldrb	r3, [r7, #23]
 800d05e:	2b01      	cmp	r3, #1
 800d060:	d102      	bne.n	800d068 <create_chain+0x122>
 800d062:	f04f 33ff 	mov.w	r3, #4294967295
 800d066:	e000      	b.n	800d06a <create_chain+0x124>
 800d068:	2301      	movs	r3, #1
 800d06a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800d06c:	69fb      	ldr	r3, [r7, #28]
}
 800d06e:	4618      	mov	r0, r3
 800d070:	3720      	adds	r7, #32
 800d072:	46bd      	mov	sp, r7
 800d074:	bd80      	pop	{r7, pc}

0800d076 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d076:	b480      	push	{r7}
 800d078:	b087      	sub	sp, #28
 800d07a:	af00      	add	r7, sp, #0
 800d07c:	6078      	str	r0, [r7, #4]
 800d07e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d08a:	3304      	adds	r3, #4
 800d08c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d08e:	683b      	ldr	r3, [r7, #0]
 800d090:	0b1b      	lsrs	r3, r3, #12
 800d092:	68fa      	ldr	r2, [r7, #12]
 800d094:	8952      	ldrh	r2, [r2, #10]
 800d096:	fbb3 f3f2 	udiv	r3, r3, r2
 800d09a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d09c:	693b      	ldr	r3, [r7, #16]
 800d09e:	1d1a      	adds	r2, r3, #4
 800d0a0:	613a      	str	r2, [r7, #16]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d0a6:	68bb      	ldr	r3, [r7, #8]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d101      	bne.n	800d0b0 <clmt_clust+0x3a>
 800d0ac:	2300      	movs	r3, #0
 800d0ae:	e010      	b.n	800d0d2 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800d0b0:	697a      	ldr	r2, [r7, #20]
 800d0b2:	68bb      	ldr	r3, [r7, #8]
 800d0b4:	429a      	cmp	r2, r3
 800d0b6:	d307      	bcc.n	800d0c8 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800d0b8:	697a      	ldr	r2, [r7, #20]
 800d0ba:	68bb      	ldr	r3, [r7, #8]
 800d0bc:	1ad3      	subs	r3, r2, r3
 800d0be:	617b      	str	r3, [r7, #20]
 800d0c0:	693b      	ldr	r3, [r7, #16]
 800d0c2:	3304      	adds	r3, #4
 800d0c4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d0c6:	e7e9      	b.n	800d09c <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800d0c8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d0ca:	693b      	ldr	r3, [r7, #16]
 800d0cc:	681a      	ldr	r2, [r3, #0]
 800d0ce:	697b      	ldr	r3, [r7, #20]
 800d0d0:	4413      	add	r3, r2
}
 800d0d2:	4618      	mov	r0, r3
 800d0d4:	371c      	adds	r7, #28
 800d0d6:	46bd      	mov	sp, r7
 800d0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0dc:	4770      	bx	lr

0800d0de <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800d0de:	b580      	push	{r7, lr}
 800d0e0:	b086      	sub	sp, #24
 800d0e2:	af00      	add	r7, sp, #0
 800d0e4:	6078      	str	r0, [r7, #4]
 800d0e6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d0ee:	683b      	ldr	r3, [r7, #0]
 800d0f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d0f4:	d204      	bcs.n	800d100 <dir_sdi+0x22>
 800d0f6:	683b      	ldr	r3, [r7, #0]
 800d0f8:	f003 031f 	and.w	r3, r3, #31
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d001      	beq.n	800d104 <dir_sdi+0x26>
		return FR_INT_ERR;
 800d100:	2302      	movs	r3, #2
 800d102:	e063      	b.n	800d1cc <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	683a      	ldr	r2, [r7, #0]
 800d108:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	689b      	ldr	r3, [r3, #8]
 800d10e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d110:	697b      	ldr	r3, [r7, #20]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d106      	bne.n	800d124 <dir_sdi+0x46>
 800d116:	693b      	ldr	r3, [r7, #16]
 800d118:	781b      	ldrb	r3, [r3, #0]
 800d11a:	2b02      	cmp	r3, #2
 800d11c:	d902      	bls.n	800d124 <dir_sdi+0x46>
		clst = fs->dirbase;
 800d11e:	693b      	ldr	r3, [r7, #16]
 800d120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d122:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d124:	697b      	ldr	r3, [r7, #20]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d10c      	bne.n	800d144 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d12a:	683b      	ldr	r3, [r7, #0]
 800d12c:	095b      	lsrs	r3, r3, #5
 800d12e:	693a      	ldr	r2, [r7, #16]
 800d130:	8912      	ldrh	r2, [r2, #8]
 800d132:	4293      	cmp	r3, r2
 800d134:	d301      	bcc.n	800d13a <dir_sdi+0x5c>
 800d136:	2302      	movs	r3, #2
 800d138:	e048      	b.n	800d1cc <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800d13a:	693b      	ldr	r3, [r7, #16]
 800d13c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	61da      	str	r2, [r3, #28]
 800d142:	e029      	b.n	800d198 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d144:	693b      	ldr	r3, [r7, #16]
 800d146:	895b      	ldrh	r3, [r3, #10]
 800d148:	031b      	lsls	r3, r3, #12
 800d14a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d14c:	e019      	b.n	800d182 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	6979      	ldr	r1, [r7, #20]
 800d152:	4618      	mov	r0, r3
 800d154:	f7ff fd01 	bl	800cb5a <get_fat>
 800d158:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d15a:	697b      	ldr	r3, [r7, #20]
 800d15c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d160:	d101      	bne.n	800d166 <dir_sdi+0x88>
 800d162:	2301      	movs	r3, #1
 800d164:	e032      	b.n	800d1cc <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d166:	697b      	ldr	r3, [r7, #20]
 800d168:	2b01      	cmp	r3, #1
 800d16a:	d904      	bls.n	800d176 <dir_sdi+0x98>
 800d16c:	693b      	ldr	r3, [r7, #16]
 800d16e:	699b      	ldr	r3, [r3, #24]
 800d170:	697a      	ldr	r2, [r7, #20]
 800d172:	429a      	cmp	r2, r3
 800d174:	d301      	bcc.n	800d17a <dir_sdi+0x9c>
 800d176:	2302      	movs	r3, #2
 800d178:	e028      	b.n	800d1cc <dir_sdi+0xee>
			ofs -= csz;
 800d17a:	683a      	ldr	r2, [r7, #0]
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	1ad3      	subs	r3, r2, r3
 800d180:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d182:	683a      	ldr	r2, [r7, #0]
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	429a      	cmp	r2, r3
 800d188:	d2e1      	bcs.n	800d14e <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800d18a:	6979      	ldr	r1, [r7, #20]
 800d18c:	6938      	ldr	r0, [r7, #16]
 800d18e:	f7ff fcc5 	bl	800cb1c <clust2sect>
 800d192:	4602      	mov	r2, r0
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	697a      	ldr	r2, [r7, #20]
 800d19c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	69db      	ldr	r3, [r3, #28]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d101      	bne.n	800d1aa <dir_sdi+0xcc>
 800d1a6:	2302      	movs	r3, #2
 800d1a8:	e010      	b.n	800d1cc <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	69da      	ldr	r2, [r3, #28]
 800d1ae:	683b      	ldr	r3, [r7, #0]
 800d1b0:	0b1b      	lsrs	r3, r3, #12
 800d1b2:	441a      	add	r2, r3
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d1b8:	693b      	ldr	r3, [r7, #16]
 800d1ba:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d1be:	683b      	ldr	r3, [r7, #0]
 800d1c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d1c4:	441a      	add	r2, r3
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d1ca:	2300      	movs	r3, #0
}
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	3718      	adds	r7, #24
 800d1d0:	46bd      	mov	sp, r7
 800d1d2:	bd80      	pop	{r7, pc}

0800d1d4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	b086      	sub	sp, #24
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	6078      	str	r0, [r7, #4]
 800d1dc:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	695b      	ldr	r3, [r3, #20]
 800d1e8:	3320      	adds	r3, #32
 800d1ea:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	69db      	ldr	r3, [r3, #28]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d003      	beq.n	800d1fc <dir_next+0x28>
 800d1f4:	68bb      	ldr	r3, [r7, #8]
 800d1f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d1fa:	d301      	bcc.n	800d200 <dir_next+0x2c>
 800d1fc:	2304      	movs	r3, #4
 800d1fe:	e0aa      	b.n	800d356 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d200:	68bb      	ldr	r3, [r7, #8]
 800d202:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d206:	2b00      	cmp	r3, #0
 800d208:	f040 8098 	bne.w	800d33c <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	69db      	ldr	r3, [r3, #28]
 800d210:	1c5a      	adds	r2, r3, #1
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	699b      	ldr	r3, [r3, #24]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d10b      	bne.n	800d236 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d21e:	68bb      	ldr	r3, [r7, #8]
 800d220:	095b      	lsrs	r3, r3, #5
 800d222:	68fa      	ldr	r2, [r7, #12]
 800d224:	8912      	ldrh	r2, [r2, #8]
 800d226:	4293      	cmp	r3, r2
 800d228:	f0c0 8088 	bcc.w	800d33c <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	2200      	movs	r2, #0
 800d230:	61da      	str	r2, [r3, #28]
 800d232:	2304      	movs	r3, #4
 800d234:	e08f      	b.n	800d356 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d236:	68bb      	ldr	r3, [r7, #8]
 800d238:	0b1b      	lsrs	r3, r3, #12
 800d23a:	68fa      	ldr	r2, [r7, #12]
 800d23c:	8952      	ldrh	r2, [r2, #10]
 800d23e:	3a01      	subs	r2, #1
 800d240:	4013      	ands	r3, r2
 800d242:	2b00      	cmp	r3, #0
 800d244:	d17a      	bne.n	800d33c <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d246:	687a      	ldr	r2, [r7, #4]
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	699b      	ldr	r3, [r3, #24]
 800d24c:	4619      	mov	r1, r3
 800d24e:	4610      	mov	r0, r2
 800d250:	f7ff fc83 	bl	800cb5a <get_fat>
 800d254:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d256:	697b      	ldr	r3, [r7, #20]
 800d258:	2b01      	cmp	r3, #1
 800d25a:	d801      	bhi.n	800d260 <dir_next+0x8c>
 800d25c:	2302      	movs	r3, #2
 800d25e:	e07a      	b.n	800d356 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d260:	697b      	ldr	r3, [r7, #20]
 800d262:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d266:	d101      	bne.n	800d26c <dir_next+0x98>
 800d268:	2301      	movs	r3, #1
 800d26a:	e074      	b.n	800d356 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	699b      	ldr	r3, [r3, #24]
 800d270:	697a      	ldr	r2, [r7, #20]
 800d272:	429a      	cmp	r2, r3
 800d274:	d358      	bcc.n	800d328 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800d276:	683b      	ldr	r3, [r7, #0]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d104      	bne.n	800d286 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	2200      	movs	r2, #0
 800d280:	61da      	str	r2, [r3, #28]
 800d282:	2304      	movs	r3, #4
 800d284:	e067      	b.n	800d356 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800d286:	687a      	ldr	r2, [r7, #4]
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	699b      	ldr	r3, [r3, #24]
 800d28c:	4619      	mov	r1, r3
 800d28e:	4610      	mov	r0, r2
 800d290:	f7ff fe59 	bl	800cf46 <create_chain>
 800d294:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d296:	697b      	ldr	r3, [r7, #20]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d101      	bne.n	800d2a0 <dir_next+0xcc>
 800d29c:	2307      	movs	r3, #7
 800d29e:	e05a      	b.n	800d356 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800d2a0:	697b      	ldr	r3, [r7, #20]
 800d2a2:	2b01      	cmp	r3, #1
 800d2a4:	d101      	bne.n	800d2aa <dir_next+0xd6>
 800d2a6:	2302      	movs	r3, #2
 800d2a8:	e055      	b.n	800d356 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d2aa:	697b      	ldr	r3, [r7, #20]
 800d2ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2b0:	d101      	bne.n	800d2b6 <dir_next+0xe2>
 800d2b2:	2301      	movs	r3, #1
 800d2b4:	e04f      	b.n	800d356 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800d2b6:	68f8      	ldr	r0, [r7, #12]
 800d2b8:	f7ff fb50 	bl	800c95c <sync_window>
 800d2bc:	4603      	mov	r3, r0
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d001      	beq.n	800d2c6 <dir_next+0xf2>
 800d2c2:	2301      	movs	r3, #1
 800d2c4:	e047      	b.n	800d356 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	3334      	adds	r3, #52	; 0x34
 800d2ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d2ce:	2100      	movs	r1, #0
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	f7ff f97a 	bl	800c5ca <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	613b      	str	r3, [r7, #16]
 800d2da:	6979      	ldr	r1, [r7, #20]
 800d2dc:	68f8      	ldr	r0, [r7, #12]
 800d2de:	f7ff fc1d 	bl	800cb1c <clust2sect>
 800d2e2:	4602      	mov	r2, r0
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	631a      	str	r2, [r3, #48]	; 0x30
 800d2e8:	e012      	b.n	800d310 <dir_next+0x13c>
						fs->wflag = 1;
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	2201      	movs	r2, #1
 800d2ee:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800d2f0:	68f8      	ldr	r0, [r7, #12]
 800d2f2:	f7ff fb33 	bl	800c95c <sync_window>
 800d2f6:	4603      	mov	r3, r0
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d001      	beq.n	800d300 <dir_next+0x12c>
 800d2fc:	2301      	movs	r3, #1
 800d2fe:	e02a      	b.n	800d356 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d300:	693b      	ldr	r3, [r7, #16]
 800d302:	3301      	adds	r3, #1
 800d304:	613b      	str	r3, [r7, #16]
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d30a:	1c5a      	adds	r2, r3, #1
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	631a      	str	r2, [r3, #48]	; 0x30
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	895b      	ldrh	r3, [r3, #10]
 800d314:	461a      	mov	r2, r3
 800d316:	693b      	ldr	r3, [r7, #16]
 800d318:	4293      	cmp	r3, r2
 800d31a:	d3e6      	bcc.n	800d2ea <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d320:	693b      	ldr	r3, [r7, #16]
 800d322:	1ad2      	subs	r2, r2, r3
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	697a      	ldr	r2, [r7, #20]
 800d32c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800d32e:	6979      	ldr	r1, [r7, #20]
 800d330:	68f8      	ldr	r0, [r7, #12]
 800d332:	f7ff fbf3 	bl	800cb1c <clust2sect>
 800d336:	4602      	mov	r2, r0
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	68ba      	ldr	r2, [r7, #8]
 800d340:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d348:	68bb      	ldr	r3, [r7, #8]
 800d34a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d34e:	441a      	add	r2, r3
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d354:	2300      	movs	r3, #0
}
 800d356:	4618      	mov	r0, r3
 800d358:	3718      	adds	r7, #24
 800d35a:	46bd      	mov	sp, r7
 800d35c:	bd80      	pop	{r7, pc}

0800d35e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800d35e:	b580      	push	{r7, lr}
 800d360:	b086      	sub	sp, #24
 800d362:	af00      	add	r7, sp, #0
 800d364:	6078      	str	r0, [r7, #4]
 800d366:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800d36e:	2100      	movs	r1, #0
 800d370:	6878      	ldr	r0, [r7, #4]
 800d372:	f7ff feb4 	bl	800d0de <dir_sdi>
 800d376:	4603      	mov	r3, r0
 800d378:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d37a:	7dfb      	ldrb	r3, [r7, #23]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d12b      	bne.n	800d3d8 <dir_alloc+0x7a>
		n = 0;
 800d380:	2300      	movs	r3, #0
 800d382:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	69db      	ldr	r3, [r3, #28]
 800d388:	4619      	mov	r1, r3
 800d38a:	68f8      	ldr	r0, [r7, #12]
 800d38c:	f7ff fb2a 	bl	800c9e4 <move_window>
 800d390:	4603      	mov	r3, r0
 800d392:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d394:	7dfb      	ldrb	r3, [r7, #23]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d11d      	bne.n	800d3d6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	6a1b      	ldr	r3, [r3, #32]
 800d39e:	781b      	ldrb	r3, [r3, #0]
 800d3a0:	2be5      	cmp	r3, #229	; 0xe5
 800d3a2:	d004      	beq.n	800d3ae <dir_alloc+0x50>
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	6a1b      	ldr	r3, [r3, #32]
 800d3a8:	781b      	ldrb	r3, [r3, #0]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d107      	bne.n	800d3be <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800d3ae:	693b      	ldr	r3, [r7, #16]
 800d3b0:	3301      	adds	r3, #1
 800d3b2:	613b      	str	r3, [r7, #16]
 800d3b4:	693a      	ldr	r2, [r7, #16]
 800d3b6:	683b      	ldr	r3, [r7, #0]
 800d3b8:	429a      	cmp	r2, r3
 800d3ba:	d102      	bne.n	800d3c2 <dir_alloc+0x64>
 800d3bc:	e00c      	b.n	800d3d8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800d3be:	2300      	movs	r3, #0
 800d3c0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800d3c2:	2101      	movs	r1, #1
 800d3c4:	6878      	ldr	r0, [r7, #4]
 800d3c6:	f7ff ff05 	bl	800d1d4 <dir_next>
 800d3ca:	4603      	mov	r3, r0
 800d3cc:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800d3ce:	7dfb      	ldrb	r3, [r7, #23]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d0d7      	beq.n	800d384 <dir_alloc+0x26>
 800d3d4:	e000      	b.n	800d3d8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800d3d6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800d3d8:	7dfb      	ldrb	r3, [r7, #23]
 800d3da:	2b04      	cmp	r3, #4
 800d3dc:	d101      	bne.n	800d3e2 <dir_alloc+0x84>
 800d3de:	2307      	movs	r3, #7
 800d3e0:	75fb      	strb	r3, [r7, #23]
	return res;
 800d3e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	3718      	adds	r7, #24
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	bd80      	pop	{r7, pc}

0800d3ec <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b084      	sub	sp, #16
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	6078      	str	r0, [r7, #4]
 800d3f4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800d3f6:	683b      	ldr	r3, [r7, #0]
 800d3f8:	331a      	adds	r3, #26
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	f7ff f842 	bl	800c484 <ld_word>
 800d400:	4603      	mov	r3, r0
 800d402:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	781b      	ldrb	r3, [r3, #0]
 800d408:	2b03      	cmp	r3, #3
 800d40a:	d109      	bne.n	800d420 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d40c:	683b      	ldr	r3, [r7, #0]
 800d40e:	3314      	adds	r3, #20
 800d410:	4618      	mov	r0, r3
 800d412:	f7ff f837 	bl	800c484 <ld_word>
 800d416:	4603      	mov	r3, r0
 800d418:	041b      	lsls	r3, r3, #16
 800d41a:	68fa      	ldr	r2, [r7, #12]
 800d41c:	4313      	orrs	r3, r2
 800d41e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800d420:	68fb      	ldr	r3, [r7, #12]
}
 800d422:	4618      	mov	r0, r3
 800d424:	3710      	adds	r7, #16
 800d426:	46bd      	mov	sp, r7
 800d428:	bd80      	pop	{r7, pc}

0800d42a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800d42a:	b580      	push	{r7, lr}
 800d42c:	b084      	sub	sp, #16
 800d42e:	af00      	add	r7, sp, #0
 800d430:	60f8      	str	r0, [r7, #12]
 800d432:	60b9      	str	r1, [r7, #8]
 800d434:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800d436:	68bb      	ldr	r3, [r7, #8]
 800d438:	331a      	adds	r3, #26
 800d43a:	687a      	ldr	r2, [r7, #4]
 800d43c:	b292      	uxth	r2, r2
 800d43e:	4611      	mov	r1, r2
 800d440:	4618      	mov	r0, r3
 800d442:	f7ff f85a 	bl	800c4fa <st_word>
	if (fs->fs_type == FS_FAT32) {
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	781b      	ldrb	r3, [r3, #0]
 800d44a:	2b03      	cmp	r3, #3
 800d44c:	d109      	bne.n	800d462 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800d44e:	68bb      	ldr	r3, [r7, #8]
 800d450:	f103 0214 	add.w	r2, r3, #20
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	0c1b      	lsrs	r3, r3, #16
 800d458:	b29b      	uxth	r3, r3
 800d45a:	4619      	mov	r1, r3
 800d45c:	4610      	mov	r0, r2
 800d45e:	f7ff f84c 	bl	800c4fa <st_word>
	}
}
 800d462:	bf00      	nop
 800d464:	3710      	adds	r7, #16
 800d466:	46bd      	mov	sp, r7
 800d468:	bd80      	pop	{r7, pc}
	...

0800d46c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800d46c:	b590      	push	{r4, r7, lr}
 800d46e:	b087      	sub	sp, #28
 800d470:	af00      	add	r7, sp, #0
 800d472:	6078      	str	r0, [r7, #4]
 800d474:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800d476:	683b      	ldr	r3, [r7, #0]
 800d478:	331a      	adds	r3, #26
 800d47a:	4618      	mov	r0, r3
 800d47c:	f7ff f802 	bl	800c484 <ld_word>
 800d480:	4603      	mov	r3, r0
 800d482:	2b00      	cmp	r3, #0
 800d484:	d001      	beq.n	800d48a <cmp_lfn+0x1e>
 800d486:	2300      	movs	r3, #0
 800d488:	e059      	b.n	800d53e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800d48a:	683b      	ldr	r3, [r7, #0]
 800d48c:	781b      	ldrb	r3, [r3, #0]
 800d48e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d492:	1e5a      	subs	r2, r3, #1
 800d494:	4613      	mov	r3, r2
 800d496:	005b      	lsls	r3, r3, #1
 800d498:	4413      	add	r3, r2
 800d49a:	009b      	lsls	r3, r3, #2
 800d49c:	4413      	add	r3, r2
 800d49e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d4a0:	2301      	movs	r3, #1
 800d4a2:	81fb      	strh	r3, [r7, #14]
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	613b      	str	r3, [r7, #16]
 800d4a8:	e033      	b.n	800d512 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800d4aa:	4a27      	ldr	r2, [pc, #156]	; (800d548 <cmp_lfn+0xdc>)
 800d4ac:	693b      	ldr	r3, [r7, #16]
 800d4ae:	4413      	add	r3, r2
 800d4b0:	781b      	ldrb	r3, [r3, #0]
 800d4b2:	461a      	mov	r2, r3
 800d4b4:	683b      	ldr	r3, [r7, #0]
 800d4b6:	4413      	add	r3, r2
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	f7fe ffe3 	bl	800c484 <ld_word>
 800d4be:	4603      	mov	r3, r0
 800d4c0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800d4c2:	89fb      	ldrh	r3, [r7, #14]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d01a      	beq.n	800d4fe <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800d4c8:	697b      	ldr	r3, [r7, #20]
 800d4ca:	2bfe      	cmp	r3, #254	; 0xfe
 800d4cc:	d812      	bhi.n	800d4f4 <cmp_lfn+0x88>
 800d4ce:	89bb      	ldrh	r3, [r7, #12]
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	f002 fc55 	bl	800fd80 <ff_wtoupper>
 800d4d6:	4603      	mov	r3, r0
 800d4d8:	461c      	mov	r4, r3
 800d4da:	697b      	ldr	r3, [r7, #20]
 800d4dc:	1c5a      	adds	r2, r3, #1
 800d4de:	617a      	str	r2, [r7, #20]
 800d4e0:	005b      	lsls	r3, r3, #1
 800d4e2:	687a      	ldr	r2, [r7, #4]
 800d4e4:	4413      	add	r3, r2
 800d4e6:	881b      	ldrh	r3, [r3, #0]
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	f002 fc49 	bl	800fd80 <ff_wtoupper>
 800d4ee:	4603      	mov	r3, r0
 800d4f0:	429c      	cmp	r4, r3
 800d4f2:	d001      	beq.n	800d4f8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	e022      	b.n	800d53e <cmp_lfn+0xd2>
			}
			wc = uc;
 800d4f8:	89bb      	ldrh	r3, [r7, #12]
 800d4fa:	81fb      	strh	r3, [r7, #14]
 800d4fc:	e006      	b.n	800d50c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d4fe:	89bb      	ldrh	r3, [r7, #12]
 800d500:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d504:	4293      	cmp	r3, r2
 800d506:	d001      	beq.n	800d50c <cmp_lfn+0xa0>
 800d508:	2300      	movs	r3, #0
 800d50a:	e018      	b.n	800d53e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d50c:	693b      	ldr	r3, [r7, #16]
 800d50e:	3301      	adds	r3, #1
 800d510:	613b      	str	r3, [r7, #16]
 800d512:	693b      	ldr	r3, [r7, #16]
 800d514:	2b0c      	cmp	r3, #12
 800d516:	d9c8      	bls.n	800d4aa <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800d518:	683b      	ldr	r3, [r7, #0]
 800d51a:	781b      	ldrb	r3, [r3, #0]
 800d51c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d520:	2b00      	cmp	r3, #0
 800d522:	d00b      	beq.n	800d53c <cmp_lfn+0xd0>
 800d524:	89fb      	ldrh	r3, [r7, #14]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d008      	beq.n	800d53c <cmp_lfn+0xd0>
 800d52a:	697b      	ldr	r3, [r7, #20]
 800d52c:	005b      	lsls	r3, r3, #1
 800d52e:	687a      	ldr	r2, [r7, #4]
 800d530:	4413      	add	r3, r2
 800d532:	881b      	ldrh	r3, [r3, #0]
 800d534:	2b00      	cmp	r3, #0
 800d536:	d001      	beq.n	800d53c <cmp_lfn+0xd0>
 800d538:	2300      	movs	r3, #0
 800d53a:	e000      	b.n	800d53e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800d53c:	2301      	movs	r3, #1
}
 800d53e:	4618      	mov	r0, r3
 800d540:	371c      	adds	r7, #28
 800d542:	46bd      	mov	sp, r7
 800d544:	bd90      	pop	{r4, r7, pc}
 800d546:	bf00      	nop
 800d548:	08013a78 	.word	0x08013a78

0800d54c <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800d54c:	b580      	push	{r7, lr}
 800d54e:	b086      	sub	sp, #24
 800d550:	af00      	add	r7, sp, #0
 800d552:	6078      	str	r0, [r7, #4]
 800d554:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800d556:	683b      	ldr	r3, [r7, #0]
 800d558:	331a      	adds	r3, #26
 800d55a:	4618      	mov	r0, r3
 800d55c:	f7fe ff92 	bl	800c484 <ld_word>
 800d560:	4603      	mov	r3, r0
 800d562:	2b00      	cmp	r3, #0
 800d564:	d001      	beq.n	800d56a <pick_lfn+0x1e>
 800d566:	2300      	movs	r3, #0
 800d568:	e04d      	b.n	800d606 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800d56a:	683b      	ldr	r3, [r7, #0]
 800d56c:	781b      	ldrb	r3, [r3, #0]
 800d56e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d572:	1e5a      	subs	r2, r3, #1
 800d574:	4613      	mov	r3, r2
 800d576:	005b      	lsls	r3, r3, #1
 800d578:	4413      	add	r3, r2
 800d57a:	009b      	lsls	r3, r3, #2
 800d57c:	4413      	add	r3, r2
 800d57e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d580:	2301      	movs	r3, #1
 800d582:	81fb      	strh	r3, [r7, #14]
 800d584:	2300      	movs	r3, #0
 800d586:	613b      	str	r3, [r7, #16]
 800d588:	e028      	b.n	800d5dc <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800d58a:	4a21      	ldr	r2, [pc, #132]	; (800d610 <pick_lfn+0xc4>)
 800d58c:	693b      	ldr	r3, [r7, #16]
 800d58e:	4413      	add	r3, r2
 800d590:	781b      	ldrb	r3, [r3, #0]
 800d592:	461a      	mov	r2, r3
 800d594:	683b      	ldr	r3, [r7, #0]
 800d596:	4413      	add	r3, r2
 800d598:	4618      	mov	r0, r3
 800d59a:	f7fe ff73 	bl	800c484 <ld_word>
 800d59e:	4603      	mov	r3, r0
 800d5a0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800d5a2:	89fb      	ldrh	r3, [r7, #14]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d00f      	beq.n	800d5c8 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800d5a8:	697b      	ldr	r3, [r7, #20]
 800d5aa:	2bfe      	cmp	r3, #254	; 0xfe
 800d5ac:	d901      	bls.n	800d5b2 <pick_lfn+0x66>
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	e029      	b.n	800d606 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800d5b2:	89bb      	ldrh	r3, [r7, #12]
 800d5b4:	81fb      	strh	r3, [r7, #14]
 800d5b6:	697b      	ldr	r3, [r7, #20]
 800d5b8:	1c5a      	adds	r2, r3, #1
 800d5ba:	617a      	str	r2, [r7, #20]
 800d5bc:	005b      	lsls	r3, r3, #1
 800d5be:	687a      	ldr	r2, [r7, #4]
 800d5c0:	4413      	add	r3, r2
 800d5c2:	89fa      	ldrh	r2, [r7, #14]
 800d5c4:	801a      	strh	r2, [r3, #0]
 800d5c6:	e006      	b.n	800d5d6 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d5c8:	89bb      	ldrh	r3, [r7, #12]
 800d5ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d5ce:	4293      	cmp	r3, r2
 800d5d0:	d001      	beq.n	800d5d6 <pick_lfn+0x8a>
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	e017      	b.n	800d606 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d5d6:	693b      	ldr	r3, [r7, #16]
 800d5d8:	3301      	adds	r3, #1
 800d5da:	613b      	str	r3, [r7, #16]
 800d5dc:	693b      	ldr	r3, [r7, #16]
 800d5de:	2b0c      	cmp	r3, #12
 800d5e0:	d9d3      	bls.n	800d58a <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800d5e2:	683b      	ldr	r3, [r7, #0]
 800d5e4:	781b      	ldrb	r3, [r3, #0]
 800d5e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d00a      	beq.n	800d604 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800d5ee:	697b      	ldr	r3, [r7, #20]
 800d5f0:	2bfe      	cmp	r3, #254	; 0xfe
 800d5f2:	d901      	bls.n	800d5f8 <pick_lfn+0xac>
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	e006      	b.n	800d606 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800d5f8:	697b      	ldr	r3, [r7, #20]
 800d5fa:	005b      	lsls	r3, r3, #1
 800d5fc:	687a      	ldr	r2, [r7, #4]
 800d5fe:	4413      	add	r3, r2
 800d600:	2200      	movs	r2, #0
 800d602:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800d604:	2301      	movs	r3, #1
}
 800d606:	4618      	mov	r0, r3
 800d608:	3718      	adds	r7, #24
 800d60a:	46bd      	mov	sp, r7
 800d60c:	bd80      	pop	{r7, pc}
 800d60e:	bf00      	nop
 800d610:	08013a78 	.word	0x08013a78

0800d614 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800d614:	b580      	push	{r7, lr}
 800d616:	b088      	sub	sp, #32
 800d618:	af00      	add	r7, sp, #0
 800d61a:	60f8      	str	r0, [r7, #12]
 800d61c:	60b9      	str	r1, [r7, #8]
 800d61e:	4611      	mov	r1, r2
 800d620:	461a      	mov	r2, r3
 800d622:	460b      	mov	r3, r1
 800d624:	71fb      	strb	r3, [r7, #7]
 800d626:	4613      	mov	r3, r2
 800d628:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800d62a:	68bb      	ldr	r3, [r7, #8]
 800d62c:	330d      	adds	r3, #13
 800d62e:	79ba      	ldrb	r2, [r7, #6]
 800d630:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800d632:	68bb      	ldr	r3, [r7, #8]
 800d634:	330b      	adds	r3, #11
 800d636:	220f      	movs	r2, #15
 800d638:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800d63a:	68bb      	ldr	r3, [r7, #8]
 800d63c:	330c      	adds	r3, #12
 800d63e:	2200      	movs	r2, #0
 800d640:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800d642:	68bb      	ldr	r3, [r7, #8]
 800d644:	331a      	adds	r3, #26
 800d646:	2100      	movs	r1, #0
 800d648:	4618      	mov	r0, r3
 800d64a:	f7fe ff56 	bl	800c4fa <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800d64e:	79fb      	ldrb	r3, [r7, #7]
 800d650:	1e5a      	subs	r2, r3, #1
 800d652:	4613      	mov	r3, r2
 800d654:	005b      	lsls	r3, r3, #1
 800d656:	4413      	add	r3, r2
 800d658:	009b      	lsls	r3, r3, #2
 800d65a:	4413      	add	r3, r2
 800d65c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800d65e:	2300      	movs	r3, #0
 800d660:	82fb      	strh	r3, [r7, #22]
 800d662:	2300      	movs	r3, #0
 800d664:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d666:	8afb      	ldrh	r3, [r7, #22]
 800d668:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d66c:	4293      	cmp	r3, r2
 800d66e:	d007      	beq.n	800d680 <put_lfn+0x6c>
 800d670:	69fb      	ldr	r3, [r7, #28]
 800d672:	1c5a      	adds	r2, r3, #1
 800d674:	61fa      	str	r2, [r7, #28]
 800d676:	005b      	lsls	r3, r3, #1
 800d678:	68fa      	ldr	r2, [r7, #12]
 800d67a:	4413      	add	r3, r2
 800d67c:	881b      	ldrh	r3, [r3, #0]
 800d67e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800d680:	4a17      	ldr	r2, [pc, #92]	; (800d6e0 <put_lfn+0xcc>)
 800d682:	69bb      	ldr	r3, [r7, #24]
 800d684:	4413      	add	r3, r2
 800d686:	781b      	ldrb	r3, [r3, #0]
 800d688:	461a      	mov	r2, r3
 800d68a:	68bb      	ldr	r3, [r7, #8]
 800d68c:	4413      	add	r3, r2
 800d68e:	8afa      	ldrh	r2, [r7, #22]
 800d690:	4611      	mov	r1, r2
 800d692:	4618      	mov	r0, r3
 800d694:	f7fe ff31 	bl	800c4fa <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800d698:	8afb      	ldrh	r3, [r7, #22]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d102      	bne.n	800d6a4 <put_lfn+0x90>
 800d69e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d6a2:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800d6a4:	69bb      	ldr	r3, [r7, #24]
 800d6a6:	3301      	adds	r3, #1
 800d6a8:	61bb      	str	r3, [r7, #24]
 800d6aa:	69bb      	ldr	r3, [r7, #24]
 800d6ac:	2b0c      	cmp	r3, #12
 800d6ae:	d9da      	bls.n	800d666 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800d6b0:	8afb      	ldrh	r3, [r7, #22]
 800d6b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d6b6:	4293      	cmp	r3, r2
 800d6b8:	d006      	beq.n	800d6c8 <put_lfn+0xb4>
 800d6ba:	69fb      	ldr	r3, [r7, #28]
 800d6bc:	005b      	lsls	r3, r3, #1
 800d6be:	68fa      	ldr	r2, [r7, #12]
 800d6c0:	4413      	add	r3, r2
 800d6c2:	881b      	ldrh	r3, [r3, #0]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d103      	bne.n	800d6d0 <put_lfn+0xbc>
 800d6c8:	79fb      	ldrb	r3, [r7, #7]
 800d6ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d6ce:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800d6d0:	68bb      	ldr	r3, [r7, #8]
 800d6d2:	79fa      	ldrb	r2, [r7, #7]
 800d6d4:	701a      	strb	r2, [r3, #0]
}
 800d6d6:	bf00      	nop
 800d6d8:	3720      	adds	r7, #32
 800d6da:	46bd      	mov	sp, r7
 800d6dc:	bd80      	pop	{r7, pc}
 800d6de:	bf00      	nop
 800d6e0:	08013a78 	.word	0x08013a78

0800d6e4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800d6e4:	b580      	push	{r7, lr}
 800d6e6:	b08c      	sub	sp, #48	; 0x30
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	60f8      	str	r0, [r7, #12]
 800d6ec:	60b9      	str	r1, [r7, #8]
 800d6ee:	607a      	str	r2, [r7, #4]
 800d6f0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800d6f2:	220b      	movs	r2, #11
 800d6f4:	68b9      	ldr	r1, [r7, #8]
 800d6f6:	68f8      	ldr	r0, [r7, #12]
 800d6f8:	f7fe ff46 	bl	800c588 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800d6fc:	683b      	ldr	r3, [r7, #0]
 800d6fe:	2b05      	cmp	r3, #5
 800d700:	d929      	bls.n	800d756 <gen_numname+0x72>
		sr = seq;
 800d702:	683b      	ldr	r3, [r7, #0]
 800d704:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800d706:	e020      	b.n	800d74a <gen_numname+0x66>
			wc = *lfn++;
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	1c9a      	adds	r2, r3, #2
 800d70c:	607a      	str	r2, [r7, #4]
 800d70e:	881b      	ldrh	r3, [r3, #0]
 800d710:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800d712:	2300      	movs	r3, #0
 800d714:	62bb      	str	r3, [r7, #40]	; 0x28
 800d716:	e015      	b.n	800d744 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800d718:	69fb      	ldr	r3, [r7, #28]
 800d71a:	005a      	lsls	r2, r3, #1
 800d71c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d71e:	f003 0301 	and.w	r3, r3, #1
 800d722:	4413      	add	r3, r2
 800d724:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800d726:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d728:	085b      	lsrs	r3, r3, #1
 800d72a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800d72c:	69fb      	ldr	r3, [r7, #28]
 800d72e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d732:	2b00      	cmp	r3, #0
 800d734:	d003      	beq.n	800d73e <gen_numname+0x5a>
 800d736:	69fa      	ldr	r2, [r7, #28]
 800d738:	4b31      	ldr	r3, [pc, #196]	; (800d800 <gen_numname+0x11c>)
 800d73a:	4053      	eors	r3, r2
 800d73c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800d73e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d740:	3301      	adds	r3, #1
 800d742:	62bb      	str	r3, [r7, #40]	; 0x28
 800d744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d746:	2b0f      	cmp	r3, #15
 800d748:	d9e6      	bls.n	800d718 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	881b      	ldrh	r3, [r3, #0]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d1da      	bne.n	800d708 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800d752:	69fb      	ldr	r3, [r7, #28]
 800d754:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800d756:	2307      	movs	r3, #7
 800d758:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800d75a:	683b      	ldr	r3, [r7, #0]
 800d75c:	b2db      	uxtb	r3, r3
 800d75e:	f003 030f 	and.w	r3, r3, #15
 800d762:	b2db      	uxtb	r3, r3
 800d764:	3330      	adds	r3, #48	; 0x30
 800d766:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800d76a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d76e:	2b39      	cmp	r3, #57	; 0x39
 800d770:	d904      	bls.n	800d77c <gen_numname+0x98>
 800d772:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d776:	3307      	adds	r3, #7
 800d778:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800d77c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d77e:	1e5a      	subs	r2, r3, #1
 800d780:	62ba      	str	r2, [r7, #40]	; 0x28
 800d782:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800d786:	4413      	add	r3, r2
 800d788:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800d78c:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800d790:	683b      	ldr	r3, [r7, #0]
 800d792:	091b      	lsrs	r3, r3, #4
 800d794:	603b      	str	r3, [r7, #0]
	} while (seq);
 800d796:	683b      	ldr	r3, [r7, #0]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d1de      	bne.n	800d75a <gen_numname+0x76>
	ns[i] = '~';
 800d79c:	f107 0214 	add.w	r2, r7, #20
 800d7a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7a2:	4413      	add	r3, r2
 800d7a4:	227e      	movs	r2, #126	; 0x7e
 800d7a6:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	627b      	str	r3, [r7, #36]	; 0x24
 800d7ac:	e002      	b.n	800d7b4 <gen_numname+0xd0>
 800d7ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7b0:	3301      	adds	r3, #1
 800d7b2:	627b      	str	r3, [r7, #36]	; 0x24
 800d7b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d7b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7b8:	429a      	cmp	r2, r3
 800d7ba:	d205      	bcs.n	800d7c8 <gen_numname+0xe4>
 800d7bc:	68fa      	ldr	r2, [r7, #12]
 800d7be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7c0:	4413      	add	r3, r2
 800d7c2:	781b      	ldrb	r3, [r3, #0]
 800d7c4:	2b20      	cmp	r3, #32
 800d7c6:	d1f2      	bne.n	800d7ae <gen_numname+0xca>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d7c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7ca:	2b07      	cmp	r3, #7
 800d7cc:	d808      	bhi.n	800d7e0 <gen_numname+0xfc>
 800d7ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7d0:	1c5a      	adds	r2, r3, #1
 800d7d2:	62ba      	str	r2, [r7, #40]	; 0x28
 800d7d4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800d7d8:	4413      	add	r3, r2
 800d7da:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800d7de:	e000      	b.n	800d7e2 <gen_numname+0xfe>
 800d7e0:	2120      	movs	r1, #32
 800d7e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7e4:	1c5a      	adds	r2, r3, #1
 800d7e6:	627a      	str	r2, [r7, #36]	; 0x24
 800d7e8:	68fa      	ldr	r2, [r7, #12]
 800d7ea:	4413      	add	r3, r2
 800d7ec:	460a      	mov	r2, r1
 800d7ee:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800d7f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7f2:	2b07      	cmp	r3, #7
 800d7f4:	d9e8      	bls.n	800d7c8 <gen_numname+0xe4>
}
 800d7f6:	bf00      	nop
 800d7f8:	3730      	adds	r7, #48	; 0x30
 800d7fa:	46bd      	mov	sp, r7
 800d7fc:	bd80      	pop	{r7, pc}
 800d7fe:	bf00      	nop
 800d800:	00011021 	.word	0x00011021

0800d804 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800d804:	b480      	push	{r7}
 800d806:	b085      	sub	sp, #20
 800d808:	af00      	add	r7, sp, #0
 800d80a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800d80c:	2300      	movs	r3, #0
 800d80e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800d810:	230b      	movs	r3, #11
 800d812:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800d814:	7bfb      	ldrb	r3, [r7, #15]
 800d816:	b2da      	uxtb	r2, r3
 800d818:	0852      	lsrs	r2, r2, #1
 800d81a:	01db      	lsls	r3, r3, #7
 800d81c:	4313      	orrs	r3, r2
 800d81e:	b2da      	uxtb	r2, r3
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	1c59      	adds	r1, r3, #1
 800d824:	6079      	str	r1, [r7, #4]
 800d826:	781b      	ldrb	r3, [r3, #0]
 800d828:	4413      	add	r3, r2
 800d82a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800d82c:	68bb      	ldr	r3, [r7, #8]
 800d82e:	3b01      	subs	r3, #1
 800d830:	60bb      	str	r3, [r7, #8]
 800d832:	68bb      	ldr	r3, [r7, #8]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d1ed      	bne.n	800d814 <sum_sfn+0x10>
	return sum;
 800d838:	7bfb      	ldrb	r3, [r7, #15]
}
 800d83a:	4618      	mov	r0, r3
 800d83c:	3714      	adds	r7, #20
 800d83e:	46bd      	mov	sp, r7
 800d840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d844:	4770      	bx	lr

0800d846 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800d846:	b580      	push	{r7, lr}
 800d848:	b086      	sub	sp, #24
 800d84a:	af00      	add	r7, sp, #0
 800d84c:	6078      	str	r0, [r7, #4]
 800d84e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800d850:	2304      	movs	r3, #4
 800d852:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800d85a:	23ff      	movs	r3, #255	; 0xff
 800d85c:	757b      	strb	r3, [r7, #21]
 800d85e:	23ff      	movs	r3, #255	; 0xff
 800d860:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800d862:	e081      	b.n	800d968 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	69db      	ldr	r3, [r3, #28]
 800d868:	4619      	mov	r1, r3
 800d86a:	6938      	ldr	r0, [r7, #16]
 800d86c:	f7ff f8ba 	bl	800c9e4 <move_window>
 800d870:	4603      	mov	r3, r0
 800d872:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d874:	7dfb      	ldrb	r3, [r7, #23]
 800d876:	2b00      	cmp	r3, #0
 800d878:	d17c      	bne.n	800d974 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	6a1b      	ldr	r3, [r3, #32]
 800d87e:	781b      	ldrb	r3, [r3, #0]
 800d880:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800d882:	7dbb      	ldrb	r3, [r7, #22]
 800d884:	2b00      	cmp	r3, #0
 800d886:	d102      	bne.n	800d88e <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800d888:	2304      	movs	r3, #4
 800d88a:	75fb      	strb	r3, [r7, #23]
 800d88c:	e077      	b.n	800d97e <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	6a1b      	ldr	r3, [r3, #32]
 800d892:	330b      	adds	r3, #11
 800d894:	781b      	ldrb	r3, [r3, #0]
 800d896:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d89a:	73fb      	strb	r3, [r7, #15]
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	7bfa      	ldrb	r2, [r7, #15]
 800d8a0:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800d8a2:	7dbb      	ldrb	r3, [r7, #22]
 800d8a4:	2be5      	cmp	r3, #229	; 0xe5
 800d8a6:	d00e      	beq.n	800d8c6 <dir_read+0x80>
 800d8a8:	7dbb      	ldrb	r3, [r7, #22]
 800d8aa:	2b2e      	cmp	r3, #46	; 0x2e
 800d8ac:	d00b      	beq.n	800d8c6 <dir_read+0x80>
 800d8ae:	7bfb      	ldrb	r3, [r7, #15]
 800d8b0:	f023 0320 	bic.w	r3, r3, #32
 800d8b4:	2b08      	cmp	r3, #8
 800d8b6:	bf0c      	ite	eq
 800d8b8:	2301      	moveq	r3, #1
 800d8ba:	2300      	movne	r3, #0
 800d8bc:	b2db      	uxtb	r3, r3
 800d8be:	461a      	mov	r2, r3
 800d8c0:	683b      	ldr	r3, [r7, #0]
 800d8c2:	4293      	cmp	r3, r2
 800d8c4:	d002      	beq.n	800d8cc <dir_read+0x86>
				ord = 0xFF;
 800d8c6:	23ff      	movs	r3, #255	; 0xff
 800d8c8:	757b      	strb	r3, [r7, #21]
 800d8ca:	e044      	b.n	800d956 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800d8cc:	7bfb      	ldrb	r3, [r7, #15]
 800d8ce:	2b0f      	cmp	r3, #15
 800d8d0:	d12f      	bne.n	800d932 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800d8d2:	7dbb      	ldrb	r3, [r7, #22]
 800d8d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d00d      	beq.n	800d8f8 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	6a1b      	ldr	r3, [r3, #32]
 800d8e0:	7b5b      	ldrb	r3, [r3, #13]
 800d8e2:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800d8e4:	7dbb      	ldrb	r3, [r7, #22]
 800d8e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d8ea:	75bb      	strb	r3, [r7, #22]
 800d8ec:	7dbb      	ldrb	r3, [r7, #22]
 800d8ee:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	695a      	ldr	r2, [r3, #20]
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d8f8:	7dba      	ldrb	r2, [r7, #22]
 800d8fa:	7d7b      	ldrb	r3, [r7, #21]
 800d8fc:	429a      	cmp	r2, r3
 800d8fe:	d115      	bne.n	800d92c <dir_read+0xe6>
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	6a1b      	ldr	r3, [r3, #32]
 800d904:	330d      	adds	r3, #13
 800d906:	781b      	ldrb	r3, [r3, #0]
 800d908:	7d3a      	ldrb	r2, [r7, #20]
 800d90a:	429a      	cmp	r2, r3
 800d90c:	d10e      	bne.n	800d92c <dir_read+0xe6>
 800d90e:	693b      	ldr	r3, [r7, #16]
 800d910:	68da      	ldr	r2, [r3, #12]
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	6a1b      	ldr	r3, [r3, #32]
 800d916:	4619      	mov	r1, r3
 800d918:	4610      	mov	r0, r2
 800d91a:	f7ff fe17 	bl	800d54c <pick_lfn>
 800d91e:	4603      	mov	r3, r0
 800d920:	2b00      	cmp	r3, #0
 800d922:	d003      	beq.n	800d92c <dir_read+0xe6>
 800d924:	7d7b      	ldrb	r3, [r7, #21]
 800d926:	3b01      	subs	r3, #1
 800d928:	b2db      	uxtb	r3, r3
 800d92a:	e000      	b.n	800d92e <dir_read+0xe8>
 800d92c:	23ff      	movs	r3, #255	; 0xff
 800d92e:	757b      	strb	r3, [r7, #21]
 800d930:	e011      	b.n	800d956 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800d932:	7d7b      	ldrb	r3, [r7, #21]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d109      	bne.n	800d94c <dir_read+0x106>
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	6a1b      	ldr	r3, [r3, #32]
 800d93c:	4618      	mov	r0, r3
 800d93e:	f7ff ff61 	bl	800d804 <sum_sfn>
 800d942:	4603      	mov	r3, r0
 800d944:	461a      	mov	r2, r3
 800d946:	7d3b      	ldrb	r3, [r7, #20]
 800d948:	4293      	cmp	r3, r2
 800d94a:	d015      	beq.n	800d978 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	f04f 32ff 	mov.w	r2, #4294967295
 800d952:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800d954:	e010      	b.n	800d978 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800d956:	2100      	movs	r1, #0
 800d958:	6878      	ldr	r0, [r7, #4]
 800d95a:	f7ff fc3b 	bl	800d1d4 <dir_next>
 800d95e:	4603      	mov	r3, r0
 800d960:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d962:	7dfb      	ldrb	r3, [r7, #23]
 800d964:	2b00      	cmp	r3, #0
 800d966:	d109      	bne.n	800d97c <dir_read+0x136>
	while (dp->sect) {
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	69db      	ldr	r3, [r3, #28]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	f47f af79 	bne.w	800d864 <dir_read+0x1e>
 800d972:	e004      	b.n	800d97e <dir_read+0x138>
		if (res != FR_OK) break;
 800d974:	bf00      	nop
 800d976:	e002      	b.n	800d97e <dir_read+0x138>
					break;
 800d978:	bf00      	nop
 800d97a:	e000      	b.n	800d97e <dir_read+0x138>
		if (res != FR_OK) break;
 800d97c:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800d97e:	7dfb      	ldrb	r3, [r7, #23]
 800d980:	2b00      	cmp	r3, #0
 800d982:	d002      	beq.n	800d98a <dir_read+0x144>
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	2200      	movs	r2, #0
 800d988:	61da      	str	r2, [r3, #28]
	return res;
 800d98a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d98c:	4618      	mov	r0, r3
 800d98e:	3718      	adds	r7, #24
 800d990:	46bd      	mov	sp, r7
 800d992:	bd80      	pop	{r7, pc}

0800d994 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d994:	b580      	push	{r7, lr}
 800d996:	b086      	sub	sp, #24
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d9a2:	2100      	movs	r1, #0
 800d9a4:	6878      	ldr	r0, [r7, #4]
 800d9a6:	f7ff fb9a 	bl	800d0de <dir_sdi>
 800d9aa:	4603      	mov	r3, r0
 800d9ac:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d9ae:	7dfb      	ldrb	r3, [r7, #23]
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d001      	beq.n	800d9b8 <dir_find+0x24>
 800d9b4:	7dfb      	ldrb	r3, [r7, #23]
 800d9b6:	e0a9      	b.n	800db0c <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d9b8:	23ff      	movs	r3, #255	; 0xff
 800d9ba:	753b      	strb	r3, [r7, #20]
 800d9bc:	7d3b      	ldrb	r3, [r7, #20]
 800d9be:	757b      	strb	r3, [r7, #21]
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	f04f 32ff 	mov.w	r2, #4294967295
 800d9c6:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	69db      	ldr	r3, [r3, #28]
 800d9cc:	4619      	mov	r1, r3
 800d9ce:	6938      	ldr	r0, [r7, #16]
 800d9d0:	f7ff f808 	bl	800c9e4 <move_window>
 800d9d4:	4603      	mov	r3, r0
 800d9d6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d9d8:	7dfb      	ldrb	r3, [r7, #23]
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	f040 8090 	bne.w	800db00 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	6a1b      	ldr	r3, [r3, #32]
 800d9e4:	781b      	ldrb	r3, [r3, #0]
 800d9e6:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d9e8:	7dbb      	ldrb	r3, [r7, #22]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d102      	bne.n	800d9f4 <dir_find+0x60>
 800d9ee:	2304      	movs	r3, #4
 800d9f0:	75fb      	strb	r3, [r7, #23]
 800d9f2:	e08a      	b.n	800db0a <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	6a1b      	ldr	r3, [r3, #32]
 800d9f8:	330b      	adds	r3, #11
 800d9fa:	781b      	ldrb	r3, [r3, #0]
 800d9fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800da00:	73fb      	strb	r3, [r7, #15]
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	7bfa      	ldrb	r2, [r7, #15]
 800da06:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800da08:	7dbb      	ldrb	r3, [r7, #22]
 800da0a:	2be5      	cmp	r3, #229	; 0xe5
 800da0c:	d007      	beq.n	800da1e <dir_find+0x8a>
 800da0e:	7bfb      	ldrb	r3, [r7, #15]
 800da10:	f003 0308 	and.w	r3, r3, #8
 800da14:	2b00      	cmp	r3, #0
 800da16:	d009      	beq.n	800da2c <dir_find+0x98>
 800da18:	7bfb      	ldrb	r3, [r7, #15]
 800da1a:	2b0f      	cmp	r3, #15
 800da1c:	d006      	beq.n	800da2c <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800da1e:	23ff      	movs	r3, #255	; 0xff
 800da20:	757b      	strb	r3, [r7, #21]
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	f04f 32ff 	mov.w	r2, #4294967295
 800da28:	631a      	str	r2, [r3, #48]	; 0x30
 800da2a:	e05e      	b.n	800daea <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800da2c:	7bfb      	ldrb	r3, [r7, #15]
 800da2e:	2b0f      	cmp	r3, #15
 800da30:	d136      	bne.n	800daa0 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800da38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d154      	bne.n	800daea <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800da40:	7dbb      	ldrb	r3, [r7, #22]
 800da42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da46:	2b00      	cmp	r3, #0
 800da48:	d00d      	beq.n	800da66 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	6a1b      	ldr	r3, [r3, #32]
 800da4e:	7b5b      	ldrb	r3, [r3, #13]
 800da50:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800da52:	7dbb      	ldrb	r3, [r7, #22]
 800da54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800da58:	75bb      	strb	r3, [r7, #22]
 800da5a:	7dbb      	ldrb	r3, [r7, #22]
 800da5c:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	695a      	ldr	r2, [r3, #20]
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800da66:	7dba      	ldrb	r2, [r7, #22]
 800da68:	7d7b      	ldrb	r3, [r7, #21]
 800da6a:	429a      	cmp	r2, r3
 800da6c:	d115      	bne.n	800da9a <dir_find+0x106>
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	6a1b      	ldr	r3, [r3, #32]
 800da72:	330d      	adds	r3, #13
 800da74:	781b      	ldrb	r3, [r3, #0]
 800da76:	7d3a      	ldrb	r2, [r7, #20]
 800da78:	429a      	cmp	r2, r3
 800da7a:	d10e      	bne.n	800da9a <dir_find+0x106>
 800da7c:	693b      	ldr	r3, [r7, #16]
 800da7e:	68da      	ldr	r2, [r3, #12]
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	6a1b      	ldr	r3, [r3, #32]
 800da84:	4619      	mov	r1, r3
 800da86:	4610      	mov	r0, r2
 800da88:	f7ff fcf0 	bl	800d46c <cmp_lfn>
 800da8c:	4603      	mov	r3, r0
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d003      	beq.n	800da9a <dir_find+0x106>
 800da92:	7d7b      	ldrb	r3, [r7, #21]
 800da94:	3b01      	subs	r3, #1
 800da96:	b2db      	uxtb	r3, r3
 800da98:	e000      	b.n	800da9c <dir_find+0x108>
 800da9a:	23ff      	movs	r3, #255	; 0xff
 800da9c:	757b      	strb	r3, [r7, #21]
 800da9e:	e024      	b.n	800daea <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800daa0:	7d7b      	ldrb	r3, [r7, #21]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d109      	bne.n	800daba <dir_find+0x126>
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	6a1b      	ldr	r3, [r3, #32]
 800daaa:	4618      	mov	r0, r3
 800daac:	f7ff feaa 	bl	800d804 <sum_sfn>
 800dab0:	4603      	mov	r3, r0
 800dab2:	461a      	mov	r2, r3
 800dab4:	7d3b      	ldrb	r3, [r7, #20]
 800dab6:	4293      	cmp	r3, r2
 800dab8:	d024      	beq.n	800db04 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800dac0:	f003 0301 	and.w	r3, r3, #1
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d10a      	bne.n	800dade <dir_find+0x14a>
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	6a18      	ldr	r0, [r3, #32]
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	3324      	adds	r3, #36	; 0x24
 800dad0:	220b      	movs	r2, #11
 800dad2:	4619      	mov	r1, r3
 800dad4:	f7fe fd93 	bl	800c5fe <mem_cmp>
 800dad8:	4603      	mov	r3, r0
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d014      	beq.n	800db08 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800dade:	23ff      	movs	r3, #255	; 0xff
 800dae0:	757b      	strb	r3, [r7, #21]
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	f04f 32ff 	mov.w	r2, #4294967295
 800dae8:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800daea:	2100      	movs	r1, #0
 800daec:	6878      	ldr	r0, [r7, #4]
 800daee:	f7ff fb71 	bl	800d1d4 <dir_next>
 800daf2:	4603      	mov	r3, r0
 800daf4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800daf6:	7dfb      	ldrb	r3, [r7, #23]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	f43f af65 	beq.w	800d9c8 <dir_find+0x34>
 800dafe:	e004      	b.n	800db0a <dir_find+0x176>
		if (res != FR_OK) break;
 800db00:	bf00      	nop
 800db02:	e002      	b.n	800db0a <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800db04:	bf00      	nop
 800db06:	e000      	b.n	800db0a <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800db08:	bf00      	nop

	return res;
 800db0a:	7dfb      	ldrb	r3, [r7, #23]
}
 800db0c:	4618      	mov	r0, r3
 800db0e:	3718      	adds	r7, #24
 800db10:	46bd      	mov	sp, r7
 800db12:	bd80      	pop	{r7, pc}

0800db14 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800db14:	b580      	push	{r7, lr}
 800db16:	b08c      	sub	sp, #48	; 0x30
 800db18:	af00      	add	r7, sp, #0
 800db1a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800db28:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d001      	beq.n	800db34 <dir_register+0x20>
 800db30:	2306      	movs	r3, #6
 800db32:	e0e0      	b.n	800dcf6 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800db34:	2300      	movs	r3, #0
 800db36:	627b      	str	r3, [r7, #36]	; 0x24
 800db38:	e002      	b.n	800db40 <dir_register+0x2c>
 800db3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db3c:	3301      	adds	r3, #1
 800db3e:	627b      	str	r3, [r7, #36]	; 0x24
 800db40:	69fb      	ldr	r3, [r7, #28]
 800db42:	68da      	ldr	r2, [r3, #12]
 800db44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db46:	005b      	lsls	r3, r3, #1
 800db48:	4413      	add	r3, r2
 800db4a:	881b      	ldrh	r3, [r3, #0]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d1f4      	bne.n	800db3a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800db56:	f107 030c 	add.w	r3, r7, #12
 800db5a:	220c      	movs	r2, #12
 800db5c:	4618      	mov	r0, r3
 800db5e:	f7fe fd13 	bl	800c588 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800db62:	7dfb      	ldrb	r3, [r7, #23]
 800db64:	f003 0301 	and.w	r3, r3, #1
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d032      	beq.n	800dbd2 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	2240      	movs	r2, #64	; 0x40
 800db70:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800db74:	2301      	movs	r3, #1
 800db76:	62bb      	str	r3, [r7, #40]	; 0x28
 800db78:	e016      	b.n	800dba8 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800db80:	69fb      	ldr	r3, [r7, #28]
 800db82:	68da      	ldr	r2, [r3, #12]
 800db84:	f107 010c 	add.w	r1, r7, #12
 800db88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db8a:	f7ff fdab 	bl	800d6e4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800db8e:	6878      	ldr	r0, [r7, #4]
 800db90:	f7ff ff00 	bl	800d994 <dir_find>
 800db94:	4603      	mov	r3, r0
 800db96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800db9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d106      	bne.n	800dbb0 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800dba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dba4:	3301      	adds	r3, #1
 800dba6:	62bb      	str	r3, [r7, #40]	; 0x28
 800dba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbaa:	2b63      	cmp	r3, #99	; 0x63
 800dbac:	d9e5      	bls.n	800db7a <dir_register+0x66>
 800dbae:	e000      	b.n	800dbb2 <dir_register+0x9e>
			if (res != FR_OK) break;
 800dbb0:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800dbb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbb4:	2b64      	cmp	r3, #100	; 0x64
 800dbb6:	d101      	bne.n	800dbbc <dir_register+0xa8>
 800dbb8:	2307      	movs	r3, #7
 800dbba:	e09c      	b.n	800dcf6 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800dbbc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dbc0:	2b04      	cmp	r3, #4
 800dbc2:	d002      	beq.n	800dbca <dir_register+0xb6>
 800dbc4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dbc8:	e095      	b.n	800dcf6 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800dbca:	7dfa      	ldrb	r2, [r7, #23]
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800dbd2:	7dfb      	ldrb	r3, [r7, #23]
 800dbd4:	f003 0302 	and.w	r3, r3, #2
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d007      	beq.n	800dbec <dir_register+0xd8>
 800dbdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbde:	330c      	adds	r3, #12
 800dbe0:	4a47      	ldr	r2, [pc, #284]	; (800dd00 <dir_register+0x1ec>)
 800dbe2:	fba2 2303 	umull	r2, r3, r2, r3
 800dbe6:	089b      	lsrs	r3, r3, #2
 800dbe8:	3301      	adds	r3, #1
 800dbea:	e000      	b.n	800dbee <dir_register+0xda>
 800dbec:	2301      	movs	r3, #1
 800dbee:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800dbf0:	6a39      	ldr	r1, [r7, #32]
 800dbf2:	6878      	ldr	r0, [r7, #4]
 800dbf4:	f7ff fbb3 	bl	800d35e <dir_alloc>
 800dbf8:	4603      	mov	r3, r0
 800dbfa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800dbfe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d148      	bne.n	800dc98 <dir_register+0x184>
 800dc06:	6a3b      	ldr	r3, [r7, #32]
 800dc08:	3b01      	subs	r3, #1
 800dc0a:	623b      	str	r3, [r7, #32]
 800dc0c:	6a3b      	ldr	r3, [r7, #32]
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d042      	beq.n	800dc98 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	695a      	ldr	r2, [r3, #20]
 800dc16:	6a3b      	ldr	r3, [r7, #32]
 800dc18:	015b      	lsls	r3, r3, #5
 800dc1a:	1ad3      	subs	r3, r2, r3
 800dc1c:	4619      	mov	r1, r3
 800dc1e:	6878      	ldr	r0, [r7, #4]
 800dc20:	f7ff fa5d 	bl	800d0de <dir_sdi>
 800dc24:	4603      	mov	r3, r0
 800dc26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800dc2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d132      	bne.n	800dc98 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	3324      	adds	r3, #36	; 0x24
 800dc36:	4618      	mov	r0, r3
 800dc38:	f7ff fde4 	bl	800d804 <sum_sfn>
 800dc3c:	4603      	mov	r3, r0
 800dc3e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	69db      	ldr	r3, [r3, #28]
 800dc44:	4619      	mov	r1, r3
 800dc46:	69f8      	ldr	r0, [r7, #28]
 800dc48:	f7fe fecc 	bl	800c9e4 <move_window>
 800dc4c:	4603      	mov	r3, r0
 800dc4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800dc52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d11d      	bne.n	800dc96 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800dc5a:	69fb      	ldr	r3, [r7, #28]
 800dc5c:	68d8      	ldr	r0, [r3, #12]
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	6a19      	ldr	r1, [r3, #32]
 800dc62:	6a3b      	ldr	r3, [r7, #32]
 800dc64:	b2da      	uxtb	r2, r3
 800dc66:	7efb      	ldrb	r3, [r7, #27]
 800dc68:	f7ff fcd4 	bl	800d614 <put_lfn>
				fs->wflag = 1;
 800dc6c:	69fb      	ldr	r3, [r7, #28]
 800dc6e:	2201      	movs	r2, #1
 800dc70:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800dc72:	2100      	movs	r1, #0
 800dc74:	6878      	ldr	r0, [r7, #4]
 800dc76:	f7ff faad 	bl	800d1d4 <dir_next>
 800dc7a:	4603      	mov	r3, r0
 800dc7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800dc80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d107      	bne.n	800dc98 <dir_register+0x184>
 800dc88:	6a3b      	ldr	r3, [r7, #32]
 800dc8a:	3b01      	subs	r3, #1
 800dc8c:	623b      	str	r3, [r7, #32]
 800dc8e:	6a3b      	ldr	r3, [r7, #32]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d1d5      	bne.n	800dc40 <dir_register+0x12c>
 800dc94:	e000      	b.n	800dc98 <dir_register+0x184>
				if (res != FR_OK) break;
 800dc96:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800dc98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d128      	bne.n	800dcf2 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	69db      	ldr	r3, [r3, #28]
 800dca4:	4619      	mov	r1, r3
 800dca6:	69f8      	ldr	r0, [r7, #28]
 800dca8:	f7fe fe9c 	bl	800c9e4 <move_window>
 800dcac:	4603      	mov	r3, r0
 800dcae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800dcb2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d11b      	bne.n	800dcf2 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	6a1b      	ldr	r3, [r3, #32]
 800dcbe:	2220      	movs	r2, #32
 800dcc0:	2100      	movs	r1, #0
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	f7fe fc81 	bl	800c5ca <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	6a18      	ldr	r0, [r3, #32]
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	3324      	adds	r3, #36	; 0x24
 800dcd0:	220b      	movs	r2, #11
 800dcd2:	4619      	mov	r1, r3
 800dcd4:	f7fe fc58 	bl	800c588 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	6a1b      	ldr	r3, [r3, #32]
 800dce2:	330c      	adds	r3, #12
 800dce4:	f002 0218 	and.w	r2, r2, #24
 800dce8:	b2d2      	uxtb	r2, r2
 800dcea:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800dcec:	69fb      	ldr	r3, [r7, #28]
 800dcee:	2201      	movs	r2, #1
 800dcf0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800dcf2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	3730      	adds	r7, #48	; 0x30
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	bd80      	pop	{r7, pc}
 800dcfe:	bf00      	nop
 800dd00:	4ec4ec4f 	.word	0x4ec4ec4f

0800dd04 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800dd04:	b580      	push	{r7, lr}
 800dd06:	b088      	sub	sp, #32
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	6078      	str	r0, [r7, #4]
 800dd0c:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800dd14:	683b      	ldr	r3, [r7, #0]
 800dd16:	2200      	movs	r2, #0
 800dd18:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	69db      	ldr	r3, [r3, #28]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	f000 80c9 	beq.w	800deb6 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd2c:	d032      	beq.n	800dd94 <get_fileinfo+0x90>
			i = j = 0;
 800dd2e:	2300      	movs	r3, #0
 800dd30:	61bb      	str	r3, [r7, #24]
 800dd32:	69bb      	ldr	r3, [r7, #24]
 800dd34:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800dd36:	e01b      	b.n	800dd70 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800dd38:	89fb      	ldrh	r3, [r7, #14]
 800dd3a:	2100      	movs	r1, #0
 800dd3c:	4618      	mov	r0, r3
 800dd3e:	f001 ffe3 	bl	800fd08 <ff_convert>
 800dd42:	4603      	mov	r3, r0
 800dd44:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800dd46:	89fb      	ldrh	r3, [r7, #14]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d102      	bne.n	800dd52 <get_fileinfo+0x4e>
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	61fb      	str	r3, [r7, #28]
 800dd50:	e01a      	b.n	800dd88 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800dd52:	69fb      	ldr	r3, [r7, #28]
 800dd54:	2bfe      	cmp	r3, #254	; 0xfe
 800dd56:	d902      	bls.n	800dd5e <get_fileinfo+0x5a>
 800dd58:	2300      	movs	r3, #0
 800dd5a:	61fb      	str	r3, [r7, #28]
 800dd5c:	e014      	b.n	800dd88 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800dd5e:	69fb      	ldr	r3, [r7, #28]
 800dd60:	1c5a      	adds	r2, r3, #1
 800dd62:	61fa      	str	r2, [r7, #28]
 800dd64:	89fa      	ldrh	r2, [r7, #14]
 800dd66:	b2d1      	uxtb	r1, r2
 800dd68:	683a      	ldr	r2, [r7, #0]
 800dd6a:	4413      	add	r3, r2
 800dd6c:	460a      	mov	r2, r1
 800dd6e:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800dd70:	693b      	ldr	r3, [r7, #16]
 800dd72:	68da      	ldr	r2, [r3, #12]
 800dd74:	69bb      	ldr	r3, [r7, #24]
 800dd76:	1c59      	adds	r1, r3, #1
 800dd78:	61b9      	str	r1, [r7, #24]
 800dd7a:	005b      	lsls	r3, r3, #1
 800dd7c:	4413      	add	r3, r2
 800dd7e:	881b      	ldrh	r3, [r3, #0]
 800dd80:	81fb      	strh	r3, [r7, #14]
 800dd82:	89fb      	ldrh	r3, [r7, #14]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d1d7      	bne.n	800dd38 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800dd88:	683a      	ldr	r2, [r7, #0]
 800dd8a:	69fb      	ldr	r3, [r7, #28]
 800dd8c:	4413      	add	r3, r2
 800dd8e:	3316      	adds	r3, #22
 800dd90:	2200      	movs	r2, #0
 800dd92:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800dd94:	2300      	movs	r3, #0
 800dd96:	61bb      	str	r3, [r7, #24]
 800dd98:	69bb      	ldr	r3, [r7, #24]
 800dd9a:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800dd9c:	683a      	ldr	r2, [r7, #0]
 800dd9e:	69fb      	ldr	r3, [r7, #28]
 800dda0:	4413      	add	r3, r2
 800dda2:	3316      	adds	r3, #22
 800dda4:	781b      	ldrb	r3, [r3, #0]
 800dda6:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800dda8:	e04c      	b.n	800de44 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	6a1a      	ldr	r2, [r3, #32]
 800ddae:	69fb      	ldr	r3, [r7, #28]
 800ddb0:	1c59      	adds	r1, r3, #1
 800ddb2:	61f9      	str	r1, [r7, #28]
 800ddb4:	4413      	add	r3, r2
 800ddb6:	781b      	ldrb	r3, [r3, #0]
 800ddb8:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800ddba:	7dfb      	ldrb	r3, [r7, #23]
 800ddbc:	2b20      	cmp	r3, #32
 800ddbe:	d100      	bne.n	800ddc2 <get_fileinfo+0xbe>
 800ddc0:	e040      	b.n	800de44 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800ddc2:	7dfb      	ldrb	r3, [r7, #23]
 800ddc4:	2b05      	cmp	r3, #5
 800ddc6:	d101      	bne.n	800ddcc <get_fileinfo+0xc8>
 800ddc8:	23e5      	movs	r3, #229	; 0xe5
 800ddca:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800ddcc:	69fb      	ldr	r3, [r7, #28]
 800ddce:	2b09      	cmp	r3, #9
 800ddd0:	d10f      	bne.n	800ddf2 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800ddd2:	89bb      	ldrh	r3, [r7, #12]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d105      	bne.n	800dde4 <get_fileinfo+0xe0>
 800ddd8:	683a      	ldr	r2, [r7, #0]
 800ddda:	69bb      	ldr	r3, [r7, #24]
 800dddc:	4413      	add	r3, r2
 800ddde:	3316      	adds	r3, #22
 800dde0:	222e      	movs	r2, #46	; 0x2e
 800dde2:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800dde4:	69bb      	ldr	r3, [r7, #24]
 800dde6:	1c5a      	adds	r2, r3, #1
 800dde8:	61ba      	str	r2, [r7, #24]
 800ddea:	683a      	ldr	r2, [r7, #0]
 800ddec:	4413      	add	r3, r2
 800ddee:	222e      	movs	r2, #46	; 0x2e
 800ddf0:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800ddf2:	683a      	ldr	r2, [r7, #0]
 800ddf4:	69bb      	ldr	r3, [r7, #24]
 800ddf6:	4413      	add	r3, r2
 800ddf8:	3309      	adds	r3, #9
 800ddfa:	7dfa      	ldrb	r2, [r7, #23]
 800ddfc:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800ddfe:	89bb      	ldrh	r3, [r7, #12]
 800de00:	2b00      	cmp	r3, #0
 800de02:	d11c      	bne.n	800de3e <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800de04:	7dfb      	ldrb	r3, [r7, #23]
 800de06:	2b40      	cmp	r3, #64	; 0x40
 800de08:	d913      	bls.n	800de32 <get_fileinfo+0x12e>
 800de0a:	7dfb      	ldrb	r3, [r7, #23]
 800de0c:	2b5a      	cmp	r3, #90	; 0x5a
 800de0e:	d810      	bhi.n	800de32 <get_fileinfo+0x12e>
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	6a1b      	ldr	r3, [r3, #32]
 800de14:	330c      	adds	r3, #12
 800de16:	781b      	ldrb	r3, [r3, #0]
 800de18:	461a      	mov	r2, r3
 800de1a:	69fb      	ldr	r3, [r7, #28]
 800de1c:	2b08      	cmp	r3, #8
 800de1e:	d901      	bls.n	800de24 <get_fileinfo+0x120>
 800de20:	2310      	movs	r3, #16
 800de22:	e000      	b.n	800de26 <get_fileinfo+0x122>
 800de24:	2308      	movs	r3, #8
 800de26:	4013      	ands	r3, r2
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d002      	beq.n	800de32 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800de2c:	7dfb      	ldrb	r3, [r7, #23]
 800de2e:	3320      	adds	r3, #32
 800de30:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800de32:	683a      	ldr	r2, [r7, #0]
 800de34:	69bb      	ldr	r3, [r7, #24]
 800de36:	4413      	add	r3, r2
 800de38:	3316      	adds	r3, #22
 800de3a:	7dfa      	ldrb	r2, [r7, #23]
 800de3c:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800de3e:	69bb      	ldr	r3, [r7, #24]
 800de40:	3301      	adds	r3, #1
 800de42:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800de44:	69fb      	ldr	r3, [r7, #28]
 800de46:	2b0a      	cmp	r3, #10
 800de48:	d9af      	bls.n	800ddaa <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800de4a:	89bb      	ldrh	r3, [r7, #12]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d10d      	bne.n	800de6c <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800de50:	683a      	ldr	r2, [r7, #0]
 800de52:	69bb      	ldr	r3, [r7, #24]
 800de54:	4413      	add	r3, r2
 800de56:	3316      	adds	r3, #22
 800de58:	2200      	movs	r2, #0
 800de5a:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	6a1b      	ldr	r3, [r3, #32]
 800de60:	330c      	adds	r3, #12
 800de62:	781b      	ldrb	r3, [r3, #0]
 800de64:	2b00      	cmp	r3, #0
 800de66:	d101      	bne.n	800de6c <get_fileinfo+0x168>
 800de68:	2300      	movs	r3, #0
 800de6a:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800de6c:	683a      	ldr	r2, [r7, #0]
 800de6e:	69bb      	ldr	r3, [r7, #24]
 800de70:	4413      	add	r3, r2
 800de72:	3309      	adds	r3, #9
 800de74:	2200      	movs	r2, #0
 800de76:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	6a1b      	ldr	r3, [r3, #32]
 800de7c:	7ada      	ldrb	r2, [r3, #11]
 800de7e:	683b      	ldr	r3, [r7, #0]
 800de80:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	6a1b      	ldr	r3, [r3, #32]
 800de86:	331c      	adds	r3, #28
 800de88:	4618      	mov	r0, r3
 800de8a:	f7fe fb13 	bl	800c4b4 <ld_dword>
 800de8e:	4602      	mov	r2, r0
 800de90:	683b      	ldr	r3, [r7, #0]
 800de92:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	6a1b      	ldr	r3, [r3, #32]
 800de98:	3316      	adds	r3, #22
 800de9a:	4618      	mov	r0, r3
 800de9c:	f7fe fb0a 	bl	800c4b4 <ld_dword>
 800dea0:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800dea2:	68bb      	ldr	r3, [r7, #8]
 800dea4:	b29a      	uxth	r2, r3
 800dea6:	683b      	ldr	r3, [r7, #0]
 800dea8:	80da      	strh	r2, [r3, #6]
 800deaa:	68bb      	ldr	r3, [r7, #8]
 800deac:	0c1b      	lsrs	r3, r3, #16
 800deae:	b29a      	uxth	r2, r3
 800deb0:	683b      	ldr	r3, [r7, #0]
 800deb2:	809a      	strh	r2, [r3, #4]
 800deb4:	e000      	b.n	800deb8 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800deb6:	bf00      	nop
}
 800deb8:	3720      	adds	r7, #32
 800deba:	46bd      	mov	sp, r7
 800debc:	bd80      	pop	{r7, pc}
	...

0800dec0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800dec0:	b580      	push	{r7, lr}
 800dec2:	b08a      	sub	sp, #40	; 0x28
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	6078      	str	r0, [r7, #4]
 800dec8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800deca:	683b      	ldr	r3, [r7, #0]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	613b      	str	r3, [r7, #16]
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	68db      	ldr	r3, [r3, #12]
 800ded6:	60fb      	str	r3, [r7, #12]
 800ded8:	2300      	movs	r3, #0
 800deda:	617b      	str	r3, [r7, #20]
 800dedc:	697b      	ldr	r3, [r7, #20]
 800dede:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800dee0:	69bb      	ldr	r3, [r7, #24]
 800dee2:	1c5a      	adds	r2, r3, #1
 800dee4:	61ba      	str	r2, [r7, #24]
 800dee6:	693a      	ldr	r2, [r7, #16]
 800dee8:	4413      	add	r3, r2
 800deea:	781b      	ldrb	r3, [r3, #0]
 800deec:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800deee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800def0:	2b1f      	cmp	r3, #31
 800def2:	d940      	bls.n	800df76 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800def4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800def6:	2b2f      	cmp	r3, #47	; 0x2f
 800def8:	d006      	beq.n	800df08 <create_name+0x48>
 800defa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800defc:	2b5c      	cmp	r3, #92	; 0x5c
 800defe:	d110      	bne.n	800df22 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800df00:	e002      	b.n	800df08 <create_name+0x48>
 800df02:	69bb      	ldr	r3, [r7, #24]
 800df04:	3301      	adds	r3, #1
 800df06:	61bb      	str	r3, [r7, #24]
 800df08:	693a      	ldr	r2, [r7, #16]
 800df0a:	69bb      	ldr	r3, [r7, #24]
 800df0c:	4413      	add	r3, r2
 800df0e:	781b      	ldrb	r3, [r3, #0]
 800df10:	2b2f      	cmp	r3, #47	; 0x2f
 800df12:	d0f6      	beq.n	800df02 <create_name+0x42>
 800df14:	693a      	ldr	r2, [r7, #16]
 800df16:	69bb      	ldr	r3, [r7, #24]
 800df18:	4413      	add	r3, r2
 800df1a:	781b      	ldrb	r3, [r3, #0]
 800df1c:	2b5c      	cmp	r3, #92	; 0x5c
 800df1e:	d0f0      	beq.n	800df02 <create_name+0x42>
			break;
 800df20:	e02a      	b.n	800df78 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800df22:	697b      	ldr	r3, [r7, #20]
 800df24:	2bfe      	cmp	r3, #254	; 0xfe
 800df26:	d901      	bls.n	800df2c <create_name+0x6c>
 800df28:	2306      	movs	r3, #6
 800df2a:	e177      	b.n	800e21c <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800df2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800df2e:	b2db      	uxtb	r3, r3
 800df30:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800df32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800df34:	2101      	movs	r1, #1
 800df36:	4618      	mov	r0, r3
 800df38:	f001 fee6 	bl	800fd08 <ff_convert>
 800df3c:	4603      	mov	r3, r0
 800df3e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800df40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800df42:	2b00      	cmp	r3, #0
 800df44:	d101      	bne.n	800df4a <create_name+0x8a>
 800df46:	2306      	movs	r3, #6
 800df48:	e168      	b.n	800e21c <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800df4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800df4c:	2b7f      	cmp	r3, #127	; 0x7f
 800df4e:	d809      	bhi.n	800df64 <create_name+0xa4>
 800df50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800df52:	4619      	mov	r1, r3
 800df54:	48b3      	ldr	r0, [pc, #716]	; (800e224 <create_name+0x364>)
 800df56:	f7fe fb79 	bl	800c64c <chk_chr>
 800df5a:	4603      	mov	r3, r0
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d001      	beq.n	800df64 <create_name+0xa4>
 800df60:	2306      	movs	r3, #6
 800df62:	e15b      	b.n	800e21c <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800df64:	697b      	ldr	r3, [r7, #20]
 800df66:	1c5a      	adds	r2, r3, #1
 800df68:	617a      	str	r2, [r7, #20]
 800df6a:	005b      	lsls	r3, r3, #1
 800df6c:	68fa      	ldr	r2, [r7, #12]
 800df6e:	4413      	add	r3, r2
 800df70:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800df72:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800df74:	e7b4      	b.n	800dee0 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800df76:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800df78:	693a      	ldr	r2, [r7, #16]
 800df7a:	69bb      	ldr	r3, [r7, #24]
 800df7c:	441a      	add	r2, r3
 800df7e:	683b      	ldr	r3, [r7, #0]
 800df80:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800df82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800df84:	2b1f      	cmp	r3, #31
 800df86:	d801      	bhi.n	800df8c <create_name+0xcc>
 800df88:	2304      	movs	r3, #4
 800df8a:	e000      	b.n	800df8e <create_name+0xce>
 800df8c:	2300      	movs	r3, #0
 800df8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800df92:	e011      	b.n	800dfb8 <create_name+0xf8>
		w = lfn[di - 1];
 800df94:	697a      	ldr	r2, [r7, #20]
 800df96:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800df9a:	4413      	add	r3, r2
 800df9c:	005b      	lsls	r3, r3, #1
 800df9e:	68fa      	ldr	r2, [r7, #12]
 800dfa0:	4413      	add	r3, r2
 800dfa2:	881b      	ldrh	r3, [r3, #0]
 800dfa4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800dfa6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dfa8:	2b20      	cmp	r3, #32
 800dfaa:	d002      	beq.n	800dfb2 <create_name+0xf2>
 800dfac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dfae:	2b2e      	cmp	r3, #46	; 0x2e
 800dfb0:	d106      	bne.n	800dfc0 <create_name+0x100>
		di--;
 800dfb2:	697b      	ldr	r3, [r7, #20]
 800dfb4:	3b01      	subs	r3, #1
 800dfb6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800dfb8:	697b      	ldr	r3, [r7, #20]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d1ea      	bne.n	800df94 <create_name+0xd4>
 800dfbe:	e000      	b.n	800dfc2 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800dfc0:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800dfc2:	697b      	ldr	r3, [r7, #20]
 800dfc4:	005b      	lsls	r3, r3, #1
 800dfc6:	68fa      	ldr	r2, [r7, #12]
 800dfc8:	4413      	add	r3, r2
 800dfca:	2200      	movs	r2, #0
 800dfcc:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800dfce:	697b      	ldr	r3, [r7, #20]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d101      	bne.n	800dfd8 <create_name+0x118>
 800dfd4:	2306      	movs	r3, #6
 800dfd6:	e121      	b.n	800e21c <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	3324      	adds	r3, #36	; 0x24
 800dfdc:	220b      	movs	r2, #11
 800dfde:	2120      	movs	r1, #32
 800dfe0:	4618      	mov	r0, r3
 800dfe2:	f7fe faf2 	bl	800c5ca <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	61bb      	str	r3, [r7, #24]
 800dfea:	e002      	b.n	800dff2 <create_name+0x132>
 800dfec:	69bb      	ldr	r3, [r7, #24]
 800dfee:	3301      	adds	r3, #1
 800dff0:	61bb      	str	r3, [r7, #24]
 800dff2:	69bb      	ldr	r3, [r7, #24]
 800dff4:	005b      	lsls	r3, r3, #1
 800dff6:	68fa      	ldr	r2, [r7, #12]
 800dff8:	4413      	add	r3, r2
 800dffa:	881b      	ldrh	r3, [r3, #0]
 800dffc:	2b20      	cmp	r3, #32
 800dffe:	d0f5      	beq.n	800dfec <create_name+0x12c>
 800e000:	69bb      	ldr	r3, [r7, #24]
 800e002:	005b      	lsls	r3, r3, #1
 800e004:	68fa      	ldr	r2, [r7, #12]
 800e006:	4413      	add	r3, r2
 800e008:	881b      	ldrh	r3, [r3, #0]
 800e00a:	2b2e      	cmp	r3, #46	; 0x2e
 800e00c:	d0ee      	beq.n	800dfec <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800e00e:	69bb      	ldr	r3, [r7, #24]
 800e010:	2b00      	cmp	r3, #0
 800e012:	d009      	beq.n	800e028 <create_name+0x168>
 800e014:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e018:	f043 0303 	orr.w	r3, r3, #3
 800e01c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800e020:	e002      	b.n	800e028 <create_name+0x168>
 800e022:	697b      	ldr	r3, [r7, #20]
 800e024:	3b01      	subs	r3, #1
 800e026:	617b      	str	r3, [r7, #20]
 800e028:	697b      	ldr	r3, [r7, #20]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d009      	beq.n	800e042 <create_name+0x182>
 800e02e:	697a      	ldr	r2, [r7, #20]
 800e030:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800e034:	4413      	add	r3, r2
 800e036:	005b      	lsls	r3, r3, #1
 800e038:	68fa      	ldr	r2, [r7, #12]
 800e03a:	4413      	add	r3, r2
 800e03c:	881b      	ldrh	r3, [r3, #0]
 800e03e:	2b2e      	cmp	r3, #46	; 0x2e
 800e040:	d1ef      	bne.n	800e022 <create_name+0x162>

	i = b = 0; ni = 8;
 800e042:	2300      	movs	r3, #0
 800e044:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e048:	2300      	movs	r3, #0
 800e04a:	623b      	str	r3, [r7, #32]
 800e04c:	2308      	movs	r3, #8
 800e04e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800e050:	69bb      	ldr	r3, [r7, #24]
 800e052:	1c5a      	adds	r2, r3, #1
 800e054:	61ba      	str	r2, [r7, #24]
 800e056:	005b      	lsls	r3, r3, #1
 800e058:	68fa      	ldr	r2, [r7, #12]
 800e05a:	4413      	add	r3, r2
 800e05c:	881b      	ldrh	r3, [r3, #0]
 800e05e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800e060:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e062:	2b00      	cmp	r3, #0
 800e064:	f000 8090 	beq.w	800e188 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800e068:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e06a:	2b20      	cmp	r3, #32
 800e06c:	d006      	beq.n	800e07c <create_name+0x1bc>
 800e06e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e070:	2b2e      	cmp	r3, #46	; 0x2e
 800e072:	d10a      	bne.n	800e08a <create_name+0x1ca>
 800e074:	69ba      	ldr	r2, [r7, #24]
 800e076:	697b      	ldr	r3, [r7, #20]
 800e078:	429a      	cmp	r2, r3
 800e07a:	d006      	beq.n	800e08a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800e07c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e080:	f043 0303 	orr.w	r3, r3, #3
 800e084:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e088:	e07d      	b.n	800e186 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800e08a:	6a3a      	ldr	r2, [r7, #32]
 800e08c:	69fb      	ldr	r3, [r7, #28]
 800e08e:	429a      	cmp	r2, r3
 800e090:	d203      	bcs.n	800e09a <create_name+0x1da>
 800e092:	69ba      	ldr	r2, [r7, #24]
 800e094:	697b      	ldr	r3, [r7, #20]
 800e096:	429a      	cmp	r2, r3
 800e098:	d123      	bne.n	800e0e2 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800e09a:	69fb      	ldr	r3, [r7, #28]
 800e09c:	2b0b      	cmp	r3, #11
 800e09e:	d106      	bne.n	800e0ae <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800e0a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e0a4:	f043 0303 	orr.w	r3, r3, #3
 800e0a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e0ac:	e06f      	b.n	800e18e <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800e0ae:	69ba      	ldr	r2, [r7, #24]
 800e0b0:	697b      	ldr	r3, [r7, #20]
 800e0b2:	429a      	cmp	r2, r3
 800e0b4:	d005      	beq.n	800e0c2 <create_name+0x202>
 800e0b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e0ba:	f043 0303 	orr.w	r3, r3, #3
 800e0be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800e0c2:	69ba      	ldr	r2, [r7, #24]
 800e0c4:	697b      	ldr	r3, [r7, #20]
 800e0c6:	429a      	cmp	r2, r3
 800e0c8:	d860      	bhi.n	800e18c <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800e0ca:	697b      	ldr	r3, [r7, #20]
 800e0cc:	61bb      	str	r3, [r7, #24]
 800e0ce:	2308      	movs	r3, #8
 800e0d0:	623b      	str	r3, [r7, #32]
 800e0d2:	230b      	movs	r3, #11
 800e0d4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800e0d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e0da:	009b      	lsls	r3, r3, #2
 800e0dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e0e0:	e051      	b.n	800e186 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800e0e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e0e4:	2b7f      	cmp	r3, #127	; 0x7f
 800e0e6:	d914      	bls.n	800e112 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800e0e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e0ea:	2100      	movs	r1, #0
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	f001 fe0b 	bl	800fd08 <ff_convert>
 800e0f2:	4603      	mov	r3, r0
 800e0f4:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800e0f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d004      	beq.n	800e106 <create_name+0x246>
 800e0fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e0fe:	3b80      	subs	r3, #128	; 0x80
 800e100:	4a49      	ldr	r2, [pc, #292]	; (800e228 <create_name+0x368>)
 800e102:	5cd3      	ldrb	r3, [r2, r3]
 800e104:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800e106:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e10a:	f043 0302 	orr.w	r3, r3, #2
 800e10e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800e112:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e114:	2b00      	cmp	r3, #0
 800e116:	d007      	beq.n	800e128 <create_name+0x268>
 800e118:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e11a:	4619      	mov	r1, r3
 800e11c:	4843      	ldr	r0, [pc, #268]	; (800e22c <create_name+0x36c>)
 800e11e:	f7fe fa95 	bl	800c64c <chk_chr>
 800e122:	4603      	mov	r3, r0
 800e124:	2b00      	cmp	r3, #0
 800e126:	d008      	beq.n	800e13a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800e128:	235f      	movs	r3, #95	; 0x5f
 800e12a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800e12c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e130:	f043 0303 	orr.w	r3, r3, #3
 800e134:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e138:	e01b      	b.n	800e172 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800e13a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e13c:	2b40      	cmp	r3, #64	; 0x40
 800e13e:	d909      	bls.n	800e154 <create_name+0x294>
 800e140:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e142:	2b5a      	cmp	r3, #90	; 0x5a
 800e144:	d806      	bhi.n	800e154 <create_name+0x294>
					b |= 2;
 800e146:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e14a:	f043 0302 	orr.w	r3, r3, #2
 800e14e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e152:	e00e      	b.n	800e172 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800e154:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e156:	2b60      	cmp	r3, #96	; 0x60
 800e158:	d90b      	bls.n	800e172 <create_name+0x2b2>
 800e15a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e15c:	2b7a      	cmp	r3, #122	; 0x7a
 800e15e:	d808      	bhi.n	800e172 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800e160:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e164:	f043 0301 	orr.w	r3, r3, #1
 800e168:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e16c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e16e:	3b20      	subs	r3, #32
 800e170:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800e172:	6a3b      	ldr	r3, [r7, #32]
 800e174:	1c5a      	adds	r2, r3, #1
 800e176:	623a      	str	r2, [r7, #32]
 800e178:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e17a:	b2d1      	uxtb	r1, r2
 800e17c:	687a      	ldr	r2, [r7, #4]
 800e17e:	4413      	add	r3, r2
 800e180:	460a      	mov	r2, r1
 800e182:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800e186:	e763      	b.n	800e050 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800e188:	bf00      	nop
 800e18a:	e000      	b.n	800e18e <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800e18c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e194:	2be5      	cmp	r3, #229	; 0xe5
 800e196:	d103      	bne.n	800e1a0 <create_name+0x2e0>
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	2205      	movs	r2, #5
 800e19c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800e1a0:	69fb      	ldr	r3, [r7, #28]
 800e1a2:	2b08      	cmp	r3, #8
 800e1a4:	d104      	bne.n	800e1b0 <create_name+0x2f0>
 800e1a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e1aa:	009b      	lsls	r3, r3, #2
 800e1ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800e1b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e1b4:	f003 030c 	and.w	r3, r3, #12
 800e1b8:	2b0c      	cmp	r3, #12
 800e1ba:	d005      	beq.n	800e1c8 <create_name+0x308>
 800e1bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e1c0:	f003 0303 	and.w	r3, r3, #3
 800e1c4:	2b03      	cmp	r3, #3
 800e1c6:	d105      	bne.n	800e1d4 <create_name+0x314>
 800e1c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e1cc:	f043 0302 	orr.w	r3, r3, #2
 800e1d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800e1d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e1d8:	f003 0302 	and.w	r3, r3, #2
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d117      	bne.n	800e210 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800e1e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e1e4:	f003 0303 	and.w	r3, r3, #3
 800e1e8:	2b01      	cmp	r3, #1
 800e1ea:	d105      	bne.n	800e1f8 <create_name+0x338>
 800e1ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e1f0:	f043 0310 	orr.w	r3, r3, #16
 800e1f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800e1f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e1fc:	f003 030c 	and.w	r3, r3, #12
 800e200:	2b04      	cmp	r3, #4
 800e202:	d105      	bne.n	800e210 <create_name+0x350>
 800e204:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e208:	f043 0308 	orr.w	r3, r3, #8
 800e20c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e216:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800e21a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800e21c:	4618      	mov	r0, r3
 800e21e:	3728      	adds	r7, #40	; 0x28
 800e220:	46bd      	mov	sp, r7
 800e222:	bd80      	pop	{r7, pc}
 800e224:	08013990 	.word	0x08013990
 800e228:	080139f8 	.word	0x080139f8
 800e22c:	0801399c 	.word	0x0801399c

0800e230 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800e230:	b580      	push	{r7, lr}
 800e232:	b086      	sub	sp, #24
 800e234:	af00      	add	r7, sp, #0
 800e236:	6078      	str	r0, [r7, #4]
 800e238:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800e23e:	693b      	ldr	r3, [r7, #16]
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800e244:	e002      	b.n	800e24c <follow_path+0x1c>
 800e246:	683b      	ldr	r3, [r7, #0]
 800e248:	3301      	adds	r3, #1
 800e24a:	603b      	str	r3, [r7, #0]
 800e24c:	683b      	ldr	r3, [r7, #0]
 800e24e:	781b      	ldrb	r3, [r3, #0]
 800e250:	2b2f      	cmp	r3, #47	; 0x2f
 800e252:	d0f8      	beq.n	800e246 <follow_path+0x16>
 800e254:	683b      	ldr	r3, [r7, #0]
 800e256:	781b      	ldrb	r3, [r3, #0]
 800e258:	2b5c      	cmp	r3, #92	; 0x5c
 800e25a:	d0f4      	beq.n	800e246 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800e25c:	693b      	ldr	r3, [r7, #16]
 800e25e:	2200      	movs	r2, #0
 800e260:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800e262:	683b      	ldr	r3, [r7, #0]
 800e264:	781b      	ldrb	r3, [r3, #0]
 800e266:	2b1f      	cmp	r3, #31
 800e268:	d80a      	bhi.n	800e280 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	2280      	movs	r2, #128	; 0x80
 800e26e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800e272:	2100      	movs	r1, #0
 800e274:	6878      	ldr	r0, [r7, #4]
 800e276:	f7fe ff32 	bl	800d0de <dir_sdi>
 800e27a:	4603      	mov	r3, r0
 800e27c:	75fb      	strb	r3, [r7, #23]
 800e27e:	e043      	b.n	800e308 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e280:	463b      	mov	r3, r7
 800e282:	4619      	mov	r1, r3
 800e284:	6878      	ldr	r0, [r7, #4]
 800e286:	f7ff fe1b 	bl	800dec0 <create_name>
 800e28a:	4603      	mov	r3, r0
 800e28c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e28e:	7dfb      	ldrb	r3, [r7, #23]
 800e290:	2b00      	cmp	r3, #0
 800e292:	d134      	bne.n	800e2fe <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800e294:	6878      	ldr	r0, [r7, #4]
 800e296:	f7ff fb7d 	bl	800d994 <dir_find>
 800e29a:	4603      	mov	r3, r0
 800e29c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e2a4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800e2a6:	7dfb      	ldrb	r3, [r7, #23]
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d00a      	beq.n	800e2c2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800e2ac:	7dfb      	ldrb	r3, [r7, #23]
 800e2ae:	2b04      	cmp	r3, #4
 800e2b0:	d127      	bne.n	800e302 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800e2b2:	7afb      	ldrb	r3, [r7, #11]
 800e2b4:	f003 0304 	and.w	r3, r3, #4
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d122      	bne.n	800e302 <follow_path+0xd2>
 800e2bc:	2305      	movs	r3, #5
 800e2be:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800e2c0:	e01f      	b.n	800e302 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e2c2:	7afb      	ldrb	r3, [r7, #11]
 800e2c4:	f003 0304 	and.w	r3, r3, #4
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d11c      	bne.n	800e306 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800e2cc:	693b      	ldr	r3, [r7, #16]
 800e2ce:	799b      	ldrb	r3, [r3, #6]
 800e2d0:	f003 0310 	and.w	r3, r3, #16
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d102      	bne.n	800e2de <follow_path+0xae>
				res = FR_NO_PATH; break;
 800e2d8:	2305      	movs	r3, #5
 800e2da:	75fb      	strb	r3, [r7, #23]
 800e2dc:	e014      	b.n	800e308 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	695b      	ldr	r3, [r3, #20]
 800e2e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e2ec:	4413      	add	r3, r2
 800e2ee:	4619      	mov	r1, r3
 800e2f0:	68f8      	ldr	r0, [r7, #12]
 800e2f2:	f7ff f87b 	bl	800d3ec <ld_clust>
 800e2f6:	4602      	mov	r2, r0
 800e2f8:	693b      	ldr	r3, [r7, #16]
 800e2fa:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e2fc:	e7c0      	b.n	800e280 <follow_path+0x50>
			if (res != FR_OK) break;
 800e2fe:	bf00      	nop
 800e300:	e002      	b.n	800e308 <follow_path+0xd8>
				break;
 800e302:	bf00      	nop
 800e304:	e000      	b.n	800e308 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e306:	bf00      	nop
			}
		}
	}

	return res;
 800e308:	7dfb      	ldrb	r3, [r7, #23]
}
 800e30a:	4618      	mov	r0, r3
 800e30c:	3718      	adds	r7, #24
 800e30e:	46bd      	mov	sp, r7
 800e310:	bd80      	pop	{r7, pc}

0800e312 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800e312:	b480      	push	{r7}
 800e314:	b087      	sub	sp, #28
 800e316:	af00      	add	r7, sp, #0
 800e318:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800e31a:	f04f 33ff 	mov.w	r3, #4294967295
 800e31e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	2b00      	cmp	r3, #0
 800e326:	d031      	beq.n	800e38c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	617b      	str	r3, [r7, #20]
 800e32e:	e002      	b.n	800e336 <get_ldnumber+0x24>
 800e330:	697b      	ldr	r3, [r7, #20]
 800e332:	3301      	adds	r3, #1
 800e334:	617b      	str	r3, [r7, #20]
 800e336:	697b      	ldr	r3, [r7, #20]
 800e338:	781b      	ldrb	r3, [r3, #0]
 800e33a:	2b1f      	cmp	r3, #31
 800e33c:	d903      	bls.n	800e346 <get_ldnumber+0x34>
 800e33e:	697b      	ldr	r3, [r7, #20]
 800e340:	781b      	ldrb	r3, [r3, #0]
 800e342:	2b3a      	cmp	r3, #58	; 0x3a
 800e344:	d1f4      	bne.n	800e330 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800e346:	697b      	ldr	r3, [r7, #20]
 800e348:	781b      	ldrb	r3, [r3, #0]
 800e34a:	2b3a      	cmp	r3, #58	; 0x3a
 800e34c:	d11c      	bne.n	800e388 <get_ldnumber+0x76>
			tp = *path;
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	1c5a      	adds	r2, r3, #1
 800e358:	60fa      	str	r2, [r7, #12]
 800e35a:	781b      	ldrb	r3, [r3, #0]
 800e35c:	3b30      	subs	r3, #48	; 0x30
 800e35e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800e360:	68bb      	ldr	r3, [r7, #8]
 800e362:	2b09      	cmp	r3, #9
 800e364:	d80e      	bhi.n	800e384 <get_ldnumber+0x72>
 800e366:	68fa      	ldr	r2, [r7, #12]
 800e368:	697b      	ldr	r3, [r7, #20]
 800e36a:	429a      	cmp	r2, r3
 800e36c:	d10a      	bne.n	800e384 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800e36e:	68bb      	ldr	r3, [r7, #8]
 800e370:	2b00      	cmp	r3, #0
 800e372:	d107      	bne.n	800e384 <get_ldnumber+0x72>
					vol = (int)i;
 800e374:	68bb      	ldr	r3, [r7, #8]
 800e376:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800e378:	697b      	ldr	r3, [r7, #20]
 800e37a:	3301      	adds	r3, #1
 800e37c:	617b      	str	r3, [r7, #20]
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	697a      	ldr	r2, [r7, #20]
 800e382:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800e384:	693b      	ldr	r3, [r7, #16]
 800e386:	e002      	b.n	800e38e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800e388:	2300      	movs	r3, #0
 800e38a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800e38c:	693b      	ldr	r3, [r7, #16]
}
 800e38e:	4618      	mov	r0, r3
 800e390:	371c      	adds	r7, #28
 800e392:	46bd      	mov	sp, r7
 800e394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e398:	4770      	bx	lr
	...

0800e39c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800e39c:	b580      	push	{r7, lr}
 800e39e:	b082      	sub	sp, #8
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	6078      	str	r0, [r7, #4]
 800e3a4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	2200      	movs	r2, #0
 800e3aa:	70da      	strb	r2, [r3, #3]
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	f04f 32ff 	mov.w	r2, #4294967295
 800e3b2:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800e3b4:	6839      	ldr	r1, [r7, #0]
 800e3b6:	6878      	ldr	r0, [r7, #4]
 800e3b8:	f7fe fb14 	bl	800c9e4 <move_window>
 800e3bc:	4603      	mov	r3, r0
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d001      	beq.n	800e3c6 <check_fs+0x2a>
 800e3c2:	2304      	movs	r3, #4
 800e3c4:	e038      	b.n	800e438 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	3334      	adds	r3, #52	; 0x34
 800e3ca:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e3ce:	4618      	mov	r0, r3
 800e3d0:	f7fe f858 	bl	800c484 <ld_word>
 800e3d4:	4603      	mov	r3, r0
 800e3d6:	461a      	mov	r2, r3
 800e3d8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e3dc:	429a      	cmp	r2, r3
 800e3de:	d001      	beq.n	800e3e4 <check_fs+0x48>
 800e3e0:	2303      	movs	r3, #3
 800e3e2:	e029      	b.n	800e438 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e3ea:	2be9      	cmp	r3, #233	; 0xe9
 800e3ec:	d009      	beq.n	800e402 <check_fs+0x66>
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e3f4:	2beb      	cmp	r3, #235	; 0xeb
 800e3f6:	d11e      	bne.n	800e436 <check_fs+0x9a>
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800e3fe:	2b90      	cmp	r3, #144	; 0x90
 800e400:	d119      	bne.n	800e436 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	3334      	adds	r3, #52	; 0x34
 800e406:	3336      	adds	r3, #54	; 0x36
 800e408:	4618      	mov	r0, r3
 800e40a:	f7fe f853 	bl	800c4b4 <ld_dword>
 800e40e:	4603      	mov	r3, r0
 800e410:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e414:	4a0a      	ldr	r2, [pc, #40]	; (800e440 <check_fs+0xa4>)
 800e416:	4293      	cmp	r3, r2
 800e418:	d101      	bne.n	800e41e <check_fs+0x82>
 800e41a:	2300      	movs	r3, #0
 800e41c:	e00c      	b.n	800e438 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	3334      	adds	r3, #52	; 0x34
 800e422:	3352      	adds	r3, #82	; 0x52
 800e424:	4618      	mov	r0, r3
 800e426:	f7fe f845 	bl	800c4b4 <ld_dword>
 800e42a:	4602      	mov	r2, r0
 800e42c:	4b05      	ldr	r3, [pc, #20]	; (800e444 <check_fs+0xa8>)
 800e42e:	429a      	cmp	r2, r3
 800e430:	d101      	bne.n	800e436 <check_fs+0x9a>
 800e432:	2300      	movs	r3, #0
 800e434:	e000      	b.n	800e438 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800e436:	2302      	movs	r3, #2
}
 800e438:	4618      	mov	r0, r3
 800e43a:	3708      	adds	r7, #8
 800e43c:	46bd      	mov	sp, r7
 800e43e:	bd80      	pop	{r7, pc}
 800e440:	00544146 	.word	0x00544146
 800e444:	33544146 	.word	0x33544146

0800e448 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800e448:	b580      	push	{r7, lr}
 800e44a:	b096      	sub	sp, #88	; 0x58
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	60f8      	str	r0, [r7, #12]
 800e450:	60b9      	str	r1, [r7, #8]
 800e452:	4613      	mov	r3, r2
 800e454:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800e456:	68bb      	ldr	r3, [r7, #8]
 800e458:	2200      	movs	r2, #0
 800e45a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800e45c:	68f8      	ldr	r0, [r7, #12]
 800e45e:	f7ff ff58 	bl	800e312 <get_ldnumber>
 800e462:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e464:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e466:	2b00      	cmp	r3, #0
 800e468:	da01      	bge.n	800e46e <find_volume+0x26>
 800e46a:	230b      	movs	r3, #11
 800e46c:	e231      	b.n	800e8d2 <find_volume+0x48a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800e46e:	4aa8      	ldr	r2, [pc, #672]	; (800e710 <find_volume+0x2c8>)
 800e470:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e472:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e476:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d101      	bne.n	800e482 <find_volume+0x3a>
 800e47e:	230c      	movs	r3, #12
 800e480:	e227      	b.n	800e8d2 <find_volume+0x48a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800e482:	68bb      	ldr	r3, [r7, #8]
 800e484:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e486:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e488:	79fb      	ldrb	r3, [r7, #7]
 800e48a:	f023 0301 	bic.w	r3, r3, #1
 800e48e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800e490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e492:	781b      	ldrb	r3, [r3, #0]
 800e494:	2b00      	cmp	r3, #0
 800e496:	d01a      	beq.n	800e4ce <find_volume+0x86>
		stat = disk_status(fs->drv);
 800e498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e49a:	785b      	ldrb	r3, [r3, #1]
 800e49c:	4618      	mov	r0, r3
 800e49e:	f7fd ff53 	bl	800c348 <disk_status>
 800e4a2:	4603      	mov	r3, r0
 800e4a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e4a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e4ac:	f003 0301 	and.w	r3, r3, #1
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d10c      	bne.n	800e4ce <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e4b4:	79fb      	ldrb	r3, [r7, #7]
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d007      	beq.n	800e4ca <find_volume+0x82>
 800e4ba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e4be:	f003 0304 	and.w	r3, r3, #4
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d001      	beq.n	800e4ca <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800e4c6:	230a      	movs	r3, #10
 800e4c8:	e203      	b.n	800e8d2 <find_volume+0x48a>
			}
			return FR_OK;				/* The file system object is valid */
 800e4ca:	2300      	movs	r3, #0
 800e4cc:	e201      	b.n	800e8d2 <find_volume+0x48a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800e4ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4d0:	2200      	movs	r2, #0
 800e4d2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e4d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4d6:	b2da      	uxtb	r2, r3
 800e4d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4da:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e4dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4de:	785b      	ldrb	r3, [r3, #1]
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	f7fd ff4b 	bl	800c37c <disk_initialize>
 800e4e6:	4603      	mov	r3, r0
 800e4e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e4ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e4f0:	f003 0301 	and.w	r3, r3, #1
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d001      	beq.n	800e4fc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e4f8:	2303      	movs	r3, #3
 800e4fa:	e1ea      	b.n	800e8d2 <find_volume+0x48a>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e4fc:	79fb      	ldrb	r3, [r7, #7]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d007      	beq.n	800e512 <find_volume+0xca>
 800e502:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e506:	f003 0304 	and.w	r3, r3, #4
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d001      	beq.n	800e512 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800e50e:	230a      	movs	r3, #10
 800e510:	e1df      	b.n	800e8d2 <find_volume+0x48a>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e512:	2300      	movs	r3, #0
 800e514:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e516:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e518:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e51a:	f7ff ff3f 	bl	800e39c <check_fs>
 800e51e:	4603      	mov	r3, r0
 800e520:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e524:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e528:	2b02      	cmp	r3, #2
 800e52a:	d14b      	bne.n	800e5c4 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e52c:	2300      	movs	r3, #0
 800e52e:	643b      	str	r3, [r7, #64]	; 0x40
 800e530:	e01f      	b.n	800e572 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800e532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e534:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e538:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e53a:	011b      	lsls	r3, r3, #4
 800e53c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800e540:	4413      	add	r3, r2
 800e542:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e546:	3304      	adds	r3, #4
 800e548:	781b      	ldrb	r3, [r3, #0]
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d006      	beq.n	800e55c <find_volume+0x114>
 800e54e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e550:	3308      	adds	r3, #8
 800e552:	4618      	mov	r0, r3
 800e554:	f7fd ffae 	bl	800c4b4 <ld_dword>
 800e558:	4602      	mov	r2, r0
 800e55a:	e000      	b.n	800e55e <find_volume+0x116>
 800e55c:	2200      	movs	r2, #0
 800e55e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e560:	009b      	lsls	r3, r3, #2
 800e562:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800e566:	440b      	add	r3, r1
 800e568:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e56c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e56e:	3301      	adds	r3, #1
 800e570:	643b      	str	r3, [r7, #64]	; 0x40
 800e572:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e574:	2b03      	cmp	r3, #3
 800e576:	d9dc      	bls.n	800e532 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e578:	2300      	movs	r3, #0
 800e57a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800e57c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d002      	beq.n	800e588 <find_volume+0x140>
 800e582:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e584:	3b01      	subs	r3, #1
 800e586:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e588:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e58a:	009b      	lsls	r3, r3, #2
 800e58c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800e590:	4413      	add	r3, r2
 800e592:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e596:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e598:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d005      	beq.n	800e5aa <find_volume+0x162>
 800e59e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e5a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e5a2:	f7ff fefb 	bl	800e39c <check_fs>
 800e5a6:	4603      	mov	r3, r0
 800e5a8:	e000      	b.n	800e5ac <find_volume+0x164>
 800e5aa:	2303      	movs	r3, #3
 800e5ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e5b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e5b4:	2b01      	cmp	r3, #1
 800e5b6:	d905      	bls.n	800e5c4 <find_volume+0x17c>
 800e5b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e5ba:	3301      	adds	r3, #1
 800e5bc:	643b      	str	r3, [r7, #64]	; 0x40
 800e5be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e5c0:	2b03      	cmp	r3, #3
 800e5c2:	d9e1      	bls.n	800e588 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e5c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e5c8:	2b04      	cmp	r3, #4
 800e5ca:	d101      	bne.n	800e5d0 <find_volume+0x188>
 800e5cc:	2301      	movs	r3, #1
 800e5ce:	e180      	b.n	800e8d2 <find_volume+0x48a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e5d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e5d4:	2b01      	cmp	r3, #1
 800e5d6:	d901      	bls.n	800e5dc <find_volume+0x194>
 800e5d8:	230d      	movs	r3, #13
 800e5da:	e17a      	b.n	800e8d2 <find_volume+0x48a>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e5dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5de:	3334      	adds	r3, #52	; 0x34
 800e5e0:	330b      	adds	r3, #11
 800e5e2:	4618      	mov	r0, r3
 800e5e4:	f7fd ff4e 	bl	800c484 <ld_word>
 800e5e8:	4603      	mov	r3, r0
 800e5ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e5ee:	d001      	beq.n	800e5f4 <find_volume+0x1ac>
 800e5f0:	230d      	movs	r3, #13
 800e5f2:	e16e      	b.n	800e8d2 <find_volume+0x48a>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e5f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5f6:	3334      	adds	r3, #52	; 0x34
 800e5f8:	3316      	adds	r3, #22
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	f7fd ff42 	bl	800c484 <ld_word>
 800e600:	4603      	mov	r3, r0
 800e602:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e604:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e606:	2b00      	cmp	r3, #0
 800e608:	d106      	bne.n	800e618 <find_volume+0x1d0>
 800e60a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e60c:	3334      	adds	r3, #52	; 0x34
 800e60e:	3324      	adds	r3, #36	; 0x24
 800e610:	4618      	mov	r0, r3
 800e612:	f7fd ff4f 	bl	800c4b4 <ld_dword>
 800e616:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800e618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e61a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e61c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e61e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e620:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800e624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e626:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e62a:	789b      	ldrb	r3, [r3, #2]
 800e62c:	2b01      	cmp	r3, #1
 800e62e:	d005      	beq.n	800e63c <find_volume+0x1f4>
 800e630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e632:	789b      	ldrb	r3, [r3, #2]
 800e634:	2b02      	cmp	r3, #2
 800e636:	d001      	beq.n	800e63c <find_volume+0x1f4>
 800e638:	230d      	movs	r3, #13
 800e63a:	e14a      	b.n	800e8d2 <find_volume+0x48a>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e63c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e63e:	789b      	ldrb	r3, [r3, #2]
 800e640:	461a      	mov	r2, r3
 800e642:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e644:	fb02 f303 	mul.w	r3, r2, r3
 800e648:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e64a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e64c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e650:	b29a      	uxth	r2, r3
 800e652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e654:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e658:	895b      	ldrh	r3, [r3, #10]
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d008      	beq.n	800e670 <find_volume+0x228>
 800e65e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e660:	895b      	ldrh	r3, [r3, #10]
 800e662:	461a      	mov	r2, r3
 800e664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e666:	895b      	ldrh	r3, [r3, #10]
 800e668:	3b01      	subs	r3, #1
 800e66a:	4013      	ands	r3, r2
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d001      	beq.n	800e674 <find_volume+0x22c>
 800e670:	230d      	movs	r3, #13
 800e672:	e12e      	b.n	800e8d2 <find_volume+0x48a>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e676:	3334      	adds	r3, #52	; 0x34
 800e678:	3311      	adds	r3, #17
 800e67a:	4618      	mov	r0, r3
 800e67c:	f7fd ff02 	bl	800c484 <ld_word>
 800e680:	4603      	mov	r3, r0
 800e682:	461a      	mov	r2, r3
 800e684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e686:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e68a:	891b      	ldrh	r3, [r3, #8]
 800e68c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e690:	b29b      	uxth	r3, r3
 800e692:	2b00      	cmp	r3, #0
 800e694:	d001      	beq.n	800e69a <find_volume+0x252>
 800e696:	230d      	movs	r3, #13
 800e698:	e11b      	b.n	800e8d2 <find_volume+0x48a>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e69a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e69c:	3334      	adds	r3, #52	; 0x34
 800e69e:	3313      	adds	r3, #19
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	f7fd feef 	bl	800c484 <ld_word>
 800e6a6:	4603      	mov	r3, r0
 800e6a8:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e6aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d106      	bne.n	800e6be <find_volume+0x276>
 800e6b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6b2:	3334      	adds	r3, #52	; 0x34
 800e6b4:	3320      	adds	r3, #32
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	f7fd fefc 	bl	800c4b4 <ld_dword>
 800e6bc:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e6be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6c0:	3334      	adds	r3, #52	; 0x34
 800e6c2:	330e      	adds	r3, #14
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	f7fd fedd 	bl	800c484 <ld_word>
 800e6ca:	4603      	mov	r3, r0
 800e6cc:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e6ce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d101      	bne.n	800e6d8 <find_volume+0x290>
 800e6d4:	230d      	movs	r3, #13
 800e6d6:	e0fc      	b.n	800e8d2 <find_volume+0x48a>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e6d8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e6da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e6dc:	4413      	add	r3, r2
 800e6de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e6e0:	8912      	ldrh	r2, [r2, #8]
 800e6e2:	09d2      	lsrs	r2, r2, #7
 800e6e4:	b292      	uxth	r2, r2
 800e6e6:	4413      	add	r3, r2
 800e6e8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e6ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e6ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6ee:	429a      	cmp	r2, r3
 800e6f0:	d201      	bcs.n	800e6f6 <find_volume+0x2ae>
 800e6f2:	230d      	movs	r3, #13
 800e6f4:	e0ed      	b.n	800e8d2 <find_volume+0x48a>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e6f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e6f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6fa:	1ad3      	subs	r3, r2, r3
 800e6fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e6fe:	8952      	ldrh	r2, [r2, #10]
 800e700:	fbb3 f3f2 	udiv	r3, r3, r2
 800e704:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d103      	bne.n	800e714 <find_volume+0x2cc>
 800e70c:	230d      	movs	r3, #13
 800e70e:	e0e0      	b.n	800e8d2 <find_volume+0x48a>
 800e710:	200010f4 	.word	0x200010f4
		fmt = FS_FAT32;
 800e714:	2303      	movs	r3, #3
 800e716:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e71a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e71c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800e720:	4293      	cmp	r3, r2
 800e722:	d802      	bhi.n	800e72a <find_volume+0x2e2>
 800e724:	2302      	movs	r3, #2
 800e726:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e72a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e72c:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e730:	4293      	cmp	r3, r2
 800e732:	d802      	bhi.n	800e73a <find_volume+0x2f2>
 800e734:	2301      	movs	r3, #1
 800e736:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e73c:	1c9a      	adds	r2, r3, #2
 800e73e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e740:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800e742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e744:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e746:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e748:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e74a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e74c:	441a      	add	r2, r3
 800e74e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e750:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800e752:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e756:	441a      	add	r2, r3
 800e758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e75a:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800e75c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e760:	2b03      	cmp	r3, #3
 800e762:	d11e      	bne.n	800e7a2 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e766:	3334      	adds	r3, #52	; 0x34
 800e768:	332a      	adds	r3, #42	; 0x2a
 800e76a:	4618      	mov	r0, r3
 800e76c:	f7fd fe8a 	bl	800c484 <ld_word>
 800e770:	4603      	mov	r3, r0
 800e772:	2b00      	cmp	r3, #0
 800e774:	d001      	beq.n	800e77a <find_volume+0x332>
 800e776:	230d      	movs	r3, #13
 800e778:	e0ab      	b.n	800e8d2 <find_volume+0x48a>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e77a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e77c:	891b      	ldrh	r3, [r3, #8]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d001      	beq.n	800e786 <find_volume+0x33e>
 800e782:	230d      	movs	r3, #13
 800e784:	e0a5      	b.n	800e8d2 <find_volume+0x48a>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e788:	3334      	adds	r3, #52	; 0x34
 800e78a:	332c      	adds	r3, #44	; 0x2c
 800e78c:	4618      	mov	r0, r3
 800e78e:	f7fd fe91 	bl	800c4b4 <ld_dword>
 800e792:	4602      	mov	r2, r0
 800e794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e796:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e79a:	699b      	ldr	r3, [r3, #24]
 800e79c:	009b      	lsls	r3, r3, #2
 800e79e:	647b      	str	r3, [r7, #68]	; 0x44
 800e7a0:	e01f      	b.n	800e7e2 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e7a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7a4:	891b      	ldrh	r3, [r3, #8]
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d101      	bne.n	800e7ae <find_volume+0x366>
 800e7aa:	230d      	movs	r3, #13
 800e7ac:	e091      	b.n	800e8d2 <find_volume+0x48a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e7ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e7b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e7b4:	441a      	add	r2, r3
 800e7b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7b8:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e7ba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e7be:	2b02      	cmp	r3, #2
 800e7c0:	d103      	bne.n	800e7ca <find_volume+0x382>
 800e7c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7c4:	699b      	ldr	r3, [r3, #24]
 800e7c6:	005b      	lsls	r3, r3, #1
 800e7c8:	e00a      	b.n	800e7e0 <find_volume+0x398>
 800e7ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7cc:	699a      	ldr	r2, [r3, #24]
 800e7ce:	4613      	mov	r3, r2
 800e7d0:	005b      	lsls	r3, r3, #1
 800e7d2:	4413      	add	r3, r2
 800e7d4:	085a      	lsrs	r2, r3, #1
 800e7d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7d8:	699b      	ldr	r3, [r3, #24]
 800e7da:	f003 0301 	and.w	r3, r3, #1
 800e7de:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e7e0:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e7e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7e4:	69da      	ldr	r2, [r3, #28]
 800e7e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e7e8:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800e7ec:	0b1b      	lsrs	r3, r3, #12
 800e7ee:	429a      	cmp	r2, r3
 800e7f0:	d201      	bcs.n	800e7f6 <find_volume+0x3ae>
 800e7f2:	230d      	movs	r3, #13
 800e7f4:	e06d      	b.n	800e8d2 <find_volume+0x48a>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e7f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7f8:	f04f 32ff 	mov.w	r2, #4294967295
 800e7fc:	615a      	str	r2, [r3, #20]
 800e7fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e800:	695a      	ldr	r2, [r3, #20]
 800e802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e804:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800e806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e808:	2280      	movs	r2, #128	; 0x80
 800e80a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e80c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e810:	2b03      	cmp	r3, #3
 800e812:	d149      	bne.n	800e8a8 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e816:	3334      	adds	r3, #52	; 0x34
 800e818:	3330      	adds	r3, #48	; 0x30
 800e81a:	4618      	mov	r0, r3
 800e81c:	f7fd fe32 	bl	800c484 <ld_word>
 800e820:	4603      	mov	r3, r0
 800e822:	2b01      	cmp	r3, #1
 800e824:	d140      	bne.n	800e8a8 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e826:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e828:	3301      	adds	r3, #1
 800e82a:	4619      	mov	r1, r3
 800e82c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e82e:	f7fe f8d9 	bl	800c9e4 <move_window>
 800e832:	4603      	mov	r3, r0
 800e834:	2b00      	cmp	r3, #0
 800e836:	d137      	bne.n	800e8a8 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800e838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e83a:	2200      	movs	r2, #0
 800e83c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e83e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e840:	3334      	adds	r3, #52	; 0x34
 800e842:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e846:	4618      	mov	r0, r3
 800e848:	f7fd fe1c 	bl	800c484 <ld_word>
 800e84c:	4603      	mov	r3, r0
 800e84e:	461a      	mov	r2, r3
 800e850:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e854:	429a      	cmp	r2, r3
 800e856:	d127      	bne.n	800e8a8 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e85a:	3334      	adds	r3, #52	; 0x34
 800e85c:	4618      	mov	r0, r3
 800e85e:	f7fd fe29 	bl	800c4b4 <ld_dword>
 800e862:	4602      	mov	r2, r0
 800e864:	4b1d      	ldr	r3, [pc, #116]	; (800e8dc <find_volume+0x494>)
 800e866:	429a      	cmp	r2, r3
 800e868:	d11e      	bne.n	800e8a8 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e86a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e86c:	3334      	adds	r3, #52	; 0x34
 800e86e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e872:	4618      	mov	r0, r3
 800e874:	f7fd fe1e 	bl	800c4b4 <ld_dword>
 800e878:	4602      	mov	r2, r0
 800e87a:	4b19      	ldr	r3, [pc, #100]	; (800e8e0 <find_volume+0x498>)
 800e87c:	429a      	cmp	r2, r3
 800e87e:	d113      	bne.n	800e8a8 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e882:	3334      	adds	r3, #52	; 0x34
 800e884:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800e888:	4618      	mov	r0, r3
 800e88a:	f7fd fe13 	bl	800c4b4 <ld_dword>
 800e88e:	4602      	mov	r2, r0
 800e890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e892:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e896:	3334      	adds	r3, #52	; 0x34
 800e898:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800e89c:	4618      	mov	r0, r3
 800e89e:	f7fd fe09 	bl	800c4b4 <ld_dword>
 800e8a2:	4602      	mov	r2, r0
 800e8a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8a6:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e8a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8aa:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800e8ae:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e8b0:	4b0c      	ldr	r3, [pc, #48]	; (800e8e4 <find_volume+0x49c>)
 800e8b2:	881b      	ldrh	r3, [r3, #0]
 800e8b4:	3301      	adds	r3, #1
 800e8b6:	b29a      	uxth	r2, r3
 800e8b8:	4b0a      	ldr	r3, [pc, #40]	; (800e8e4 <find_volume+0x49c>)
 800e8ba:	801a      	strh	r2, [r3, #0]
 800e8bc:	4b09      	ldr	r3, [pc, #36]	; (800e8e4 <find_volume+0x49c>)
 800e8be:	881a      	ldrh	r2, [r3, #0]
 800e8c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8c2:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800e8c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8c6:	4a08      	ldr	r2, [pc, #32]	; (800e8e8 <find_volume+0x4a0>)
 800e8c8:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e8ca:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e8cc:	f7fe f822 	bl	800c914 <clear_lock>
#endif
	return FR_OK;
 800e8d0:	2300      	movs	r3, #0
}
 800e8d2:	4618      	mov	r0, r3
 800e8d4:	3758      	adds	r7, #88	; 0x58
 800e8d6:	46bd      	mov	sp, r7
 800e8d8:	bd80      	pop	{r7, pc}
 800e8da:	bf00      	nop
 800e8dc:	41615252 	.word	0x41615252
 800e8e0:	61417272 	.word	0x61417272
 800e8e4:	200010f8 	.word	0x200010f8
 800e8e8:	2000111c 	.word	0x2000111c

0800e8ec <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	b084      	sub	sp, #16
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	6078      	str	r0, [r7, #4]
 800e8f4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e8f6:	2309      	movs	r3, #9
 800e8f8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d01c      	beq.n	800e93a <validate+0x4e>
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	2b00      	cmp	r3, #0
 800e906:	d018      	beq.n	800e93a <validate+0x4e>
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	781b      	ldrb	r3, [r3, #0]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d013      	beq.n	800e93a <validate+0x4e>
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	889a      	ldrh	r2, [r3, #4]
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	88db      	ldrh	r3, [r3, #6]
 800e91c:	429a      	cmp	r2, r3
 800e91e:	d10c      	bne.n	800e93a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	785b      	ldrb	r3, [r3, #1]
 800e926:	4618      	mov	r0, r3
 800e928:	f7fd fd0e 	bl	800c348 <disk_status>
 800e92c:	4603      	mov	r3, r0
 800e92e:	f003 0301 	and.w	r3, r3, #1
 800e932:	2b00      	cmp	r3, #0
 800e934:	d101      	bne.n	800e93a <validate+0x4e>
			res = FR_OK;
 800e936:	2300      	movs	r3, #0
 800e938:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e93a:	7bfb      	ldrb	r3, [r7, #15]
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d102      	bne.n	800e946 <validate+0x5a>
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	e000      	b.n	800e948 <validate+0x5c>
 800e946:	2300      	movs	r3, #0
 800e948:	683a      	ldr	r2, [r7, #0]
 800e94a:	6013      	str	r3, [r2, #0]
	return res;
 800e94c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e94e:	4618      	mov	r0, r3
 800e950:	3710      	adds	r7, #16
 800e952:	46bd      	mov	sp, r7
 800e954:	bd80      	pop	{r7, pc}
	...

0800e958 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e958:	b580      	push	{r7, lr}
 800e95a:	b088      	sub	sp, #32
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	60f8      	str	r0, [r7, #12]
 800e960:	60b9      	str	r1, [r7, #8]
 800e962:	4613      	mov	r3, r2
 800e964:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e966:	68bb      	ldr	r3, [r7, #8]
 800e968:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e96a:	f107 0310 	add.w	r3, r7, #16
 800e96e:	4618      	mov	r0, r3
 800e970:	f7ff fccf 	bl	800e312 <get_ldnumber>
 800e974:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e976:	69fb      	ldr	r3, [r7, #28]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	da01      	bge.n	800e980 <f_mount+0x28>
 800e97c:	230b      	movs	r3, #11
 800e97e:	e02b      	b.n	800e9d8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e980:	4a17      	ldr	r2, [pc, #92]	; (800e9e0 <f_mount+0x88>)
 800e982:	69fb      	ldr	r3, [r7, #28]
 800e984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e988:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e98a:	69bb      	ldr	r3, [r7, #24]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d005      	beq.n	800e99c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e990:	69b8      	ldr	r0, [r7, #24]
 800e992:	f7fd ffbf 	bl	800c914 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e996:	69bb      	ldr	r3, [r7, #24]
 800e998:	2200      	movs	r2, #0
 800e99a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d002      	beq.n	800e9a8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	2200      	movs	r2, #0
 800e9a6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e9a8:	68fa      	ldr	r2, [r7, #12]
 800e9aa:	490d      	ldr	r1, [pc, #52]	; (800e9e0 <f_mount+0x88>)
 800e9ac:	69fb      	ldr	r3, [r7, #28]
 800e9ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d002      	beq.n	800e9be <f_mount+0x66>
 800e9b8:	79fb      	ldrb	r3, [r7, #7]
 800e9ba:	2b01      	cmp	r3, #1
 800e9bc:	d001      	beq.n	800e9c2 <f_mount+0x6a>
 800e9be:	2300      	movs	r3, #0
 800e9c0:	e00a      	b.n	800e9d8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e9c2:	f107 010c 	add.w	r1, r7, #12
 800e9c6:	f107 0308 	add.w	r3, r7, #8
 800e9ca:	2200      	movs	r2, #0
 800e9cc:	4618      	mov	r0, r3
 800e9ce:	f7ff fd3b 	bl	800e448 <find_volume>
 800e9d2:	4603      	mov	r3, r0
 800e9d4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e9d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e9d8:	4618      	mov	r0, r3
 800e9da:	3720      	adds	r7, #32
 800e9dc:	46bd      	mov	sp, r7
 800e9de:	bd80      	pop	{r7, pc}
 800e9e0:	200010f4 	.word	0x200010f4

0800e9e4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e9e4:	b580      	push	{r7, lr}
 800e9e6:	b09a      	sub	sp, #104	; 0x68
 800e9e8:	af00      	add	r7, sp, #0
 800e9ea:	60f8      	str	r0, [r7, #12]
 800e9ec:	60b9      	str	r1, [r7, #8]
 800e9ee:	4613      	mov	r3, r2
 800e9f0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d101      	bne.n	800e9fc <f_open+0x18>
 800e9f8:	2309      	movs	r3, #9
 800e9fa:	e1ad      	b.n	800ed58 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e9fc:	79fb      	ldrb	r3, [r7, #7]
 800e9fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ea02:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800ea04:	79fa      	ldrb	r2, [r7, #7]
 800ea06:	f107 0110 	add.w	r1, r7, #16
 800ea0a:	f107 0308 	add.w	r3, r7, #8
 800ea0e:	4618      	mov	r0, r3
 800ea10:	f7ff fd1a 	bl	800e448 <find_volume>
 800ea14:	4603      	mov	r3, r0
 800ea16:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800ea1a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	f040 8191 	bne.w	800ed46 <f_open+0x362>
		dj.obj.fs = fs;
 800ea24:	693b      	ldr	r3, [r7, #16]
 800ea26:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800ea28:	68ba      	ldr	r2, [r7, #8]
 800ea2a:	f107 0314 	add.w	r3, r7, #20
 800ea2e:	4611      	mov	r1, r2
 800ea30:	4618      	mov	r0, r3
 800ea32:	f7ff fbfd 	bl	800e230 <follow_path>
 800ea36:	4603      	mov	r3, r0
 800ea38:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800ea3c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d11a      	bne.n	800ea7a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800ea44:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ea48:	b25b      	sxtb	r3, r3
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	da03      	bge.n	800ea56 <f_open+0x72>
				res = FR_INVALID_NAME;
 800ea4e:	2306      	movs	r3, #6
 800ea50:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ea54:	e011      	b.n	800ea7a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ea56:	79fb      	ldrb	r3, [r7, #7]
 800ea58:	f023 0301 	bic.w	r3, r3, #1
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	bf14      	ite	ne
 800ea60:	2301      	movne	r3, #1
 800ea62:	2300      	moveq	r3, #0
 800ea64:	b2db      	uxtb	r3, r3
 800ea66:	461a      	mov	r2, r3
 800ea68:	f107 0314 	add.w	r3, r7, #20
 800ea6c:	4611      	mov	r1, r2
 800ea6e:	4618      	mov	r0, r3
 800ea70:	f7fd fe08 	bl	800c684 <chk_lock>
 800ea74:	4603      	mov	r3, r0
 800ea76:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ea7a:	79fb      	ldrb	r3, [r7, #7]
 800ea7c:	f003 031c 	and.w	r3, r3, #28
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d07f      	beq.n	800eb84 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800ea84:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d017      	beq.n	800eabc <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ea8c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ea90:	2b04      	cmp	r3, #4
 800ea92:	d10e      	bne.n	800eab2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ea94:	f7fd fe52 	bl	800c73c <enq_lock>
 800ea98:	4603      	mov	r3, r0
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d006      	beq.n	800eaac <f_open+0xc8>
 800ea9e:	f107 0314 	add.w	r3, r7, #20
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	f7ff f836 	bl	800db14 <dir_register>
 800eaa8:	4603      	mov	r3, r0
 800eaaa:	e000      	b.n	800eaae <f_open+0xca>
 800eaac:	2312      	movs	r3, #18
 800eaae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800eab2:	79fb      	ldrb	r3, [r7, #7]
 800eab4:	f043 0308 	orr.w	r3, r3, #8
 800eab8:	71fb      	strb	r3, [r7, #7]
 800eaba:	e010      	b.n	800eade <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800eabc:	7ebb      	ldrb	r3, [r7, #26]
 800eabe:	f003 0311 	and.w	r3, r3, #17
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d003      	beq.n	800eace <f_open+0xea>
					res = FR_DENIED;
 800eac6:	2307      	movs	r3, #7
 800eac8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800eacc:	e007      	b.n	800eade <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800eace:	79fb      	ldrb	r3, [r7, #7]
 800ead0:	f003 0304 	and.w	r3, r3, #4
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d002      	beq.n	800eade <f_open+0xfa>
 800ead8:	2308      	movs	r3, #8
 800eada:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800eade:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d168      	bne.n	800ebb8 <f_open+0x1d4>
 800eae6:	79fb      	ldrb	r3, [r7, #7]
 800eae8:	f003 0308 	and.w	r3, r3, #8
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d063      	beq.n	800ebb8 <f_open+0x1d4>
				dw = GET_FATTIME();
 800eaf0:	f7f3 fd44 	bl	800257c <get_fattime>
 800eaf4:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800eaf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eaf8:	330e      	adds	r3, #14
 800eafa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800eafc:	4618      	mov	r0, r3
 800eafe:	f7fd fd17 	bl	800c530 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800eb02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb04:	3316      	adds	r3, #22
 800eb06:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800eb08:	4618      	mov	r0, r3
 800eb0a:	f7fd fd11 	bl	800c530 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800eb0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb10:	330b      	adds	r3, #11
 800eb12:	2220      	movs	r2, #32
 800eb14:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800eb16:	693b      	ldr	r3, [r7, #16]
 800eb18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eb1a:	4611      	mov	r1, r2
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	f7fe fc65 	bl	800d3ec <ld_clust>
 800eb22:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800eb24:	693b      	ldr	r3, [r7, #16]
 800eb26:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800eb28:	2200      	movs	r2, #0
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	f7fe fc7d 	bl	800d42a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800eb30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb32:	331c      	adds	r3, #28
 800eb34:	2100      	movs	r1, #0
 800eb36:	4618      	mov	r0, r3
 800eb38:	f7fd fcfa 	bl	800c530 <st_dword>
					fs->wflag = 1;
 800eb3c:	693b      	ldr	r3, [r7, #16]
 800eb3e:	2201      	movs	r2, #1
 800eb40:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800eb42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d037      	beq.n	800ebb8 <f_open+0x1d4>
						dw = fs->winsect;
 800eb48:	693b      	ldr	r3, [r7, #16]
 800eb4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb4c:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800eb4e:	f107 0314 	add.w	r3, r7, #20
 800eb52:	2200      	movs	r2, #0
 800eb54:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800eb56:	4618      	mov	r0, r3
 800eb58:	f7fe f990 	bl	800ce7c <remove_chain>
 800eb5c:	4603      	mov	r3, r0
 800eb5e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800eb62:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d126      	bne.n	800ebb8 <f_open+0x1d4>
							res = move_window(fs, dw);
 800eb6a:	693b      	ldr	r3, [r7, #16]
 800eb6c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800eb6e:	4618      	mov	r0, r3
 800eb70:	f7fd ff38 	bl	800c9e4 <move_window>
 800eb74:	4603      	mov	r3, r0
 800eb76:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800eb7a:	693b      	ldr	r3, [r7, #16]
 800eb7c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800eb7e:	3a01      	subs	r2, #1
 800eb80:	611a      	str	r2, [r3, #16]
 800eb82:	e019      	b.n	800ebb8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800eb84:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d115      	bne.n	800ebb8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800eb8c:	7ebb      	ldrb	r3, [r7, #26]
 800eb8e:	f003 0310 	and.w	r3, r3, #16
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d003      	beq.n	800eb9e <f_open+0x1ba>
					res = FR_NO_FILE;
 800eb96:	2304      	movs	r3, #4
 800eb98:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800eb9c:	e00c      	b.n	800ebb8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800eb9e:	79fb      	ldrb	r3, [r7, #7]
 800eba0:	f003 0302 	and.w	r3, r3, #2
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d007      	beq.n	800ebb8 <f_open+0x1d4>
 800eba8:	7ebb      	ldrb	r3, [r7, #26]
 800ebaa:	f003 0301 	and.w	r3, r3, #1
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d002      	beq.n	800ebb8 <f_open+0x1d4>
						res = FR_DENIED;
 800ebb2:	2307      	movs	r3, #7
 800ebb4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800ebb8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d128      	bne.n	800ec12 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ebc0:	79fb      	ldrb	r3, [r7, #7]
 800ebc2:	f003 0308 	and.w	r3, r3, #8
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d003      	beq.n	800ebd2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800ebca:	79fb      	ldrb	r3, [r7, #7]
 800ebcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ebd0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800ebd2:	693b      	ldr	r3, [r7, #16]
 800ebd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800ebda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ebe0:	79fb      	ldrb	r3, [r7, #7]
 800ebe2:	f023 0301 	bic.w	r3, r3, #1
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	bf14      	ite	ne
 800ebea:	2301      	movne	r3, #1
 800ebec:	2300      	moveq	r3, #0
 800ebee:	b2db      	uxtb	r3, r3
 800ebf0:	461a      	mov	r2, r3
 800ebf2:	f107 0314 	add.w	r3, r7, #20
 800ebf6:	4611      	mov	r1, r2
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	f7fd fdc1 	bl	800c780 <inc_lock>
 800ebfe:	4602      	mov	r2, r0
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	691b      	ldr	r3, [r3, #16]
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d102      	bne.n	800ec12 <f_open+0x22e>
 800ec0c:	2302      	movs	r3, #2
 800ec0e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800ec12:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	f040 8095 	bne.w	800ed46 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800ec1c:	693b      	ldr	r3, [r7, #16]
 800ec1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ec20:	4611      	mov	r1, r2
 800ec22:	4618      	mov	r0, r3
 800ec24:	f7fe fbe2 	bl	800d3ec <ld_clust>
 800ec28:	4602      	mov	r2, r0
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ec2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec30:	331c      	adds	r3, #28
 800ec32:	4618      	mov	r0, r3
 800ec34:	f7fd fc3e 	bl	800c4b4 <ld_dword>
 800ec38:	4602      	mov	r2, r0
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	2200      	movs	r2, #0
 800ec42:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ec44:	693a      	ldr	r2, [r7, #16]
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ec4a:	693b      	ldr	r3, [r7, #16]
 800ec4c:	88da      	ldrh	r2, [r3, #6]
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	79fa      	ldrb	r2, [r7, #7]
 800ec56:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	2200      	movs	r2, #0
 800ec5c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	2200      	movs	r2, #0
 800ec62:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	2200      	movs	r2, #0
 800ec68:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	3330      	adds	r3, #48	; 0x30
 800ec6e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ec72:	2100      	movs	r1, #0
 800ec74:	4618      	mov	r0, r3
 800ec76:	f7fd fca8 	bl	800c5ca <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ec7a:	79fb      	ldrb	r3, [r7, #7]
 800ec7c:	f003 0320 	and.w	r3, r3, #32
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d060      	beq.n	800ed46 <f_open+0x362>
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	68db      	ldr	r3, [r3, #12]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d05c      	beq.n	800ed46 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	68da      	ldr	r2, [r3, #12]
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ec94:	693b      	ldr	r3, [r7, #16]
 800ec96:	895b      	ldrh	r3, [r3, #10]
 800ec98:	031b      	lsls	r3, r3, #12
 800ec9a:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	689b      	ldr	r3, [r3, #8]
 800eca0:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	68db      	ldr	r3, [r3, #12]
 800eca6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800eca8:	e016      	b.n	800ecd8 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ecae:	4618      	mov	r0, r3
 800ecb0:	f7fd ff53 	bl	800cb5a <get_fat>
 800ecb4:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800ecb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ecb8:	2b01      	cmp	r3, #1
 800ecba:	d802      	bhi.n	800ecc2 <f_open+0x2de>
 800ecbc:	2302      	movs	r3, #2
 800ecbe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ecc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ecc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecc8:	d102      	bne.n	800ecd0 <f_open+0x2ec>
 800ecca:	2301      	movs	r3, #1
 800eccc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ecd0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ecd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ecd4:	1ad3      	subs	r3, r2, r3
 800ecd6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ecd8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d103      	bne.n	800ece8 <f_open+0x304>
 800ece0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ece2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ece4:	429a      	cmp	r2, r3
 800ece6:	d8e0      	bhi.n	800ecaa <f_open+0x2c6>
				}
				fp->clust = clst;
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ecec:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ecee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d127      	bne.n	800ed46 <f_open+0x362>
 800ecf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ecf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d022      	beq.n	800ed46 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800ed00:	693b      	ldr	r3, [r7, #16]
 800ed02:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ed04:	4618      	mov	r0, r3
 800ed06:	f7fd ff09 	bl	800cb1c <clust2sect>
 800ed0a:	64f8      	str	r0, [r7, #76]	; 0x4c
 800ed0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d103      	bne.n	800ed1a <f_open+0x336>
						res = FR_INT_ERR;
 800ed12:	2302      	movs	r3, #2
 800ed14:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ed18:	e015      	b.n	800ed46 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ed1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ed1c:	0b1a      	lsrs	r2, r3, #12
 800ed1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed20:	441a      	add	r2, r3
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ed26:	693b      	ldr	r3, [r7, #16]
 800ed28:	7858      	ldrb	r0, [r3, #1]
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	6a1a      	ldr	r2, [r3, #32]
 800ed34:	2301      	movs	r3, #1
 800ed36:	f7fd fb47 	bl	800c3c8 <disk_read>
 800ed3a:	4603      	mov	r3, r0
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d002      	beq.n	800ed46 <f_open+0x362>
 800ed40:	2301      	movs	r3, #1
 800ed42:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ed46:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d002      	beq.n	800ed54 <f_open+0x370>
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	2200      	movs	r2, #0
 800ed52:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ed54:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800ed58:	4618      	mov	r0, r3
 800ed5a:	3768      	adds	r7, #104	; 0x68
 800ed5c:	46bd      	mov	sp, r7
 800ed5e:	bd80      	pop	{r7, pc}

0800ed60 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800ed60:	b580      	push	{r7, lr}
 800ed62:	b08e      	sub	sp, #56	; 0x38
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	60f8      	str	r0, [r7, #12]
 800ed68:	60b9      	str	r1, [r7, #8]
 800ed6a:	607a      	str	r2, [r7, #4]
 800ed6c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800ed6e:	68bb      	ldr	r3, [r7, #8]
 800ed70:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800ed72:	683b      	ldr	r3, [r7, #0]
 800ed74:	2200      	movs	r2, #0
 800ed76:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	f107 0214 	add.w	r2, r7, #20
 800ed7e:	4611      	mov	r1, r2
 800ed80:	4618      	mov	r0, r3
 800ed82:	f7ff fdb3 	bl	800e8ec <validate>
 800ed86:	4603      	mov	r3, r0
 800ed88:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ed8c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d107      	bne.n	800eda4 <f_read+0x44>
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	7d5b      	ldrb	r3, [r3, #21]
 800ed98:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ed9c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d002      	beq.n	800edaa <f_read+0x4a>
 800eda4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800eda8:	e115      	b.n	800efd6 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	7d1b      	ldrb	r3, [r3, #20]
 800edae:	f003 0301 	and.w	r3, r3, #1
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d101      	bne.n	800edba <f_read+0x5a>
 800edb6:	2307      	movs	r3, #7
 800edb8:	e10d      	b.n	800efd6 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	68da      	ldr	r2, [r3, #12]
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	699b      	ldr	r3, [r3, #24]
 800edc2:	1ad3      	subs	r3, r2, r3
 800edc4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800edc6:	687a      	ldr	r2, [r7, #4]
 800edc8:	6a3b      	ldr	r3, [r7, #32]
 800edca:	429a      	cmp	r2, r3
 800edcc:	f240 80fe 	bls.w	800efcc <f_read+0x26c>
 800edd0:	6a3b      	ldr	r3, [r7, #32]
 800edd2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800edd4:	e0fa      	b.n	800efcc <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	699b      	ldr	r3, [r3, #24]
 800edda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800edde:	2b00      	cmp	r3, #0
 800ede0:	f040 80c6 	bne.w	800ef70 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	699b      	ldr	r3, [r3, #24]
 800ede8:	0b1b      	lsrs	r3, r3, #12
 800edea:	697a      	ldr	r2, [r7, #20]
 800edec:	8952      	ldrh	r2, [r2, #10]
 800edee:	3a01      	subs	r2, #1
 800edf0:	4013      	ands	r3, r2
 800edf2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800edf4:	69fb      	ldr	r3, [r7, #28]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d12f      	bne.n	800ee5a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	699b      	ldr	r3, [r3, #24]
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d103      	bne.n	800ee0a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	689b      	ldr	r3, [r3, #8]
 800ee06:	633b      	str	r3, [r7, #48]	; 0x30
 800ee08:	e013      	b.n	800ee32 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d007      	beq.n	800ee22 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	699b      	ldr	r3, [r3, #24]
 800ee16:	4619      	mov	r1, r3
 800ee18:	68f8      	ldr	r0, [r7, #12]
 800ee1a:	f7fe f92c 	bl	800d076 <clmt_clust>
 800ee1e:	6338      	str	r0, [r7, #48]	; 0x30
 800ee20:	e007      	b.n	800ee32 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800ee22:	68fa      	ldr	r2, [r7, #12]
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	69db      	ldr	r3, [r3, #28]
 800ee28:	4619      	mov	r1, r3
 800ee2a:	4610      	mov	r0, r2
 800ee2c:	f7fd fe95 	bl	800cb5a <get_fat>
 800ee30:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800ee32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee34:	2b01      	cmp	r3, #1
 800ee36:	d804      	bhi.n	800ee42 <f_read+0xe2>
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	2202      	movs	r2, #2
 800ee3c:	755a      	strb	r2, [r3, #21]
 800ee3e:	2302      	movs	r3, #2
 800ee40:	e0c9      	b.n	800efd6 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ee42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee48:	d104      	bne.n	800ee54 <f_read+0xf4>
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	2201      	movs	r2, #1
 800ee4e:	755a      	strb	r2, [r3, #21]
 800ee50:	2301      	movs	r3, #1
 800ee52:	e0c0      	b.n	800efd6 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee58:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ee5a:	697a      	ldr	r2, [r7, #20]
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	69db      	ldr	r3, [r3, #28]
 800ee60:	4619      	mov	r1, r3
 800ee62:	4610      	mov	r0, r2
 800ee64:	f7fd fe5a 	bl	800cb1c <clust2sect>
 800ee68:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ee6a:	69bb      	ldr	r3, [r7, #24]
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d104      	bne.n	800ee7a <f_read+0x11a>
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	2202      	movs	r2, #2
 800ee74:	755a      	strb	r2, [r3, #21]
 800ee76:	2302      	movs	r3, #2
 800ee78:	e0ad      	b.n	800efd6 <f_read+0x276>
			sect += csect;
 800ee7a:	69ba      	ldr	r2, [r7, #24]
 800ee7c:	69fb      	ldr	r3, [r7, #28]
 800ee7e:	4413      	add	r3, r2
 800ee80:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	0b1b      	lsrs	r3, r3, #12
 800ee86:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800ee88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d039      	beq.n	800ef02 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ee8e:	69fa      	ldr	r2, [r7, #28]
 800ee90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee92:	4413      	add	r3, r2
 800ee94:	697a      	ldr	r2, [r7, #20]
 800ee96:	8952      	ldrh	r2, [r2, #10]
 800ee98:	4293      	cmp	r3, r2
 800ee9a:	d905      	bls.n	800eea8 <f_read+0x148>
					cc = fs->csize - csect;
 800ee9c:	697b      	ldr	r3, [r7, #20]
 800ee9e:	895b      	ldrh	r3, [r3, #10]
 800eea0:	461a      	mov	r2, r3
 800eea2:	69fb      	ldr	r3, [r7, #28]
 800eea4:	1ad3      	subs	r3, r2, r3
 800eea6:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800eea8:	697b      	ldr	r3, [r7, #20]
 800eeaa:	7858      	ldrb	r0, [r3, #1]
 800eeac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeae:	69ba      	ldr	r2, [r7, #24]
 800eeb0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800eeb2:	f7fd fa89 	bl	800c3c8 <disk_read>
 800eeb6:	4603      	mov	r3, r0
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d004      	beq.n	800eec6 <f_read+0x166>
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	2201      	movs	r2, #1
 800eec0:	755a      	strb	r2, [r3, #21]
 800eec2:	2301      	movs	r3, #1
 800eec4:	e087      	b.n	800efd6 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	7d1b      	ldrb	r3, [r3, #20]
 800eeca:	b25b      	sxtb	r3, r3
 800eecc:	2b00      	cmp	r3, #0
 800eece:	da14      	bge.n	800eefa <f_read+0x19a>
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	6a1a      	ldr	r2, [r3, #32]
 800eed4:	69bb      	ldr	r3, [r7, #24]
 800eed6:	1ad3      	subs	r3, r2, r3
 800eed8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eeda:	429a      	cmp	r2, r3
 800eedc:	d90d      	bls.n	800eefa <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	6a1a      	ldr	r2, [r3, #32]
 800eee2:	69bb      	ldr	r3, [r7, #24]
 800eee4:	1ad3      	subs	r3, r2, r3
 800eee6:	031b      	lsls	r3, r3, #12
 800eee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eeea:	18d0      	adds	r0, r2, r3
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	3330      	adds	r3, #48	; 0x30
 800eef0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800eef4:	4619      	mov	r1, r3
 800eef6:	f7fd fb47 	bl	800c588 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800eefa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eefc:	031b      	lsls	r3, r3, #12
 800eefe:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800ef00:	e050      	b.n	800efa4 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	6a1b      	ldr	r3, [r3, #32]
 800ef06:	69ba      	ldr	r2, [r7, #24]
 800ef08:	429a      	cmp	r2, r3
 800ef0a:	d02e      	beq.n	800ef6a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	7d1b      	ldrb	r3, [r3, #20]
 800ef10:	b25b      	sxtb	r3, r3
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	da18      	bge.n	800ef48 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ef16:	697b      	ldr	r3, [r7, #20]
 800ef18:	7858      	ldrb	r0, [r3, #1]
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	6a1a      	ldr	r2, [r3, #32]
 800ef24:	2301      	movs	r3, #1
 800ef26:	f7fd fa6f 	bl	800c408 <disk_write>
 800ef2a:	4603      	mov	r3, r0
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d004      	beq.n	800ef3a <f_read+0x1da>
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	2201      	movs	r2, #1
 800ef34:	755a      	strb	r2, [r3, #21]
 800ef36:	2301      	movs	r3, #1
 800ef38:	e04d      	b.n	800efd6 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	7d1b      	ldrb	r3, [r3, #20]
 800ef3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ef42:	b2da      	uxtb	r2, r3
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ef48:	697b      	ldr	r3, [r7, #20]
 800ef4a:	7858      	ldrb	r0, [r3, #1]
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ef52:	2301      	movs	r3, #1
 800ef54:	69ba      	ldr	r2, [r7, #24]
 800ef56:	f7fd fa37 	bl	800c3c8 <disk_read>
 800ef5a:	4603      	mov	r3, r0
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d004      	beq.n	800ef6a <f_read+0x20a>
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	2201      	movs	r2, #1
 800ef64:	755a      	strb	r2, [r3, #21]
 800ef66:	2301      	movs	r3, #1
 800ef68:	e035      	b.n	800efd6 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	69ba      	ldr	r2, [r7, #24]
 800ef6e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	699b      	ldr	r3, [r3, #24]
 800ef74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ef78:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 800ef7c:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800ef7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	429a      	cmp	r2, r3
 800ef84:	d901      	bls.n	800ef8a <f_read+0x22a>
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	699b      	ldr	r3, [r3, #24]
 800ef94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ef98:	4413      	add	r3, r2
 800ef9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ef9c:	4619      	mov	r1, r3
 800ef9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800efa0:	f7fd faf2 	bl	800c588 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800efa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800efa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efa8:	4413      	add	r3, r2
 800efaa:	627b      	str	r3, [r7, #36]	; 0x24
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	699a      	ldr	r2, [r3, #24]
 800efb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efb2:	441a      	add	r2, r3
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	619a      	str	r2, [r3, #24]
 800efb8:	683b      	ldr	r3, [r7, #0]
 800efba:	681a      	ldr	r2, [r3, #0]
 800efbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efbe:	441a      	add	r2, r3
 800efc0:	683b      	ldr	r3, [r7, #0]
 800efc2:	601a      	str	r2, [r3, #0]
 800efc4:	687a      	ldr	r2, [r7, #4]
 800efc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efc8:	1ad3      	subs	r3, r2, r3
 800efca:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	f47f af01 	bne.w	800edd6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800efd4:	2300      	movs	r3, #0
}
 800efd6:	4618      	mov	r0, r3
 800efd8:	3738      	adds	r7, #56	; 0x38
 800efda:	46bd      	mov	sp, r7
 800efdc:	bd80      	pop	{r7, pc}

0800efde <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800efde:	b580      	push	{r7, lr}
 800efe0:	b086      	sub	sp, #24
 800efe2:	af00      	add	r7, sp, #0
 800efe4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	f107 0208 	add.w	r2, r7, #8
 800efec:	4611      	mov	r1, r2
 800efee:	4618      	mov	r0, r3
 800eff0:	f7ff fc7c 	bl	800e8ec <validate>
 800eff4:	4603      	mov	r3, r0
 800eff6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800eff8:	7dfb      	ldrb	r3, [r7, #23]
 800effa:	2b00      	cmp	r3, #0
 800effc:	d168      	bne.n	800f0d0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	7d1b      	ldrb	r3, [r3, #20]
 800f002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f006:	2b00      	cmp	r3, #0
 800f008:	d062      	beq.n	800f0d0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	7d1b      	ldrb	r3, [r3, #20]
 800f00e:	b25b      	sxtb	r3, r3
 800f010:	2b00      	cmp	r3, #0
 800f012:	da15      	bge.n	800f040 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800f014:	68bb      	ldr	r3, [r7, #8]
 800f016:	7858      	ldrb	r0, [r3, #1]
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	6a1a      	ldr	r2, [r3, #32]
 800f022:	2301      	movs	r3, #1
 800f024:	f7fd f9f0 	bl	800c408 <disk_write>
 800f028:	4603      	mov	r3, r0
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d001      	beq.n	800f032 <f_sync+0x54>
 800f02e:	2301      	movs	r3, #1
 800f030:	e04f      	b.n	800f0d2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	7d1b      	ldrb	r3, [r3, #20]
 800f036:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f03a:	b2da      	uxtb	r2, r3
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800f040:	f7f3 fa9c 	bl	800257c <get_fattime>
 800f044:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800f046:	68ba      	ldr	r2, [r7, #8]
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f04c:	4619      	mov	r1, r3
 800f04e:	4610      	mov	r0, r2
 800f050:	f7fd fcc8 	bl	800c9e4 <move_window>
 800f054:	4603      	mov	r3, r0
 800f056:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800f058:	7dfb      	ldrb	r3, [r7, #23]
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d138      	bne.n	800f0d0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f062:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	330b      	adds	r3, #11
 800f068:	781a      	ldrb	r2, [r3, #0]
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	330b      	adds	r3, #11
 800f06e:	f042 0220 	orr.w	r2, r2, #32
 800f072:	b2d2      	uxtb	r2, r2
 800f074:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	6818      	ldr	r0, [r3, #0]
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	689b      	ldr	r3, [r3, #8]
 800f07e:	461a      	mov	r2, r3
 800f080:	68f9      	ldr	r1, [r7, #12]
 800f082:	f7fe f9d2 	bl	800d42a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	f103 021c 	add.w	r2, r3, #28
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	68db      	ldr	r3, [r3, #12]
 800f090:	4619      	mov	r1, r3
 800f092:	4610      	mov	r0, r2
 800f094:	f7fd fa4c 	bl	800c530 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	3316      	adds	r3, #22
 800f09c:	6939      	ldr	r1, [r7, #16]
 800f09e:	4618      	mov	r0, r3
 800f0a0:	f7fd fa46 	bl	800c530 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	3312      	adds	r3, #18
 800f0a8:	2100      	movs	r1, #0
 800f0aa:	4618      	mov	r0, r3
 800f0ac:	f7fd fa25 	bl	800c4fa <st_word>
					fs->wflag = 1;
 800f0b0:	68bb      	ldr	r3, [r7, #8]
 800f0b2:	2201      	movs	r2, #1
 800f0b4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f0b6:	68bb      	ldr	r3, [r7, #8]
 800f0b8:	4618      	mov	r0, r3
 800f0ba:	f7fd fcc1 	bl	800ca40 <sync_fs>
 800f0be:	4603      	mov	r3, r0
 800f0c0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	7d1b      	ldrb	r3, [r3, #20]
 800f0c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f0ca:	b2da      	uxtb	r2, r3
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800f0d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	3718      	adds	r7, #24
 800f0d6:	46bd      	mov	sp, r7
 800f0d8:	bd80      	pop	{r7, pc}

0800f0da <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800f0da:	b580      	push	{r7, lr}
 800f0dc:	b084      	sub	sp, #16
 800f0de:	af00      	add	r7, sp, #0
 800f0e0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800f0e2:	6878      	ldr	r0, [r7, #4]
 800f0e4:	f7ff ff7b 	bl	800efde <f_sync>
 800f0e8:	4603      	mov	r3, r0
 800f0ea:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800f0ec:	7bfb      	ldrb	r3, [r7, #15]
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d118      	bne.n	800f124 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	f107 0208 	add.w	r2, r7, #8
 800f0f8:	4611      	mov	r1, r2
 800f0fa:	4618      	mov	r0, r3
 800f0fc:	f7ff fbf6 	bl	800e8ec <validate>
 800f100:	4603      	mov	r3, r0
 800f102:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f104:	7bfb      	ldrb	r3, [r7, #15]
 800f106:	2b00      	cmp	r3, #0
 800f108:	d10c      	bne.n	800f124 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	691b      	ldr	r3, [r3, #16]
 800f10e:	4618      	mov	r0, r3
 800f110:	f7fd fbc4 	bl	800c89c <dec_lock>
 800f114:	4603      	mov	r3, r0
 800f116:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800f118:	7bfb      	ldrb	r3, [r7, #15]
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d102      	bne.n	800f124 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	2200      	movs	r2, #0
 800f122:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800f124:	7bfb      	ldrb	r3, [r7, #15]
}
 800f126:	4618      	mov	r0, r3
 800f128:	3710      	adds	r7, #16
 800f12a:	46bd      	mov	sp, r7
 800f12c:	bd80      	pop	{r7, pc}

0800f12e <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800f12e:	b580      	push	{r7, lr}
 800f130:	b086      	sub	sp, #24
 800f132:	af00      	add	r7, sp, #0
 800f134:	6078      	str	r0, [r7, #4]
 800f136:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d101      	bne.n	800f142 <f_opendir+0x14>
 800f13e:	2309      	movs	r3, #9
 800f140:	e064      	b.n	800f20c <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800f146:	f107 010c 	add.w	r1, r7, #12
 800f14a:	463b      	mov	r3, r7
 800f14c:	2200      	movs	r2, #0
 800f14e:	4618      	mov	r0, r3
 800f150:	f7ff f97a 	bl	800e448 <find_volume>
 800f154:	4603      	mov	r3, r0
 800f156:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f158:	7dfb      	ldrb	r3, [r7, #23]
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d14f      	bne.n	800f1fe <f_opendir+0xd0>
		obj->fs = fs;
 800f15e:	68fa      	ldr	r2, [r7, #12]
 800f160:	693b      	ldr	r3, [r7, #16]
 800f162:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800f164:	683b      	ldr	r3, [r7, #0]
 800f166:	4619      	mov	r1, r3
 800f168:	6878      	ldr	r0, [r7, #4]
 800f16a:	f7ff f861 	bl	800e230 <follow_path>
 800f16e:	4603      	mov	r3, r0
 800f170:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800f172:	7dfb      	ldrb	r3, [r7, #23]
 800f174:	2b00      	cmp	r3, #0
 800f176:	d13d      	bne.n	800f1f4 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f17e:	b25b      	sxtb	r3, r3
 800f180:	2b00      	cmp	r3, #0
 800f182:	db12      	blt.n	800f1aa <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800f184:	693b      	ldr	r3, [r7, #16]
 800f186:	799b      	ldrb	r3, [r3, #6]
 800f188:	f003 0310 	and.w	r3, r3, #16
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d00a      	beq.n	800f1a6 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800f190:	68fa      	ldr	r2, [r7, #12]
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	6a1b      	ldr	r3, [r3, #32]
 800f196:	4619      	mov	r1, r3
 800f198:	4610      	mov	r0, r2
 800f19a:	f7fe f927 	bl	800d3ec <ld_clust>
 800f19e:	4602      	mov	r2, r0
 800f1a0:	693b      	ldr	r3, [r7, #16]
 800f1a2:	609a      	str	r2, [r3, #8]
 800f1a4:	e001      	b.n	800f1aa <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800f1a6:	2305      	movs	r3, #5
 800f1a8:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800f1aa:	7dfb      	ldrb	r3, [r7, #23]
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d121      	bne.n	800f1f4 <f_opendir+0xc6>
				obj->id = fs->id;
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	88da      	ldrh	r2, [r3, #6]
 800f1b4:	693b      	ldr	r3, [r7, #16]
 800f1b6:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800f1b8:	2100      	movs	r1, #0
 800f1ba:	6878      	ldr	r0, [r7, #4]
 800f1bc:	f7fd ff8f 	bl	800d0de <dir_sdi>
 800f1c0:	4603      	mov	r3, r0
 800f1c2:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800f1c4:	7dfb      	ldrb	r3, [r7, #23]
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d114      	bne.n	800f1f4 <f_opendir+0xc6>
					if (obj->sclust) {
 800f1ca:	693b      	ldr	r3, [r7, #16]
 800f1cc:	689b      	ldr	r3, [r3, #8]
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d00d      	beq.n	800f1ee <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800f1d2:	2100      	movs	r1, #0
 800f1d4:	6878      	ldr	r0, [r7, #4]
 800f1d6:	f7fd fad3 	bl	800c780 <inc_lock>
 800f1da:	4602      	mov	r2, r0
 800f1dc:	693b      	ldr	r3, [r7, #16]
 800f1de:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800f1e0:	693b      	ldr	r3, [r7, #16]
 800f1e2:	691b      	ldr	r3, [r3, #16]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d105      	bne.n	800f1f4 <f_opendir+0xc6>
 800f1e8:	2312      	movs	r3, #18
 800f1ea:	75fb      	strb	r3, [r7, #23]
 800f1ec:	e002      	b.n	800f1f4 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800f1ee:	693b      	ldr	r3, [r7, #16]
 800f1f0:	2200      	movs	r2, #0
 800f1f2:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800f1f4:	7dfb      	ldrb	r3, [r7, #23]
 800f1f6:	2b04      	cmp	r3, #4
 800f1f8:	d101      	bne.n	800f1fe <f_opendir+0xd0>
 800f1fa:	2305      	movs	r3, #5
 800f1fc:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800f1fe:	7dfb      	ldrb	r3, [r7, #23]
 800f200:	2b00      	cmp	r3, #0
 800f202:	d002      	beq.n	800f20a <f_opendir+0xdc>
 800f204:	693b      	ldr	r3, [r7, #16]
 800f206:	2200      	movs	r2, #0
 800f208:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800f20a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f20c:	4618      	mov	r0, r3
 800f20e:	3718      	adds	r7, #24
 800f210:	46bd      	mov	sp, r7
 800f212:	bd80      	pop	{r7, pc}

0800f214 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800f214:	b580      	push	{r7, lr}
 800f216:	b084      	sub	sp, #16
 800f218:	af00      	add	r7, sp, #0
 800f21a:	6078      	str	r0, [r7, #4]
 800f21c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	f107 0208 	add.w	r2, r7, #8
 800f224:	4611      	mov	r1, r2
 800f226:	4618      	mov	r0, r3
 800f228:	f7ff fb60 	bl	800e8ec <validate>
 800f22c:	4603      	mov	r3, r0
 800f22e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f230:	7bfb      	ldrb	r3, [r7, #15]
 800f232:	2b00      	cmp	r3, #0
 800f234:	d126      	bne.n	800f284 <f_readdir+0x70>
		if (!fno) {
 800f236:	683b      	ldr	r3, [r7, #0]
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d106      	bne.n	800f24a <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800f23c:	2100      	movs	r1, #0
 800f23e:	6878      	ldr	r0, [r7, #4]
 800f240:	f7fd ff4d 	bl	800d0de <dir_sdi>
 800f244:	4603      	mov	r3, r0
 800f246:	73fb      	strb	r3, [r7, #15]
 800f248:	e01c      	b.n	800f284 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800f24a:	2100      	movs	r1, #0
 800f24c:	6878      	ldr	r0, [r7, #4]
 800f24e:	f7fe fafa 	bl	800d846 <dir_read>
 800f252:	4603      	mov	r3, r0
 800f254:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800f256:	7bfb      	ldrb	r3, [r7, #15]
 800f258:	2b04      	cmp	r3, #4
 800f25a:	d101      	bne.n	800f260 <f_readdir+0x4c>
 800f25c:	2300      	movs	r3, #0
 800f25e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800f260:	7bfb      	ldrb	r3, [r7, #15]
 800f262:	2b00      	cmp	r3, #0
 800f264:	d10e      	bne.n	800f284 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800f266:	6839      	ldr	r1, [r7, #0]
 800f268:	6878      	ldr	r0, [r7, #4]
 800f26a:	f7fe fd4b 	bl	800dd04 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800f26e:	2100      	movs	r1, #0
 800f270:	6878      	ldr	r0, [r7, #4]
 800f272:	f7fd ffaf 	bl	800d1d4 <dir_next>
 800f276:	4603      	mov	r3, r0
 800f278:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800f27a:	7bfb      	ldrb	r3, [r7, #15]
 800f27c:	2b04      	cmp	r3, #4
 800f27e:	d101      	bne.n	800f284 <f_readdir+0x70>
 800f280:	2300      	movs	r3, #0
 800f282:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800f284:	7bfb      	ldrb	r3, [r7, #15]
}
 800f286:	4618      	mov	r0, r3
 800f288:	3710      	adds	r7, #16
 800f28a:	46bd      	mov	sp, r7
 800f28c:	bd80      	pop	{r7, pc}

0800f28e <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800f28e:	b580      	push	{r7, lr}
 800f290:	b092      	sub	sp, #72	; 0x48
 800f292:	af00      	add	r7, sp, #0
 800f294:	60f8      	str	r0, [r7, #12]
 800f296:	60b9      	str	r1, [r7, #8]
 800f298:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800f29a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800f29e:	f107 030c 	add.w	r3, r7, #12
 800f2a2:	2200      	movs	r2, #0
 800f2a4:	4618      	mov	r0, r3
 800f2a6:	f7ff f8cf 	bl	800e448 <find_volume>
 800f2aa:	4603      	mov	r3, r0
 800f2ac:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800f2b0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	f040 8099 	bne.w	800f3ec <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800f2ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800f2c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2c2:	695a      	ldr	r2, [r3, #20]
 800f2c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2c6:	699b      	ldr	r3, [r3, #24]
 800f2c8:	3b02      	subs	r3, #2
 800f2ca:	429a      	cmp	r2, r3
 800f2cc:	d804      	bhi.n	800f2d8 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800f2ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2d0:	695a      	ldr	r2, [r3, #20]
 800f2d2:	68bb      	ldr	r3, [r7, #8]
 800f2d4:	601a      	str	r2, [r3, #0]
 800f2d6:	e089      	b.n	800f3ec <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800f2d8:	2300      	movs	r3, #0
 800f2da:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800f2dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2de:	781b      	ldrb	r3, [r3, #0]
 800f2e0:	2b01      	cmp	r3, #1
 800f2e2:	d128      	bne.n	800f336 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800f2e4:	2302      	movs	r3, #2
 800f2e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f2e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2ea:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800f2ec:	f107 0314 	add.w	r3, r7, #20
 800f2f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	f7fd fc31 	bl	800cb5a <get_fat>
 800f2f8:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800f2fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f300:	d103      	bne.n	800f30a <f_getfree+0x7c>
 800f302:	2301      	movs	r3, #1
 800f304:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800f308:	e063      	b.n	800f3d2 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800f30a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f30c:	2b01      	cmp	r3, #1
 800f30e:	d103      	bne.n	800f318 <f_getfree+0x8a>
 800f310:	2302      	movs	r3, #2
 800f312:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800f316:	e05c      	b.n	800f3d2 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800f318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d102      	bne.n	800f324 <f_getfree+0x96>
 800f31e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f320:	3301      	adds	r3, #1
 800f322:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800f324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f326:	3301      	adds	r3, #1
 800f328:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f32a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f32c:	699b      	ldr	r3, [r3, #24]
 800f32e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f330:	429a      	cmp	r2, r3
 800f332:	d3db      	bcc.n	800f2ec <f_getfree+0x5e>
 800f334:	e04d      	b.n	800f3d2 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800f336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f338:	699b      	ldr	r3, [r3, #24]
 800f33a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f33c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f33e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f340:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800f342:	2300      	movs	r3, #0
 800f344:	637b      	str	r3, [r7, #52]	; 0x34
 800f346:	2300      	movs	r3, #0
 800f348:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800f34a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d113      	bne.n	800f378 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800f350:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f354:	1c5a      	adds	r2, r3, #1
 800f356:	63ba      	str	r2, [r7, #56]	; 0x38
 800f358:	4619      	mov	r1, r3
 800f35a:	f7fd fb43 	bl	800c9e4 <move_window>
 800f35e:	4603      	mov	r3, r0
 800f360:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800f364:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d131      	bne.n	800f3d0 <f_getfree+0x142>
							p = fs->win;
 800f36c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f36e:	3334      	adds	r3, #52	; 0x34
 800f370:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800f372:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f376:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800f378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f37a:	781b      	ldrb	r3, [r3, #0]
 800f37c:	2b02      	cmp	r3, #2
 800f37e:	d10f      	bne.n	800f3a0 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800f380:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f382:	f7fd f87f 	bl	800c484 <ld_word>
 800f386:	4603      	mov	r3, r0
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d102      	bne.n	800f392 <f_getfree+0x104>
 800f38c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f38e:	3301      	adds	r3, #1
 800f390:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800f392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f394:	3302      	adds	r3, #2
 800f396:	633b      	str	r3, [r7, #48]	; 0x30
 800f398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f39a:	3b02      	subs	r3, #2
 800f39c:	637b      	str	r3, [r7, #52]	; 0x34
 800f39e:	e010      	b.n	800f3c2 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800f3a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f3a2:	f7fd f887 	bl	800c4b4 <ld_dword>
 800f3a6:	4603      	mov	r3, r0
 800f3a8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d102      	bne.n	800f3b6 <f_getfree+0x128>
 800f3b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f3b2:	3301      	adds	r3, #1
 800f3b4:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800f3b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3b8:	3304      	adds	r3, #4
 800f3ba:	633b      	str	r3, [r7, #48]	; 0x30
 800f3bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3be:	3b04      	subs	r3, #4
 800f3c0:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800f3c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f3c4:	3b01      	subs	r3, #1
 800f3c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f3c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d1bd      	bne.n	800f34a <f_getfree+0xbc>
 800f3ce:	e000      	b.n	800f3d2 <f_getfree+0x144>
							if (res != FR_OK) break;
 800f3d0:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800f3d2:	68bb      	ldr	r3, [r7, #8]
 800f3d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f3d6:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800f3d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f3dc:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800f3de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3e0:	791a      	ldrb	r2, [r3, #4]
 800f3e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3e4:	f042 0201 	orr.w	r2, r2, #1
 800f3e8:	b2d2      	uxtb	r2, r2
 800f3ea:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800f3ec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800f3f0:	4618      	mov	r0, r3
 800f3f2:	3748      	adds	r7, #72	; 0x48
 800f3f4:	46bd      	mov	sp, r7
 800f3f6:	bd80      	pop	{r7, pc}

0800f3f8 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800f3f8:	b590      	push	{r4, r7, lr}
 800f3fa:	b09d      	sub	sp, #116	; 0x74
 800f3fc:	af00      	add	r7, sp, #0
 800f3fe:	60f8      	str	r0, [r7, #12]
 800f400:	607a      	str	r2, [r7, #4]
 800f402:	603b      	str	r3, [r7, #0]
 800f404:	460b      	mov	r3, r1
 800f406:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800f408:	2301      	movs	r3, #1
 800f40a:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800f40c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f410:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800f412:	f107 030c 	add.w	r3, r7, #12
 800f416:	4618      	mov	r0, r3
 800f418:	f7fe ff7b 	bl	800e312 <get_ldnumber>
 800f41c:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800f41e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f420:	2b00      	cmp	r3, #0
 800f422:	da02      	bge.n	800f42a <f_mkfs+0x32>
 800f424:	230b      	movs	r3, #11
 800f426:	f000 bc0d 	b.w	800fc44 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800f42a:	4a94      	ldr	r2, [pc, #592]	; (800f67c <f_mkfs+0x284>)
 800f42c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f42e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f432:	2b00      	cmp	r3, #0
 800f434:	d005      	beq.n	800f442 <f_mkfs+0x4a>
 800f436:	4a91      	ldr	r2, [pc, #580]	; (800f67c <f_mkfs+0x284>)
 800f438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f43a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f43e:	2200      	movs	r2, #0
 800f440:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800f442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f444:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800f448:	2300      	movs	r3, #0
 800f44a:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800f44e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f452:	4618      	mov	r0, r3
 800f454:	f7fc ff92 	bl	800c37c <disk_initialize>
 800f458:	4603      	mov	r3, r0
 800f45a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800f45e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800f462:	f003 0301 	and.w	r3, r3, #1
 800f466:	2b00      	cmp	r3, #0
 800f468:	d001      	beq.n	800f46e <f_mkfs+0x76>
 800f46a:	2303      	movs	r3, #3
 800f46c:	e3ea      	b.n	800fc44 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800f46e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800f472:	f003 0304 	and.w	r3, r3, #4
 800f476:	2b00      	cmp	r3, #0
 800f478:	d001      	beq.n	800f47e <f_mkfs+0x86>
 800f47a:	230a      	movs	r3, #10
 800f47c:	e3e2      	b.n	800fc44 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800f47e:	f107 0214 	add.w	r2, r7, #20
 800f482:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f486:	2103      	movs	r1, #3
 800f488:	4618      	mov	r0, r3
 800f48a:	f7fc ffdd 	bl	800c448 <disk_ioctl>
 800f48e:	4603      	mov	r3, r0
 800f490:	2b00      	cmp	r3, #0
 800f492:	d10c      	bne.n	800f4ae <f_mkfs+0xb6>
 800f494:	697b      	ldr	r3, [r7, #20]
 800f496:	2b00      	cmp	r3, #0
 800f498:	d009      	beq.n	800f4ae <f_mkfs+0xb6>
 800f49a:	697b      	ldr	r3, [r7, #20]
 800f49c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f4a0:	d805      	bhi.n	800f4ae <f_mkfs+0xb6>
 800f4a2:	697b      	ldr	r3, [r7, #20]
 800f4a4:	1e5a      	subs	r2, r3, #1
 800f4a6:	697b      	ldr	r3, [r7, #20]
 800f4a8:	4013      	ands	r3, r2
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d001      	beq.n	800f4b2 <f_mkfs+0xba>
 800f4ae:	2301      	movs	r3, #1
 800f4b0:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 800f4b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f4b6:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d003      	beq.n	800f4c6 <f_mkfs+0xce>
 800f4be:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f4c0:	687a      	ldr	r2, [r7, #4]
 800f4c2:	429a      	cmp	r2, r3
 800f4c4:	d309      	bcc.n	800f4da <f_mkfs+0xe2>
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800f4cc:	d805      	bhi.n	800f4da <f_mkfs+0xe2>
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	1e5a      	subs	r2, r3, #1
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	4013      	ands	r3, r2
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d001      	beq.n	800f4de <f_mkfs+0xe6>
 800f4da:	2313      	movs	r3, #19
 800f4dc:	e3b2      	b.n	800fc44 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 800f4de:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f4e0:	687a      	ldr	r2, [r7, #4]
 800f4e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800f4e6:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800f4e8:	683b      	ldr	r3, [r7, #0]
 800f4ea:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800f4ec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f4ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f4f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800f4f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800f4f8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f4fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4fc:	fb02 f303 	mul.w	r3, r2, r3
 800f500:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 800f502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f504:	2b00      	cmp	r3, #0
 800f506:	d101      	bne.n	800f50c <f_mkfs+0x114>
 800f508:	230e      	movs	r3, #14
 800f50a:	e39b      	b.n	800fc44 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800f50c:	f107 0210 	add.w	r2, r7, #16
 800f510:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f514:	2101      	movs	r1, #1
 800f516:	4618      	mov	r0, r3
 800f518:	f7fc ff96 	bl	800c448 <disk_ioctl>
 800f51c:	4603      	mov	r3, r0
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d001      	beq.n	800f526 <f_mkfs+0x12e>
 800f522:	2301      	movs	r3, #1
 800f524:	e38e      	b.n	800fc44 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800f526:	7afb      	ldrb	r3, [r7, #11]
 800f528:	f003 0308 	and.w	r3, r3, #8
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d001      	beq.n	800f534 <f_mkfs+0x13c>
 800f530:	2300      	movs	r3, #0
 800f532:	e000      	b.n	800f536 <f_mkfs+0x13e>
 800f534:	233f      	movs	r3, #63	; 0x3f
 800f536:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800f538:	693b      	ldr	r3, [r7, #16]
 800f53a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f53c:	429a      	cmp	r2, r3
 800f53e:	d901      	bls.n	800f544 <f_mkfs+0x14c>
 800f540:	230e      	movs	r3, #14
 800f542:	e37f      	b.n	800fc44 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 800f544:	693a      	ldr	r2, [r7, #16]
 800f546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f548:	1ad3      	subs	r3, r2, r3
 800f54a:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800f54c:	693b      	ldr	r3, [r7, #16]
 800f54e:	2b7f      	cmp	r3, #127	; 0x7f
 800f550:	d801      	bhi.n	800f556 <f_mkfs+0x15e>
 800f552:	230e      	movs	r3, #14
 800f554:	e376      	b.n	800fc44 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	2b80      	cmp	r3, #128	; 0x80
 800f55a:	d901      	bls.n	800f560 <f_mkfs+0x168>
 800f55c:	2313      	movs	r3, #19
 800f55e:	e371      	b.n	800fc44 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800f560:	7afb      	ldrb	r3, [r7, #11]
 800f562:	f003 0302 	and.w	r3, r3, #2
 800f566:	2b00      	cmp	r3, #0
 800f568:	d00d      	beq.n	800f586 <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800f56a:	7afb      	ldrb	r3, [r7, #11]
 800f56c:	f003 0307 	and.w	r3, r3, #7
 800f570:	2b02      	cmp	r3, #2
 800f572:	d004      	beq.n	800f57e <f_mkfs+0x186>
 800f574:	7afb      	ldrb	r3, [r7, #11]
 800f576:	f003 0301 	and.w	r3, r3, #1
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d103      	bne.n	800f586 <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800f57e:	2303      	movs	r3, #3
 800f580:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800f584:	e009      	b.n	800f59a <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800f586:	7afb      	ldrb	r3, [r7, #11]
 800f588:	f003 0301 	and.w	r3, r3, #1
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d101      	bne.n	800f594 <f_mkfs+0x19c>
 800f590:	2313      	movs	r3, #19
 800f592:	e357      	b.n	800fc44 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 800f594:	2302      	movs	r3, #2
 800f596:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	66fb      	str	r3, [r7, #108]	; 0x6c
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800f59e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f5a2:	2b03      	cmp	r3, #3
 800f5a4:	d13c      	bne.n	800f620 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800f5a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d11b      	bne.n	800f5e4 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800f5ac:	693b      	ldr	r3, [r7, #16]
 800f5ae:	0c5b      	lsrs	r3, r3, #17
 800f5b0:	663b      	str	r3, [r7, #96]	; 0x60
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800f5b2:	2300      	movs	r3, #0
 800f5b4:	64bb      	str	r3, [r7, #72]	; 0x48
 800f5b6:	2301      	movs	r3, #1
 800f5b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f5ba:	e005      	b.n	800f5c8 <f_mkfs+0x1d0>
 800f5bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f5be:	3301      	adds	r3, #1
 800f5c0:	64bb      	str	r3, [r7, #72]	; 0x48
 800f5c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f5c4:	005b      	lsls	r3, r3, #1
 800f5c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f5c8:	4a2d      	ldr	r2, [pc, #180]	; (800f680 <f_mkfs+0x288>)
 800f5ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f5cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d007      	beq.n	800f5e4 <f_mkfs+0x1ec>
 800f5d4:	4a2a      	ldr	r2, [pc, #168]	; (800f680 <f_mkfs+0x288>)
 800f5d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f5d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f5dc:	461a      	mov	r2, r3
 800f5de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f5e0:	4293      	cmp	r3, r2
 800f5e2:	d2eb      	bcs.n	800f5bc <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800f5e4:	693a      	ldr	r2, [r7, #16]
 800f5e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f5e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800f5ec:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800f5ee:	6a3b      	ldr	r3, [r7, #32]
 800f5f0:	3302      	adds	r3, #2
 800f5f2:	009a      	lsls	r2, r3, #2
 800f5f4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f5f6:	4413      	add	r3, r2
 800f5f8:	1e5a      	subs	r2, r3, #1
 800f5fa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f5fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800f600:	657b      	str	r3, [r7, #84]	; 0x54
				sz_rsv = 32;	/* Number of reserved sectors */
 800f602:	2320      	movs	r3, #32
 800f604:	65bb      	str	r3, [r7, #88]	; 0x58
				sz_dir = 0;		/* No static directory */
 800f606:	2300      	movs	r3, #0
 800f608:	653b      	str	r3, [r7, #80]	; 0x50
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800f60a:	6a3b      	ldr	r3, [r7, #32]
 800f60c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f610:	4293      	cmp	r3, r2
 800f612:	d903      	bls.n	800f61c <f_mkfs+0x224>
 800f614:	6a3b      	ldr	r3, [r7, #32]
 800f616:	4a1b      	ldr	r2, [pc, #108]	; (800f684 <f_mkfs+0x28c>)
 800f618:	4293      	cmp	r3, r2
 800f61a:	d952      	bls.n	800f6c2 <f_mkfs+0x2ca>
 800f61c:	230e      	movs	r3, #14
 800f61e:	e311      	b.n	800fc44 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800f620:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f622:	2b00      	cmp	r3, #0
 800f624:	d11b      	bne.n	800f65e <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800f626:	693b      	ldr	r3, [r7, #16]
 800f628:	0b1b      	lsrs	r3, r3, #12
 800f62a:	663b      	str	r3, [r7, #96]	; 0x60
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800f62c:	2300      	movs	r3, #0
 800f62e:	64bb      	str	r3, [r7, #72]	; 0x48
 800f630:	2301      	movs	r3, #1
 800f632:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f634:	e005      	b.n	800f642 <f_mkfs+0x24a>
 800f636:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f638:	3301      	adds	r3, #1
 800f63a:	64bb      	str	r3, [r7, #72]	; 0x48
 800f63c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f63e:	005b      	lsls	r3, r3, #1
 800f640:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f642:	4a11      	ldr	r2, [pc, #68]	; (800f688 <f_mkfs+0x290>)
 800f644:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f646:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d007      	beq.n	800f65e <f_mkfs+0x266>
 800f64e:	4a0e      	ldr	r2, [pc, #56]	; (800f688 <f_mkfs+0x290>)
 800f650:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f652:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f656:	461a      	mov	r2, r3
 800f658:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f65a:	4293      	cmp	r3, r2
 800f65c:	d2eb      	bcs.n	800f636 <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800f65e:	693a      	ldr	r2, [r7, #16]
 800f660:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f662:	fbb2 f3f3 	udiv	r3, r2, r3
 800f666:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 800f668:	6a3b      	ldr	r3, [r7, #32]
 800f66a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f66e:	4293      	cmp	r3, r2
 800f670:	d90c      	bls.n	800f68c <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800f672:	6a3b      	ldr	r3, [r7, #32]
 800f674:	3302      	adds	r3, #2
 800f676:	005b      	lsls	r3, r3, #1
 800f678:	663b      	str	r3, [r7, #96]	; 0x60
 800f67a:	e012      	b.n	800f6a2 <f_mkfs+0x2aa>
 800f67c:	200010f4 	.word	0x200010f4
 800f680:	08013a88 	.word	0x08013a88
 800f684:	0ffffff5 	.word	0x0ffffff5
 800f688:	08013a98 	.word	0x08013a98
				} else {
					fmt = FS_FAT12;
 800f68c:	2301      	movs	r3, #1
 800f68e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800f692:	6a3a      	ldr	r2, [r7, #32]
 800f694:	4613      	mov	r3, r2
 800f696:	005b      	lsls	r3, r3, #1
 800f698:	4413      	add	r3, r2
 800f69a:	3301      	adds	r3, #1
 800f69c:	085b      	lsrs	r3, r3, #1
 800f69e:	3303      	adds	r3, #3
 800f6a0:	663b      	str	r3, [r7, #96]	; 0x60
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800f6a2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f6a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f6a6:	4413      	add	r3, r2
 800f6a8:	1e5a      	subs	r2, r3, #1
 800f6aa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f6ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800f6b0:	657b      	str	r3, [r7, #84]	; 0x54
				sz_rsv = 1;						/* Number of reserved sectors */
 800f6b2:	2301      	movs	r3, #1
 800f6b4:	65bb      	str	r3, [r7, #88]	; 0x58
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800f6b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f6b8:	015a      	lsls	r2, r3, #5
 800f6ba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f6bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800f6c0:	653b      	str	r3, [r7, #80]	; 0x50
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800f6c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f6c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f6c6:	4413      	add	r3, r2
 800f6c8:	65fb      	str	r3, [r7, #92]	; 0x5c
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800f6ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f6cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f6ce:	fb02 f203 	mul.w	r2, r2, r3
 800f6d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f6d4:	4413      	add	r3, r2
 800f6d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f6d8:	4413      	add	r3, r2
 800f6da:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800f6dc:	697a      	ldr	r2, [r7, #20]
 800f6de:	69fb      	ldr	r3, [r7, #28]
 800f6e0:	4413      	add	r3, r2
 800f6e2:	1e5a      	subs	r2, r3, #1
 800f6e4:	697b      	ldr	r3, [r7, #20]
 800f6e6:	425b      	negs	r3, r3
 800f6e8:	401a      	ands	r2, r3
 800f6ea:	69fb      	ldr	r3, [r7, #28]
 800f6ec:	1ad3      	subs	r3, r2, r3
 800f6ee:	663b      	str	r3, [r7, #96]	; 0x60
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800f6f0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f6f4:	2b03      	cmp	r3, #3
 800f6f6:	d108      	bne.n	800f70a <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800f6f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f6fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f6fc:	4413      	add	r3, r2
 800f6fe:	65bb      	str	r3, [r7, #88]	; 0x58
 800f700:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f702:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f704:	4413      	add	r3, r2
 800f706:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f708:	e006      	b.n	800f718 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800f70a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f70c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f70e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f712:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f714:	4413      	add	r3, r2
 800f716:	657b      	str	r3, [r7, #84]	; 0x54
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800f718:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f71a:	011a      	lsls	r2, r3, #4
 800f71c:	69fb      	ldr	r3, [r7, #28]
 800f71e:	441a      	add	r2, r3
 800f720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f722:	1ad2      	subs	r2, r2, r3
 800f724:	693b      	ldr	r3, [r7, #16]
 800f726:	429a      	cmp	r2, r3
 800f728:	d901      	bls.n	800f72e <f_mkfs+0x336>
 800f72a:	230e      	movs	r3, #14
 800f72c:	e28a      	b.n	800fc44 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800f72e:	693a      	ldr	r2, [r7, #16]
 800f730:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f732:	1ad2      	subs	r2, r2, r3
 800f734:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f736:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f738:	fb01 f303 	mul.w	r3, r1, r3
 800f73c:	1ad2      	subs	r2, r2, r3
 800f73e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f740:	1ad2      	subs	r2, r2, r3
 800f742:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f744:	fbb2 f3f3 	udiv	r3, r2, r3
 800f748:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800f74a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f74e:	2b03      	cmp	r3, #3
 800f750:	d10f      	bne.n	800f772 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800f752:	6a3b      	ldr	r3, [r7, #32]
 800f754:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f758:	4293      	cmp	r3, r2
 800f75a:	d80a      	bhi.n	800f772 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d105      	bne.n	800f76e <f_mkfs+0x376>
 800f762:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f764:	085b      	lsrs	r3, r3, #1
 800f766:	607b      	str	r3, [r7, #4]
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d144      	bne.n	800f7f8 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800f76e:	230e      	movs	r3, #14
 800f770:	e268      	b.n	800fc44 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 800f772:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f776:	2b02      	cmp	r3, #2
 800f778:	d133      	bne.n	800f7e2 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800f77a:	6a3b      	ldr	r3, [r7, #32]
 800f77c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f780:	4293      	cmp	r3, r2
 800f782:	d91e      	bls.n	800f7c2 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	2b00      	cmp	r3, #0
 800f788:	d107      	bne.n	800f79a <f_mkfs+0x3a2>
 800f78a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f78c:	005b      	lsls	r3, r3, #1
 800f78e:	2b40      	cmp	r3, #64	; 0x40
 800f790:	d803      	bhi.n	800f79a <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800f792:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f794:	005b      	lsls	r3, r3, #1
 800f796:	607b      	str	r3, [r7, #4]
 800f798:	e033      	b.n	800f802 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 800f79a:	7afb      	ldrb	r3, [r7, #11]
 800f79c:	f003 0302 	and.w	r3, r3, #2
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d003      	beq.n	800f7ac <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800f7a4:	2303      	movs	r3, #3
 800f7a6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800f7aa:	e02a      	b.n	800f802 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d105      	bne.n	800f7be <f_mkfs+0x3c6>
 800f7b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f7b4:	005b      	lsls	r3, r3, #1
 800f7b6:	607b      	str	r3, [r7, #4]
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	2b80      	cmp	r3, #128	; 0x80
 800f7bc:	d91e      	bls.n	800f7fc <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 800f7be:	230e      	movs	r3, #14
 800f7c0:	e240      	b.n	800fc44 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800f7c2:	6a3b      	ldr	r3, [r7, #32]
 800f7c4:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f7c8:	4293      	cmp	r3, r2
 800f7ca:	d80a      	bhi.n	800f7e2 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d105      	bne.n	800f7de <f_mkfs+0x3e6>
 800f7d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f7d4:	005b      	lsls	r3, r3, #1
 800f7d6:	607b      	str	r3, [r7, #4]
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	2b80      	cmp	r3, #128	; 0x80
 800f7dc:	d910      	bls.n	800f800 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 800f7de:	230e      	movs	r3, #14
 800f7e0:	e230      	b.n	800fc44 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800f7e2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f7e6:	2b01      	cmp	r3, #1
 800f7e8:	d10c      	bne.n	800f804 <f_mkfs+0x40c>
 800f7ea:	6a3b      	ldr	r3, [r7, #32]
 800f7ec:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f7f0:	4293      	cmp	r3, r2
 800f7f2:	d907      	bls.n	800f804 <f_mkfs+0x40c>
 800f7f4:	230e      	movs	r3, #14
 800f7f6:	e225      	b.n	800fc44 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800f7f8:	bf00      	nop
 800f7fa:	e6ce      	b.n	800f59a <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800f7fc:	bf00      	nop
 800f7fe:	e6cc      	b.n	800f59a <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800f800:	bf00      	nop
			pau = au;
 800f802:	e6ca      	b.n	800f59a <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 800f804:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800f806:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f808:	461a      	mov	r2, r3
 800f80a:	2100      	movs	r1, #0
 800f80c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f80e:	f7fc fedc 	bl	800c5ca <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800f812:	220b      	movs	r2, #11
 800f814:	49bc      	ldr	r1, [pc, #752]	; (800fb08 <f_mkfs+0x710>)
 800f816:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f818:	f7fc feb6 	bl	800c588 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800f81c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f81e:	330b      	adds	r3, #11
 800f820:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f822:	4611      	mov	r1, r2
 800f824:	4618      	mov	r0, r3
 800f826:	f7fc fe68 	bl	800c4fa <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800f82a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f82c:	330d      	adds	r3, #13
 800f82e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f830:	b2d2      	uxtb	r2, r2
 800f832:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800f834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f836:	330e      	adds	r3, #14
 800f838:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f83a:	b292      	uxth	r2, r2
 800f83c:	4611      	mov	r1, r2
 800f83e:	4618      	mov	r0, r3
 800f840:	f7fc fe5b 	bl	800c4fa <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800f844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f846:	3310      	adds	r3, #16
 800f848:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f84a:	b2d2      	uxtb	r2, r2
 800f84c:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800f84e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f850:	f103 0211 	add.w	r2, r3, #17
 800f854:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f858:	2b03      	cmp	r3, #3
 800f85a:	d002      	beq.n	800f862 <f_mkfs+0x46a>
 800f85c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f85e:	b29b      	uxth	r3, r3
 800f860:	e000      	b.n	800f864 <f_mkfs+0x46c>
 800f862:	2300      	movs	r3, #0
 800f864:	4619      	mov	r1, r3
 800f866:	4610      	mov	r0, r2
 800f868:	f7fc fe47 	bl	800c4fa <st_word>
		if (sz_vol < 0x10000) {
 800f86c:	693b      	ldr	r3, [r7, #16]
 800f86e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f872:	d208      	bcs.n	800f886 <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800f874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f876:	3313      	adds	r3, #19
 800f878:	693a      	ldr	r2, [r7, #16]
 800f87a:	b292      	uxth	r2, r2
 800f87c:	4611      	mov	r1, r2
 800f87e:	4618      	mov	r0, r3
 800f880:	f7fc fe3b 	bl	800c4fa <st_word>
 800f884:	e006      	b.n	800f894 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800f886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f888:	3320      	adds	r3, #32
 800f88a:	693a      	ldr	r2, [r7, #16]
 800f88c:	4611      	mov	r1, r2
 800f88e:	4618      	mov	r0, r3
 800f890:	f7fc fe4e 	bl	800c530 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800f894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f896:	3315      	adds	r3, #21
 800f898:	22f8      	movs	r2, #248	; 0xf8
 800f89a:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800f89c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f89e:	3318      	adds	r3, #24
 800f8a0:	213f      	movs	r1, #63	; 0x3f
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	f7fc fe29 	bl	800c4fa <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800f8a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8aa:	331a      	adds	r3, #26
 800f8ac:	21ff      	movs	r1, #255	; 0xff
 800f8ae:	4618      	mov	r0, r3
 800f8b0:	f7fc fe23 	bl	800c4fa <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800f8b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8b6:	331c      	adds	r3, #28
 800f8b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f8ba:	4618      	mov	r0, r3
 800f8bc:	f7fc fe38 	bl	800c530 <st_dword>
		if (fmt == FS_FAT32) {
 800f8c0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f8c4:	2b03      	cmp	r3, #3
 800f8c6:	d131      	bne.n	800f92c <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800f8c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8ca:	f103 0443 	add.w	r4, r3, #67	; 0x43
 800f8ce:	f7f2 fe55 	bl	800257c <get_fattime>
 800f8d2:	4603      	mov	r3, r0
 800f8d4:	4619      	mov	r1, r3
 800f8d6:	4620      	mov	r0, r4
 800f8d8:	f7fc fe2a 	bl	800c530 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800f8dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8de:	3324      	adds	r3, #36	; 0x24
 800f8e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f8e2:	4618      	mov	r0, r3
 800f8e4:	f7fc fe24 	bl	800c530 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800f8e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8ea:	332c      	adds	r3, #44	; 0x2c
 800f8ec:	2102      	movs	r1, #2
 800f8ee:	4618      	mov	r0, r3
 800f8f0:	f7fc fe1e 	bl	800c530 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800f8f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8f6:	3330      	adds	r3, #48	; 0x30
 800f8f8:	2101      	movs	r1, #1
 800f8fa:	4618      	mov	r0, r3
 800f8fc:	f7fc fdfd 	bl	800c4fa <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800f900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f902:	3332      	adds	r3, #50	; 0x32
 800f904:	2106      	movs	r1, #6
 800f906:	4618      	mov	r0, r3
 800f908:	f7fc fdf7 	bl	800c4fa <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800f90c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f90e:	3340      	adds	r3, #64	; 0x40
 800f910:	2280      	movs	r2, #128	; 0x80
 800f912:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800f914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f916:	3342      	adds	r3, #66	; 0x42
 800f918:	2229      	movs	r2, #41	; 0x29
 800f91a:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800f91c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f91e:	3347      	adds	r3, #71	; 0x47
 800f920:	2213      	movs	r2, #19
 800f922:	497a      	ldr	r1, [pc, #488]	; (800fb0c <f_mkfs+0x714>)
 800f924:	4618      	mov	r0, r3
 800f926:	f7fc fe2f 	bl	800c588 <mem_cpy>
 800f92a:	e020      	b.n	800f96e <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800f92c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f92e:	f103 0427 	add.w	r4, r3, #39	; 0x27
 800f932:	f7f2 fe23 	bl	800257c <get_fattime>
 800f936:	4603      	mov	r3, r0
 800f938:	4619      	mov	r1, r3
 800f93a:	4620      	mov	r0, r4
 800f93c:	f7fc fdf8 	bl	800c530 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800f940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f942:	3316      	adds	r3, #22
 800f944:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f946:	b292      	uxth	r2, r2
 800f948:	4611      	mov	r1, r2
 800f94a:	4618      	mov	r0, r3
 800f94c:	f7fc fdd5 	bl	800c4fa <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800f950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f952:	3324      	adds	r3, #36	; 0x24
 800f954:	2280      	movs	r2, #128	; 0x80
 800f956:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800f958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f95a:	3326      	adds	r3, #38	; 0x26
 800f95c:	2229      	movs	r2, #41	; 0x29
 800f95e:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800f960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f962:	332b      	adds	r3, #43	; 0x2b
 800f964:	2213      	movs	r2, #19
 800f966:	496a      	ldr	r1, [pc, #424]	; (800fb10 <f_mkfs+0x718>)
 800f968:	4618      	mov	r0, r3
 800f96a:	f7fc fe0d 	bl	800c588 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800f96e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f970:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f974:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800f978:	4618      	mov	r0, r3
 800f97a:	f7fc fdbe 	bl	800c4fa <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800f97e:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800f982:	2301      	movs	r3, #1
 800f984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f986:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f988:	f7fc fd3e 	bl	800c408 <disk_write>
 800f98c:	4603      	mov	r3, r0
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d001      	beq.n	800f996 <f_mkfs+0x59e>
 800f992:	2301      	movs	r3, #1
 800f994:	e156      	b.n	800fc44 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800f996:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f99a:	2b03      	cmp	r3, #3
 800f99c:	d140      	bne.n	800fa20 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800f99e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9a0:	1d9a      	adds	r2, r3, #6
 800f9a2:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800f9a6:	2301      	movs	r3, #1
 800f9a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f9aa:	f7fc fd2d 	bl	800c408 <disk_write>
			mem_set(buf, 0, ss);
 800f9ae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f9b0:	461a      	mov	r2, r3
 800f9b2:	2100      	movs	r1, #0
 800f9b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f9b6:	f7fc fe08 	bl	800c5ca <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800f9ba:	4956      	ldr	r1, [pc, #344]	; (800fb14 <f_mkfs+0x71c>)
 800f9bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f9be:	f7fc fdb7 	bl	800c530 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800f9c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9c4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f9c8:	4953      	ldr	r1, [pc, #332]	; (800fb18 <f_mkfs+0x720>)
 800f9ca:	4618      	mov	r0, r3
 800f9cc:	f7fc fdb0 	bl	800c530 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800f9d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9d2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800f9d6:	6a3b      	ldr	r3, [r7, #32]
 800f9d8:	3b01      	subs	r3, #1
 800f9da:	4619      	mov	r1, r3
 800f9dc:	4610      	mov	r0, r2
 800f9de:	f7fc fda7 	bl	800c530 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800f9e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9e4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800f9e8:	2102      	movs	r1, #2
 800f9ea:	4618      	mov	r0, r3
 800f9ec:	f7fc fda0 	bl	800c530 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800f9f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9f2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f9f6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800f9fa:	4618      	mov	r0, r3
 800f9fc:	f7fc fd7d 	bl	800c4fa <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800fa00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa02:	1dda      	adds	r2, r3, #7
 800fa04:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800fa08:	2301      	movs	r3, #1
 800fa0a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fa0c:	f7fc fcfc 	bl	800c408 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800fa10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa12:	1c5a      	adds	r2, r3, #1
 800fa14:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800fa18:	2301      	movs	r3, #1
 800fa1a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fa1c:	f7fc fcf4 	bl	800c408 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800fa20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fa22:	2100      	movs	r1, #0
 800fa24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fa26:	f7fc fdd0 	bl	800c5ca <mem_set>
		sect = b_fat;		/* FAT start sector */
 800fa2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fa2c:	66bb      	str	r3, [r7, #104]	; 0x68
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800fa2e:	2300      	movs	r3, #0
 800fa30:	64bb      	str	r3, [r7, #72]	; 0x48
 800fa32:	e04b      	b.n	800facc <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 800fa34:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fa38:	2b03      	cmp	r3, #3
 800fa3a:	d113      	bne.n	800fa64 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800fa3c:	f06f 0107 	mvn.w	r1, #7
 800fa40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fa42:	f7fc fd75 	bl	800c530 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800fa46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa48:	3304      	adds	r3, #4
 800fa4a:	f04f 31ff 	mov.w	r1, #4294967295
 800fa4e:	4618      	mov	r0, r3
 800fa50:	f7fc fd6e 	bl	800c530 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800fa54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa56:	3308      	adds	r3, #8
 800fa58:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800fa5c:	4618      	mov	r0, r3
 800fa5e:	f7fc fd67 	bl	800c530 <st_dword>
 800fa62:	e00b      	b.n	800fa7c <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800fa64:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fa68:	2b01      	cmp	r3, #1
 800fa6a:	d101      	bne.n	800fa70 <f_mkfs+0x678>
 800fa6c:	4b2b      	ldr	r3, [pc, #172]	; (800fb1c <f_mkfs+0x724>)
 800fa6e:	e001      	b.n	800fa74 <f_mkfs+0x67c>
 800fa70:	f06f 0307 	mvn.w	r3, #7
 800fa74:	4619      	mov	r1, r3
 800fa76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fa78:	f7fc fd5a 	bl	800c530 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800fa7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fa7e:	667b      	str	r3, [r7, #100]	; 0x64
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800fa80:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800fa82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa84:	4293      	cmp	r3, r2
 800fa86:	bf28      	it	cs
 800fa88:	4613      	movcs	r3, r2
 800fa8a:	663b      	str	r3, [r7, #96]	; 0x60
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800fa8c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800fa90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fa92:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fa94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fa96:	f7fc fcb7 	bl	800c408 <disk_write>
 800fa9a:	4603      	mov	r3, r0
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d001      	beq.n	800faa4 <f_mkfs+0x6ac>
 800faa0:	2301      	movs	r3, #1
 800faa2:	e0cf      	b.n	800fc44 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 800faa4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800faa6:	461a      	mov	r2, r3
 800faa8:	2100      	movs	r1, #0
 800faaa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800faac:	f7fc fd8d 	bl	800c5ca <mem_set>
				sect += n; nsect -= n;
 800fab0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fab2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fab4:	4413      	add	r3, r2
 800fab6:	66bb      	str	r3, [r7, #104]	; 0x68
 800fab8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800faba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fabc:	1ad3      	subs	r3, r2, r3
 800fabe:	667b      	str	r3, [r7, #100]	; 0x64
			} while (nsect);
 800fac0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d1dc      	bne.n	800fa80 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800fac6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fac8:	3301      	adds	r3, #1
 800faca:	64bb      	str	r3, [r7, #72]	; 0x48
 800facc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800face:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fad0:	429a      	cmp	r2, r3
 800fad2:	d3af      	bcc.n	800fa34 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800fad4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fad8:	2b03      	cmp	r3, #3
 800fada:	d101      	bne.n	800fae0 <f_mkfs+0x6e8>
 800fadc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fade:	e000      	b.n	800fae2 <f_mkfs+0x6ea>
 800fae0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fae2:	667b      	str	r3, [r7, #100]	; 0x64
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800fae4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800fae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fae8:	4293      	cmp	r3, r2
 800faea:	bf28      	it	cs
 800faec:	4613      	movcs	r3, r2
 800faee:	663b      	str	r3, [r7, #96]	; 0x60
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800faf0:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800faf4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800faf6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800faf8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fafa:	f7fc fc85 	bl	800c408 <disk_write>
 800fafe:	4603      	mov	r3, r0
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d00d      	beq.n	800fb20 <f_mkfs+0x728>
 800fb04:	2301      	movs	r3, #1
 800fb06:	e09d      	b.n	800fc44 <f_mkfs+0x84c>
 800fb08:	080139a4 	.word	0x080139a4
 800fb0c:	080139b0 	.word	0x080139b0
 800fb10:	080139c4 	.word	0x080139c4
 800fb14:	41615252 	.word	0x41615252
 800fb18:	61417272 	.word	0x61417272
 800fb1c:	00fffff8 	.word	0x00fffff8
			sect += n; nsect -= n;
 800fb20:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fb22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fb24:	4413      	add	r3, r2
 800fb26:	66bb      	str	r3, [r7, #104]	; 0x68
 800fb28:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800fb2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fb2c:	1ad3      	subs	r3, r2, r3
 800fb2e:	667b      	str	r3, [r7, #100]	; 0x64
		} while (nsect);
 800fb30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d1d6      	bne.n	800fae4 <f_mkfs+0x6ec>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800fb36:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fb3a:	2b03      	cmp	r3, #3
 800fb3c:	d103      	bne.n	800fb46 <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 800fb3e:	230c      	movs	r3, #12
 800fb40:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800fb44:	e010      	b.n	800fb68 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 800fb46:	693b      	ldr	r3, [r7, #16]
 800fb48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fb4c:	d303      	bcc.n	800fb56 <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800fb4e:	2306      	movs	r3, #6
 800fb50:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800fb54:	e008      	b.n	800fb68 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800fb56:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fb5a:	2b02      	cmp	r3, #2
 800fb5c:	d101      	bne.n	800fb62 <f_mkfs+0x76a>
 800fb5e:	2304      	movs	r3, #4
 800fb60:	e000      	b.n	800fb64 <f_mkfs+0x76c>
 800fb62:	2301      	movs	r3, #1
 800fb64:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800fb68:	7afb      	ldrb	r3, [r7, #11]
 800fb6a:	f003 0308 	and.w	r3, r3, #8
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d15b      	bne.n	800fc2a <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 800fb72:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fb74:	461a      	mov	r2, r3
 800fb76:	2100      	movs	r1, #0
 800fb78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fb7a:	f7fc fd26 	bl	800c5ca <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800fb7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb80:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fb84:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800fb88:	4618      	mov	r0, r3
 800fb8a:	f7fc fcb6 	bl	800c4fa <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800fb8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb90:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800fb94:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800fb96:	69bb      	ldr	r3, [r7, #24]
 800fb98:	2200      	movs	r2, #0
 800fb9a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800fb9c:	69bb      	ldr	r3, [r7, #24]
 800fb9e:	3301      	adds	r3, #1
 800fba0:	2201      	movs	r2, #1
 800fba2:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800fba4:	69bb      	ldr	r3, [r7, #24]
 800fba6:	3302      	adds	r3, #2
 800fba8:	2201      	movs	r2, #1
 800fbaa:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800fbac:	69bb      	ldr	r3, [r7, #24]
 800fbae:	3303      	adds	r3, #3
 800fbb0:	2200      	movs	r2, #0
 800fbb2:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800fbb4:	69bb      	ldr	r3, [r7, #24]
 800fbb6:	3304      	adds	r3, #4
 800fbb8:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800fbbc:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800fbbe:	693a      	ldr	r2, [r7, #16]
 800fbc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbc2:	441a      	add	r2, r3
 800fbc4:	4b21      	ldr	r3, [pc, #132]	; (800fc4c <f_mkfs+0x854>)
 800fbc6:	fba3 1302 	umull	r1, r3, r3, r2
 800fbca:	1ad2      	subs	r2, r2, r3
 800fbcc:	0852      	lsrs	r2, r2, #1
 800fbce:	4413      	add	r3, r2
 800fbd0:	0b5b      	lsrs	r3, r3, #13
 800fbd2:	663b      	str	r3, [r7, #96]	; 0x60
			pte[PTE_EdHead] = 254;				/* End head */
 800fbd4:	69bb      	ldr	r3, [r7, #24]
 800fbd6:	3305      	adds	r3, #5
 800fbd8:	22fe      	movs	r2, #254	; 0xfe
 800fbda:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800fbdc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fbde:	089b      	lsrs	r3, r3, #2
 800fbe0:	b2da      	uxtb	r2, r3
 800fbe2:	69bb      	ldr	r3, [r7, #24]
 800fbe4:	3306      	adds	r3, #6
 800fbe6:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800fbea:	b2d2      	uxtb	r2, r2
 800fbec:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800fbee:	69bb      	ldr	r3, [r7, #24]
 800fbf0:	3307      	adds	r3, #7
 800fbf2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fbf4:	b2d2      	uxtb	r2, r2
 800fbf6:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800fbf8:	69bb      	ldr	r3, [r7, #24]
 800fbfa:	3308      	adds	r3, #8
 800fbfc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fbfe:	4618      	mov	r0, r3
 800fc00:	f7fc fc96 	bl	800c530 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800fc04:	69bb      	ldr	r3, [r7, #24]
 800fc06:	330c      	adds	r3, #12
 800fc08:	693a      	ldr	r2, [r7, #16]
 800fc0a:	4611      	mov	r1, r2
 800fc0c:	4618      	mov	r0, r3
 800fc0e:	f7fc fc8f 	bl	800c530 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800fc12:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800fc16:	2301      	movs	r3, #1
 800fc18:	2200      	movs	r2, #0
 800fc1a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fc1c:	f7fc fbf4 	bl	800c408 <disk_write>
 800fc20:	4603      	mov	r3, r0
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d001      	beq.n	800fc2a <f_mkfs+0x832>
 800fc26:	2301      	movs	r3, #1
 800fc28:	e00c      	b.n	800fc44 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800fc2a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800fc2e:	2200      	movs	r2, #0
 800fc30:	2100      	movs	r1, #0
 800fc32:	4618      	mov	r0, r3
 800fc34:	f7fc fc08 	bl	800c448 <disk_ioctl>
 800fc38:	4603      	mov	r3, r0
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d001      	beq.n	800fc42 <f_mkfs+0x84a>
 800fc3e:	2301      	movs	r3, #1
 800fc40:	e000      	b.n	800fc44 <f_mkfs+0x84c>

	return FR_OK;
 800fc42:	2300      	movs	r3, #0
}
 800fc44:	4618      	mov	r0, r3
 800fc46:	3774      	adds	r7, #116	; 0x74
 800fc48:	46bd      	mov	sp, r7
 800fc4a:	bd90      	pop	{r4, r7, pc}
 800fc4c:	0515565b 	.word	0x0515565b

0800fc50 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800fc50:	b480      	push	{r7}
 800fc52:	b087      	sub	sp, #28
 800fc54:	af00      	add	r7, sp, #0
 800fc56:	60f8      	str	r0, [r7, #12]
 800fc58:	60b9      	str	r1, [r7, #8]
 800fc5a:	4613      	mov	r3, r2
 800fc5c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800fc5e:	2301      	movs	r3, #1
 800fc60:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800fc62:	2300      	movs	r3, #0
 800fc64:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800fc66:	4b1f      	ldr	r3, [pc, #124]	; (800fce4 <FATFS_LinkDriverEx+0x94>)
 800fc68:	7a5b      	ldrb	r3, [r3, #9]
 800fc6a:	b2db      	uxtb	r3, r3
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d131      	bne.n	800fcd4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800fc70:	4b1c      	ldr	r3, [pc, #112]	; (800fce4 <FATFS_LinkDriverEx+0x94>)
 800fc72:	7a5b      	ldrb	r3, [r3, #9]
 800fc74:	b2db      	uxtb	r3, r3
 800fc76:	461a      	mov	r2, r3
 800fc78:	4b1a      	ldr	r3, [pc, #104]	; (800fce4 <FATFS_LinkDriverEx+0x94>)
 800fc7a:	2100      	movs	r1, #0
 800fc7c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800fc7e:	4b19      	ldr	r3, [pc, #100]	; (800fce4 <FATFS_LinkDriverEx+0x94>)
 800fc80:	7a5b      	ldrb	r3, [r3, #9]
 800fc82:	b2db      	uxtb	r3, r3
 800fc84:	4a17      	ldr	r2, [pc, #92]	; (800fce4 <FATFS_LinkDriverEx+0x94>)
 800fc86:	009b      	lsls	r3, r3, #2
 800fc88:	4413      	add	r3, r2
 800fc8a:	68fa      	ldr	r2, [r7, #12]
 800fc8c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800fc8e:	4b15      	ldr	r3, [pc, #84]	; (800fce4 <FATFS_LinkDriverEx+0x94>)
 800fc90:	7a5b      	ldrb	r3, [r3, #9]
 800fc92:	b2db      	uxtb	r3, r3
 800fc94:	461a      	mov	r2, r3
 800fc96:	4b13      	ldr	r3, [pc, #76]	; (800fce4 <FATFS_LinkDriverEx+0x94>)
 800fc98:	4413      	add	r3, r2
 800fc9a:	79fa      	ldrb	r2, [r7, #7]
 800fc9c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800fc9e:	4b11      	ldr	r3, [pc, #68]	; (800fce4 <FATFS_LinkDriverEx+0x94>)
 800fca0:	7a5b      	ldrb	r3, [r3, #9]
 800fca2:	b2db      	uxtb	r3, r3
 800fca4:	1c5a      	adds	r2, r3, #1
 800fca6:	b2d1      	uxtb	r1, r2
 800fca8:	4a0e      	ldr	r2, [pc, #56]	; (800fce4 <FATFS_LinkDriverEx+0x94>)
 800fcaa:	7251      	strb	r1, [r2, #9]
 800fcac:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800fcae:	7dbb      	ldrb	r3, [r7, #22]
 800fcb0:	3330      	adds	r3, #48	; 0x30
 800fcb2:	b2da      	uxtb	r2, r3
 800fcb4:	68bb      	ldr	r3, [r7, #8]
 800fcb6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800fcb8:	68bb      	ldr	r3, [r7, #8]
 800fcba:	3301      	adds	r3, #1
 800fcbc:	223a      	movs	r2, #58	; 0x3a
 800fcbe:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800fcc0:	68bb      	ldr	r3, [r7, #8]
 800fcc2:	3302      	adds	r3, #2
 800fcc4:	222f      	movs	r2, #47	; 0x2f
 800fcc6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800fcc8:	68bb      	ldr	r3, [r7, #8]
 800fcca:	3303      	adds	r3, #3
 800fccc:	2200      	movs	r2, #0
 800fcce:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800fcd0:	2300      	movs	r3, #0
 800fcd2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800fcd4:	7dfb      	ldrb	r3, [r7, #23]
}
 800fcd6:	4618      	mov	r0, r3
 800fcd8:	371c      	adds	r7, #28
 800fcda:	46bd      	mov	sp, r7
 800fcdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fce0:	4770      	bx	lr
 800fce2:	bf00      	nop
 800fce4:	2000131c 	.word	0x2000131c

0800fce8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800fce8:	b580      	push	{r7, lr}
 800fcea:	b082      	sub	sp, #8
 800fcec:	af00      	add	r7, sp, #0
 800fcee:	6078      	str	r0, [r7, #4]
 800fcf0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800fcf2:	2200      	movs	r2, #0
 800fcf4:	6839      	ldr	r1, [r7, #0]
 800fcf6:	6878      	ldr	r0, [r7, #4]
 800fcf8:	f7ff ffaa 	bl	800fc50 <FATFS_LinkDriverEx>
 800fcfc:	4603      	mov	r3, r0
}
 800fcfe:	4618      	mov	r0, r3
 800fd00:	3708      	adds	r7, #8
 800fd02:	46bd      	mov	sp, r7
 800fd04:	bd80      	pop	{r7, pc}
	...

0800fd08 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800fd08:	b480      	push	{r7}
 800fd0a:	b085      	sub	sp, #20
 800fd0c:	af00      	add	r7, sp, #0
 800fd0e:	4603      	mov	r3, r0
 800fd10:	6039      	str	r1, [r7, #0]
 800fd12:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800fd14:	88fb      	ldrh	r3, [r7, #6]
 800fd16:	2b7f      	cmp	r3, #127	; 0x7f
 800fd18:	d802      	bhi.n	800fd20 <ff_convert+0x18>
		c = chr;
 800fd1a:	88fb      	ldrh	r3, [r7, #6]
 800fd1c:	81fb      	strh	r3, [r7, #14]
 800fd1e:	e025      	b.n	800fd6c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800fd20:	683b      	ldr	r3, [r7, #0]
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d00b      	beq.n	800fd3e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800fd26:	88fb      	ldrh	r3, [r7, #6]
 800fd28:	2bff      	cmp	r3, #255	; 0xff
 800fd2a:	d805      	bhi.n	800fd38 <ff_convert+0x30>
 800fd2c:	88fb      	ldrh	r3, [r7, #6]
 800fd2e:	3b80      	subs	r3, #128	; 0x80
 800fd30:	4a12      	ldr	r2, [pc, #72]	; (800fd7c <ff_convert+0x74>)
 800fd32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fd36:	e000      	b.n	800fd3a <ff_convert+0x32>
 800fd38:	2300      	movs	r3, #0
 800fd3a:	81fb      	strh	r3, [r7, #14]
 800fd3c:	e016      	b.n	800fd6c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800fd3e:	2300      	movs	r3, #0
 800fd40:	81fb      	strh	r3, [r7, #14]
 800fd42:	e009      	b.n	800fd58 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800fd44:	89fb      	ldrh	r3, [r7, #14]
 800fd46:	4a0d      	ldr	r2, [pc, #52]	; (800fd7c <ff_convert+0x74>)
 800fd48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fd4c:	88fa      	ldrh	r2, [r7, #6]
 800fd4e:	429a      	cmp	r2, r3
 800fd50:	d006      	beq.n	800fd60 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800fd52:	89fb      	ldrh	r3, [r7, #14]
 800fd54:	3301      	adds	r3, #1
 800fd56:	81fb      	strh	r3, [r7, #14]
 800fd58:	89fb      	ldrh	r3, [r7, #14]
 800fd5a:	2b7f      	cmp	r3, #127	; 0x7f
 800fd5c:	d9f2      	bls.n	800fd44 <ff_convert+0x3c>
 800fd5e:	e000      	b.n	800fd62 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800fd60:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800fd62:	89fb      	ldrh	r3, [r7, #14]
 800fd64:	3380      	adds	r3, #128	; 0x80
 800fd66:	b29b      	uxth	r3, r3
 800fd68:	b2db      	uxtb	r3, r3
 800fd6a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800fd6c:	89fb      	ldrh	r3, [r7, #14]
}
 800fd6e:	4618      	mov	r0, r3
 800fd70:	3714      	adds	r7, #20
 800fd72:	46bd      	mov	sp, r7
 800fd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd78:	4770      	bx	lr
 800fd7a:	bf00      	nop
 800fd7c:	08013aa8 	.word	0x08013aa8

0800fd80 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800fd80:	b480      	push	{r7}
 800fd82:	b087      	sub	sp, #28
 800fd84:	af00      	add	r7, sp, #0
 800fd86:	4603      	mov	r3, r0
 800fd88:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800fd8a:	88fb      	ldrh	r3, [r7, #6]
 800fd8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fd90:	d201      	bcs.n	800fd96 <ff_wtoupper+0x16>
 800fd92:	4b3e      	ldr	r3, [pc, #248]	; (800fe8c <ff_wtoupper+0x10c>)
 800fd94:	e000      	b.n	800fd98 <ff_wtoupper+0x18>
 800fd96:	4b3e      	ldr	r3, [pc, #248]	; (800fe90 <ff_wtoupper+0x110>)
 800fd98:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800fd9a:	697b      	ldr	r3, [r7, #20]
 800fd9c:	1c9a      	adds	r2, r3, #2
 800fd9e:	617a      	str	r2, [r7, #20]
 800fda0:	881b      	ldrh	r3, [r3, #0]
 800fda2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800fda4:	8a7b      	ldrh	r3, [r7, #18]
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d068      	beq.n	800fe7c <ff_wtoupper+0xfc>
 800fdaa:	88fa      	ldrh	r2, [r7, #6]
 800fdac:	8a7b      	ldrh	r3, [r7, #18]
 800fdae:	429a      	cmp	r2, r3
 800fdb0:	d364      	bcc.n	800fe7c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800fdb2:	697b      	ldr	r3, [r7, #20]
 800fdb4:	1c9a      	adds	r2, r3, #2
 800fdb6:	617a      	str	r2, [r7, #20]
 800fdb8:	881b      	ldrh	r3, [r3, #0]
 800fdba:	823b      	strh	r3, [r7, #16]
 800fdbc:	8a3b      	ldrh	r3, [r7, #16]
 800fdbe:	0a1b      	lsrs	r3, r3, #8
 800fdc0:	81fb      	strh	r3, [r7, #14]
 800fdc2:	8a3b      	ldrh	r3, [r7, #16]
 800fdc4:	b2db      	uxtb	r3, r3
 800fdc6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800fdc8:	88fa      	ldrh	r2, [r7, #6]
 800fdca:	8a79      	ldrh	r1, [r7, #18]
 800fdcc:	8a3b      	ldrh	r3, [r7, #16]
 800fdce:	440b      	add	r3, r1
 800fdd0:	429a      	cmp	r2, r3
 800fdd2:	da49      	bge.n	800fe68 <ff_wtoupper+0xe8>
			switch (cmd) {
 800fdd4:	89fb      	ldrh	r3, [r7, #14]
 800fdd6:	2b08      	cmp	r3, #8
 800fdd8:	d84f      	bhi.n	800fe7a <ff_wtoupper+0xfa>
 800fdda:	a201      	add	r2, pc, #4	; (adr r2, 800fde0 <ff_wtoupper+0x60>)
 800fddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fde0:	0800fe05 	.word	0x0800fe05
 800fde4:	0800fe17 	.word	0x0800fe17
 800fde8:	0800fe2d 	.word	0x0800fe2d
 800fdec:	0800fe35 	.word	0x0800fe35
 800fdf0:	0800fe3d 	.word	0x0800fe3d
 800fdf4:	0800fe45 	.word	0x0800fe45
 800fdf8:	0800fe4d 	.word	0x0800fe4d
 800fdfc:	0800fe55 	.word	0x0800fe55
 800fe00:	0800fe5d 	.word	0x0800fe5d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800fe04:	88fa      	ldrh	r2, [r7, #6]
 800fe06:	8a7b      	ldrh	r3, [r7, #18]
 800fe08:	1ad3      	subs	r3, r2, r3
 800fe0a:	005b      	lsls	r3, r3, #1
 800fe0c:	697a      	ldr	r2, [r7, #20]
 800fe0e:	4413      	add	r3, r2
 800fe10:	881b      	ldrh	r3, [r3, #0]
 800fe12:	80fb      	strh	r3, [r7, #6]
 800fe14:	e027      	b.n	800fe66 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800fe16:	88fa      	ldrh	r2, [r7, #6]
 800fe18:	8a7b      	ldrh	r3, [r7, #18]
 800fe1a:	1ad3      	subs	r3, r2, r3
 800fe1c:	b29b      	uxth	r3, r3
 800fe1e:	f003 0301 	and.w	r3, r3, #1
 800fe22:	b29b      	uxth	r3, r3
 800fe24:	88fa      	ldrh	r2, [r7, #6]
 800fe26:	1ad3      	subs	r3, r2, r3
 800fe28:	80fb      	strh	r3, [r7, #6]
 800fe2a:	e01c      	b.n	800fe66 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800fe2c:	88fb      	ldrh	r3, [r7, #6]
 800fe2e:	3b10      	subs	r3, #16
 800fe30:	80fb      	strh	r3, [r7, #6]
 800fe32:	e018      	b.n	800fe66 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800fe34:	88fb      	ldrh	r3, [r7, #6]
 800fe36:	3b20      	subs	r3, #32
 800fe38:	80fb      	strh	r3, [r7, #6]
 800fe3a:	e014      	b.n	800fe66 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800fe3c:	88fb      	ldrh	r3, [r7, #6]
 800fe3e:	3b30      	subs	r3, #48	; 0x30
 800fe40:	80fb      	strh	r3, [r7, #6]
 800fe42:	e010      	b.n	800fe66 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800fe44:	88fb      	ldrh	r3, [r7, #6]
 800fe46:	3b1a      	subs	r3, #26
 800fe48:	80fb      	strh	r3, [r7, #6]
 800fe4a:	e00c      	b.n	800fe66 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800fe4c:	88fb      	ldrh	r3, [r7, #6]
 800fe4e:	3308      	adds	r3, #8
 800fe50:	80fb      	strh	r3, [r7, #6]
 800fe52:	e008      	b.n	800fe66 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800fe54:	88fb      	ldrh	r3, [r7, #6]
 800fe56:	3b50      	subs	r3, #80	; 0x50
 800fe58:	80fb      	strh	r3, [r7, #6]
 800fe5a:	e004      	b.n	800fe66 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800fe5c:	88fb      	ldrh	r3, [r7, #6]
 800fe5e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800fe62:	80fb      	strh	r3, [r7, #6]
 800fe64:	bf00      	nop
			}
			break;
 800fe66:	e008      	b.n	800fe7a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800fe68:	89fb      	ldrh	r3, [r7, #14]
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d195      	bne.n	800fd9a <ff_wtoupper+0x1a>
 800fe6e:	8a3b      	ldrh	r3, [r7, #16]
 800fe70:	005b      	lsls	r3, r3, #1
 800fe72:	697a      	ldr	r2, [r7, #20]
 800fe74:	4413      	add	r3, r2
 800fe76:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800fe78:	e78f      	b.n	800fd9a <ff_wtoupper+0x1a>
			break;
 800fe7a:	bf00      	nop
	}

	return chr;
 800fe7c:	88fb      	ldrh	r3, [r7, #6]
}
 800fe7e:	4618      	mov	r0, r3
 800fe80:	371c      	adds	r7, #28
 800fe82:	46bd      	mov	sp, r7
 800fe84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe88:	4770      	bx	lr
 800fe8a:	bf00      	nop
 800fe8c:	08013ba8 	.word	0x08013ba8
 800fe90:	08013d9c 	.word	0x08013d9c

0800fe94 <__errno>:
 800fe94:	4b01      	ldr	r3, [pc, #4]	; (800fe9c <__errno+0x8>)
 800fe96:	6818      	ldr	r0, [r3, #0]
 800fe98:	4770      	bx	lr
 800fe9a:	bf00      	nop
 800fe9c:	20000054 	.word	0x20000054

0800fea0 <__libc_init_array>:
 800fea0:	b570      	push	{r4, r5, r6, lr}
 800fea2:	4e0d      	ldr	r6, [pc, #52]	; (800fed8 <__libc_init_array+0x38>)
 800fea4:	4c0d      	ldr	r4, [pc, #52]	; (800fedc <__libc_init_array+0x3c>)
 800fea6:	1ba4      	subs	r4, r4, r6
 800fea8:	10a4      	asrs	r4, r4, #2
 800feaa:	2500      	movs	r5, #0
 800feac:	42a5      	cmp	r5, r4
 800feae:	d109      	bne.n	800fec4 <__libc_init_array+0x24>
 800feb0:	4e0b      	ldr	r6, [pc, #44]	; (800fee0 <__libc_init_array+0x40>)
 800feb2:	4c0c      	ldr	r4, [pc, #48]	; (800fee4 <__libc_init_array+0x44>)
 800feb4:	f003 fca8 	bl	8013808 <_init>
 800feb8:	1ba4      	subs	r4, r4, r6
 800feba:	10a4      	asrs	r4, r4, #2
 800febc:	2500      	movs	r5, #0
 800febe:	42a5      	cmp	r5, r4
 800fec0:	d105      	bne.n	800fece <__libc_init_array+0x2e>
 800fec2:	bd70      	pop	{r4, r5, r6, pc}
 800fec4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800fec8:	4798      	blx	r3
 800feca:	3501      	adds	r5, #1
 800fecc:	e7ee      	b.n	800feac <__libc_init_array+0xc>
 800fece:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800fed2:	4798      	blx	r3
 800fed4:	3501      	adds	r5, #1
 800fed6:	e7f2      	b.n	800febe <__libc_init_array+0x1e>
 800fed8:	08014118 	.word	0x08014118
 800fedc:	08014118 	.word	0x08014118
 800fee0:	08014118 	.word	0x08014118
 800fee4:	0801411c 	.word	0x0801411c

0800fee8 <memcpy>:
 800fee8:	b510      	push	{r4, lr}
 800feea:	1e43      	subs	r3, r0, #1
 800feec:	440a      	add	r2, r1
 800feee:	4291      	cmp	r1, r2
 800fef0:	d100      	bne.n	800fef4 <memcpy+0xc>
 800fef2:	bd10      	pop	{r4, pc}
 800fef4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fef8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fefc:	e7f7      	b.n	800feee <memcpy+0x6>

0800fefe <memset>:
 800fefe:	4402      	add	r2, r0
 800ff00:	4603      	mov	r3, r0
 800ff02:	4293      	cmp	r3, r2
 800ff04:	d100      	bne.n	800ff08 <memset+0xa>
 800ff06:	4770      	bx	lr
 800ff08:	f803 1b01 	strb.w	r1, [r3], #1
 800ff0c:	e7f9      	b.n	800ff02 <memset+0x4>

0800ff0e <__cvt>:
 800ff0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff10:	ed2d 8b02 	vpush	{d8}
 800ff14:	eeb0 8b40 	vmov.f64	d8, d0
 800ff18:	b085      	sub	sp, #20
 800ff1a:	4617      	mov	r7, r2
 800ff1c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800ff1e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800ff20:	ee18 2a90 	vmov	r2, s17
 800ff24:	f025 0520 	bic.w	r5, r5, #32
 800ff28:	2a00      	cmp	r2, #0
 800ff2a:	bfb6      	itet	lt
 800ff2c:	222d      	movlt	r2, #45	; 0x2d
 800ff2e:	2200      	movge	r2, #0
 800ff30:	eeb1 8b40 	vneglt.f64	d8, d0
 800ff34:	2d46      	cmp	r5, #70	; 0x46
 800ff36:	460c      	mov	r4, r1
 800ff38:	701a      	strb	r2, [r3, #0]
 800ff3a:	d004      	beq.n	800ff46 <__cvt+0x38>
 800ff3c:	2d45      	cmp	r5, #69	; 0x45
 800ff3e:	d100      	bne.n	800ff42 <__cvt+0x34>
 800ff40:	3401      	adds	r4, #1
 800ff42:	2102      	movs	r1, #2
 800ff44:	e000      	b.n	800ff48 <__cvt+0x3a>
 800ff46:	2103      	movs	r1, #3
 800ff48:	ab03      	add	r3, sp, #12
 800ff4a:	9301      	str	r3, [sp, #4]
 800ff4c:	ab02      	add	r3, sp, #8
 800ff4e:	9300      	str	r3, [sp, #0]
 800ff50:	4622      	mov	r2, r4
 800ff52:	4633      	mov	r3, r6
 800ff54:	eeb0 0b48 	vmov.f64	d0, d8
 800ff58:	f001 fd36 	bl	80119c8 <_dtoa_r>
 800ff5c:	2d47      	cmp	r5, #71	; 0x47
 800ff5e:	d101      	bne.n	800ff64 <__cvt+0x56>
 800ff60:	07fb      	lsls	r3, r7, #31
 800ff62:	d51e      	bpl.n	800ffa2 <__cvt+0x94>
 800ff64:	2d46      	cmp	r5, #70	; 0x46
 800ff66:	eb00 0304 	add.w	r3, r0, r4
 800ff6a:	d10c      	bne.n	800ff86 <__cvt+0x78>
 800ff6c:	7802      	ldrb	r2, [r0, #0]
 800ff6e:	2a30      	cmp	r2, #48	; 0x30
 800ff70:	d107      	bne.n	800ff82 <__cvt+0x74>
 800ff72:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ff76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff7a:	bf1c      	itt	ne
 800ff7c:	f1c4 0401 	rsbne	r4, r4, #1
 800ff80:	6034      	strne	r4, [r6, #0]
 800ff82:	6832      	ldr	r2, [r6, #0]
 800ff84:	4413      	add	r3, r2
 800ff86:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ff8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff8e:	d007      	beq.n	800ffa0 <__cvt+0x92>
 800ff90:	2130      	movs	r1, #48	; 0x30
 800ff92:	9a03      	ldr	r2, [sp, #12]
 800ff94:	429a      	cmp	r2, r3
 800ff96:	d204      	bcs.n	800ffa2 <__cvt+0x94>
 800ff98:	1c54      	adds	r4, r2, #1
 800ff9a:	9403      	str	r4, [sp, #12]
 800ff9c:	7011      	strb	r1, [r2, #0]
 800ff9e:	e7f8      	b.n	800ff92 <__cvt+0x84>
 800ffa0:	9303      	str	r3, [sp, #12]
 800ffa2:	9b03      	ldr	r3, [sp, #12]
 800ffa4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ffa6:	1a1b      	subs	r3, r3, r0
 800ffa8:	6013      	str	r3, [r2, #0]
 800ffaa:	b005      	add	sp, #20
 800ffac:	ecbd 8b02 	vpop	{d8}
 800ffb0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ffb2 <__exponent>:
 800ffb2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ffb4:	2900      	cmp	r1, #0
 800ffb6:	4604      	mov	r4, r0
 800ffb8:	bfba      	itte	lt
 800ffba:	4249      	neglt	r1, r1
 800ffbc:	232d      	movlt	r3, #45	; 0x2d
 800ffbe:	232b      	movge	r3, #43	; 0x2b
 800ffc0:	2909      	cmp	r1, #9
 800ffc2:	f804 2b02 	strb.w	r2, [r4], #2
 800ffc6:	7043      	strb	r3, [r0, #1]
 800ffc8:	dd20      	ble.n	801000c <__exponent+0x5a>
 800ffca:	f10d 0307 	add.w	r3, sp, #7
 800ffce:	461f      	mov	r7, r3
 800ffd0:	260a      	movs	r6, #10
 800ffd2:	fb91 f5f6 	sdiv	r5, r1, r6
 800ffd6:	fb06 1115 	mls	r1, r6, r5, r1
 800ffda:	3130      	adds	r1, #48	; 0x30
 800ffdc:	2d09      	cmp	r5, #9
 800ffde:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ffe2:	f103 32ff 	add.w	r2, r3, #4294967295
 800ffe6:	4629      	mov	r1, r5
 800ffe8:	dc09      	bgt.n	800fffe <__exponent+0x4c>
 800ffea:	3130      	adds	r1, #48	; 0x30
 800ffec:	3b02      	subs	r3, #2
 800ffee:	f802 1c01 	strb.w	r1, [r2, #-1]
 800fff2:	42bb      	cmp	r3, r7
 800fff4:	4622      	mov	r2, r4
 800fff6:	d304      	bcc.n	8010002 <__exponent+0x50>
 800fff8:	1a10      	subs	r0, r2, r0
 800fffa:	b003      	add	sp, #12
 800fffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fffe:	4613      	mov	r3, r2
 8010000:	e7e7      	b.n	800ffd2 <__exponent+0x20>
 8010002:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010006:	f804 2b01 	strb.w	r2, [r4], #1
 801000a:	e7f2      	b.n	800fff2 <__exponent+0x40>
 801000c:	2330      	movs	r3, #48	; 0x30
 801000e:	4419      	add	r1, r3
 8010010:	7083      	strb	r3, [r0, #2]
 8010012:	1d02      	adds	r2, r0, #4
 8010014:	70c1      	strb	r1, [r0, #3]
 8010016:	e7ef      	b.n	800fff8 <__exponent+0x46>

08010018 <_printf_float>:
 8010018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801001c:	b08d      	sub	sp, #52	; 0x34
 801001e:	460c      	mov	r4, r1
 8010020:	4616      	mov	r6, r2
 8010022:	461f      	mov	r7, r3
 8010024:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8010028:	4605      	mov	r5, r0
 801002a:	f002 fd45 	bl	8012ab8 <_localeconv_r>
 801002e:	f8d0 b000 	ldr.w	fp, [r0]
 8010032:	4658      	mov	r0, fp
 8010034:	f7f0 f90e 	bl	8000254 <strlen>
 8010038:	2300      	movs	r3, #0
 801003a:	930a      	str	r3, [sp, #40]	; 0x28
 801003c:	f8d8 3000 	ldr.w	r3, [r8]
 8010040:	9005      	str	r0, [sp, #20]
 8010042:	3307      	adds	r3, #7
 8010044:	f023 0307 	bic.w	r3, r3, #7
 8010048:	f103 0108 	add.w	r1, r3, #8
 801004c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8010050:	6822      	ldr	r2, [r4, #0]
 8010052:	f8c8 1000 	str.w	r1, [r8]
 8010056:	e9d3 0100 	ldrd	r0, r1, [r3]
 801005a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 801005e:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 80102e8 <_printf_float+0x2d0>
 8010062:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8010066:	eeb0 6bc0 	vabs.f64	d6, d0
 801006a:	eeb4 6b47 	vcmp.f64	d6, d7
 801006e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010072:	dd24      	ble.n	80100be <_printf_float+0xa6>
 8010074:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8010078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801007c:	d502      	bpl.n	8010084 <_printf_float+0x6c>
 801007e:	232d      	movs	r3, #45	; 0x2d
 8010080:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010084:	499a      	ldr	r1, [pc, #616]	; (80102f0 <_printf_float+0x2d8>)
 8010086:	4b9b      	ldr	r3, [pc, #620]	; (80102f4 <_printf_float+0x2dc>)
 8010088:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801008c:	bf8c      	ite	hi
 801008e:	4688      	movhi	r8, r1
 8010090:	4698      	movls	r8, r3
 8010092:	f022 0204 	bic.w	r2, r2, #4
 8010096:	2303      	movs	r3, #3
 8010098:	6123      	str	r3, [r4, #16]
 801009a:	6022      	str	r2, [r4, #0]
 801009c:	f04f 0a00 	mov.w	sl, #0
 80100a0:	9700      	str	r7, [sp, #0]
 80100a2:	4633      	mov	r3, r6
 80100a4:	aa0b      	add	r2, sp, #44	; 0x2c
 80100a6:	4621      	mov	r1, r4
 80100a8:	4628      	mov	r0, r5
 80100aa:	f000 f9e1 	bl	8010470 <_printf_common>
 80100ae:	3001      	adds	r0, #1
 80100b0:	f040 8089 	bne.w	80101c6 <_printf_float+0x1ae>
 80100b4:	f04f 30ff 	mov.w	r0, #4294967295
 80100b8:	b00d      	add	sp, #52	; 0x34
 80100ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100be:	eeb4 0b40 	vcmp.f64	d0, d0
 80100c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100c6:	d702      	bvc.n	80100ce <_printf_float+0xb6>
 80100c8:	498b      	ldr	r1, [pc, #556]	; (80102f8 <_printf_float+0x2e0>)
 80100ca:	4b8c      	ldr	r3, [pc, #560]	; (80102fc <_printf_float+0x2e4>)
 80100cc:	e7dc      	b.n	8010088 <_printf_float+0x70>
 80100ce:	6861      	ldr	r1, [r4, #4]
 80100d0:	1c4b      	adds	r3, r1, #1
 80100d2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80100d6:	ab0a      	add	r3, sp, #40	; 0x28
 80100d8:	a809      	add	r0, sp, #36	; 0x24
 80100da:	d13b      	bne.n	8010154 <_printf_float+0x13c>
 80100dc:	2106      	movs	r1, #6
 80100de:	6061      	str	r1, [r4, #4]
 80100e0:	f04f 0c00 	mov.w	ip, #0
 80100e4:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 80100e8:	e9cd 0900 	strd	r0, r9, [sp]
 80100ec:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80100f0:	6022      	str	r2, [r4, #0]
 80100f2:	6861      	ldr	r1, [r4, #4]
 80100f4:	4628      	mov	r0, r5
 80100f6:	f7ff ff0a 	bl	800ff0e <__cvt>
 80100fa:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 80100fe:	2b47      	cmp	r3, #71	; 0x47
 8010100:	4680      	mov	r8, r0
 8010102:	d109      	bne.n	8010118 <_printf_float+0x100>
 8010104:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010106:	1cd8      	adds	r0, r3, #3
 8010108:	db02      	blt.n	8010110 <_printf_float+0xf8>
 801010a:	6862      	ldr	r2, [r4, #4]
 801010c:	4293      	cmp	r3, r2
 801010e:	dd47      	ble.n	80101a0 <_printf_float+0x188>
 8010110:	f1a9 0902 	sub.w	r9, r9, #2
 8010114:	fa5f f989 	uxtb.w	r9, r9
 8010118:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801011c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801011e:	d824      	bhi.n	801016a <_printf_float+0x152>
 8010120:	3901      	subs	r1, #1
 8010122:	464a      	mov	r2, r9
 8010124:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010128:	9109      	str	r1, [sp, #36]	; 0x24
 801012a:	f7ff ff42 	bl	800ffb2 <__exponent>
 801012e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010130:	1813      	adds	r3, r2, r0
 8010132:	2a01      	cmp	r2, #1
 8010134:	4682      	mov	sl, r0
 8010136:	6123      	str	r3, [r4, #16]
 8010138:	dc02      	bgt.n	8010140 <_printf_float+0x128>
 801013a:	6822      	ldr	r2, [r4, #0]
 801013c:	07d1      	lsls	r1, r2, #31
 801013e:	d501      	bpl.n	8010144 <_printf_float+0x12c>
 8010140:	3301      	adds	r3, #1
 8010142:	6123      	str	r3, [r4, #16]
 8010144:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010148:	2b00      	cmp	r3, #0
 801014a:	d0a9      	beq.n	80100a0 <_printf_float+0x88>
 801014c:	232d      	movs	r3, #45	; 0x2d
 801014e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010152:	e7a5      	b.n	80100a0 <_printf_float+0x88>
 8010154:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 8010158:	f000 8178 	beq.w	801044c <_printf_float+0x434>
 801015c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8010160:	d1be      	bne.n	80100e0 <_printf_float+0xc8>
 8010162:	2900      	cmp	r1, #0
 8010164:	d1bc      	bne.n	80100e0 <_printf_float+0xc8>
 8010166:	2101      	movs	r1, #1
 8010168:	e7b9      	b.n	80100de <_printf_float+0xc6>
 801016a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801016e:	d119      	bne.n	80101a4 <_printf_float+0x18c>
 8010170:	2900      	cmp	r1, #0
 8010172:	6863      	ldr	r3, [r4, #4]
 8010174:	dd0c      	ble.n	8010190 <_printf_float+0x178>
 8010176:	6121      	str	r1, [r4, #16]
 8010178:	b913      	cbnz	r3, 8010180 <_printf_float+0x168>
 801017a:	6822      	ldr	r2, [r4, #0]
 801017c:	07d2      	lsls	r2, r2, #31
 801017e:	d502      	bpl.n	8010186 <_printf_float+0x16e>
 8010180:	3301      	adds	r3, #1
 8010182:	440b      	add	r3, r1
 8010184:	6123      	str	r3, [r4, #16]
 8010186:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010188:	65a3      	str	r3, [r4, #88]	; 0x58
 801018a:	f04f 0a00 	mov.w	sl, #0
 801018e:	e7d9      	b.n	8010144 <_printf_float+0x12c>
 8010190:	b913      	cbnz	r3, 8010198 <_printf_float+0x180>
 8010192:	6822      	ldr	r2, [r4, #0]
 8010194:	07d0      	lsls	r0, r2, #31
 8010196:	d501      	bpl.n	801019c <_printf_float+0x184>
 8010198:	3302      	adds	r3, #2
 801019a:	e7f3      	b.n	8010184 <_printf_float+0x16c>
 801019c:	2301      	movs	r3, #1
 801019e:	e7f1      	b.n	8010184 <_printf_float+0x16c>
 80101a0:	f04f 0967 	mov.w	r9, #103	; 0x67
 80101a4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80101a8:	4293      	cmp	r3, r2
 80101aa:	db05      	blt.n	80101b8 <_printf_float+0x1a0>
 80101ac:	6822      	ldr	r2, [r4, #0]
 80101ae:	6123      	str	r3, [r4, #16]
 80101b0:	07d1      	lsls	r1, r2, #31
 80101b2:	d5e8      	bpl.n	8010186 <_printf_float+0x16e>
 80101b4:	3301      	adds	r3, #1
 80101b6:	e7e5      	b.n	8010184 <_printf_float+0x16c>
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	bfd4      	ite	le
 80101bc:	f1c3 0302 	rsble	r3, r3, #2
 80101c0:	2301      	movgt	r3, #1
 80101c2:	4413      	add	r3, r2
 80101c4:	e7de      	b.n	8010184 <_printf_float+0x16c>
 80101c6:	6823      	ldr	r3, [r4, #0]
 80101c8:	055a      	lsls	r2, r3, #21
 80101ca:	d407      	bmi.n	80101dc <_printf_float+0x1c4>
 80101cc:	6923      	ldr	r3, [r4, #16]
 80101ce:	4642      	mov	r2, r8
 80101d0:	4631      	mov	r1, r6
 80101d2:	4628      	mov	r0, r5
 80101d4:	47b8      	blx	r7
 80101d6:	3001      	adds	r0, #1
 80101d8:	d12a      	bne.n	8010230 <_printf_float+0x218>
 80101da:	e76b      	b.n	80100b4 <_printf_float+0x9c>
 80101dc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80101e0:	f240 80de 	bls.w	80103a0 <_printf_float+0x388>
 80101e4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80101e8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80101ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101f0:	d133      	bne.n	801025a <_printf_float+0x242>
 80101f2:	2301      	movs	r3, #1
 80101f4:	4a42      	ldr	r2, [pc, #264]	; (8010300 <_printf_float+0x2e8>)
 80101f6:	4631      	mov	r1, r6
 80101f8:	4628      	mov	r0, r5
 80101fa:	47b8      	blx	r7
 80101fc:	3001      	adds	r0, #1
 80101fe:	f43f af59 	beq.w	80100b4 <_printf_float+0x9c>
 8010202:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010206:	429a      	cmp	r2, r3
 8010208:	db02      	blt.n	8010210 <_printf_float+0x1f8>
 801020a:	6823      	ldr	r3, [r4, #0]
 801020c:	07d8      	lsls	r0, r3, #31
 801020e:	d50f      	bpl.n	8010230 <_printf_float+0x218>
 8010210:	9b05      	ldr	r3, [sp, #20]
 8010212:	465a      	mov	r2, fp
 8010214:	4631      	mov	r1, r6
 8010216:	4628      	mov	r0, r5
 8010218:	47b8      	blx	r7
 801021a:	3001      	adds	r0, #1
 801021c:	f43f af4a 	beq.w	80100b4 <_printf_float+0x9c>
 8010220:	f04f 0800 	mov.w	r8, #0
 8010224:	f104 091a 	add.w	r9, r4, #26
 8010228:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801022a:	3b01      	subs	r3, #1
 801022c:	4543      	cmp	r3, r8
 801022e:	dc09      	bgt.n	8010244 <_printf_float+0x22c>
 8010230:	6823      	ldr	r3, [r4, #0]
 8010232:	079b      	lsls	r3, r3, #30
 8010234:	f100 8105 	bmi.w	8010442 <_printf_float+0x42a>
 8010238:	68e0      	ldr	r0, [r4, #12]
 801023a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801023c:	4298      	cmp	r0, r3
 801023e:	bfb8      	it	lt
 8010240:	4618      	movlt	r0, r3
 8010242:	e739      	b.n	80100b8 <_printf_float+0xa0>
 8010244:	2301      	movs	r3, #1
 8010246:	464a      	mov	r2, r9
 8010248:	4631      	mov	r1, r6
 801024a:	4628      	mov	r0, r5
 801024c:	47b8      	blx	r7
 801024e:	3001      	adds	r0, #1
 8010250:	f43f af30 	beq.w	80100b4 <_printf_float+0x9c>
 8010254:	f108 0801 	add.w	r8, r8, #1
 8010258:	e7e6      	b.n	8010228 <_printf_float+0x210>
 801025a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801025c:	2b00      	cmp	r3, #0
 801025e:	dc2b      	bgt.n	80102b8 <_printf_float+0x2a0>
 8010260:	2301      	movs	r3, #1
 8010262:	4a27      	ldr	r2, [pc, #156]	; (8010300 <_printf_float+0x2e8>)
 8010264:	4631      	mov	r1, r6
 8010266:	4628      	mov	r0, r5
 8010268:	47b8      	blx	r7
 801026a:	3001      	adds	r0, #1
 801026c:	f43f af22 	beq.w	80100b4 <_printf_float+0x9c>
 8010270:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010272:	b923      	cbnz	r3, 801027e <_printf_float+0x266>
 8010274:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010276:	b913      	cbnz	r3, 801027e <_printf_float+0x266>
 8010278:	6823      	ldr	r3, [r4, #0]
 801027a:	07d9      	lsls	r1, r3, #31
 801027c:	d5d8      	bpl.n	8010230 <_printf_float+0x218>
 801027e:	9b05      	ldr	r3, [sp, #20]
 8010280:	465a      	mov	r2, fp
 8010282:	4631      	mov	r1, r6
 8010284:	4628      	mov	r0, r5
 8010286:	47b8      	blx	r7
 8010288:	3001      	adds	r0, #1
 801028a:	f43f af13 	beq.w	80100b4 <_printf_float+0x9c>
 801028e:	f04f 0900 	mov.w	r9, #0
 8010292:	f104 0a1a 	add.w	sl, r4, #26
 8010296:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010298:	425b      	negs	r3, r3
 801029a:	454b      	cmp	r3, r9
 801029c:	dc01      	bgt.n	80102a2 <_printf_float+0x28a>
 801029e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80102a0:	e795      	b.n	80101ce <_printf_float+0x1b6>
 80102a2:	2301      	movs	r3, #1
 80102a4:	4652      	mov	r2, sl
 80102a6:	4631      	mov	r1, r6
 80102a8:	4628      	mov	r0, r5
 80102aa:	47b8      	blx	r7
 80102ac:	3001      	adds	r0, #1
 80102ae:	f43f af01 	beq.w	80100b4 <_printf_float+0x9c>
 80102b2:	f109 0901 	add.w	r9, r9, #1
 80102b6:	e7ee      	b.n	8010296 <_printf_float+0x27e>
 80102b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80102ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80102bc:	429a      	cmp	r2, r3
 80102be:	bfa8      	it	ge
 80102c0:	461a      	movge	r2, r3
 80102c2:	2a00      	cmp	r2, #0
 80102c4:	4691      	mov	r9, r2
 80102c6:	dd07      	ble.n	80102d8 <_printf_float+0x2c0>
 80102c8:	4613      	mov	r3, r2
 80102ca:	4631      	mov	r1, r6
 80102cc:	4642      	mov	r2, r8
 80102ce:	4628      	mov	r0, r5
 80102d0:	47b8      	blx	r7
 80102d2:	3001      	adds	r0, #1
 80102d4:	f43f aeee 	beq.w	80100b4 <_printf_float+0x9c>
 80102d8:	f104 031a 	add.w	r3, r4, #26
 80102dc:	f04f 0a00 	mov.w	sl, #0
 80102e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80102e4:	9307      	str	r3, [sp, #28]
 80102e6:	e017      	b.n	8010318 <_printf_float+0x300>
 80102e8:	ffffffff 	.word	0xffffffff
 80102ec:	7fefffff 	.word	0x7fefffff
 80102f0:	08013e5c 	.word	0x08013e5c
 80102f4:	08013e58 	.word	0x08013e58
 80102f8:	08013e64 	.word	0x08013e64
 80102fc:	08013e60 	.word	0x08013e60
 8010300:	08013e68 	.word	0x08013e68
 8010304:	2301      	movs	r3, #1
 8010306:	9a07      	ldr	r2, [sp, #28]
 8010308:	4631      	mov	r1, r6
 801030a:	4628      	mov	r0, r5
 801030c:	47b8      	blx	r7
 801030e:	3001      	adds	r0, #1
 8010310:	f43f aed0 	beq.w	80100b4 <_printf_float+0x9c>
 8010314:	f10a 0a01 	add.w	sl, sl, #1
 8010318:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801031a:	9306      	str	r3, [sp, #24]
 801031c:	eba3 0309 	sub.w	r3, r3, r9
 8010320:	4553      	cmp	r3, sl
 8010322:	dcef      	bgt.n	8010304 <_printf_float+0x2ec>
 8010324:	9b06      	ldr	r3, [sp, #24]
 8010326:	4498      	add	r8, r3
 8010328:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801032c:	429a      	cmp	r2, r3
 801032e:	db15      	blt.n	801035c <_printf_float+0x344>
 8010330:	6823      	ldr	r3, [r4, #0]
 8010332:	07da      	lsls	r2, r3, #31
 8010334:	d412      	bmi.n	801035c <_printf_float+0x344>
 8010336:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010338:	9a06      	ldr	r2, [sp, #24]
 801033a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801033c:	1a9a      	subs	r2, r3, r2
 801033e:	eba3 0a01 	sub.w	sl, r3, r1
 8010342:	4592      	cmp	sl, r2
 8010344:	bfa8      	it	ge
 8010346:	4692      	movge	sl, r2
 8010348:	f1ba 0f00 	cmp.w	sl, #0
 801034c:	dc0e      	bgt.n	801036c <_printf_float+0x354>
 801034e:	f04f 0800 	mov.w	r8, #0
 8010352:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010356:	f104 091a 	add.w	r9, r4, #26
 801035a:	e019      	b.n	8010390 <_printf_float+0x378>
 801035c:	9b05      	ldr	r3, [sp, #20]
 801035e:	465a      	mov	r2, fp
 8010360:	4631      	mov	r1, r6
 8010362:	4628      	mov	r0, r5
 8010364:	47b8      	blx	r7
 8010366:	3001      	adds	r0, #1
 8010368:	d1e5      	bne.n	8010336 <_printf_float+0x31e>
 801036a:	e6a3      	b.n	80100b4 <_printf_float+0x9c>
 801036c:	4653      	mov	r3, sl
 801036e:	4642      	mov	r2, r8
 8010370:	4631      	mov	r1, r6
 8010372:	4628      	mov	r0, r5
 8010374:	47b8      	blx	r7
 8010376:	3001      	adds	r0, #1
 8010378:	d1e9      	bne.n	801034e <_printf_float+0x336>
 801037a:	e69b      	b.n	80100b4 <_printf_float+0x9c>
 801037c:	2301      	movs	r3, #1
 801037e:	464a      	mov	r2, r9
 8010380:	4631      	mov	r1, r6
 8010382:	4628      	mov	r0, r5
 8010384:	47b8      	blx	r7
 8010386:	3001      	adds	r0, #1
 8010388:	f43f ae94 	beq.w	80100b4 <_printf_float+0x9c>
 801038c:	f108 0801 	add.w	r8, r8, #1
 8010390:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010394:	1a9b      	subs	r3, r3, r2
 8010396:	eba3 030a 	sub.w	r3, r3, sl
 801039a:	4543      	cmp	r3, r8
 801039c:	dcee      	bgt.n	801037c <_printf_float+0x364>
 801039e:	e747      	b.n	8010230 <_printf_float+0x218>
 80103a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80103a2:	2a01      	cmp	r2, #1
 80103a4:	dc01      	bgt.n	80103aa <_printf_float+0x392>
 80103a6:	07db      	lsls	r3, r3, #31
 80103a8:	d539      	bpl.n	801041e <_printf_float+0x406>
 80103aa:	2301      	movs	r3, #1
 80103ac:	4642      	mov	r2, r8
 80103ae:	4631      	mov	r1, r6
 80103b0:	4628      	mov	r0, r5
 80103b2:	47b8      	blx	r7
 80103b4:	3001      	adds	r0, #1
 80103b6:	f43f ae7d 	beq.w	80100b4 <_printf_float+0x9c>
 80103ba:	9b05      	ldr	r3, [sp, #20]
 80103bc:	465a      	mov	r2, fp
 80103be:	4631      	mov	r1, r6
 80103c0:	4628      	mov	r0, r5
 80103c2:	47b8      	blx	r7
 80103c4:	3001      	adds	r0, #1
 80103c6:	f108 0801 	add.w	r8, r8, #1
 80103ca:	f43f ae73 	beq.w	80100b4 <_printf_float+0x9c>
 80103ce:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80103d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80103d4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80103d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103dc:	f103 33ff 	add.w	r3, r3, #4294967295
 80103e0:	d018      	beq.n	8010414 <_printf_float+0x3fc>
 80103e2:	4642      	mov	r2, r8
 80103e4:	4631      	mov	r1, r6
 80103e6:	4628      	mov	r0, r5
 80103e8:	47b8      	blx	r7
 80103ea:	3001      	adds	r0, #1
 80103ec:	d10e      	bne.n	801040c <_printf_float+0x3f4>
 80103ee:	e661      	b.n	80100b4 <_printf_float+0x9c>
 80103f0:	2301      	movs	r3, #1
 80103f2:	464a      	mov	r2, r9
 80103f4:	4631      	mov	r1, r6
 80103f6:	4628      	mov	r0, r5
 80103f8:	47b8      	blx	r7
 80103fa:	3001      	adds	r0, #1
 80103fc:	f43f ae5a 	beq.w	80100b4 <_printf_float+0x9c>
 8010400:	f108 0801 	add.w	r8, r8, #1
 8010404:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010406:	3b01      	subs	r3, #1
 8010408:	4543      	cmp	r3, r8
 801040a:	dcf1      	bgt.n	80103f0 <_printf_float+0x3d8>
 801040c:	4653      	mov	r3, sl
 801040e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010412:	e6dd      	b.n	80101d0 <_printf_float+0x1b8>
 8010414:	f04f 0800 	mov.w	r8, #0
 8010418:	f104 091a 	add.w	r9, r4, #26
 801041c:	e7f2      	b.n	8010404 <_printf_float+0x3ec>
 801041e:	2301      	movs	r3, #1
 8010420:	e7df      	b.n	80103e2 <_printf_float+0x3ca>
 8010422:	2301      	movs	r3, #1
 8010424:	464a      	mov	r2, r9
 8010426:	4631      	mov	r1, r6
 8010428:	4628      	mov	r0, r5
 801042a:	47b8      	blx	r7
 801042c:	3001      	adds	r0, #1
 801042e:	f43f ae41 	beq.w	80100b4 <_printf_float+0x9c>
 8010432:	f108 0801 	add.w	r8, r8, #1
 8010436:	68e3      	ldr	r3, [r4, #12]
 8010438:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801043a:	1a9b      	subs	r3, r3, r2
 801043c:	4543      	cmp	r3, r8
 801043e:	dcf0      	bgt.n	8010422 <_printf_float+0x40a>
 8010440:	e6fa      	b.n	8010238 <_printf_float+0x220>
 8010442:	f04f 0800 	mov.w	r8, #0
 8010446:	f104 0919 	add.w	r9, r4, #25
 801044a:	e7f4      	b.n	8010436 <_printf_float+0x41e>
 801044c:	2900      	cmp	r1, #0
 801044e:	f43f ae8a 	beq.w	8010166 <_printf_float+0x14e>
 8010452:	f04f 0c00 	mov.w	ip, #0
 8010456:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801045a:	e9cd 0900 	strd	r0, r9, [sp]
 801045e:	6022      	str	r2, [r4, #0]
 8010460:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010464:	4628      	mov	r0, r5
 8010466:	f7ff fd52 	bl	800ff0e <__cvt>
 801046a:	4680      	mov	r8, r0
 801046c:	e64a      	b.n	8010104 <_printf_float+0xec>
 801046e:	bf00      	nop

08010470 <_printf_common>:
 8010470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010474:	4691      	mov	r9, r2
 8010476:	461f      	mov	r7, r3
 8010478:	688a      	ldr	r2, [r1, #8]
 801047a:	690b      	ldr	r3, [r1, #16]
 801047c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010480:	4293      	cmp	r3, r2
 8010482:	bfb8      	it	lt
 8010484:	4613      	movlt	r3, r2
 8010486:	f8c9 3000 	str.w	r3, [r9]
 801048a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801048e:	4606      	mov	r6, r0
 8010490:	460c      	mov	r4, r1
 8010492:	b112      	cbz	r2, 801049a <_printf_common+0x2a>
 8010494:	3301      	adds	r3, #1
 8010496:	f8c9 3000 	str.w	r3, [r9]
 801049a:	6823      	ldr	r3, [r4, #0]
 801049c:	0699      	lsls	r1, r3, #26
 801049e:	bf42      	ittt	mi
 80104a0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80104a4:	3302      	addmi	r3, #2
 80104a6:	f8c9 3000 	strmi.w	r3, [r9]
 80104aa:	6825      	ldr	r5, [r4, #0]
 80104ac:	f015 0506 	ands.w	r5, r5, #6
 80104b0:	d107      	bne.n	80104c2 <_printf_common+0x52>
 80104b2:	f104 0a19 	add.w	sl, r4, #25
 80104b6:	68e3      	ldr	r3, [r4, #12]
 80104b8:	f8d9 2000 	ldr.w	r2, [r9]
 80104bc:	1a9b      	subs	r3, r3, r2
 80104be:	42ab      	cmp	r3, r5
 80104c0:	dc28      	bgt.n	8010514 <_printf_common+0xa4>
 80104c2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80104c6:	6822      	ldr	r2, [r4, #0]
 80104c8:	3300      	adds	r3, #0
 80104ca:	bf18      	it	ne
 80104cc:	2301      	movne	r3, #1
 80104ce:	0692      	lsls	r2, r2, #26
 80104d0:	d42d      	bmi.n	801052e <_printf_common+0xbe>
 80104d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80104d6:	4639      	mov	r1, r7
 80104d8:	4630      	mov	r0, r6
 80104da:	47c0      	blx	r8
 80104dc:	3001      	adds	r0, #1
 80104de:	d020      	beq.n	8010522 <_printf_common+0xb2>
 80104e0:	6823      	ldr	r3, [r4, #0]
 80104e2:	68e5      	ldr	r5, [r4, #12]
 80104e4:	f8d9 2000 	ldr.w	r2, [r9]
 80104e8:	f003 0306 	and.w	r3, r3, #6
 80104ec:	2b04      	cmp	r3, #4
 80104ee:	bf08      	it	eq
 80104f0:	1aad      	subeq	r5, r5, r2
 80104f2:	68a3      	ldr	r3, [r4, #8]
 80104f4:	6922      	ldr	r2, [r4, #16]
 80104f6:	bf0c      	ite	eq
 80104f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80104fc:	2500      	movne	r5, #0
 80104fe:	4293      	cmp	r3, r2
 8010500:	bfc4      	itt	gt
 8010502:	1a9b      	subgt	r3, r3, r2
 8010504:	18ed      	addgt	r5, r5, r3
 8010506:	f04f 0900 	mov.w	r9, #0
 801050a:	341a      	adds	r4, #26
 801050c:	454d      	cmp	r5, r9
 801050e:	d11a      	bne.n	8010546 <_printf_common+0xd6>
 8010510:	2000      	movs	r0, #0
 8010512:	e008      	b.n	8010526 <_printf_common+0xb6>
 8010514:	2301      	movs	r3, #1
 8010516:	4652      	mov	r2, sl
 8010518:	4639      	mov	r1, r7
 801051a:	4630      	mov	r0, r6
 801051c:	47c0      	blx	r8
 801051e:	3001      	adds	r0, #1
 8010520:	d103      	bne.n	801052a <_printf_common+0xba>
 8010522:	f04f 30ff 	mov.w	r0, #4294967295
 8010526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801052a:	3501      	adds	r5, #1
 801052c:	e7c3      	b.n	80104b6 <_printf_common+0x46>
 801052e:	18e1      	adds	r1, r4, r3
 8010530:	1c5a      	adds	r2, r3, #1
 8010532:	2030      	movs	r0, #48	; 0x30
 8010534:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010538:	4422      	add	r2, r4
 801053a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801053e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010542:	3302      	adds	r3, #2
 8010544:	e7c5      	b.n	80104d2 <_printf_common+0x62>
 8010546:	2301      	movs	r3, #1
 8010548:	4622      	mov	r2, r4
 801054a:	4639      	mov	r1, r7
 801054c:	4630      	mov	r0, r6
 801054e:	47c0      	blx	r8
 8010550:	3001      	adds	r0, #1
 8010552:	d0e6      	beq.n	8010522 <_printf_common+0xb2>
 8010554:	f109 0901 	add.w	r9, r9, #1
 8010558:	e7d8      	b.n	801050c <_printf_common+0x9c>
	...

0801055c <_printf_i>:
 801055c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010560:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8010564:	460c      	mov	r4, r1
 8010566:	7e09      	ldrb	r1, [r1, #24]
 8010568:	b085      	sub	sp, #20
 801056a:	296e      	cmp	r1, #110	; 0x6e
 801056c:	4617      	mov	r7, r2
 801056e:	4606      	mov	r6, r0
 8010570:	4698      	mov	r8, r3
 8010572:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010574:	f000 80b3 	beq.w	80106de <_printf_i+0x182>
 8010578:	d822      	bhi.n	80105c0 <_printf_i+0x64>
 801057a:	2963      	cmp	r1, #99	; 0x63
 801057c:	d036      	beq.n	80105ec <_printf_i+0x90>
 801057e:	d80a      	bhi.n	8010596 <_printf_i+0x3a>
 8010580:	2900      	cmp	r1, #0
 8010582:	f000 80b9 	beq.w	80106f8 <_printf_i+0x19c>
 8010586:	2958      	cmp	r1, #88	; 0x58
 8010588:	f000 8083 	beq.w	8010692 <_printf_i+0x136>
 801058c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010590:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8010594:	e032      	b.n	80105fc <_printf_i+0xa0>
 8010596:	2964      	cmp	r1, #100	; 0x64
 8010598:	d001      	beq.n	801059e <_printf_i+0x42>
 801059a:	2969      	cmp	r1, #105	; 0x69
 801059c:	d1f6      	bne.n	801058c <_printf_i+0x30>
 801059e:	6820      	ldr	r0, [r4, #0]
 80105a0:	6813      	ldr	r3, [r2, #0]
 80105a2:	0605      	lsls	r5, r0, #24
 80105a4:	f103 0104 	add.w	r1, r3, #4
 80105a8:	d52a      	bpl.n	8010600 <_printf_i+0xa4>
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	6011      	str	r1, [r2, #0]
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	da03      	bge.n	80105ba <_printf_i+0x5e>
 80105b2:	222d      	movs	r2, #45	; 0x2d
 80105b4:	425b      	negs	r3, r3
 80105b6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80105ba:	486f      	ldr	r0, [pc, #444]	; (8010778 <_printf_i+0x21c>)
 80105bc:	220a      	movs	r2, #10
 80105be:	e039      	b.n	8010634 <_printf_i+0xd8>
 80105c0:	2973      	cmp	r1, #115	; 0x73
 80105c2:	f000 809d 	beq.w	8010700 <_printf_i+0x1a4>
 80105c6:	d808      	bhi.n	80105da <_printf_i+0x7e>
 80105c8:	296f      	cmp	r1, #111	; 0x6f
 80105ca:	d020      	beq.n	801060e <_printf_i+0xb2>
 80105cc:	2970      	cmp	r1, #112	; 0x70
 80105ce:	d1dd      	bne.n	801058c <_printf_i+0x30>
 80105d0:	6823      	ldr	r3, [r4, #0]
 80105d2:	f043 0320 	orr.w	r3, r3, #32
 80105d6:	6023      	str	r3, [r4, #0]
 80105d8:	e003      	b.n	80105e2 <_printf_i+0x86>
 80105da:	2975      	cmp	r1, #117	; 0x75
 80105dc:	d017      	beq.n	801060e <_printf_i+0xb2>
 80105de:	2978      	cmp	r1, #120	; 0x78
 80105e0:	d1d4      	bne.n	801058c <_printf_i+0x30>
 80105e2:	2378      	movs	r3, #120	; 0x78
 80105e4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80105e8:	4864      	ldr	r0, [pc, #400]	; (801077c <_printf_i+0x220>)
 80105ea:	e055      	b.n	8010698 <_printf_i+0x13c>
 80105ec:	6813      	ldr	r3, [r2, #0]
 80105ee:	1d19      	adds	r1, r3, #4
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	6011      	str	r1, [r2, #0]
 80105f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80105f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80105fc:	2301      	movs	r3, #1
 80105fe:	e08c      	b.n	801071a <_printf_i+0x1be>
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	6011      	str	r1, [r2, #0]
 8010604:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010608:	bf18      	it	ne
 801060a:	b21b      	sxthne	r3, r3
 801060c:	e7cf      	b.n	80105ae <_printf_i+0x52>
 801060e:	6813      	ldr	r3, [r2, #0]
 8010610:	6825      	ldr	r5, [r4, #0]
 8010612:	1d18      	adds	r0, r3, #4
 8010614:	6010      	str	r0, [r2, #0]
 8010616:	0628      	lsls	r0, r5, #24
 8010618:	d501      	bpl.n	801061e <_printf_i+0xc2>
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	e002      	b.n	8010624 <_printf_i+0xc8>
 801061e:	0668      	lsls	r0, r5, #25
 8010620:	d5fb      	bpl.n	801061a <_printf_i+0xbe>
 8010622:	881b      	ldrh	r3, [r3, #0]
 8010624:	4854      	ldr	r0, [pc, #336]	; (8010778 <_printf_i+0x21c>)
 8010626:	296f      	cmp	r1, #111	; 0x6f
 8010628:	bf14      	ite	ne
 801062a:	220a      	movne	r2, #10
 801062c:	2208      	moveq	r2, #8
 801062e:	2100      	movs	r1, #0
 8010630:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010634:	6865      	ldr	r5, [r4, #4]
 8010636:	60a5      	str	r5, [r4, #8]
 8010638:	2d00      	cmp	r5, #0
 801063a:	f2c0 8095 	blt.w	8010768 <_printf_i+0x20c>
 801063e:	6821      	ldr	r1, [r4, #0]
 8010640:	f021 0104 	bic.w	r1, r1, #4
 8010644:	6021      	str	r1, [r4, #0]
 8010646:	2b00      	cmp	r3, #0
 8010648:	d13d      	bne.n	80106c6 <_printf_i+0x16a>
 801064a:	2d00      	cmp	r5, #0
 801064c:	f040 808e 	bne.w	801076c <_printf_i+0x210>
 8010650:	4665      	mov	r5, ip
 8010652:	2a08      	cmp	r2, #8
 8010654:	d10b      	bne.n	801066e <_printf_i+0x112>
 8010656:	6823      	ldr	r3, [r4, #0]
 8010658:	07db      	lsls	r3, r3, #31
 801065a:	d508      	bpl.n	801066e <_printf_i+0x112>
 801065c:	6923      	ldr	r3, [r4, #16]
 801065e:	6862      	ldr	r2, [r4, #4]
 8010660:	429a      	cmp	r2, r3
 8010662:	bfde      	ittt	le
 8010664:	2330      	movle	r3, #48	; 0x30
 8010666:	f805 3c01 	strble.w	r3, [r5, #-1]
 801066a:	f105 35ff 	addle.w	r5, r5, #4294967295
 801066e:	ebac 0305 	sub.w	r3, ip, r5
 8010672:	6123      	str	r3, [r4, #16]
 8010674:	f8cd 8000 	str.w	r8, [sp]
 8010678:	463b      	mov	r3, r7
 801067a:	aa03      	add	r2, sp, #12
 801067c:	4621      	mov	r1, r4
 801067e:	4630      	mov	r0, r6
 8010680:	f7ff fef6 	bl	8010470 <_printf_common>
 8010684:	3001      	adds	r0, #1
 8010686:	d14d      	bne.n	8010724 <_printf_i+0x1c8>
 8010688:	f04f 30ff 	mov.w	r0, #4294967295
 801068c:	b005      	add	sp, #20
 801068e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010692:	4839      	ldr	r0, [pc, #228]	; (8010778 <_printf_i+0x21c>)
 8010694:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8010698:	6813      	ldr	r3, [r2, #0]
 801069a:	6821      	ldr	r1, [r4, #0]
 801069c:	1d1d      	adds	r5, r3, #4
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	6015      	str	r5, [r2, #0]
 80106a2:	060a      	lsls	r2, r1, #24
 80106a4:	d50b      	bpl.n	80106be <_printf_i+0x162>
 80106a6:	07ca      	lsls	r2, r1, #31
 80106a8:	bf44      	itt	mi
 80106aa:	f041 0120 	orrmi.w	r1, r1, #32
 80106ae:	6021      	strmi	r1, [r4, #0]
 80106b0:	b91b      	cbnz	r3, 80106ba <_printf_i+0x15e>
 80106b2:	6822      	ldr	r2, [r4, #0]
 80106b4:	f022 0220 	bic.w	r2, r2, #32
 80106b8:	6022      	str	r2, [r4, #0]
 80106ba:	2210      	movs	r2, #16
 80106bc:	e7b7      	b.n	801062e <_printf_i+0xd2>
 80106be:	064d      	lsls	r5, r1, #25
 80106c0:	bf48      	it	mi
 80106c2:	b29b      	uxthmi	r3, r3
 80106c4:	e7ef      	b.n	80106a6 <_printf_i+0x14a>
 80106c6:	4665      	mov	r5, ip
 80106c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80106cc:	fb02 3311 	mls	r3, r2, r1, r3
 80106d0:	5cc3      	ldrb	r3, [r0, r3]
 80106d2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80106d6:	460b      	mov	r3, r1
 80106d8:	2900      	cmp	r1, #0
 80106da:	d1f5      	bne.n	80106c8 <_printf_i+0x16c>
 80106dc:	e7b9      	b.n	8010652 <_printf_i+0xf6>
 80106de:	6813      	ldr	r3, [r2, #0]
 80106e0:	6825      	ldr	r5, [r4, #0]
 80106e2:	6961      	ldr	r1, [r4, #20]
 80106e4:	1d18      	adds	r0, r3, #4
 80106e6:	6010      	str	r0, [r2, #0]
 80106e8:	0628      	lsls	r0, r5, #24
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	d501      	bpl.n	80106f2 <_printf_i+0x196>
 80106ee:	6019      	str	r1, [r3, #0]
 80106f0:	e002      	b.n	80106f8 <_printf_i+0x19c>
 80106f2:	066a      	lsls	r2, r5, #25
 80106f4:	d5fb      	bpl.n	80106ee <_printf_i+0x192>
 80106f6:	8019      	strh	r1, [r3, #0]
 80106f8:	2300      	movs	r3, #0
 80106fa:	6123      	str	r3, [r4, #16]
 80106fc:	4665      	mov	r5, ip
 80106fe:	e7b9      	b.n	8010674 <_printf_i+0x118>
 8010700:	6813      	ldr	r3, [r2, #0]
 8010702:	1d19      	adds	r1, r3, #4
 8010704:	6011      	str	r1, [r2, #0]
 8010706:	681d      	ldr	r5, [r3, #0]
 8010708:	6862      	ldr	r2, [r4, #4]
 801070a:	2100      	movs	r1, #0
 801070c:	4628      	mov	r0, r5
 801070e:	f7ef fdaf 	bl	8000270 <memchr>
 8010712:	b108      	cbz	r0, 8010718 <_printf_i+0x1bc>
 8010714:	1b40      	subs	r0, r0, r5
 8010716:	6060      	str	r0, [r4, #4]
 8010718:	6863      	ldr	r3, [r4, #4]
 801071a:	6123      	str	r3, [r4, #16]
 801071c:	2300      	movs	r3, #0
 801071e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010722:	e7a7      	b.n	8010674 <_printf_i+0x118>
 8010724:	6923      	ldr	r3, [r4, #16]
 8010726:	462a      	mov	r2, r5
 8010728:	4639      	mov	r1, r7
 801072a:	4630      	mov	r0, r6
 801072c:	47c0      	blx	r8
 801072e:	3001      	adds	r0, #1
 8010730:	d0aa      	beq.n	8010688 <_printf_i+0x12c>
 8010732:	6823      	ldr	r3, [r4, #0]
 8010734:	079b      	lsls	r3, r3, #30
 8010736:	d413      	bmi.n	8010760 <_printf_i+0x204>
 8010738:	68e0      	ldr	r0, [r4, #12]
 801073a:	9b03      	ldr	r3, [sp, #12]
 801073c:	4298      	cmp	r0, r3
 801073e:	bfb8      	it	lt
 8010740:	4618      	movlt	r0, r3
 8010742:	e7a3      	b.n	801068c <_printf_i+0x130>
 8010744:	2301      	movs	r3, #1
 8010746:	464a      	mov	r2, r9
 8010748:	4639      	mov	r1, r7
 801074a:	4630      	mov	r0, r6
 801074c:	47c0      	blx	r8
 801074e:	3001      	adds	r0, #1
 8010750:	d09a      	beq.n	8010688 <_printf_i+0x12c>
 8010752:	3501      	adds	r5, #1
 8010754:	68e3      	ldr	r3, [r4, #12]
 8010756:	9a03      	ldr	r2, [sp, #12]
 8010758:	1a9b      	subs	r3, r3, r2
 801075a:	42ab      	cmp	r3, r5
 801075c:	dcf2      	bgt.n	8010744 <_printf_i+0x1e8>
 801075e:	e7eb      	b.n	8010738 <_printf_i+0x1dc>
 8010760:	2500      	movs	r5, #0
 8010762:	f104 0919 	add.w	r9, r4, #25
 8010766:	e7f5      	b.n	8010754 <_printf_i+0x1f8>
 8010768:	2b00      	cmp	r3, #0
 801076a:	d1ac      	bne.n	80106c6 <_printf_i+0x16a>
 801076c:	7803      	ldrb	r3, [r0, #0]
 801076e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010772:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010776:	e76c      	b.n	8010652 <_printf_i+0xf6>
 8010778:	08013e6a 	.word	0x08013e6a
 801077c:	08013e7b 	.word	0x08013e7b

08010780 <_scanf_float>:
 8010780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010784:	469a      	mov	sl, r3
 8010786:	688b      	ldr	r3, [r1, #8]
 8010788:	4616      	mov	r6, r2
 801078a:	1e5a      	subs	r2, r3, #1
 801078c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8010790:	b087      	sub	sp, #28
 8010792:	bf83      	ittte	hi
 8010794:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8010798:	189b      	addhi	r3, r3, r2
 801079a:	9301      	strhi	r3, [sp, #4]
 801079c:	2300      	movls	r3, #0
 801079e:	bf86      	itte	hi
 80107a0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80107a4:	608b      	strhi	r3, [r1, #8]
 80107a6:	9301      	strls	r3, [sp, #4]
 80107a8:	680b      	ldr	r3, [r1, #0]
 80107aa:	4688      	mov	r8, r1
 80107ac:	f04f 0b00 	mov.w	fp, #0
 80107b0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80107b4:	f848 3b1c 	str.w	r3, [r8], #28
 80107b8:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80107bc:	4607      	mov	r7, r0
 80107be:	460c      	mov	r4, r1
 80107c0:	4645      	mov	r5, r8
 80107c2:	465a      	mov	r2, fp
 80107c4:	46d9      	mov	r9, fp
 80107c6:	f8cd b008 	str.w	fp, [sp, #8]
 80107ca:	68a1      	ldr	r1, [r4, #8]
 80107cc:	b181      	cbz	r1, 80107f0 <_scanf_float+0x70>
 80107ce:	6833      	ldr	r3, [r6, #0]
 80107d0:	781b      	ldrb	r3, [r3, #0]
 80107d2:	2b49      	cmp	r3, #73	; 0x49
 80107d4:	d071      	beq.n	80108ba <_scanf_float+0x13a>
 80107d6:	d84d      	bhi.n	8010874 <_scanf_float+0xf4>
 80107d8:	2b39      	cmp	r3, #57	; 0x39
 80107da:	d840      	bhi.n	801085e <_scanf_float+0xde>
 80107dc:	2b31      	cmp	r3, #49	; 0x31
 80107de:	f080 8088 	bcs.w	80108f2 <_scanf_float+0x172>
 80107e2:	2b2d      	cmp	r3, #45	; 0x2d
 80107e4:	f000 8090 	beq.w	8010908 <_scanf_float+0x188>
 80107e8:	d815      	bhi.n	8010816 <_scanf_float+0x96>
 80107ea:	2b2b      	cmp	r3, #43	; 0x2b
 80107ec:	f000 808c 	beq.w	8010908 <_scanf_float+0x188>
 80107f0:	f1b9 0f00 	cmp.w	r9, #0
 80107f4:	d003      	beq.n	80107fe <_scanf_float+0x7e>
 80107f6:	6823      	ldr	r3, [r4, #0]
 80107f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80107fc:	6023      	str	r3, [r4, #0]
 80107fe:	3a01      	subs	r2, #1
 8010800:	2a01      	cmp	r2, #1
 8010802:	f200 80ea 	bhi.w	80109da <_scanf_float+0x25a>
 8010806:	4545      	cmp	r5, r8
 8010808:	f200 80dc 	bhi.w	80109c4 <_scanf_float+0x244>
 801080c:	2601      	movs	r6, #1
 801080e:	4630      	mov	r0, r6
 8010810:	b007      	add	sp, #28
 8010812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010816:	2b2e      	cmp	r3, #46	; 0x2e
 8010818:	f000 809f 	beq.w	801095a <_scanf_float+0x1da>
 801081c:	2b30      	cmp	r3, #48	; 0x30
 801081e:	d1e7      	bne.n	80107f0 <_scanf_float+0x70>
 8010820:	6820      	ldr	r0, [r4, #0]
 8010822:	f410 7f80 	tst.w	r0, #256	; 0x100
 8010826:	d064      	beq.n	80108f2 <_scanf_float+0x172>
 8010828:	9b01      	ldr	r3, [sp, #4]
 801082a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 801082e:	6020      	str	r0, [r4, #0]
 8010830:	f109 0901 	add.w	r9, r9, #1
 8010834:	b11b      	cbz	r3, 801083e <_scanf_float+0xbe>
 8010836:	3b01      	subs	r3, #1
 8010838:	3101      	adds	r1, #1
 801083a:	9301      	str	r3, [sp, #4]
 801083c:	60a1      	str	r1, [r4, #8]
 801083e:	68a3      	ldr	r3, [r4, #8]
 8010840:	3b01      	subs	r3, #1
 8010842:	60a3      	str	r3, [r4, #8]
 8010844:	6923      	ldr	r3, [r4, #16]
 8010846:	3301      	adds	r3, #1
 8010848:	6123      	str	r3, [r4, #16]
 801084a:	6873      	ldr	r3, [r6, #4]
 801084c:	3b01      	subs	r3, #1
 801084e:	2b00      	cmp	r3, #0
 8010850:	6073      	str	r3, [r6, #4]
 8010852:	f340 80ac 	ble.w	80109ae <_scanf_float+0x22e>
 8010856:	6833      	ldr	r3, [r6, #0]
 8010858:	3301      	adds	r3, #1
 801085a:	6033      	str	r3, [r6, #0]
 801085c:	e7b5      	b.n	80107ca <_scanf_float+0x4a>
 801085e:	2b45      	cmp	r3, #69	; 0x45
 8010860:	f000 8085 	beq.w	801096e <_scanf_float+0x1ee>
 8010864:	2b46      	cmp	r3, #70	; 0x46
 8010866:	d06a      	beq.n	801093e <_scanf_float+0x1be>
 8010868:	2b41      	cmp	r3, #65	; 0x41
 801086a:	d1c1      	bne.n	80107f0 <_scanf_float+0x70>
 801086c:	2a01      	cmp	r2, #1
 801086e:	d1bf      	bne.n	80107f0 <_scanf_float+0x70>
 8010870:	2202      	movs	r2, #2
 8010872:	e046      	b.n	8010902 <_scanf_float+0x182>
 8010874:	2b65      	cmp	r3, #101	; 0x65
 8010876:	d07a      	beq.n	801096e <_scanf_float+0x1ee>
 8010878:	d818      	bhi.n	80108ac <_scanf_float+0x12c>
 801087a:	2b54      	cmp	r3, #84	; 0x54
 801087c:	d066      	beq.n	801094c <_scanf_float+0x1cc>
 801087e:	d811      	bhi.n	80108a4 <_scanf_float+0x124>
 8010880:	2b4e      	cmp	r3, #78	; 0x4e
 8010882:	d1b5      	bne.n	80107f0 <_scanf_float+0x70>
 8010884:	2a00      	cmp	r2, #0
 8010886:	d146      	bne.n	8010916 <_scanf_float+0x196>
 8010888:	f1b9 0f00 	cmp.w	r9, #0
 801088c:	d145      	bne.n	801091a <_scanf_float+0x19a>
 801088e:	6821      	ldr	r1, [r4, #0]
 8010890:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8010894:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8010898:	d13f      	bne.n	801091a <_scanf_float+0x19a>
 801089a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801089e:	6021      	str	r1, [r4, #0]
 80108a0:	2201      	movs	r2, #1
 80108a2:	e02e      	b.n	8010902 <_scanf_float+0x182>
 80108a4:	2b59      	cmp	r3, #89	; 0x59
 80108a6:	d01e      	beq.n	80108e6 <_scanf_float+0x166>
 80108a8:	2b61      	cmp	r3, #97	; 0x61
 80108aa:	e7de      	b.n	801086a <_scanf_float+0xea>
 80108ac:	2b6e      	cmp	r3, #110	; 0x6e
 80108ae:	d0e9      	beq.n	8010884 <_scanf_float+0x104>
 80108b0:	d815      	bhi.n	80108de <_scanf_float+0x15e>
 80108b2:	2b66      	cmp	r3, #102	; 0x66
 80108b4:	d043      	beq.n	801093e <_scanf_float+0x1be>
 80108b6:	2b69      	cmp	r3, #105	; 0x69
 80108b8:	d19a      	bne.n	80107f0 <_scanf_float+0x70>
 80108ba:	f1bb 0f00 	cmp.w	fp, #0
 80108be:	d138      	bne.n	8010932 <_scanf_float+0x1b2>
 80108c0:	f1b9 0f00 	cmp.w	r9, #0
 80108c4:	d197      	bne.n	80107f6 <_scanf_float+0x76>
 80108c6:	6821      	ldr	r1, [r4, #0]
 80108c8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80108cc:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80108d0:	d195      	bne.n	80107fe <_scanf_float+0x7e>
 80108d2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80108d6:	6021      	str	r1, [r4, #0]
 80108d8:	f04f 0b01 	mov.w	fp, #1
 80108dc:	e011      	b.n	8010902 <_scanf_float+0x182>
 80108de:	2b74      	cmp	r3, #116	; 0x74
 80108e0:	d034      	beq.n	801094c <_scanf_float+0x1cc>
 80108e2:	2b79      	cmp	r3, #121	; 0x79
 80108e4:	d184      	bne.n	80107f0 <_scanf_float+0x70>
 80108e6:	f1bb 0f07 	cmp.w	fp, #7
 80108ea:	d181      	bne.n	80107f0 <_scanf_float+0x70>
 80108ec:	f04f 0b08 	mov.w	fp, #8
 80108f0:	e007      	b.n	8010902 <_scanf_float+0x182>
 80108f2:	eb12 0f0b 	cmn.w	r2, fp
 80108f6:	f47f af7b 	bne.w	80107f0 <_scanf_float+0x70>
 80108fa:	6821      	ldr	r1, [r4, #0]
 80108fc:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8010900:	6021      	str	r1, [r4, #0]
 8010902:	702b      	strb	r3, [r5, #0]
 8010904:	3501      	adds	r5, #1
 8010906:	e79a      	b.n	801083e <_scanf_float+0xbe>
 8010908:	6821      	ldr	r1, [r4, #0]
 801090a:	0608      	lsls	r0, r1, #24
 801090c:	f57f af70 	bpl.w	80107f0 <_scanf_float+0x70>
 8010910:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8010914:	e7f4      	b.n	8010900 <_scanf_float+0x180>
 8010916:	2a02      	cmp	r2, #2
 8010918:	d047      	beq.n	80109aa <_scanf_float+0x22a>
 801091a:	f1bb 0f01 	cmp.w	fp, #1
 801091e:	d003      	beq.n	8010928 <_scanf_float+0x1a8>
 8010920:	f1bb 0f04 	cmp.w	fp, #4
 8010924:	f47f af64 	bne.w	80107f0 <_scanf_float+0x70>
 8010928:	f10b 0b01 	add.w	fp, fp, #1
 801092c:	fa5f fb8b 	uxtb.w	fp, fp
 8010930:	e7e7      	b.n	8010902 <_scanf_float+0x182>
 8010932:	f1bb 0f03 	cmp.w	fp, #3
 8010936:	d0f7      	beq.n	8010928 <_scanf_float+0x1a8>
 8010938:	f1bb 0f05 	cmp.w	fp, #5
 801093c:	e7f2      	b.n	8010924 <_scanf_float+0x1a4>
 801093e:	f1bb 0f02 	cmp.w	fp, #2
 8010942:	f47f af55 	bne.w	80107f0 <_scanf_float+0x70>
 8010946:	f04f 0b03 	mov.w	fp, #3
 801094a:	e7da      	b.n	8010902 <_scanf_float+0x182>
 801094c:	f1bb 0f06 	cmp.w	fp, #6
 8010950:	f47f af4e 	bne.w	80107f0 <_scanf_float+0x70>
 8010954:	f04f 0b07 	mov.w	fp, #7
 8010958:	e7d3      	b.n	8010902 <_scanf_float+0x182>
 801095a:	6821      	ldr	r1, [r4, #0]
 801095c:	0588      	lsls	r0, r1, #22
 801095e:	f57f af47 	bpl.w	80107f0 <_scanf_float+0x70>
 8010962:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8010966:	6021      	str	r1, [r4, #0]
 8010968:	f8cd 9008 	str.w	r9, [sp, #8]
 801096c:	e7c9      	b.n	8010902 <_scanf_float+0x182>
 801096e:	6821      	ldr	r1, [r4, #0]
 8010970:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8010974:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8010978:	d006      	beq.n	8010988 <_scanf_float+0x208>
 801097a:	0548      	lsls	r0, r1, #21
 801097c:	f57f af38 	bpl.w	80107f0 <_scanf_float+0x70>
 8010980:	f1b9 0f00 	cmp.w	r9, #0
 8010984:	f43f af3b 	beq.w	80107fe <_scanf_float+0x7e>
 8010988:	0588      	lsls	r0, r1, #22
 801098a:	bf58      	it	pl
 801098c:	9802      	ldrpl	r0, [sp, #8]
 801098e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8010992:	bf58      	it	pl
 8010994:	eba9 0000 	subpl.w	r0, r9, r0
 8010998:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 801099c:	bf58      	it	pl
 801099e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80109a2:	6021      	str	r1, [r4, #0]
 80109a4:	f04f 0900 	mov.w	r9, #0
 80109a8:	e7ab      	b.n	8010902 <_scanf_float+0x182>
 80109aa:	2203      	movs	r2, #3
 80109ac:	e7a9      	b.n	8010902 <_scanf_float+0x182>
 80109ae:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80109b2:	9205      	str	r2, [sp, #20]
 80109b4:	4631      	mov	r1, r6
 80109b6:	4638      	mov	r0, r7
 80109b8:	4798      	blx	r3
 80109ba:	9a05      	ldr	r2, [sp, #20]
 80109bc:	2800      	cmp	r0, #0
 80109be:	f43f af04 	beq.w	80107ca <_scanf_float+0x4a>
 80109c2:	e715      	b.n	80107f0 <_scanf_float+0x70>
 80109c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80109c8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80109cc:	4632      	mov	r2, r6
 80109ce:	4638      	mov	r0, r7
 80109d0:	4798      	blx	r3
 80109d2:	6923      	ldr	r3, [r4, #16]
 80109d4:	3b01      	subs	r3, #1
 80109d6:	6123      	str	r3, [r4, #16]
 80109d8:	e715      	b.n	8010806 <_scanf_float+0x86>
 80109da:	f10b 33ff 	add.w	r3, fp, #4294967295
 80109de:	2b06      	cmp	r3, #6
 80109e0:	d80a      	bhi.n	80109f8 <_scanf_float+0x278>
 80109e2:	f1bb 0f02 	cmp.w	fp, #2
 80109e6:	d966      	bls.n	8010ab6 <_scanf_float+0x336>
 80109e8:	f1ab 0b03 	sub.w	fp, fp, #3
 80109ec:	fa5f fb8b 	uxtb.w	fp, fp
 80109f0:	eba5 0b0b 	sub.w	fp, r5, fp
 80109f4:	455d      	cmp	r5, fp
 80109f6:	d149      	bne.n	8010a8c <_scanf_float+0x30c>
 80109f8:	6823      	ldr	r3, [r4, #0]
 80109fa:	05da      	lsls	r2, r3, #23
 80109fc:	d51f      	bpl.n	8010a3e <_scanf_float+0x2be>
 80109fe:	055b      	lsls	r3, r3, #21
 8010a00:	d466      	bmi.n	8010ad0 <_scanf_float+0x350>
 8010a02:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8010a06:	6923      	ldr	r3, [r4, #16]
 8010a08:	2965      	cmp	r1, #101	; 0x65
 8010a0a:	f103 33ff 	add.w	r3, r3, #4294967295
 8010a0e:	f105 3bff 	add.w	fp, r5, #4294967295
 8010a12:	6123      	str	r3, [r4, #16]
 8010a14:	d00d      	beq.n	8010a32 <_scanf_float+0x2b2>
 8010a16:	2945      	cmp	r1, #69	; 0x45
 8010a18:	d00b      	beq.n	8010a32 <_scanf_float+0x2b2>
 8010a1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010a1e:	4632      	mov	r2, r6
 8010a20:	4638      	mov	r0, r7
 8010a22:	4798      	blx	r3
 8010a24:	6923      	ldr	r3, [r4, #16]
 8010a26:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8010a2a:	3b01      	subs	r3, #1
 8010a2c:	f1a5 0b02 	sub.w	fp, r5, #2
 8010a30:	6123      	str	r3, [r4, #16]
 8010a32:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010a36:	4632      	mov	r2, r6
 8010a38:	4638      	mov	r0, r7
 8010a3a:	4798      	blx	r3
 8010a3c:	465d      	mov	r5, fp
 8010a3e:	6826      	ldr	r6, [r4, #0]
 8010a40:	f016 0610 	ands.w	r6, r6, #16
 8010a44:	d170      	bne.n	8010b28 <_scanf_float+0x3a8>
 8010a46:	702e      	strb	r6, [r5, #0]
 8010a48:	6823      	ldr	r3, [r4, #0]
 8010a4a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8010a4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010a52:	d140      	bne.n	8010ad6 <_scanf_float+0x356>
 8010a54:	9b02      	ldr	r3, [sp, #8]
 8010a56:	eba9 0303 	sub.w	r3, r9, r3
 8010a5a:	425a      	negs	r2, r3
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d147      	bne.n	8010af0 <_scanf_float+0x370>
 8010a60:	2200      	movs	r2, #0
 8010a62:	4638      	mov	r0, r7
 8010a64:	4641      	mov	r1, r8
 8010a66:	f000 fe83 	bl	8011770 <_strtod_r>
 8010a6a:	6820      	ldr	r0, [r4, #0]
 8010a6c:	f8da 3000 	ldr.w	r3, [sl]
 8010a70:	f010 0f02 	tst.w	r0, #2
 8010a74:	f103 0204 	add.w	r2, r3, #4
 8010a78:	f8ca 2000 	str.w	r2, [sl]
 8010a7c:	d043      	beq.n	8010b06 <_scanf_float+0x386>
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	ed83 0b00 	vstr	d0, [r3]
 8010a84:	68e3      	ldr	r3, [r4, #12]
 8010a86:	3301      	adds	r3, #1
 8010a88:	60e3      	str	r3, [r4, #12]
 8010a8a:	e6c0      	b.n	801080e <_scanf_float+0x8e>
 8010a8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010a90:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8010a94:	4632      	mov	r2, r6
 8010a96:	4638      	mov	r0, r7
 8010a98:	4798      	blx	r3
 8010a9a:	6923      	ldr	r3, [r4, #16]
 8010a9c:	3b01      	subs	r3, #1
 8010a9e:	6123      	str	r3, [r4, #16]
 8010aa0:	e7a8      	b.n	80109f4 <_scanf_float+0x274>
 8010aa2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010aa6:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8010aaa:	4632      	mov	r2, r6
 8010aac:	4638      	mov	r0, r7
 8010aae:	4798      	blx	r3
 8010ab0:	6923      	ldr	r3, [r4, #16]
 8010ab2:	3b01      	subs	r3, #1
 8010ab4:	6123      	str	r3, [r4, #16]
 8010ab6:	4545      	cmp	r5, r8
 8010ab8:	d8f3      	bhi.n	8010aa2 <_scanf_float+0x322>
 8010aba:	e6a7      	b.n	801080c <_scanf_float+0x8c>
 8010abc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010ac0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8010ac4:	4632      	mov	r2, r6
 8010ac6:	4638      	mov	r0, r7
 8010ac8:	4798      	blx	r3
 8010aca:	6923      	ldr	r3, [r4, #16]
 8010acc:	3b01      	subs	r3, #1
 8010ace:	6123      	str	r3, [r4, #16]
 8010ad0:	4545      	cmp	r5, r8
 8010ad2:	d8f3      	bhi.n	8010abc <_scanf_float+0x33c>
 8010ad4:	e69a      	b.n	801080c <_scanf_float+0x8c>
 8010ad6:	9b03      	ldr	r3, [sp, #12]
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d0c1      	beq.n	8010a60 <_scanf_float+0x2e0>
 8010adc:	9904      	ldr	r1, [sp, #16]
 8010ade:	230a      	movs	r3, #10
 8010ae0:	4632      	mov	r2, r6
 8010ae2:	3101      	adds	r1, #1
 8010ae4:	4638      	mov	r0, r7
 8010ae6:	f000 fecf 	bl	8011888 <_strtol_r>
 8010aea:	9b03      	ldr	r3, [sp, #12]
 8010aec:	9d04      	ldr	r5, [sp, #16]
 8010aee:	1ac2      	subs	r2, r0, r3
 8010af0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8010af4:	429d      	cmp	r5, r3
 8010af6:	bf28      	it	cs
 8010af8:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8010afc:	490b      	ldr	r1, [pc, #44]	; (8010b2c <_scanf_float+0x3ac>)
 8010afe:	4628      	mov	r0, r5
 8010b00:	f000 f81c 	bl	8010b3c <siprintf>
 8010b04:	e7ac      	b.n	8010a60 <_scanf_float+0x2e0>
 8010b06:	f010 0004 	ands.w	r0, r0, #4
 8010b0a:	d1b8      	bne.n	8010a7e <_scanf_float+0x2fe>
 8010b0c:	eeb4 0b40 	vcmp.f64	d0, d0
 8010b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b14:	681d      	ldr	r5, [r3, #0]
 8010b16:	d704      	bvc.n	8010b22 <_scanf_float+0x3a2>
 8010b18:	f000 f80a 	bl	8010b30 <nanf>
 8010b1c:	ed85 0a00 	vstr	s0, [r5]
 8010b20:	e7b0      	b.n	8010a84 <_scanf_float+0x304>
 8010b22:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8010b26:	e7f9      	b.n	8010b1c <_scanf_float+0x39c>
 8010b28:	2600      	movs	r6, #0
 8010b2a:	e670      	b.n	801080e <_scanf_float+0x8e>
 8010b2c:	08013e8c 	.word	0x08013e8c

08010b30 <nanf>:
 8010b30:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8010b38 <nanf+0x8>
 8010b34:	4770      	bx	lr
 8010b36:	bf00      	nop
 8010b38:	7fc00000 	.word	0x7fc00000

08010b3c <siprintf>:
 8010b3c:	b40e      	push	{r1, r2, r3}
 8010b3e:	b500      	push	{lr}
 8010b40:	b09c      	sub	sp, #112	; 0x70
 8010b42:	ab1d      	add	r3, sp, #116	; 0x74
 8010b44:	9002      	str	r0, [sp, #8]
 8010b46:	9006      	str	r0, [sp, #24]
 8010b48:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010b4c:	4809      	ldr	r0, [pc, #36]	; (8010b74 <siprintf+0x38>)
 8010b4e:	9107      	str	r1, [sp, #28]
 8010b50:	9104      	str	r1, [sp, #16]
 8010b52:	4909      	ldr	r1, [pc, #36]	; (8010b78 <siprintf+0x3c>)
 8010b54:	f853 2b04 	ldr.w	r2, [r3], #4
 8010b58:	9105      	str	r1, [sp, #20]
 8010b5a:	6800      	ldr	r0, [r0, #0]
 8010b5c:	9301      	str	r3, [sp, #4]
 8010b5e:	a902      	add	r1, sp, #8
 8010b60:	f002 fce2 	bl	8013528 <_svfiprintf_r>
 8010b64:	9b02      	ldr	r3, [sp, #8]
 8010b66:	2200      	movs	r2, #0
 8010b68:	701a      	strb	r2, [r3, #0]
 8010b6a:	b01c      	add	sp, #112	; 0x70
 8010b6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010b70:	b003      	add	sp, #12
 8010b72:	4770      	bx	lr
 8010b74:	20000054 	.word	0x20000054
 8010b78:	ffff0208 	.word	0xffff0208

08010b7c <strncpy>:
 8010b7c:	b570      	push	{r4, r5, r6, lr}
 8010b7e:	3901      	subs	r1, #1
 8010b80:	4604      	mov	r4, r0
 8010b82:	b902      	cbnz	r2, 8010b86 <strncpy+0xa>
 8010b84:	bd70      	pop	{r4, r5, r6, pc}
 8010b86:	4623      	mov	r3, r4
 8010b88:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8010b8c:	f803 5b01 	strb.w	r5, [r3], #1
 8010b90:	1e56      	subs	r6, r2, #1
 8010b92:	b92d      	cbnz	r5, 8010ba0 <strncpy+0x24>
 8010b94:	4414      	add	r4, r2
 8010b96:	42a3      	cmp	r3, r4
 8010b98:	d0f4      	beq.n	8010b84 <strncpy+0x8>
 8010b9a:	f803 5b01 	strb.w	r5, [r3], #1
 8010b9e:	e7fa      	b.n	8010b96 <strncpy+0x1a>
 8010ba0:	461c      	mov	r4, r3
 8010ba2:	4632      	mov	r2, r6
 8010ba4:	e7ed      	b.n	8010b82 <strncpy+0x6>

08010ba6 <sulp>:
 8010ba6:	b570      	push	{r4, r5, r6, lr}
 8010ba8:	4604      	mov	r4, r0
 8010baa:	460d      	mov	r5, r1
 8010bac:	4616      	mov	r6, r2
 8010bae:	ec45 4b10 	vmov	d0, r4, r5
 8010bb2:	f002 fa75 	bl	80130a0 <__ulp>
 8010bb6:	b17e      	cbz	r6, 8010bd8 <sulp+0x32>
 8010bb8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010bbc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	dd09      	ble.n	8010bd8 <sulp+0x32>
 8010bc4:	051b      	lsls	r3, r3, #20
 8010bc6:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8010bca:	2000      	movs	r0, #0
 8010bcc:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8010bd0:	ec41 0b17 	vmov	d7, r0, r1
 8010bd4:	ee20 0b07 	vmul.f64	d0, d0, d7
 8010bd8:	bd70      	pop	{r4, r5, r6, pc}
 8010bda:	0000      	movs	r0, r0
 8010bdc:	0000      	movs	r0, r0
	...

08010be0 <_strtod_l>:
 8010be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010be4:	ed2d 8b0c 	vpush	{d8-d13}
 8010be8:	4698      	mov	r8, r3
 8010bea:	b09d      	sub	sp, #116	; 0x74
 8010bec:	2300      	movs	r3, #0
 8010bee:	4604      	mov	r4, r0
 8010bf0:	4640      	mov	r0, r8
 8010bf2:	460e      	mov	r6, r1
 8010bf4:	9214      	str	r2, [sp, #80]	; 0x50
 8010bf6:	9318      	str	r3, [sp, #96]	; 0x60
 8010bf8:	f001 ff5b 	bl	8012ab2 <__localeconv_l>
 8010bfc:	4681      	mov	r9, r0
 8010bfe:	6800      	ldr	r0, [r0, #0]
 8010c00:	f7ef fb28 	bl	8000254 <strlen>
 8010c04:	f04f 0a00 	mov.w	sl, #0
 8010c08:	4607      	mov	r7, r0
 8010c0a:	f04f 0b00 	mov.w	fp, #0
 8010c0e:	9617      	str	r6, [sp, #92]	; 0x5c
 8010c10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010c12:	781a      	ldrb	r2, [r3, #0]
 8010c14:	2a0d      	cmp	r2, #13
 8010c16:	d834      	bhi.n	8010c82 <_strtod_l+0xa2>
 8010c18:	2a09      	cmp	r2, #9
 8010c1a:	d238      	bcs.n	8010c8e <_strtod_l+0xae>
 8010c1c:	2a00      	cmp	r2, #0
 8010c1e:	d040      	beq.n	8010ca2 <_strtod_l+0xc2>
 8010c20:	2300      	movs	r3, #0
 8010c22:	930d      	str	r3, [sp, #52]	; 0x34
 8010c24:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8010c26:	782b      	ldrb	r3, [r5, #0]
 8010c28:	2b30      	cmp	r3, #48	; 0x30
 8010c2a:	f040 80b3 	bne.w	8010d94 <_strtod_l+0x1b4>
 8010c2e:	786b      	ldrb	r3, [r5, #1]
 8010c30:	2b58      	cmp	r3, #88	; 0x58
 8010c32:	d001      	beq.n	8010c38 <_strtod_l+0x58>
 8010c34:	2b78      	cmp	r3, #120	; 0x78
 8010c36:	d169      	bne.n	8010d0c <_strtod_l+0x12c>
 8010c38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010c3a:	9301      	str	r3, [sp, #4]
 8010c3c:	ab18      	add	r3, sp, #96	; 0x60
 8010c3e:	9300      	str	r3, [sp, #0]
 8010c40:	f8cd 8008 	str.w	r8, [sp, #8]
 8010c44:	ab19      	add	r3, sp, #100	; 0x64
 8010c46:	4a8f      	ldr	r2, [pc, #572]	; (8010e84 <_strtod_l+0x2a4>)
 8010c48:	a917      	add	r1, sp, #92	; 0x5c
 8010c4a:	4620      	mov	r0, r4
 8010c4c:	f001 fc57 	bl	80124fe <__gethex>
 8010c50:	f010 0607 	ands.w	r6, r0, #7
 8010c54:	4607      	mov	r7, r0
 8010c56:	d005      	beq.n	8010c64 <_strtod_l+0x84>
 8010c58:	2e06      	cmp	r6, #6
 8010c5a:	d12c      	bne.n	8010cb6 <_strtod_l+0xd6>
 8010c5c:	3501      	adds	r5, #1
 8010c5e:	2300      	movs	r3, #0
 8010c60:	9517      	str	r5, [sp, #92]	; 0x5c
 8010c62:	930d      	str	r3, [sp, #52]	; 0x34
 8010c64:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	f040 855e 	bne.w	8011728 <_strtod_l+0xb48>
 8010c6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010c6e:	b1eb      	cbz	r3, 8010cac <_strtod_l+0xcc>
 8010c70:	ec4b ab17 	vmov	d7, sl, fp
 8010c74:	eeb1 0b47 	vneg.f64	d0, d7
 8010c78:	b01d      	add	sp, #116	; 0x74
 8010c7a:	ecbd 8b0c 	vpop	{d8-d13}
 8010c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c82:	2a2b      	cmp	r2, #43	; 0x2b
 8010c84:	d015      	beq.n	8010cb2 <_strtod_l+0xd2>
 8010c86:	2a2d      	cmp	r2, #45	; 0x2d
 8010c88:	d004      	beq.n	8010c94 <_strtod_l+0xb4>
 8010c8a:	2a20      	cmp	r2, #32
 8010c8c:	d1c8      	bne.n	8010c20 <_strtod_l+0x40>
 8010c8e:	3301      	adds	r3, #1
 8010c90:	9317      	str	r3, [sp, #92]	; 0x5c
 8010c92:	e7bd      	b.n	8010c10 <_strtod_l+0x30>
 8010c94:	2201      	movs	r2, #1
 8010c96:	920d      	str	r2, [sp, #52]	; 0x34
 8010c98:	1c5a      	adds	r2, r3, #1
 8010c9a:	9217      	str	r2, [sp, #92]	; 0x5c
 8010c9c:	785b      	ldrb	r3, [r3, #1]
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d1c0      	bne.n	8010c24 <_strtod_l+0x44>
 8010ca2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010ca4:	9617      	str	r6, [sp, #92]	; 0x5c
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	f040 853c 	bne.w	8011724 <_strtod_l+0xb44>
 8010cac:	ec4b ab10 	vmov	d0, sl, fp
 8010cb0:	e7e2      	b.n	8010c78 <_strtod_l+0x98>
 8010cb2:	2200      	movs	r2, #0
 8010cb4:	e7ef      	b.n	8010c96 <_strtod_l+0xb6>
 8010cb6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010cb8:	b13a      	cbz	r2, 8010cca <_strtod_l+0xea>
 8010cba:	2135      	movs	r1, #53	; 0x35
 8010cbc:	a81a      	add	r0, sp, #104	; 0x68
 8010cbe:	f002 fae8 	bl	8013292 <__copybits>
 8010cc2:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010cc4:	4620      	mov	r0, r4
 8010cc6:	f001 ff53 	bl	8012b70 <_Bfree>
 8010cca:	3e01      	subs	r6, #1
 8010ccc:	2e04      	cmp	r6, #4
 8010cce:	d806      	bhi.n	8010cde <_strtod_l+0xfe>
 8010cd0:	e8df f006 	tbb	[pc, r6]
 8010cd4:	1714030a 	.word	0x1714030a
 8010cd8:	0a          	.byte	0x0a
 8010cd9:	00          	.byte	0x00
 8010cda:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8010cde:	073b      	lsls	r3, r7, #28
 8010ce0:	d5c0      	bpl.n	8010c64 <_strtod_l+0x84>
 8010ce2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8010ce6:	e7bd      	b.n	8010c64 <_strtod_l+0x84>
 8010ce8:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8010cec:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8010cee:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8010cf2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8010cf6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8010cfa:	e7f0      	b.n	8010cde <_strtod_l+0xfe>
 8010cfc:	f8df b188 	ldr.w	fp, [pc, #392]	; 8010e88 <_strtod_l+0x2a8>
 8010d00:	e7ed      	b.n	8010cde <_strtod_l+0xfe>
 8010d02:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8010d06:	f04f 3aff 	mov.w	sl, #4294967295
 8010d0a:	e7e8      	b.n	8010cde <_strtod_l+0xfe>
 8010d0c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010d0e:	1c5a      	adds	r2, r3, #1
 8010d10:	9217      	str	r2, [sp, #92]	; 0x5c
 8010d12:	785b      	ldrb	r3, [r3, #1]
 8010d14:	2b30      	cmp	r3, #48	; 0x30
 8010d16:	d0f9      	beq.n	8010d0c <_strtod_l+0x12c>
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d0a3      	beq.n	8010c64 <_strtod_l+0x84>
 8010d1c:	2301      	movs	r3, #1
 8010d1e:	930a      	str	r3, [sp, #40]	; 0x28
 8010d20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010d22:	930c      	str	r3, [sp, #48]	; 0x30
 8010d24:	2300      	movs	r3, #0
 8010d26:	9306      	str	r3, [sp, #24]
 8010d28:	9308      	str	r3, [sp, #32]
 8010d2a:	461d      	mov	r5, r3
 8010d2c:	220a      	movs	r2, #10
 8010d2e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8010d30:	f890 8000 	ldrb.w	r8, [r0]
 8010d34:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
 8010d38:	b2d9      	uxtb	r1, r3
 8010d3a:	2909      	cmp	r1, #9
 8010d3c:	d92c      	bls.n	8010d98 <_strtod_l+0x1b8>
 8010d3e:	463a      	mov	r2, r7
 8010d40:	f8d9 1000 	ldr.w	r1, [r9]
 8010d44:	f002 fcf8 	bl	8013738 <strncmp>
 8010d48:	2800      	cmp	r0, #0
 8010d4a:	d035      	beq.n	8010db8 <_strtod_l+0x1d8>
 8010d4c:	2000      	movs	r0, #0
 8010d4e:	4642      	mov	r2, r8
 8010d50:	462b      	mov	r3, r5
 8010d52:	4601      	mov	r1, r0
 8010d54:	9004      	str	r0, [sp, #16]
 8010d56:	2a65      	cmp	r2, #101	; 0x65
 8010d58:	d001      	beq.n	8010d5e <_strtod_l+0x17e>
 8010d5a:	2a45      	cmp	r2, #69	; 0x45
 8010d5c:	d117      	bne.n	8010d8e <_strtod_l+0x1ae>
 8010d5e:	b923      	cbnz	r3, 8010d6a <_strtod_l+0x18a>
 8010d60:	b910      	cbnz	r0, 8010d68 <_strtod_l+0x188>
 8010d62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d09c      	beq.n	8010ca2 <_strtod_l+0xc2>
 8010d68:	2300      	movs	r3, #0
 8010d6a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8010d6c:	1c72      	adds	r2, r6, #1
 8010d6e:	9217      	str	r2, [sp, #92]	; 0x5c
 8010d70:	7872      	ldrb	r2, [r6, #1]
 8010d72:	2a2b      	cmp	r2, #43	; 0x2b
 8010d74:	f000 8082 	beq.w	8010e7c <_strtod_l+0x29c>
 8010d78:	2a2d      	cmp	r2, #45	; 0x2d
 8010d7a:	d079      	beq.n	8010e70 <_strtod_l+0x290>
 8010d7c:	f04f 0e00 	mov.w	lr, #0
 8010d80:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8010d84:	f1bc 0f09 	cmp.w	ip, #9
 8010d88:	f240 8086 	bls.w	8010e98 <_strtod_l+0x2b8>
 8010d8c:	9617      	str	r6, [sp, #92]	; 0x5c
 8010d8e:	f04f 0800 	mov.w	r8, #0
 8010d92:	e0a8      	b.n	8010ee6 <_strtod_l+0x306>
 8010d94:	2300      	movs	r3, #0
 8010d96:	e7c2      	b.n	8010d1e <_strtod_l+0x13e>
 8010d98:	2d08      	cmp	r5, #8
 8010d9a:	bfd5      	itete	le
 8010d9c:	9908      	ldrle	r1, [sp, #32]
 8010d9e:	9906      	ldrgt	r1, [sp, #24]
 8010da0:	fb02 3301 	mlale	r3, r2, r1, r3
 8010da4:	fb02 3301 	mlagt	r3, r2, r1, r3
 8010da8:	f100 0001 	add.w	r0, r0, #1
 8010dac:	bfd4      	ite	le
 8010dae:	9308      	strle	r3, [sp, #32]
 8010db0:	9306      	strgt	r3, [sp, #24]
 8010db2:	3501      	adds	r5, #1
 8010db4:	9017      	str	r0, [sp, #92]	; 0x5c
 8010db6:	e7ba      	b.n	8010d2e <_strtod_l+0x14e>
 8010db8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010dba:	19da      	adds	r2, r3, r7
 8010dbc:	9217      	str	r2, [sp, #92]	; 0x5c
 8010dbe:	5dda      	ldrb	r2, [r3, r7]
 8010dc0:	2d00      	cmp	r5, #0
 8010dc2:	d038      	beq.n	8010e36 <_strtod_l+0x256>
 8010dc4:	4601      	mov	r1, r0
 8010dc6:	462b      	mov	r3, r5
 8010dc8:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8010dcc:	2f09      	cmp	r7, #9
 8010dce:	d913      	bls.n	8010df8 <_strtod_l+0x218>
 8010dd0:	2701      	movs	r7, #1
 8010dd2:	9704      	str	r7, [sp, #16]
 8010dd4:	e7bf      	b.n	8010d56 <_strtod_l+0x176>
 8010dd6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010dd8:	1c5a      	adds	r2, r3, #1
 8010dda:	9217      	str	r2, [sp, #92]	; 0x5c
 8010ddc:	785a      	ldrb	r2, [r3, #1]
 8010dde:	3001      	adds	r0, #1
 8010de0:	2a30      	cmp	r2, #48	; 0x30
 8010de2:	d0f8      	beq.n	8010dd6 <_strtod_l+0x1f6>
 8010de4:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8010de8:	2b08      	cmp	r3, #8
 8010dea:	f200 84a2 	bhi.w	8011732 <_strtod_l+0xb52>
 8010dee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010df0:	930c      	str	r3, [sp, #48]	; 0x30
 8010df2:	4601      	mov	r1, r0
 8010df4:	2000      	movs	r0, #0
 8010df6:	4603      	mov	r3, r0
 8010df8:	f1b2 0830 	subs.w	r8, r2, #48	; 0x30
 8010dfc:	f100 0701 	add.w	r7, r0, #1
 8010e00:	d013      	beq.n	8010e2a <_strtod_l+0x24a>
 8010e02:	4439      	add	r1, r7
 8010e04:	eb00 0e03 	add.w	lr, r0, r3
 8010e08:	461f      	mov	r7, r3
 8010e0a:	f04f 0c0a 	mov.w	ip, #10
 8010e0e:	45be      	cmp	lr, r7
 8010e10:	d113      	bne.n	8010e3a <_strtod_l+0x25a>
 8010e12:	181f      	adds	r7, r3, r0
 8010e14:	2f08      	cmp	r7, #8
 8010e16:	f103 0301 	add.w	r3, r3, #1
 8010e1a:	4403      	add	r3, r0
 8010e1c:	dc1d      	bgt.n	8010e5a <_strtod_l+0x27a>
 8010e1e:	9a08      	ldr	r2, [sp, #32]
 8010e20:	200a      	movs	r0, #10
 8010e22:	fb00 8202 	mla	r2, r0, r2, r8
 8010e26:	9208      	str	r2, [sp, #32]
 8010e28:	2700      	movs	r7, #0
 8010e2a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010e2c:	1c50      	adds	r0, r2, #1
 8010e2e:	9017      	str	r0, [sp, #92]	; 0x5c
 8010e30:	7852      	ldrb	r2, [r2, #1]
 8010e32:	4638      	mov	r0, r7
 8010e34:	e7c8      	b.n	8010dc8 <_strtod_l+0x1e8>
 8010e36:	4628      	mov	r0, r5
 8010e38:	e7d2      	b.n	8010de0 <_strtod_l+0x200>
 8010e3a:	2f08      	cmp	r7, #8
 8010e3c:	f107 0701 	add.w	r7, r7, #1
 8010e40:	dc04      	bgt.n	8010e4c <_strtod_l+0x26c>
 8010e42:	9a08      	ldr	r2, [sp, #32]
 8010e44:	fb0c f202 	mul.w	r2, ip, r2
 8010e48:	9208      	str	r2, [sp, #32]
 8010e4a:	e7e0      	b.n	8010e0e <_strtod_l+0x22e>
 8010e4c:	2f10      	cmp	r7, #16
 8010e4e:	bfde      	ittt	le
 8010e50:	9a06      	ldrle	r2, [sp, #24]
 8010e52:	fb0c f202 	mulle.w	r2, ip, r2
 8010e56:	9206      	strle	r2, [sp, #24]
 8010e58:	e7d9      	b.n	8010e0e <_strtod_l+0x22e>
 8010e5a:	2b10      	cmp	r3, #16
 8010e5c:	bfdf      	itttt	le
 8010e5e:	9a06      	ldrle	r2, [sp, #24]
 8010e60:	200a      	movle	r0, #10
 8010e62:	fb00 8202 	mlale	r2, r0, r2, r8
 8010e66:	9206      	strle	r2, [sp, #24]
 8010e68:	e7de      	b.n	8010e28 <_strtod_l+0x248>
 8010e6a:	2301      	movs	r3, #1
 8010e6c:	9304      	str	r3, [sp, #16]
 8010e6e:	e777      	b.n	8010d60 <_strtod_l+0x180>
 8010e70:	f04f 0e01 	mov.w	lr, #1
 8010e74:	1cb2      	adds	r2, r6, #2
 8010e76:	9217      	str	r2, [sp, #92]	; 0x5c
 8010e78:	78b2      	ldrb	r2, [r6, #2]
 8010e7a:	e781      	b.n	8010d80 <_strtod_l+0x1a0>
 8010e7c:	f04f 0e00 	mov.w	lr, #0
 8010e80:	e7f8      	b.n	8010e74 <_strtod_l+0x294>
 8010e82:	bf00      	nop
 8010e84:	08013e94 	.word	0x08013e94
 8010e88:	7ff00000 	.word	0x7ff00000
 8010e8c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010e8e:	f102 0c01 	add.w	ip, r2, #1
 8010e92:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 8010e96:	7852      	ldrb	r2, [r2, #1]
 8010e98:	2a30      	cmp	r2, #48	; 0x30
 8010e9a:	d0f7      	beq.n	8010e8c <_strtod_l+0x2ac>
 8010e9c:	f1a2 0c31 	sub.w	ip, r2, #49	; 0x31
 8010ea0:	f1bc 0f08 	cmp.w	ip, #8
 8010ea4:	f63f af73 	bhi.w	8010d8e <_strtod_l+0x1ae>
 8010ea8:	f1a2 0830 	sub.w	r8, r2, #48	; 0x30
 8010eac:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010eae:	920e      	str	r2, [sp, #56]	; 0x38
 8010eb0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010eb2:	f102 0c01 	add.w	ip, r2, #1
 8010eb6:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 8010eba:	7852      	ldrb	r2, [r2, #1]
 8010ebc:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 8010ec0:	f1b9 0f09 	cmp.w	r9, #9
 8010ec4:	d939      	bls.n	8010f3a <_strtod_l+0x35a>
 8010ec6:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8010ec8:	ebac 0c07 	sub.w	ip, ip, r7
 8010ecc:	f1bc 0f08 	cmp.w	ip, #8
 8010ed0:	f644 6c1f 	movw	ip, #19999	; 0x4e1f
 8010ed4:	dc37      	bgt.n	8010f46 <_strtod_l+0x366>
 8010ed6:	45e0      	cmp	r8, ip
 8010ed8:	bfa8      	it	ge
 8010eda:	46e0      	movge	r8, ip
 8010edc:	f1be 0f00 	cmp.w	lr, #0
 8010ee0:	d001      	beq.n	8010ee6 <_strtod_l+0x306>
 8010ee2:	f1c8 0800 	rsb	r8, r8, #0
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d151      	bne.n	8010f8e <_strtod_l+0x3ae>
 8010eea:	2800      	cmp	r0, #0
 8010eec:	f47f aeba 	bne.w	8010c64 <_strtod_l+0x84>
 8010ef0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	f47f aeb6 	bne.w	8010c64 <_strtod_l+0x84>
 8010ef8:	9b04      	ldr	r3, [sp, #16]
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	f47f aed1 	bne.w	8010ca2 <_strtod_l+0xc2>
 8010f00:	2a4e      	cmp	r2, #78	; 0x4e
 8010f02:	d027      	beq.n	8010f54 <_strtod_l+0x374>
 8010f04:	dc21      	bgt.n	8010f4a <_strtod_l+0x36a>
 8010f06:	2a49      	cmp	r2, #73	; 0x49
 8010f08:	f47f aecb 	bne.w	8010ca2 <_strtod_l+0xc2>
 8010f0c:	499a      	ldr	r1, [pc, #616]	; (8011178 <_strtod_l+0x598>)
 8010f0e:	a817      	add	r0, sp, #92	; 0x5c
 8010f10:	f001 fd28 	bl	8012964 <__match>
 8010f14:	2800      	cmp	r0, #0
 8010f16:	f43f aec4 	beq.w	8010ca2 <_strtod_l+0xc2>
 8010f1a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010f1c:	4997      	ldr	r1, [pc, #604]	; (801117c <_strtod_l+0x59c>)
 8010f1e:	3b01      	subs	r3, #1
 8010f20:	a817      	add	r0, sp, #92	; 0x5c
 8010f22:	9317      	str	r3, [sp, #92]	; 0x5c
 8010f24:	f001 fd1e 	bl	8012964 <__match>
 8010f28:	b910      	cbnz	r0, 8010f30 <_strtod_l+0x350>
 8010f2a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010f2c:	3301      	adds	r3, #1
 8010f2e:	9317      	str	r3, [sp, #92]	; 0x5c
 8010f30:	f8df b260 	ldr.w	fp, [pc, #608]	; 8011194 <_strtod_l+0x5b4>
 8010f34:	f04f 0a00 	mov.w	sl, #0
 8010f38:	e694      	b.n	8010c64 <_strtod_l+0x84>
 8010f3a:	270a      	movs	r7, #10
 8010f3c:	fb07 2808 	mla	r8, r7, r8, r2
 8010f40:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 8010f44:	e7b4      	b.n	8010eb0 <_strtod_l+0x2d0>
 8010f46:	46e0      	mov	r8, ip
 8010f48:	e7c8      	b.n	8010edc <_strtod_l+0x2fc>
 8010f4a:	2a69      	cmp	r2, #105	; 0x69
 8010f4c:	d0de      	beq.n	8010f0c <_strtod_l+0x32c>
 8010f4e:	2a6e      	cmp	r2, #110	; 0x6e
 8010f50:	f47f aea7 	bne.w	8010ca2 <_strtod_l+0xc2>
 8010f54:	498a      	ldr	r1, [pc, #552]	; (8011180 <_strtod_l+0x5a0>)
 8010f56:	a817      	add	r0, sp, #92	; 0x5c
 8010f58:	f001 fd04 	bl	8012964 <__match>
 8010f5c:	2800      	cmp	r0, #0
 8010f5e:	f43f aea0 	beq.w	8010ca2 <_strtod_l+0xc2>
 8010f62:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010f64:	781b      	ldrb	r3, [r3, #0]
 8010f66:	2b28      	cmp	r3, #40	; 0x28
 8010f68:	d10e      	bne.n	8010f88 <_strtod_l+0x3a8>
 8010f6a:	aa1a      	add	r2, sp, #104	; 0x68
 8010f6c:	4985      	ldr	r1, [pc, #532]	; (8011184 <_strtod_l+0x5a4>)
 8010f6e:	a817      	add	r0, sp, #92	; 0x5c
 8010f70:	f001 fd0c 	bl	801298c <__hexnan>
 8010f74:	2805      	cmp	r0, #5
 8010f76:	d107      	bne.n	8010f88 <_strtod_l+0x3a8>
 8010f78:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010f7a:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8010f7e:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8010f82:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8010f86:	e66d      	b.n	8010c64 <_strtod_l+0x84>
 8010f88:	f8df b20c 	ldr.w	fp, [pc, #524]	; 8011198 <_strtod_l+0x5b8>
 8010f8c:	e7d2      	b.n	8010f34 <_strtod_l+0x354>
 8010f8e:	eddd 7a08 	vldr	s15, [sp, #32]
 8010f92:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8010f96:	eba8 0201 	sub.w	r2, r8, r1
 8010f9a:	2d00      	cmp	r5, #0
 8010f9c:	bf08      	it	eq
 8010f9e:	461d      	moveq	r5, r3
 8010fa0:	2b10      	cmp	r3, #16
 8010fa2:	9204      	str	r2, [sp, #16]
 8010fa4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8010fa8:	461a      	mov	r2, r3
 8010faa:	bfa8      	it	ge
 8010fac:	2210      	movge	r2, #16
 8010fae:	2b09      	cmp	r3, #9
 8010fb0:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8010fb4:	dc14      	bgt.n	8010fe0 <_strtod_l+0x400>
 8010fb6:	9904      	ldr	r1, [sp, #16]
 8010fb8:	2900      	cmp	r1, #0
 8010fba:	f43f ae53 	beq.w	8010c64 <_strtod_l+0x84>
 8010fbe:	9904      	ldr	r1, [sp, #16]
 8010fc0:	dd72      	ble.n	80110a8 <_strtod_l+0x4c8>
 8010fc2:	2916      	cmp	r1, #22
 8010fc4:	dc5a      	bgt.n	801107c <_strtod_l+0x49c>
 8010fc6:	4970      	ldr	r1, [pc, #448]	; (8011188 <_strtod_l+0x5a8>)
 8010fc8:	9b04      	ldr	r3, [sp, #16]
 8010fca:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010fce:	ed91 7b00 	vldr	d7, [r1]
 8010fd2:	ec4b ab16 	vmov	d6, sl, fp
 8010fd6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010fda:	ec5b ab17 	vmov	sl, fp, d7
 8010fde:	e641      	b.n	8010c64 <_strtod_l+0x84>
 8010fe0:	4969      	ldr	r1, [pc, #420]	; (8011188 <_strtod_l+0x5a8>)
 8010fe2:	eddd 7a06 	vldr	s15, [sp, #24]
 8010fe6:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8010fea:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 8010fee:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8010ff2:	2b0f      	cmp	r3, #15
 8010ff4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8010ff8:	eea5 7b06 	vfma.f64	d7, d5, d6
 8010ffc:	ec5b ab17 	vmov	sl, fp, d7
 8011000:	ddd9      	ble.n	8010fb6 <_strtod_l+0x3d6>
 8011002:	9904      	ldr	r1, [sp, #16]
 8011004:	1a9a      	subs	r2, r3, r2
 8011006:	440a      	add	r2, r1
 8011008:	2a00      	cmp	r2, #0
 801100a:	f340 8096 	ble.w	801113a <_strtod_l+0x55a>
 801100e:	f012 000f 	ands.w	r0, r2, #15
 8011012:	d00a      	beq.n	801102a <_strtod_l+0x44a>
 8011014:	495c      	ldr	r1, [pc, #368]	; (8011188 <_strtod_l+0x5a8>)
 8011016:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801101a:	ed91 7b00 	vldr	d7, [r1]
 801101e:	ec4b ab16 	vmov	d6, sl, fp
 8011022:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011026:	ec5b ab17 	vmov	sl, fp, d7
 801102a:	f032 020f 	bics.w	r2, r2, #15
 801102e:	d072      	beq.n	8011116 <_strtod_l+0x536>
 8011030:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8011034:	dd45      	ble.n	80110c2 <_strtod_l+0x4e2>
 8011036:	2500      	movs	r5, #0
 8011038:	46a8      	mov	r8, r5
 801103a:	9506      	str	r5, [sp, #24]
 801103c:	46a9      	mov	r9, r5
 801103e:	2322      	movs	r3, #34	; 0x22
 8011040:	f8df b150 	ldr.w	fp, [pc, #336]	; 8011194 <_strtod_l+0x5b4>
 8011044:	6023      	str	r3, [r4, #0]
 8011046:	f04f 0a00 	mov.w	sl, #0
 801104a:	9b06      	ldr	r3, [sp, #24]
 801104c:	2b00      	cmp	r3, #0
 801104e:	f43f ae09 	beq.w	8010c64 <_strtod_l+0x84>
 8011052:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011054:	4620      	mov	r0, r4
 8011056:	f001 fd8b 	bl	8012b70 <_Bfree>
 801105a:	4649      	mov	r1, r9
 801105c:	4620      	mov	r0, r4
 801105e:	f001 fd87 	bl	8012b70 <_Bfree>
 8011062:	4641      	mov	r1, r8
 8011064:	4620      	mov	r0, r4
 8011066:	f001 fd83 	bl	8012b70 <_Bfree>
 801106a:	9906      	ldr	r1, [sp, #24]
 801106c:	4620      	mov	r0, r4
 801106e:	f001 fd7f 	bl	8012b70 <_Bfree>
 8011072:	4629      	mov	r1, r5
 8011074:	4620      	mov	r0, r4
 8011076:	f001 fd7b 	bl	8012b70 <_Bfree>
 801107a:	e5f3      	b.n	8010c64 <_strtod_l+0x84>
 801107c:	9804      	ldr	r0, [sp, #16]
 801107e:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8011082:	4281      	cmp	r1, r0
 8011084:	dbbd      	blt.n	8011002 <_strtod_l+0x422>
 8011086:	4a40      	ldr	r2, [pc, #256]	; (8011188 <_strtod_l+0x5a8>)
 8011088:	f1c3 030f 	rsb	r3, r3, #15
 801108c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8011090:	ed91 7b00 	vldr	d7, [r1]
 8011094:	ec4b ab16 	vmov	d6, sl, fp
 8011098:	1ac3      	subs	r3, r0, r3
 801109a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801109e:	ee27 7b06 	vmul.f64	d7, d7, d6
 80110a2:	ed92 6b00 	vldr	d6, [r2]
 80110a6:	e796      	b.n	8010fd6 <_strtod_l+0x3f6>
 80110a8:	3116      	adds	r1, #22
 80110aa:	dbaa      	blt.n	8011002 <_strtod_l+0x422>
 80110ac:	4936      	ldr	r1, [pc, #216]	; (8011188 <_strtod_l+0x5a8>)
 80110ae:	9b04      	ldr	r3, [sp, #16]
 80110b0:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
 80110b4:	ed91 7b00 	vldr	d7, [r1]
 80110b8:	ec4b ab16 	vmov	d6, sl, fp
 80110bc:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80110c0:	e78b      	b.n	8010fda <_strtod_l+0x3fa>
 80110c2:	e9cd ab06 	strd	sl, fp, [sp, #24]
 80110c6:	2000      	movs	r0, #0
 80110c8:	4e30      	ldr	r6, [pc, #192]	; (801118c <_strtod_l+0x5ac>)
 80110ca:	1112      	asrs	r2, r2, #4
 80110cc:	4601      	mov	r1, r0
 80110ce:	2a01      	cmp	r2, #1
 80110d0:	dc23      	bgt.n	801111a <_strtod_l+0x53a>
 80110d2:	b108      	cbz	r0, 80110d8 <_strtod_l+0x4f8>
 80110d4:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 80110d8:	4a2c      	ldr	r2, [pc, #176]	; (801118c <_strtod_l+0x5ac>)
 80110da:	482d      	ldr	r0, [pc, #180]	; (8011190 <_strtod_l+0x5b0>)
 80110dc:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 80110e0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80110e4:	ed91 7b00 	vldr	d7, [r1]
 80110e8:	ec4b ab16 	vmov	d6, sl, fp
 80110ec:	ee27 7b06 	vmul.f64	d7, d7, d6
 80110f0:	ed8d 7b06 	vstr	d7, [sp, #24]
 80110f4:	9907      	ldr	r1, [sp, #28]
 80110f6:	4a27      	ldr	r2, [pc, #156]	; (8011194 <_strtod_l+0x5b4>)
 80110f8:	400a      	ands	r2, r1
 80110fa:	4282      	cmp	r2, r0
 80110fc:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8011100:	d899      	bhi.n	8011036 <_strtod_l+0x456>
 8011102:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8011106:	4282      	cmp	r2, r0
 8011108:	bf86      	itte	hi
 801110a:	f8df b090 	ldrhi.w	fp, [pc, #144]	; 801119c <_strtod_l+0x5bc>
 801110e:	f04f 3aff 	movhi.w	sl, #4294967295
 8011112:	f101 7b54 	addls.w	fp, r1, #55574528	; 0x3500000
 8011116:	2700      	movs	r7, #0
 8011118:	e070      	b.n	80111fc <_strtod_l+0x61c>
 801111a:	07d7      	lsls	r7, r2, #31
 801111c:	d50a      	bpl.n	8011134 <_strtod_l+0x554>
 801111e:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
 8011122:	ed90 7b00 	vldr	d7, [r0]
 8011126:	ed9d 6b06 	vldr	d6, [sp, #24]
 801112a:	ee26 7b07 	vmul.f64	d7, d6, d7
 801112e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011132:	2001      	movs	r0, #1
 8011134:	3101      	adds	r1, #1
 8011136:	1052      	asrs	r2, r2, #1
 8011138:	e7c9      	b.n	80110ce <_strtod_l+0x4ee>
 801113a:	d0ec      	beq.n	8011116 <_strtod_l+0x536>
 801113c:	4252      	negs	r2, r2
 801113e:	f012 000f 	ands.w	r0, r2, #15
 8011142:	d00a      	beq.n	801115a <_strtod_l+0x57a>
 8011144:	4910      	ldr	r1, [pc, #64]	; (8011188 <_strtod_l+0x5a8>)
 8011146:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801114a:	ed91 7b00 	vldr	d7, [r1]
 801114e:	ec4b ab16 	vmov	d6, sl, fp
 8011152:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8011156:	ec5b ab17 	vmov	sl, fp, d7
 801115a:	1112      	asrs	r2, r2, #4
 801115c:	d0db      	beq.n	8011116 <_strtod_l+0x536>
 801115e:	2a1f      	cmp	r2, #31
 8011160:	dd1e      	ble.n	80111a0 <_strtod_l+0x5c0>
 8011162:	2500      	movs	r5, #0
 8011164:	46a8      	mov	r8, r5
 8011166:	9506      	str	r5, [sp, #24]
 8011168:	46a9      	mov	r9, r5
 801116a:	2322      	movs	r3, #34	; 0x22
 801116c:	f04f 0a00 	mov.w	sl, #0
 8011170:	f04f 0b00 	mov.w	fp, #0
 8011174:	6023      	str	r3, [r4, #0]
 8011176:	e768      	b.n	801104a <_strtod_l+0x46a>
 8011178:	08013e5d 	.word	0x08013e5d
 801117c:	08013eeb 	.word	0x08013eeb
 8011180:	08013e65 	.word	0x08013e65
 8011184:	08013ea8 	.word	0x08013ea8
 8011188:	08013f28 	.word	0x08013f28
 801118c:	08013f00 	.word	0x08013f00
 8011190:	7ca00000 	.word	0x7ca00000
 8011194:	7ff00000 	.word	0x7ff00000
 8011198:	fff80000 	.word	0xfff80000
 801119c:	7fefffff 	.word	0x7fefffff
 80111a0:	e9cd ab06 	strd	sl, fp, [sp, #24]
 80111a4:	f012 0710 	ands.w	r7, r2, #16
 80111a8:	49ab      	ldr	r1, [pc, #684]	; (8011458 <_strtod_l+0x878>)
 80111aa:	bf18      	it	ne
 80111ac:	276a      	movne	r7, #106	; 0x6a
 80111ae:	2000      	movs	r0, #0
 80111b0:	2a00      	cmp	r2, #0
 80111b2:	f300 8113 	bgt.w	80113dc <_strtod_l+0x7fc>
 80111b6:	b108      	cbz	r0, 80111bc <_strtod_l+0x5dc>
 80111b8:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 80111bc:	b1bf      	cbz	r7, 80111ee <_strtod_l+0x60e>
 80111be:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80111c2:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 80111c6:	2a00      	cmp	r2, #0
 80111c8:	4659      	mov	r1, fp
 80111ca:	dd10      	ble.n	80111ee <_strtod_l+0x60e>
 80111cc:	2a1f      	cmp	r2, #31
 80111ce:	f340 8113 	ble.w	80113f8 <_strtod_l+0x818>
 80111d2:	2a34      	cmp	r2, #52	; 0x34
 80111d4:	bfde      	ittt	le
 80111d6:	3a20      	suble	r2, #32
 80111d8:	f04f 30ff 	movle.w	r0, #4294967295
 80111dc:	fa00 f202 	lslle.w	r2, r0, r2
 80111e0:	f04f 0a00 	mov.w	sl, #0
 80111e4:	bfcc      	ite	gt
 80111e6:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80111ea:	ea02 0b01 	andle.w	fp, r2, r1
 80111ee:	ec4b ab17 	vmov	d7, sl, fp
 80111f2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80111f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111fa:	d0b2      	beq.n	8011162 <_strtod_l+0x582>
 80111fc:	9a08      	ldr	r2, [sp, #32]
 80111fe:	9200      	str	r2, [sp, #0]
 8011200:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011202:	462a      	mov	r2, r5
 8011204:	4620      	mov	r0, r4
 8011206:	f001 fd05 	bl	8012c14 <__s2b>
 801120a:	9006      	str	r0, [sp, #24]
 801120c:	2800      	cmp	r0, #0
 801120e:	f43f af12 	beq.w	8011036 <_strtod_l+0x456>
 8011212:	9a04      	ldr	r2, [sp, #16]
 8011214:	9b04      	ldr	r3, [sp, #16]
 8011216:	2a00      	cmp	r2, #0
 8011218:	f1c3 0300 	rsb	r3, r3, #0
 801121c:	ed9f 9b88 	vldr	d9, [pc, #544]	; 8011440 <_strtod_l+0x860>
 8011220:	bfa8      	it	ge
 8011222:	2300      	movge	r3, #0
 8011224:	ed9f ab88 	vldr	d10, [pc, #544]	; 8011448 <_strtod_l+0x868>
 8011228:	ed9f bb89 	vldr	d11, [pc, #548]	; 8011450 <_strtod_l+0x870>
 801122c:	930e      	str	r3, [sp, #56]	; 0x38
 801122e:	2500      	movs	r5, #0
 8011230:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8011234:	9310      	str	r3, [sp, #64]	; 0x40
 8011236:	46a8      	mov	r8, r5
 8011238:	9b06      	ldr	r3, [sp, #24]
 801123a:	4620      	mov	r0, r4
 801123c:	6859      	ldr	r1, [r3, #4]
 801123e:	f001 fc63 	bl	8012b08 <_Balloc>
 8011242:	4681      	mov	r9, r0
 8011244:	2800      	cmp	r0, #0
 8011246:	f43f aefa 	beq.w	801103e <_strtod_l+0x45e>
 801124a:	9b06      	ldr	r3, [sp, #24]
 801124c:	691a      	ldr	r2, [r3, #16]
 801124e:	3202      	adds	r2, #2
 8011250:	f103 010c 	add.w	r1, r3, #12
 8011254:	0092      	lsls	r2, r2, #2
 8011256:	300c      	adds	r0, #12
 8011258:	f7fe fe46 	bl	800fee8 <memcpy>
 801125c:	aa1a      	add	r2, sp, #104	; 0x68
 801125e:	a919      	add	r1, sp, #100	; 0x64
 8011260:	ec4b ab10 	vmov	d0, sl, fp
 8011264:	4620      	mov	r0, r4
 8011266:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801126a:	f001 ff8f 	bl	801318c <__d2b>
 801126e:	9018      	str	r0, [sp, #96]	; 0x60
 8011270:	2800      	cmp	r0, #0
 8011272:	f43f aee4 	beq.w	801103e <_strtod_l+0x45e>
 8011276:	2101      	movs	r1, #1
 8011278:	4620      	mov	r0, r4
 801127a:	f001 fd57 	bl	8012d2c <__i2b>
 801127e:	4680      	mov	r8, r0
 8011280:	2800      	cmp	r0, #0
 8011282:	f43f aedc 	beq.w	801103e <_strtod_l+0x45e>
 8011286:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8011288:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801128a:	2e00      	cmp	r6, #0
 801128c:	bfb1      	iteee	lt
 801128e:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
 8011290:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8011292:	9810      	ldrge	r0, [sp, #64]	; 0x40
 8011294:	18f3      	addge	r3, r6, r3
 8011296:	bfba      	itte	lt
 8011298:	1b98      	sublt	r0, r3, r6
 801129a:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 801129c:	9308      	strge	r3, [sp, #32]
 801129e:	eba6 0607 	sub.w	r6, r6, r7
 80112a2:	bfb8      	it	lt
 80112a4:	9308      	strlt	r3, [sp, #32]
 80112a6:	4416      	add	r6, r2
 80112a8:	4b6c      	ldr	r3, [pc, #432]	; (801145c <_strtod_l+0x87c>)
 80112aa:	3e01      	subs	r6, #1
 80112ac:	429e      	cmp	r6, r3
 80112ae:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80112b2:	f280 80b4 	bge.w	801141e <_strtod_l+0x83e>
 80112b6:	1b9b      	subs	r3, r3, r6
 80112b8:	2b1f      	cmp	r3, #31
 80112ba:	eba2 0203 	sub.w	r2, r2, r3
 80112be:	f04f 0101 	mov.w	r1, #1
 80112c2:	f300 80a0 	bgt.w	8011406 <_strtod_l+0x826>
 80112c6:	fa01 f303 	lsl.w	r3, r1, r3
 80112ca:	9311      	str	r3, [sp, #68]	; 0x44
 80112cc:	2300      	movs	r3, #0
 80112ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80112d0:	9b08      	ldr	r3, [sp, #32]
 80112d2:	4413      	add	r3, r2
 80112d4:	4402      	add	r2, r0
 80112d6:	18be      	adds	r6, r7, r2
 80112d8:	9a08      	ldr	r2, [sp, #32]
 80112da:	429a      	cmp	r2, r3
 80112dc:	bfa8      	it	ge
 80112de:	461a      	movge	r2, r3
 80112e0:	42b2      	cmp	r2, r6
 80112e2:	bfa8      	it	ge
 80112e4:	4632      	movge	r2, r6
 80112e6:	2a00      	cmp	r2, #0
 80112e8:	dd04      	ble.n	80112f4 <_strtod_l+0x714>
 80112ea:	9908      	ldr	r1, [sp, #32]
 80112ec:	1a9b      	subs	r3, r3, r2
 80112ee:	1ab6      	subs	r6, r6, r2
 80112f0:	1a8a      	subs	r2, r1, r2
 80112f2:	9208      	str	r2, [sp, #32]
 80112f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80112f6:	b1c2      	cbz	r2, 801132a <_strtod_l+0x74a>
 80112f8:	4641      	mov	r1, r8
 80112fa:	4620      	mov	r0, r4
 80112fc:	9315      	str	r3, [sp, #84]	; 0x54
 80112fe:	f001 fdb5 	bl	8012e6c <__pow5mult>
 8011302:	4680      	mov	r8, r0
 8011304:	2800      	cmp	r0, #0
 8011306:	f43f ae9a 	beq.w	801103e <_strtod_l+0x45e>
 801130a:	4601      	mov	r1, r0
 801130c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801130e:	4620      	mov	r0, r4
 8011310:	f001 fd15 	bl	8012d3e <__multiply>
 8011314:	900c      	str	r0, [sp, #48]	; 0x30
 8011316:	2800      	cmp	r0, #0
 8011318:	f43f ae91 	beq.w	801103e <_strtod_l+0x45e>
 801131c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801131e:	4620      	mov	r0, r4
 8011320:	f001 fc26 	bl	8012b70 <_Bfree>
 8011324:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011326:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011328:	9218      	str	r2, [sp, #96]	; 0x60
 801132a:	2b00      	cmp	r3, #0
 801132c:	dc7c      	bgt.n	8011428 <_strtod_l+0x848>
 801132e:	9b04      	ldr	r3, [sp, #16]
 8011330:	2b00      	cmp	r3, #0
 8011332:	dd08      	ble.n	8011346 <_strtod_l+0x766>
 8011334:	4649      	mov	r1, r9
 8011336:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011338:	4620      	mov	r0, r4
 801133a:	f001 fd97 	bl	8012e6c <__pow5mult>
 801133e:	4681      	mov	r9, r0
 8011340:	2800      	cmp	r0, #0
 8011342:	f43f ae7c 	beq.w	801103e <_strtod_l+0x45e>
 8011346:	2e00      	cmp	r6, #0
 8011348:	dd08      	ble.n	801135c <_strtod_l+0x77c>
 801134a:	4649      	mov	r1, r9
 801134c:	4632      	mov	r2, r6
 801134e:	4620      	mov	r0, r4
 8011350:	f001 fdda 	bl	8012f08 <__lshift>
 8011354:	4681      	mov	r9, r0
 8011356:	2800      	cmp	r0, #0
 8011358:	f43f ae71 	beq.w	801103e <_strtod_l+0x45e>
 801135c:	9b08      	ldr	r3, [sp, #32]
 801135e:	2b00      	cmp	r3, #0
 8011360:	dd08      	ble.n	8011374 <_strtod_l+0x794>
 8011362:	4641      	mov	r1, r8
 8011364:	461a      	mov	r2, r3
 8011366:	4620      	mov	r0, r4
 8011368:	f001 fdce 	bl	8012f08 <__lshift>
 801136c:	4680      	mov	r8, r0
 801136e:	2800      	cmp	r0, #0
 8011370:	f43f ae65 	beq.w	801103e <_strtod_l+0x45e>
 8011374:	464a      	mov	r2, r9
 8011376:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011378:	4620      	mov	r0, r4
 801137a:	f001 fe33 	bl	8012fe4 <__mdiff>
 801137e:	4605      	mov	r5, r0
 8011380:	2800      	cmp	r0, #0
 8011382:	f43f ae5c 	beq.w	801103e <_strtod_l+0x45e>
 8011386:	68c3      	ldr	r3, [r0, #12]
 8011388:	930c      	str	r3, [sp, #48]	; 0x30
 801138a:	2300      	movs	r3, #0
 801138c:	60c3      	str	r3, [r0, #12]
 801138e:	4641      	mov	r1, r8
 8011390:	f001 fe0e 	bl	8012fb0 <__mcmp>
 8011394:	2800      	cmp	r0, #0
 8011396:	da63      	bge.n	8011460 <_strtod_l+0x880>
 8011398:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801139a:	b9e3      	cbnz	r3, 80113d6 <_strtod_l+0x7f6>
 801139c:	f1ba 0f00 	cmp.w	sl, #0
 80113a0:	d119      	bne.n	80113d6 <_strtod_l+0x7f6>
 80113a2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80113a6:	b9b3      	cbnz	r3, 80113d6 <_strtod_l+0x7f6>
 80113a8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80113ac:	0d1b      	lsrs	r3, r3, #20
 80113ae:	051b      	lsls	r3, r3, #20
 80113b0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80113b4:	d90f      	bls.n	80113d6 <_strtod_l+0x7f6>
 80113b6:	696b      	ldr	r3, [r5, #20]
 80113b8:	b913      	cbnz	r3, 80113c0 <_strtod_l+0x7e0>
 80113ba:	692b      	ldr	r3, [r5, #16]
 80113bc:	2b01      	cmp	r3, #1
 80113be:	dd0a      	ble.n	80113d6 <_strtod_l+0x7f6>
 80113c0:	4629      	mov	r1, r5
 80113c2:	2201      	movs	r2, #1
 80113c4:	4620      	mov	r0, r4
 80113c6:	f001 fd9f 	bl	8012f08 <__lshift>
 80113ca:	4641      	mov	r1, r8
 80113cc:	4605      	mov	r5, r0
 80113ce:	f001 fdef 	bl	8012fb0 <__mcmp>
 80113d2:	2800      	cmp	r0, #0
 80113d4:	dc75      	bgt.n	80114c2 <_strtod_l+0x8e2>
 80113d6:	2f00      	cmp	r7, #0
 80113d8:	d17f      	bne.n	80114da <_strtod_l+0x8fa>
 80113da:	e63a      	b.n	8011052 <_strtod_l+0x472>
 80113dc:	07d6      	lsls	r6, r2, #31
 80113de:	d508      	bpl.n	80113f2 <_strtod_l+0x812>
 80113e0:	ed9d 6b06 	vldr	d6, [sp, #24]
 80113e4:	ed91 7b00 	vldr	d7, [r1]
 80113e8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80113ec:	ed8d 7b06 	vstr	d7, [sp, #24]
 80113f0:	2001      	movs	r0, #1
 80113f2:	1052      	asrs	r2, r2, #1
 80113f4:	3108      	adds	r1, #8
 80113f6:	e6db      	b.n	80111b0 <_strtod_l+0x5d0>
 80113f8:	f04f 31ff 	mov.w	r1, #4294967295
 80113fc:	fa01 f202 	lsl.w	r2, r1, r2
 8011400:	ea02 0a0a 	and.w	sl, r2, sl
 8011404:	e6f3      	b.n	80111ee <_strtod_l+0x60e>
 8011406:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 801140a:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801140e:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8011412:	36e2      	adds	r6, #226	; 0xe2
 8011414:	fa01 f306 	lsl.w	r3, r1, r6
 8011418:	930f      	str	r3, [sp, #60]	; 0x3c
 801141a:	9111      	str	r1, [sp, #68]	; 0x44
 801141c:	e758      	b.n	80112d0 <_strtod_l+0x6f0>
 801141e:	2300      	movs	r3, #0
 8011420:	930f      	str	r3, [sp, #60]	; 0x3c
 8011422:	2301      	movs	r3, #1
 8011424:	9311      	str	r3, [sp, #68]	; 0x44
 8011426:	e753      	b.n	80112d0 <_strtod_l+0x6f0>
 8011428:	461a      	mov	r2, r3
 801142a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801142c:	4620      	mov	r0, r4
 801142e:	f001 fd6b 	bl	8012f08 <__lshift>
 8011432:	9018      	str	r0, [sp, #96]	; 0x60
 8011434:	2800      	cmp	r0, #0
 8011436:	f47f af7a 	bne.w	801132e <_strtod_l+0x74e>
 801143a:	e600      	b.n	801103e <_strtod_l+0x45e>
 801143c:	f3af 8000 	nop.w
 8011440:	94a03595 	.word	0x94a03595
 8011444:	3fdfffff 	.word	0x3fdfffff
 8011448:	35afe535 	.word	0x35afe535
 801144c:	3fe00000 	.word	0x3fe00000
 8011450:	94a03595 	.word	0x94a03595
 8011454:	3fcfffff 	.word	0x3fcfffff
 8011458:	08013ec0 	.word	0x08013ec0
 801145c:	fffffc02 	.word	0xfffffc02
 8011460:	f8cd b020 	str.w	fp, [sp, #32]
 8011464:	f040 8085 	bne.w	8011572 <_strtod_l+0x992>
 8011468:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801146a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801146e:	b322      	cbz	r2, 80114ba <_strtod_l+0x8da>
 8011470:	4ab7      	ldr	r2, [pc, #732]	; (8011750 <_strtod_l+0xb70>)
 8011472:	4293      	cmp	r3, r2
 8011474:	d154      	bne.n	8011520 <_strtod_l+0x940>
 8011476:	4651      	mov	r1, sl
 8011478:	b1e7      	cbz	r7, 80114b4 <_strtod_l+0x8d4>
 801147a:	4bb6      	ldr	r3, [pc, #728]	; (8011754 <_strtod_l+0xb74>)
 801147c:	465a      	mov	r2, fp
 801147e:	4013      	ands	r3, r2
 8011480:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8011484:	f04f 32ff 	mov.w	r2, #4294967295
 8011488:	d803      	bhi.n	8011492 <_strtod_l+0x8b2>
 801148a:	0d1b      	lsrs	r3, r3, #20
 801148c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011490:	409a      	lsls	r2, r3
 8011492:	4291      	cmp	r1, r2
 8011494:	d144      	bne.n	8011520 <_strtod_l+0x940>
 8011496:	4bb0      	ldr	r3, [pc, #704]	; (8011758 <_strtod_l+0xb78>)
 8011498:	9a08      	ldr	r2, [sp, #32]
 801149a:	429a      	cmp	r2, r3
 801149c:	d102      	bne.n	80114a4 <_strtod_l+0x8c4>
 801149e:	3101      	adds	r1, #1
 80114a0:	f43f adcd 	beq.w	801103e <_strtod_l+0x45e>
 80114a4:	4bab      	ldr	r3, [pc, #684]	; (8011754 <_strtod_l+0xb74>)
 80114a6:	9a08      	ldr	r2, [sp, #32]
 80114a8:	401a      	ands	r2, r3
 80114aa:	f502 1b80 	add.w	fp, r2, #1048576	; 0x100000
 80114ae:	f04f 0a00 	mov.w	sl, #0
 80114b2:	e790      	b.n	80113d6 <_strtod_l+0x7f6>
 80114b4:	f04f 32ff 	mov.w	r2, #4294967295
 80114b8:	e7eb      	b.n	8011492 <_strtod_l+0x8b2>
 80114ba:	bb8b      	cbnz	r3, 8011520 <_strtod_l+0x940>
 80114bc:	f1ba 0f00 	cmp.w	sl, #0
 80114c0:	d12e      	bne.n	8011520 <_strtod_l+0x940>
 80114c2:	465b      	mov	r3, fp
 80114c4:	4aa3      	ldr	r2, [pc, #652]	; (8011754 <_strtod_l+0xb74>)
 80114c6:	b30f      	cbz	r7, 801150c <_strtod_l+0x92c>
 80114c8:	ea02 010b 	and.w	r1, r2, fp
 80114cc:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80114d0:	dc1c      	bgt.n	801150c <_strtod_l+0x92c>
 80114d2:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80114d6:	f77f ae48 	ble.w	801116a <_strtod_l+0x58a>
 80114da:	4aa0      	ldr	r2, [pc, #640]	; (801175c <_strtod_l+0xb7c>)
 80114dc:	2300      	movs	r3, #0
 80114de:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
 80114e2:	ed9d 6b12 	vldr	d6, [sp, #72]	; 0x48
 80114e6:	ec4b ab17 	vmov	d7, sl, fp
 80114ea:	ee27 7b06 	vmul.f64	d7, d7, d6
 80114ee:	ed8d 7b04 	vstr	d7, [sp, #16]
 80114f2:	9b05      	ldr	r3, [sp, #20]
 80114f4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	f47f adaa 	bne.w	8011052 <_strtod_l+0x472>
 80114fe:	9b04      	ldr	r3, [sp, #16]
 8011500:	2b00      	cmp	r3, #0
 8011502:	f47f ada6 	bne.w	8011052 <_strtod_l+0x472>
 8011506:	2322      	movs	r3, #34	; 0x22
 8011508:	6023      	str	r3, [r4, #0]
 801150a:	e5a2      	b.n	8011052 <_strtod_l+0x472>
 801150c:	4013      	ands	r3, r2
 801150e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8011512:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8011516:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801151a:	f04f 3aff 	mov.w	sl, #4294967295
 801151e:	e75a      	b.n	80113d6 <_strtod_l+0x7f6>
 8011520:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011522:	b18b      	cbz	r3, 8011548 <_strtod_l+0x968>
 8011524:	9a08      	ldr	r2, [sp, #32]
 8011526:	4213      	tst	r3, r2
 8011528:	f43f af55 	beq.w	80113d6 <_strtod_l+0x7f6>
 801152c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801152e:	463a      	mov	r2, r7
 8011530:	4650      	mov	r0, sl
 8011532:	4659      	mov	r1, fp
 8011534:	b163      	cbz	r3, 8011550 <_strtod_l+0x970>
 8011536:	f7ff fb36 	bl	8010ba6 <sulp>
 801153a:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 801153e:	ee37 7b00 	vadd.f64	d7, d7, d0
 8011542:	ec5b ab17 	vmov	sl, fp, d7
 8011546:	e746      	b.n	80113d6 <_strtod_l+0x7f6>
 8011548:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801154a:	ea13 0f0a 	tst.w	r3, sl
 801154e:	e7eb      	b.n	8011528 <_strtod_l+0x948>
 8011550:	f7ff fb29 	bl	8010ba6 <sulp>
 8011554:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8011558:	ee37 7b40 	vsub.f64	d7, d7, d0
 801155c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011560:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011568:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801156c:	f43f adfd 	beq.w	801116a <_strtod_l+0x58a>
 8011570:	e731      	b.n	80113d6 <_strtod_l+0x7f6>
 8011572:	4641      	mov	r1, r8
 8011574:	4628      	mov	r0, r5
 8011576:	f001 fe58 	bl	801322a <__ratio>
 801157a:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 801157e:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8011582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011586:	d869      	bhi.n	801165c <_strtod_l+0xa7c>
 8011588:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801158a:	2b00      	cmp	r3, #0
 801158c:	d045      	beq.n	801161a <_strtod_l+0xa3a>
 801158e:	4b74      	ldr	r3, [pc, #464]	; (8011760 <_strtod_l+0xb80>)
 8011590:	2200      	movs	r2, #0
 8011592:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 8011596:	9808      	ldr	r0, [sp, #32]
 8011598:	496e      	ldr	r1, [pc, #440]	; (8011754 <_strtod_l+0xb74>)
 801159a:	ea00 0601 	and.w	r6, r0, r1
 801159e:	4871      	ldr	r0, [pc, #452]	; (8011764 <_strtod_l+0xb84>)
 80115a0:	4286      	cmp	r6, r0
 80115a2:	f040 8089 	bne.w	80116b8 <_strtod_l+0xad8>
 80115a6:	910f      	str	r1, [sp, #60]	; 0x3c
 80115a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80115ac:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 80115b0:	9908      	ldr	r1, [sp, #32]
 80115b2:	f1a1 7b54 	sub.w	fp, r1, #55574528	; 0x3500000
 80115b6:	ec4b ab10 	vmov	d0, sl, fp
 80115ba:	ec43 2b1c 	vmov	d12, r2, r3
 80115be:	f001 fd6f 	bl	80130a0 <__ulp>
 80115c2:	ec4b ab1d 	vmov	d13, sl, fp
 80115c6:	eeac db00 	vfma.f64	d13, d12, d0
 80115ca:	ed8d db08 	vstr	d13, [sp, #32]
 80115ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80115d0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80115d2:	4a65      	ldr	r2, [pc, #404]	; (8011768 <_strtod_l+0xb88>)
 80115d4:	4019      	ands	r1, r3
 80115d6:	4291      	cmp	r1, r2
 80115d8:	e9dd ab08 	ldrd	sl, fp, [sp, #32]
 80115dc:	d948      	bls.n	8011670 <_strtod_l+0xa90>
 80115de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80115e0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80115e4:	4293      	cmp	r3, r2
 80115e6:	d103      	bne.n	80115f0 <_strtod_l+0xa10>
 80115e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80115ea:	3301      	adds	r3, #1
 80115ec:	f43f ad27 	beq.w	801103e <_strtod_l+0x45e>
 80115f0:	f8df b164 	ldr.w	fp, [pc, #356]	; 8011758 <_strtod_l+0xb78>
 80115f4:	f04f 3aff 	mov.w	sl, #4294967295
 80115f8:	9918      	ldr	r1, [sp, #96]	; 0x60
 80115fa:	4620      	mov	r0, r4
 80115fc:	f001 fab8 	bl	8012b70 <_Bfree>
 8011600:	4649      	mov	r1, r9
 8011602:	4620      	mov	r0, r4
 8011604:	f001 fab4 	bl	8012b70 <_Bfree>
 8011608:	4641      	mov	r1, r8
 801160a:	4620      	mov	r0, r4
 801160c:	f001 fab0 	bl	8012b70 <_Bfree>
 8011610:	4629      	mov	r1, r5
 8011612:	4620      	mov	r0, r4
 8011614:	f001 faac 	bl	8012b70 <_Bfree>
 8011618:	e60e      	b.n	8011238 <_strtod_l+0x658>
 801161a:	f1ba 0f00 	cmp.w	sl, #0
 801161e:	d113      	bne.n	8011648 <_strtod_l+0xa68>
 8011620:	9b08      	ldr	r3, [sp, #32]
 8011622:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011626:	b9b3      	cbnz	r3, 8011656 <_strtod_l+0xa76>
 8011628:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 801162c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8011630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011634:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8011638:	d401      	bmi.n	801163e <_strtod_l+0xa5e>
 801163a:	ee20 8b08 	vmul.f64	d8, d0, d8
 801163e:	eeb1 7b48 	vneg.f64	d7, d8
 8011642:	ec53 2b17 	vmov	r2, r3, d7
 8011646:	e7a6      	b.n	8011596 <_strtod_l+0x9b6>
 8011648:	f1ba 0f01 	cmp.w	sl, #1
 801164c:	d103      	bne.n	8011656 <_strtod_l+0xa76>
 801164e:	9b08      	ldr	r3, [sp, #32]
 8011650:	2b00      	cmp	r3, #0
 8011652:	f43f ad8a 	beq.w	801116a <_strtod_l+0x58a>
 8011656:	2200      	movs	r2, #0
 8011658:	4b44      	ldr	r3, [pc, #272]	; (801176c <_strtod_l+0xb8c>)
 801165a:	e79a      	b.n	8011592 <_strtod_l+0x9b2>
 801165c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801165e:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8011662:	ee20 8b08 	vmul.f64	d8, d0, d8
 8011666:	2b00      	cmp	r3, #0
 8011668:	d0e9      	beq.n	801163e <_strtod_l+0xa5e>
 801166a:	ec53 2b18 	vmov	r2, r3, d8
 801166e:	e792      	b.n	8011596 <_strtod_l+0x9b6>
 8011670:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8011674:	2f00      	cmp	r7, #0
 8011676:	d1bf      	bne.n	80115f8 <_strtod_l+0xa18>
 8011678:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801167c:	0d1b      	lsrs	r3, r3, #20
 801167e:	051b      	lsls	r3, r3, #20
 8011680:	429e      	cmp	r6, r3
 8011682:	d1b9      	bne.n	80115f8 <_strtod_l+0xa18>
 8011684:	eebd 0bc8 	vcvt.s32.f64	s0, d8
 8011688:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801168a:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 801168e:	ee38 8b40 	vsub.f64	d8, d8, d0
 8011692:	b92b      	cbnz	r3, 80116a0 <_strtod_l+0xac0>
 8011694:	f1ba 0f00 	cmp.w	sl, #0
 8011698:	d102      	bne.n	80116a0 <_strtod_l+0xac0>
 801169a:	f3cb 0213 	ubfx	r2, fp, #0, #20
 801169e:	b3d2      	cbz	r2, 8011716 <_strtod_l+0xb36>
 80116a0:	eeb4 8bc9 	vcmpe.f64	d8, d9
 80116a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116a8:	f53f acd3 	bmi.w	8011052 <_strtod_l+0x472>
 80116ac:	eeb4 8bca 	vcmpe.f64	d8, d10
 80116b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116b4:	dda0      	ble.n	80115f8 <_strtod_l+0xa18>
 80116b6:	e4cc      	b.n	8011052 <_strtod_l+0x472>
 80116b8:	b1ef      	cbz	r7, 80116f6 <_strtod_l+0xb16>
 80116ba:	f1b6 6fd4 	cmp.w	r6, #111149056	; 0x6a00000
 80116be:	d81a      	bhi.n	80116f6 <_strtod_l+0xb16>
 80116c0:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8011748 <_strtod_l+0xb68>
 80116c4:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80116c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116cc:	d810      	bhi.n	80116f0 <_strtod_l+0xb10>
 80116ce:	eefc 7bc8 	vcvt.u32.f64	s15, d8
 80116d2:	ee17 3a90 	vmov	r3, s15
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	bf08      	it	eq
 80116da:	2301      	moveq	r3, #1
 80116dc:	ee07 3a90 	vmov	s15, r3
 80116e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80116e2:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 80116e6:	b99b      	cbnz	r3, 8011710 <_strtod_l+0xb30>
 80116e8:	eeb1 7b48 	vneg.f64	d7, d8
 80116ec:	ec53 2b17 	vmov	r2, r3, d7
 80116f0:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 80116f4:	1b8b      	subs	r3, r1, r6
 80116f6:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80116fa:	ec43 2b1c 	vmov	d12, r2, r3
 80116fe:	f001 fccf 	bl	80130a0 <__ulp>
 8011702:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8011706:	eeac 7b00 	vfma.f64	d7, d12, d0
 801170a:	ec5b ab17 	vmov	sl, fp, d7
 801170e:	e7b1      	b.n	8011674 <_strtod_l+0xa94>
 8011710:	ec53 2b18 	vmov	r2, r3, d8
 8011714:	e7ec      	b.n	80116f0 <_strtod_l+0xb10>
 8011716:	eeb4 8bcb 	vcmpe.f64	d8, d11
 801171a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801171e:	f57f af6b 	bpl.w	80115f8 <_strtod_l+0xa18>
 8011722:	e496      	b.n	8011052 <_strtod_l+0x472>
 8011724:	2300      	movs	r3, #0
 8011726:	930d      	str	r3, [sp, #52]	; 0x34
 8011728:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801172a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801172c:	6013      	str	r3, [r2, #0]
 801172e:	f7ff ba9d 	b.w	8010c6c <_strtod_l+0x8c>
 8011732:	2a65      	cmp	r2, #101	; 0x65
 8011734:	f04f 0100 	mov.w	r1, #0
 8011738:	f43f ab97 	beq.w	8010e6a <_strtod_l+0x28a>
 801173c:	2701      	movs	r7, #1
 801173e:	460b      	mov	r3, r1
 8011740:	9704      	str	r7, [sp, #16]
 8011742:	f7ff bb0a 	b.w	8010d5a <_strtod_l+0x17a>
 8011746:	bf00      	nop
 8011748:	ffc00000 	.word	0xffc00000
 801174c:	41dfffff 	.word	0x41dfffff
 8011750:	000fffff 	.word	0x000fffff
 8011754:	7ff00000 	.word	0x7ff00000
 8011758:	7fefffff 	.word	0x7fefffff
 801175c:	39500000 	.word	0x39500000
 8011760:	3ff00000 	.word	0x3ff00000
 8011764:	7fe00000 	.word	0x7fe00000
 8011768:	7c9fffff 	.word	0x7c9fffff
 801176c:	bff00000 	.word	0xbff00000

08011770 <_strtod_r>:
 8011770:	4b05      	ldr	r3, [pc, #20]	; (8011788 <_strtod_r+0x18>)
 8011772:	681b      	ldr	r3, [r3, #0]
 8011774:	b410      	push	{r4}
 8011776:	6a1b      	ldr	r3, [r3, #32]
 8011778:	4c04      	ldr	r4, [pc, #16]	; (801178c <_strtod_r+0x1c>)
 801177a:	2b00      	cmp	r3, #0
 801177c:	bf08      	it	eq
 801177e:	4623      	moveq	r3, r4
 8011780:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011784:	f7ff ba2c 	b.w	8010be0 <_strtod_l>
 8011788:	20000054 	.word	0x20000054
 801178c:	200000b8 	.word	0x200000b8

08011790 <_strtol_l.isra.0>:
 8011790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011794:	4680      	mov	r8, r0
 8011796:	4689      	mov	r9, r1
 8011798:	4692      	mov	sl, r2
 801179a:	461e      	mov	r6, r3
 801179c:	460f      	mov	r7, r1
 801179e:	463d      	mov	r5, r7
 80117a0:	9808      	ldr	r0, [sp, #32]
 80117a2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80117a6:	f001 f981 	bl	8012aac <__locale_ctype_ptr_l>
 80117aa:	4420      	add	r0, r4
 80117ac:	7843      	ldrb	r3, [r0, #1]
 80117ae:	f013 0308 	ands.w	r3, r3, #8
 80117b2:	d132      	bne.n	801181a <_strtol_l.isra.0+0x8a>
 80117b4:	2c2d      	cmp	r4, #45	; 0x2d
 80117b6:	d132      	bne.n	801181e <_strtol_l.isra.0+0x8e>
 80117b8:	787c      	ldrb	r4, [r7, #1]
 80117ba:	1cbd      	adds	r5, r7, #2
 80117bc:	2201      	movs	r2, #1
 80117be:	2e00      	cmp	r6, #0
 80117c0:	d05d      	beq.n	801187e <_strtol_l.isra.0+0xee>
 80117c2:	2e10      	cmp	r6, #16
 80117c4:	d109      	bne.n	80117da <_strtol_l.isra.0+0x4a>
 80117c6:	2c30      	cmp	r4, #48	; 0x30
 80117c8:	d107      	bne.n	80117da <_strtol_l.isra.0+0x4a>
 80117ca:	782b      	ldrb	r3, [r5, #0]
 80117cc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80117d0:	2b58      	cmp	r3, #88	; 0x58
 80117d2:	d14f      	bne.n	8011874 <_strtol_l.isra.0+0xe4>
 80117d4:	786c      	ldrb	r4, [r5, #1]
 80117d6:	2610      	movs	r6, #16
 80117d8:	3502      	adds	r5, #2
 80117da:	2a00      	cmp	r2, #0
 80117dc:	bf14      	ite	ne
 80117de:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80117e2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80117e6:	2700      	movs	r7, #0
 80117e8:	fbb1 fcf6 	udiv	ip, r1, r6
 80117ec:	4638      	mov	r0, r7
 80117ee:	fb06 1e1c 	mls	lr, r6, ip, r1
 80117f2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80117f6:	2b09      	cmp	r3, #9
 80117f8:	d817      	bhi.n	801182a <_strtol_l.isra.0+0x9a>
 80117fa:	461c      	mov	r4, r3
 80117fc:	42a6      	cmp	r6, r4
 80117fe:	dd23      	ble.n	8011848 <_strtol_l.isra.0+0xb8>
 8011800:	1c7b      	adds	r3, r7, #1
 8011802:	d007      	beq.n	8011814 <_strtol_l.isra.0+0x84>
 8011804:	4584      	cmp	ip, r0
 8011806:	d31c      	bcc.n	8011842 <_strtol_l.isra.0+0xb2>
 8011808:	d101      	bne.n	801180e <_strtol_l.isra.0+0x7e>
 801180a:	45a6      	cmp	lr, r4
 801180c:	db19      	blt.n	8011842 <_strtol_l.isra.0+0xb2>
 801180e:	fb00 4006 	mla	r0, r0, r6, r4
 8011812:	2701      	movs	r7, #1
 8011814:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011818:	e7eb      	b.n	80117f2 <_strtol_l.isra.0+0x62>
 801181a:	462f      	mov	r7, r5
 801181c:	e7bf      	b.n	801179e <_strtol_l.isra.0+0xe>
 801181e:	2c2b      	cmp	r4, #43	; 0x2b
 8011820:	bf04      	itt	eq
 8011822:	1cbd      	addeq	r5, r7, #2
 8011824:	787c      	ldrbeq	r4, [r7, #1]
 8011826:	461a      	mov	r2, r3
 8011828:	e7c9      	b.n	80117be <_strtol_l.isra.0+0x2e>
 801182a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 801182e:	2b19      	cmp	r3, #25
 8011830:	d801      	bhi.n	8011836 <_strtol_l.isra.0+0xa6>
 8011832:	3c37      	subs	r4, #55	; 0x37
 8011834:	e7e2      	b.n	80117fc <_strtol_l.isra.0+0x6c>
 8011836:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 801183a:	2b19      	cmp	r3, #25
 801183c:	d804      	bhi.n	8011848 <_strtol_l.isra.0+0xb8>
 801183e:	3c57      	subs	r4, #87	; 0x57
 8011840:	e7dc      	b.n	80117fc <_strtol_l.isra.0+0x6c>
 8011842:	f04f 37ff 	mov.w	r7, #4294967295
 8011846:	e7e5      	b.n	8011814 <_strtol_l.isra.0+0x84>
 8011848:	1c7b      	adds	r3, r7, #1
 801184a:	d108      	bne.n	801185e <_strtol_l.isra.0+0xce>
 801184c:	2322      	movs	r3, #34	; 0x22
 801184e:	f8c8 3000 	str.w	r3, [r8]
 8011852:	4608      	mov	r0, r1
 8011854:	f1ba 0f00 	cmp.w	sl, #0
 8011858:	d107      	bne.n	801186a <_strtol_l.isra.0+0xda>
 801185a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801185e:	b102      	cbz	r2, 8011862 <_strtol_l.isra.0+0xd2>
 8011860:	4240      	negs	r0, r0
 8011862:	f1ba 0f00 	cmp.w	sl, #0
 8011866:	d0f8      	beq.n	801185a <_strtol_l.isra.0+0xca>
 8011868:	b10f      	cbz	r7, 801186e <_strtol_l.isra.0+0xde>
 801186a:	f105 39ff 	add.w	r9, r5, #4294967295
 801186e:	f8ca 9000 	str.w	r9, [sl]
 8011872:	e7f2      	b.n	801185a <_strtol_l.isra.0+0xca>
 8011874:	2430      	movs	r4, #48	; 0x30
 8011876:	2e00      	cmp	r6, #0
 8011878:	d1af      	bne.n	80117da <_strtol_l.isra.0+0x4a>
 801187a:	2608      	movs	r6, #8
 801187c:	e7ad      	b.n	80117da <_strtol_l.isra.0+0x4a>
 801187e:	2c30      	cmp	r4, #48	; 0x30
 8011880:	d0a3      	beq.n	80117ca <_strtol_l.isra.0+0x3a>
 8011882:	260a      	movs	r6, #10
 8011884:	e7a9      	b.n	80117da <_strtol_l.isra.0+0x4a>
	...

08011888 <_strtol_r>:
 8011888:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801188a:	4c06      	ldr	r4, [pc, #24]	; (80118a4 <_strtol_r+0x1c>)
 801188c:	4d06      	ldr	r5, [pc, #24]	; (80118a8 <_strtol_r+0x20>)
 801188e:	6824      	ldr	r4, [r4, #0]
 8011890:	6a24      	ldr	r4, [r4, #32]
 8011892:	2c00      	cmp	r4, #0
 8011894:	bf08      	it	eq
 8011896:	462c      	moveq	r4, r5
 8011898:	9400      	str	r4, [sp, #0]
 801189a:	f7ff ff79 	bl	8011790 <_strtol_l.isra.0>
 801189e:	b003      	add	sp, #12
 80118a0:	bd30      	pop	{r4, r5, pc}
 80118a2:	bf00      	nop
 80118a4:	20000054 	.word	0x20000054
 80118a8:	200000b8 	.word	0x200000b8

080118ac <quorem>:
 80118ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118b0:	6903      	ldr	r3, [r0, #16]
 80118b2:	690c      	ldr	r4, [r1, #16]
 80118b4:	42a3      	cmp	r3, r4
 80118b6:	4680      	mov	r8, r0
 80118b8:	f2c0 8082 	blt.w	80119c0 <quorem+0x114>
 80118bc:	3c01      	subs	r4, #1
 80118be:	f101 0714 	add.w	r7, r1, #20
 80118c2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80118c6:	f100 0614 	add.w	r6, r0, #20
 80118ca:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80118ce:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80118d2:	eb06 030c 	add.w	r3, r6, ip
 80118d6:	3501      	adds	r5, #1
 80118d8:	eb07 090c 	add.w	r9, r7, ip
 80118dc:	9301      	str	r3, [sp, #4]
 80118de:	fbb0 f5f5 	udiv	r5, r0, r5
 80118e2:	b395      	cbz	r5, 801194a <quorem+0x9e>
 80118e4:	f04f 0a00 	mov.w	sl, #0
 80118e8:	4638      	mov	r0, r7
 80118ea:	46b6      	mov	lr, r6
 80118ec:	46d3      	mov	fp, sl
 80118ee:	f850 2b04 	ldr.w	r2, [r0], #4
 80118f2:	b293      	uxth	r3, r2
 80118f4:	fb05 a303 	mla	r3, r5, r3, sl
 80118f8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80118fc:	b29b      	uxth	r3, r3
 80118fe:	ebab 0303 	sub.w	r3, fp, r3
 8011902:	0c12      	lsrs	r2, r2, #16
 8011904:	f8de b000 	ldr.w	fp, [lr]
 8011908:	fb05 a202 	mla	r2, r5, r2, sl
 801190c:	fa13 f38b 	uxtah	r3, r3, fp
 8011910:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8011914:	fa1f fb82 	uxth.w	fp, r2
 8011918:	f8de 2000 	ldr.w	r2, [lr]
 801191c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8011920:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011924:	b29b      	uxth	r3, r3
 8011926:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801192a:	4581      	cmp	r9, r0
 801192c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8011930:	f84e 3b04 	str.w	r3, [lr], #4
 8011934:	d2db      	bcs.n	80118ee <quorem+0x42>
 8011936:	f856 300c 	ldr.w	r3, [r6, ip]
 801193a:	b933      	cbnz	r3, 801194a <quorem+0x9e>
 801193c:	9b01      	ldr	r3, [sp, #4]
 801193e:	3b04      	subs	r3, #4
 8011940:	429e      	cmp	r6, r3
 8011942:	461a      	mov	r2, r3
 8011944:	d330      	bcc.n	80119a8 <quorem+0xfc>
 8011946:	f8c8 4010 	str.w	r4, [r8, #16]
 801194a:	4640      	mov	r0, r8
 801194c:	f001 fb30 	bl	8012fb0 <__mcmp>
 8011950:	2800      	cmp	r0, #0
 8011952:	db25      	blt.n	80119a0 <quorem+0xf4>
 8011954:	3501      	adds	r5, #1
 8011956:	4630      	mov	r0, r6
 8011958:	f04f 0c00 	mov.w	ip, #0
 801195c:	f857 2b04 	ldr.w	r2, [r7], #4
 8011960:	f8d0 e000 	ldr.w	lr, [r0]
 8011964:	b293      	uxth	r3, r2
 8011966:	ebac 0303 	sub.w	r3, ip, r3
 801196a:	0c12      	lsrs	r2, r2, #16
 801196c:	fa13 f38e 	uxtah	r3, r3, lr
 8011970:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011974:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011978:	b29b      	uxth	r3, r3
 801197a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801197e:	45b9      	cmp	r9, r7
 8011980:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011984:	f840 3b04 	str.w	r3, [r0], #4
 8011988:	d2e8      	bcs.n	801195c <quorem+0xb0>
 801198a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801198e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8011992:	b92a      	cbnz	r2, 80119a0 <quorem+0xf4>
 8011994:	3b04      	subs	r3, #4
 8011996:	429e      	cmp	r6, r3
 8011998:	461a      	mov	r2, r3
 801199a:	d30b      	bcc.n	80119b4 <quorem+0x108>
 801199c:	f8c8 4010 	str.w	r4, [r8, #16]
 80119a0:	4628      	mov	r0, r5
 80119a2:	b003      	add	sp, #12
 80119a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119a8:	6812      	ldr	r2, [r2, #0]
 80119aa:	3b04      	subs	r3, #4
 80119ac:	2a00      	cmp	r2, #0
 80119ae:	d1ca      	bne.n	8011946 <quorem+0x9a>
 80119b0:	3c01      	subs	r4, #1
 80119b2:	e7c5      	b.n	8011940 <quorem+0x94>
 80119b4:	6812      	ldr	r2, [r2, #0]
 80119b6:	3b04      	subs	r3, #4
 80119b8:	2a00      	cmp	r2, #0
 80119ba:	d1ef      	bne.n	801199c <quorem+0xf0>
 80119bc:	3c01      	subs	r4, #1
 80119be:	e7ea      	b.n	8011996 <quorem+0xea>
 80119c0:	2000      	movs	r0, #0
 80119c2:	e7ee      	b.n	80119a2 <quorem+0xf6>
 80119c4:	0000      	movs	r0, r0
	...

080119c8 <_dtoa_r>:
 80119c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119cc:	ec57 6b10 	vmov	r6, r7, d0
 80119d0:	b095      	sub	sp, #84	; 0x54
 80119d2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80119d4:	9108      	str	r1, [sp, #32]
 80119d6:	4604      	mov	r4, r0
 80119d8:	920a      	str	r2, [sp, #40]	; 0x28
 80119da:	9311      	str	r3, [sp, #68]	; 0x44
 80119dc:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 80119e0:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80119e4:	b93d      	cbnz	r5, 80119f6 <_dtoa_r+0x2e>
 80119e6:	2010      	movs	r0, #16
 80119e8:	f001 f874 	bl	8012ad4 <malloc>
 80119ec:	6260      	str	r0, [r4, #36]	; 0x24
 80119ee:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80119f2:	6005      	str	r5, [r0, #0]
 80119f4:	60c5      	str	r5, [r0, #12]
 80119f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80119f8:	6819      	ldr	r1, [r3, #0]
 80119fa:	b151      	cbz	r1, 8011a12 <_dtoa_r+0x4a>
 80119fc:	685a      	ldr	r2, [r3, #4]
 80119fe:	604a      	str	r2, [r1, #4]
 8011a00:	2301      	movs	r3, #1
 8011a02:	4093      	lsls	r3, r2
 8011a04:	608b      	str	r3, [r1, #8]
 8011a06:	4620      	mov	r0, r4
 8011a08:	f001 f8b2 	bl	8012b70 <_Bfree>
 8011a0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011a0e:	2200      	movs	r2, #0
 8011a10:	601a      	str	r2, [r3, #0]
 8011a12:	1e3b      	subs	r3, r7, #0
 8011a14:	bfb9      	ittee	lt
 8011a16:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8011a1a:	9303      	strlt	r3, [sp, #12]
 8011a1c:	2300      	movge	r3, #0
 8011a1e:	f8c8 3000 	strge.w	r3, [r8]
 8011a22:	9d03      	ldr	r5, [sp, #12]
 8011a24:	4bac      	ldr	r3, [pc, #688]	; (8011cd8 <_dtoa_r+0x310>)
 8011a26:	bfbc      	itt	lt
 8011a28:	2201      	movlt	r2, #1
 8011a2a:	f8c8 2000 	strlt.w	r2, [r8]
 8011a2e:	43ab      	bics	r3, r5
 8011a30:	d11b      	bne.n	8011a6a <_dtoa_r+0xa2>
 8011a32:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011a34:	f242 730f 	movw	r3, #9999	; 0x270f
 8011a38:	6013      	str	r3, [r2, #0]
 8011a3a:	9b02      	ldr	r3, [sp, #8]
 8011a3c:	b923      	cbnz	r3, 8011a48 <_dtoa_r+0x80>
 8011a3e:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8011a42:	2d00      	cmp	r5, #0
 8011a44:	f000 84dd 	beq.w	8012402 <_dtoa_r+0xa3a>
 8011a48:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011a4a:	b953      	cbnz	r3, 8011a62 <_dtoa_r+0x9a>
 8011a4c:	4ba3      	ldr	r3, [pc, #652]	; (8011cdc <_dtoa_r+0x314>)
 8011a4e:	e020      	b.n	8011a92 <_dtoa_r+0xca>
 8011a50:	4ba3      	ldr	r3, [pc, #652]	; (8011ce0 <_dtoa_r+0x318>)
 8011a52:	9304      	str	r3, [sp, #16]
 8011a54:	3308      	adds	r3, #8
 8011a56:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8011a58:	6013      	str	r3, [r2, #0]
 8011a5a:	9804      	ldr	r0, [sp, #16]
 8011a5c:	b015      	add	sp, #84	; 0x54
 8011a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a62:	4b9e      	ldr	r3, [pc, #632]	; (8011cdc <_dtoa_r+0x314>)
 8011a64:	9304      	str	r3, [sp, #16]
 8011a66:	3303      	adds	r3, #3
 8011a68:	e7f5      	b.n	8011a56 <_dtoa_r+0x8e>
 8011a6a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011a6e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a76:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011a7a:	d10c      	bne.n	8011a96 <_dtoa_r+0xce>
 8011a7c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011a7e:	2301      	movs	r3, #1
 8011a80:	6013      	str	r3, [r2, #0]
 8011a82:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	f000 84b9 	beq.w	80123fc <_dtoa_r+0xa34>
 8011a8a:	4b96      	ldr	r3, [pc, #600]	; (8011ce4 <_dtoa_r+0x31c>)
 8011a8c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8011a8e:	6013      	str	r3, [r2, #0]
 8011a90:	3b01      	subs	r3, #1
 8011a92:	9304      	str	r3, [sp, #16]
 8011a94:	e7e1      	b.n	8011a5a <_dtoa_r+0x92>
 8011a96:	a913      	add	r1, sp, #76	; 0x4c
 8011a98:	aa12      	add	r2, sp, #72	; 0x48
 8011a9a:	ed9d 0b04 	vldr	d0, [sp, #16]
 8011a9e:	4620      	mov	r0, r4
 8011aa0:	f001 fb74 	bl	801318c <__d2b>
 8011aa4:	f3c5 560a 	ubfx	r6, r5, #20, #11
 8011aa8:	9001      	str	r0, [sp, #4]
 8011aaa:	9912      	ldr	r1, [sp, #72]	; 0x48
 8011aac:	2e00      	cmp	r6, #0
 8011aae:	d046      	beq.n	8011b3e <_dtoa_r+0x176>
 8011ab0:	9805      	ldr	r0, [sp, #20]
 8011ab2:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8011ab6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011aba:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 8011abe:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011ac2:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 8011ac6:	2700      	movs	r7, #0
 8011ac8:	ee07 aa90 	vmov	s15, sl
 8011acc:	ec43 2b16 	vmov	d6, r2, r3
 8011ad0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8011ad4:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 8011cc0 <_dtoa_r+0x2f8>
 8011ad8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8011adc:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011ae0:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8011cc8 <_dtoa_r+0x300>
 8011ae4:	eea7 6b04 	vfma.f64	d6, d7, d4
 8011ae8:	eeb0 7b46 	vmov.f64	d7, d6
 8011aec:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8011cd0 <_dtoa_r+0x308>
 8011af0:	eea5 7b06 	vfma.f64	d7, d5, d6
 8011af4:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8011af8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8011afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b00:	ee16 ba90 	vmov	fp, s13
 8011b04:	d508      	bpl.n	8011b18 <_dtoa_r+0x150>
 8011b06:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8011b0a:	eeb4 6b47 	vcmp.f64	d6, d7
 8011b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b12:	bf18      	it	ne
 8011b14:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8011b18:	f1bb 0f16 	cmp.w	fp, #22
 8011b1c:	d834      	bhi.n	8011b88 <_dtoa_r+0x1c0>
 8011b1e:	4b72      	ldr	r3, [pc, #456]	; (8011ce8 <_dtoa_r+0x320>)
 8011b20:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8011b24:	ed93 7b00 	vldr	d7, [r3]
 8011b28:	ed9d 6b02 	vldr	d6, [sp, #8]
 8011b2c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8011b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b34:	dd01      	ble.n	8011b3a <_dtoa_r+0x172>
 8011b36:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011b3a:	2300      	movs	r3, #0
 8011b3c:	e025      	b.n	8011b8a <_dtoa_r+0x1c2>
 8011b3e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011b40:	eb01 0a03 	add.w	sl, r1, r3
 8011b44:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 8011b48:	2b20      	cmp	r3, #32
 8011b4a:	dd17      	ble.n	8011b7c <_dtoa_r+0x1b4>
 8011b4c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8011b50:	9a02      	ldr	r2, [sp, #8]
 8011b52:	409d      	lsls	r5, r3
 8011b54:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 8011b58:	fa22 f303 	lsr.w	r3, r2, r3
 8011b5c:	432b      	orrs	r3, r5
 8011b5e:	ee07 3a90 	vmov	s15, r3
 8011b62:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8011b66:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011b6a:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011b6e:	9805      	ldr	r0, [sp, #20]
 8011b70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011b74:	2701      	movs	r7, #1
 8011b76:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 8011b7a:	e7a5      	b.n	8011ac8 <_dtoa_r+0x100>
 8011b7c:	9a02      	ldr	r2, [sp, #8]
 8011b7e:	f1c3 0320 	rsb	r3, r3, #32
 8011b82:	fa02 f303 	lsl.w	r3, r2, r3
 8011b86:	e7ea      	b.n	8011b5e <_dtoa_r+0x196>
 8011b88:	2301      	movs	r3, #1
 8011b8a:	eba1 0a0a 	sub.w	sl, r1, sl
 8011b8e:	9310      	str	r3, [sp, #64]	; 0x40
 8011b90:	f1ba 0301 	subs.w	r3, sl, #1
 8011b94:	9307      	str	r3, [sp, #28]
 8011b96:	bf43      	ittte	mi
 8011b98:	2300      	movmi	r3, #0
 8011b9a:	f1ca 0a01 	rsbmi	sl, sl, #1
 8011b9e:	9307      	strmi	r3, [sp, #28]
 8011ba0:	f04f 0a00 	movpl.w	sl, #0
 8011ba4:	f1bb 0f00 	cmp.w	fp, #0
 8011ba8:	db19      	blt.n	8011bde <_dtoa_r+0x216>
 8011baa:	9b07      	ldr	r3, [sp, #28]
 8011bac:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8011bb0:	445b      	add	r3, fp
 8011bb2:	9307      	str	r3, [sp, #28]
 8011bb4:	f04f 0800 	mov.w	r8, #0
 8011bb8:	9b08      	ldr	r3, [sp, #32]
 8011bba:	2b09      	cmp	r3, #9
 8011bbc:	d866      	bhi.n	8011c8c <_dtoa_r+0x2c4>
 8011bbe:	2b05      	cmp	r3, #5
 8011bc0:	bfc4      	itt	gt
 8011bc2:	3b04      	subgt	r3, #4
 8011bc4:	9308      	strgt	r3, [sp, #32]
 8011bc6:	9b08      	ldr	r3, [sp, #32]
 8011bc8:	f1a3 0302 	sub.w	r3, r3, #2
 8011bcc:	bfcc      	ite	gt
 8011bce:	2500      	movgt	r5, #0
 8011bd0:	2501      	movle	r5, #1
 8011bd2:	2b03      	cmp	r3, #3
 8011bd4:	d866      	bhi.n	8011ca4 <_dtoa_r+0x2dc>
 8011bd6:	e8df f003 	tbb	[pc, r3]
 8011bda:	5755      	.short	0x5755
 8011bdc:	4909      	.short	0x4909
 8011bde:	2300      	movs	r3, #0
 8011be0:	ebaa 0a0b 	sub.w	sl, sl, fp
 8011be4:	f1cb 0800 	rsb	r8, fp, #0
 8011be8:	930b      	str	r3, [sp, #44]	; 0x2c
 8011bea:	e7e5      	b.n	8011bb8 <_dtoa_r+0x1f0>
 8011bec:	2301      	movs	r3, #1
 8011bee:	9309      	str	r3, [sp, #36]	; 0x24
 8011bf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	dd59      	ble.n	8011caa <_dtoa_r+0x2e2>
 8011bf6:	9306      	str	r3, [sp, #24]
 8011bf8:	4699      	mov	r9, r3
 8011bfa:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011bfc:	2200      	movs	r2, #0
 8011bfe:	6072      	str	r2, [r6, #4]
 8011c00:	2204      	movs	r2, #4
 8011c02:	f102 0014 	add.w	r0, r2, #20
 8011c06:	4298      	cmp	r0, r3
 8011c08:	6871      	ldr	r1, [r6, #4]
 8011c0a:	d953      	bls.n	8011cb4 <_dtoa_r+0x2ec>
 8011c0c:	4620      	mov	r0, r4
 8011c0e:	f000 ff7b 	bl	8012b08 <_Balloc>
 8011c12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011c14:	6030      	str	r0, [r6, #0]
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	9304      	str	r3, [sp, #16]
 8011c1a:	f1b9 0f0e 	cmp.w	r9, #14
 8011c1e:	f200 80c2 	bhi.w	8011da6 <_dtoa_r+0x3de>
 8011c22:	2d00      	cmp	r5, #0
 8011c24:	f000 80bf 	beq.w	8011da6 <_dtoa_r+0x3de>
 8011c28:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011c2c:	f1bb 0f00 	cmp.w	fp, #0
 8011c30:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8011c34:	f340 80e6 	ble.w	8011e04 <_dtoa_r+0x43c>
 8011c38:	4a2b      	ldr	r2, [pc, #172]	; (8011ce8 <_dtoa_r+0x320>)
 8011c3a:	f00b 030f 	and.w	r3, fp, #15
 8011c3e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011c42:	ed93 7b00 	vldr	d7, [r3]
 8011c46:	ea4f 132b 	mov.w	r3, fp, asr #4
 8011c4a:	06da      	lsls	r2, r3, #27
 8011c4c:	f140 80d8 	bpl.w	8011e00 <_dtoa_r+0x438>
 8011c50:	4a26      	ldr	r2, [pc, #152]	; (8011cec <_dtoa_r+0x324>)
 8011c52:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 8011c56:	ed92 6b08 	vldr	d6, [r2, #32]
 8011c5a:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8011c5e:	ed8d 6b02 	vstr	d6, [sp, #8]
 8011c62:	f003 030f 	and.w	r3, r3, #15
 8011c66:	2203      	movs	r2, #3
 8011c68:	4920      	ldr	r1, [pc, #128]	; (8011cec <_dtoa_r+0x324>)
 8011c6a:	e04a      	b.n	8011d02 <_dtoa_r+0x33a>
 8011c6c:	2301      	movs	r3, #1
 8011c6e:	9309      	str	r3, [sp, #36]	; 0x24
 8011c70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011c72:	445b      	add	r3, fp
 8011c74:	f103 0901 	add.w	r9, r3, #1
 8011c78:	9306      	str	r3, [sp, #24]
 8011c7a:	464b      	mov	r3, r9
 8011c7c:	2b01      	cmp	r3, #1
 8011c7e:	bfb8      	it	lt
 8011c80:	2301      	movlt	r3, #1
 8011c82:	e7ba      	b.n	8011bfa <_dtoa_r+0x232>
 8011c84:	2300      	movs	r3, #0
 8011c86:	e7b2      	b.n	8011bee <_dtoa_r+0x226>
 8011c88:	2300      	movs	r3, #0
 8011c8a:	e7f0      	b.n	8011c6e <_dtoa_r+0x2a6>
 8011c8c:	2501      	movs	r5, #1
 8011c8e:	2300      	movs	r3, #0
 8011c90:	e9cd 3508 	strd	r3, r5, [sp, #32]
 8011c94:	f04f 33ff 	mov.w	r3, #4294967295
 8011c98:	9306      	str	r3, [sp, #24]
 8011c9a:	4699      	mov	r9, r3
 8011c9c:	2200      	movs	r2, #0
 8011c9e:	2312      	movs	r3, #18
 8011ca0:	920a      	str	r2, [sp, #40]	; 0x28
 8011ca2:	e7aa      	b.n	8011bfa <_dtoa_r+0x232>
 8011ca4:	2301      	movs	r3, #1
 8011ca6:	9309      	str	r3, [sp, #36]	; 0x24
 8011ca8:	e7f4      	b.n	8011c94 <_dtoa_r+0x2cc>
 8011caa:	2301      	movs	r3, #1
 8011cac:	9306      	str	r3, [sp, #24]
 8011cae:	4699      	mov	r9, r3
 8011cb0:	461a      	mov	r2, r3
 8011cb2:	e7f5      	b.n	8011ca0 <_dtoa_r+0x2d8>
 8011cb4:	3101      	adds	r1, #1
 8011cb6:	6071      	str	r1, [r6, #4]
 8011cb8:	0052      	lsls	r2, r2, #1
 8011cba:	e7a2      	b.n	8011c02 <_dtoa_r+0x23a>
 8011cbc:	f3af 8000 	nop.w
 8011cc0:	636f4361 	.word	0x636f4361
 8011cc4:	3fd287a7 	.word	0x3fd287a7
 8011cc8:	8b60c8b3 	.word	0x8b60c8b3
 8011ccc:	3fc68a28 	.word	0x3fc68a28
 8011cd0:	509f79fb 	.word	0x509f79fb
 8011cd4:	3fd34413 	.word	0x3fd34413
 8011cd8:	7ff00000 	.word	0x7ff00000
 8011cdc:	08013ef1 	.word	0x08013ef1
 8011ce0:	08013ee8 	.word	0x08013ee8
 8011ce4:	08013e69 	.word	0x08013e69
 8011ce8:	08013f28 	.word	0x08013f28
 8011cec:	08013f00 	.word	0x08013f00
 8011cf0:	07de      	lsls	r6, r3, #31
 8011cf2:	d504      	bpl.n	8011cfe <_dtoa_r+0x336>
 8011cf4:	ed91 6b00 	vldr	d6, [r1]
 8011cf8:	3201      	adds	r2, #1
 8011cfa:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011cfe:	105b      	asrs	r3, r3, #1
 8011d00:	3108      	adds	r1, #8
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d1f4      	bne.n	8011cf0 <_dtoa_r+0x328>
 8011d06:	ed9d 6b02 	vldr	d6, [sp, #8]
 8011d0a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8011d0e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011d12:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	f000 80a7 	beq.w	8011e68 <_dtoa_r+0x4a0>
 8011d1a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8011d1e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011d22:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8011d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d2a:	f140 809d 	bpl.w	8011e68 <_dtoa_r+0x4a0>
 8011d2e:	f1b9 0f00 	cmp.w	r9, #0
 8011d32:	f000 8099 	beq.w	8011e68 <_dtoa_r+0x4a0>
 8011d36:	9b06      	ldr	r3, [sp, #24]
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	dd30      	ble.n	8011d9e <_dtoa_r+0x3d6>
 8011d3c:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8011d40:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011d44:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011d48:	9d06      	ldr	r5, [sp, #24]
 8011d4a:	f10b 33ff 	add.w	r3, fp, #4294967295
 8011d4e:	3201      	adds	r2, #1
 8011d50:	ed9d 6b02 	vldr	d6, [sp, #8]
 8011d54:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8011d58:	ee07 2a90 	vmov	s15, r2
 8011d5c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011d60:	eea7 5b06 	vfma.f64	d5, d7, d6
 8011d64:	ed8d 5b02 	vstr	d5, [sp, #8]
 8011d68:	9a03      	ldr	r2, [sp, #12]
 8011d6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011d6e:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 8011d72:	2d00      	cmp	r5, #0
 8011d74:	d17b      	bne.n	8011e6e <_dtoa_r+0x4a6>
 8011d76:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8011d7a:	ee36 6b47 	vsub.f64	d6, d6, d7
 8011d7e:	ec41 0b17 	vmov	d7, r0, r1
 8011d82:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d8a:	f300 8253 	bgt.w	8012234 <_dtoa_r+0x86c>
 8011d8e:	eeb1 7b47 	vneg.f64	d7, d7
 8011d92:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d9a:	f100 8249 	bmi.w	8012230 <_dtoa_r+0x868>
 8011d9e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8011da2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011da6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	f2c0 8119 	blt.w	8011fe0 <_dtoa_r+0x618>
 8011dae:	f1bb 0f0e 	cmp.w	fp, #14
 8011db2:	f300 8115 	bgt.w	8011fe0 <_dtoa_r+0x618>
 8011db6:	4bc3      	ldr	r3, [pc, #780]	; (80120c4 <_dtoa_r+0x6fc>)
 8011db8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8011dbc:	ed93 6b00 	vldr	d6, [r3]
 8011dc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	f280 80ba 	bge.w	8011f3c <_dtoa_r+0x574>
 8011dc8:	f1b9 0f00 	cmp.w	r9, #0
 8011dcc:	f300 80b6 	bgt.w	8011f3c <_dtoa_r+0x574>
 8011dd0:	f040 822d 	bne.w	801222e <_dtoa_r+0x866>
 8011dd4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8011dd8:	ee26 6b07 	vmul.f64	d6, d6, d7
 8011ddc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011de0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011de4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011de8:	464d      	mov	r5, r9
 8011dea:	464f      	mov	r7, r9
 8011dec:	f280 8204 	bge.w	80121f8 <_dtoa_r+0x830>
 8011df0:	9b04      	ldr	r3, [sp, #16]
 8011df2:	9a04      	ldr	r2, [sp, #16]
 8011df4:	1c5e      	adds	r6, r3, #1
 8011df6:	2331      	movs	r3, #49	; 0x31
 8011df8:	7013      	strb	r3, [r2, #0]
 8011dfa:	f10b 0b01 	add.w	fp, fp, #1
 8011dfe:	e1ff      	b.n	8012200 <_dtoa_r+0x838>
 8011e00:	2202      	movs	r2, #2
 8011e02:	e731      	b.n	8011c68 <_dtoa_r+0x2a0>
 8011e04:	d02e      	beq.n	8011e64 <_dtoa_r+0x49c>
 8011e06:	f1cb 0300 	rsb	r3, fp, #0
 8011e0a:	4aae      	ldr	r2, [pc, #696]	; (80120c4 <_dtoa_r+0x6fc>)
 8011e0c:	f003 010f 	and.w	r1, r3, #15
 8011e10:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8011e14:	ed92 7b00 	vldr	d7, [r2]
 8011e18:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 8011e1c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8011e20:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8011e24:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8011e28:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8011e2c:	49a6      	ldr	r1, [pc, #664]	; (80120c8 <_dtoa_r+0x700>)
 8011e2e:	111b      	asrs	r3, r3, #4
 8011e30:	2000      	movs	r0, #0
 8011e32:	2202      	movs	r2, #2
 8011e34:	b93b      	cbnz	r3, 8011e46 <_dtoa_r+0x47e>
 8011e36:	2800      	cmp	r0, #0
 8011e38:	f43f af6b 	beq.w	8011d12 <_dtoa_r+0x34a>
 8011e3c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011e40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011e44:	e765      	b.n	8011d12 <_dtoa_r+0x34a>
 8011e46:	07dd      	lsls	r5, r3, #31
 8011e48:	d509      	bpl.n	8011e5e <_dtoa_r+0x496>
 8011e4a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8011e4e:	ed91 7b00 	vldr	d7, [r1]
 8011e52:	ee26 7b07 	vmul.f64	d7, d6, d7
 8011e56:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8011e5a:	3201      	adds	r2, #1
 8011e5c:	2001      	movs	r0, #1
 8011e5e:	105b      	asrs	r3, r3, #1
 8011e60:	3108      	adds	r1, #8
 8011e62:	e7e7      	b.n	8011e34 <_dtoa_r+0x46c>
 8011e64:	2202      	movs	r2, #2
 8011e66:	e754      	b.n	8011d12 <_dtoa_r+0x34a>
 8011e68:	465b      	mov	r3, fp
 8011e6a:	464d      	mov	r5, r9
 8011e6c:	e770      	b.n	8011d50 <_dtoa_r+0x388>
 8011e6e:	4a95      	ldr	r2, [pc, #596]	; (80120c4 <_dtoa_r+0x6fc>)
 8011e70:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 8011e74:	ed12 4b02 	vldr	d4, [r2, #-8]
 8011e78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011e7a:	ec41 0b17 	vmov	d7, r0, r1
 8011e7e:	b35a      	cbz	r2, 8011ed8 <_dtoa_r+0x510>
 8011e80:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8011e84:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8011e88:	9e04      	ldr	r6, [sp, #16]
 8011e8a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8011e8e:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8011e92:	ee35 7b47 	vsub.f64	d7, d5, d7
 8011e96:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8011e9a:	ee14 2a90 	vmov	r2, s9
 8011e9e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8011ea2:	3230      	adds	r2, #48	; 0x30
 8011ea4:	ee36 6b45 	vsub.f64	d6, d6, d5
 8011ea8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011eb0:	f806 2b01 	strb.w	r2, [r6], #1
 8011eb4:	d43b      	bmi.n	8011f2e <_dtoa_r+0x566>
 8011eb6:	ee32 5b46 	vsub.f64	d5, d2, d6
 8011eba:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8011ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ec2:	d472      	bmi.n	8011faa <_dtoa_r+0x5e2>
 8011ec4:	9a04      	ldr	r2, [sp, #16]
 8011ec6:	1ab2      	subs	r2, r6, r2
 8011ec8:	4295      	cmp	r5, r2
 8011eca:	f77f af68 	ble.w	8011d9e <_dtoa_r+0x3d6>
 8011ece:	ee27 7b03 	vmul.f64	d7, d7, d3
 8011ed2:	ee26 6b03 	vmul.f64	d6, d6, d3
 8011ed6:	e7de      	b.n	8011e96 <_dtoa_r+0x4ce>
 8011ed8:	9a04      	ldr	r2, [sp, #16]
 8011eda:	ee24 7b07 	vmul.f64	d7, d4, d7
 8011ede:	1956      	adds	r6, r2, r5
 8011ee0:	4611      	mov	r1, r2
 8011ee2:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8011ee6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8011eea:	ee14 2a90 	vmov	r2, s9
 8011eee:	3230      	adds	r2, #48	; 0x30
 8011ef0:	f801 2b01 	strb.w	r2, [r1], #1
 8011ef4:	42b1      	cmp	r1, r6
 8011ef6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8011efa:	ee36 6b45 	vsub.f64	d6, d6, d5
 8011efe:	d11a      	bne.n	8011f36 <_dtoa_r+0x56e>
 8011f00:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8011f04:	ee37 4b05 	vadd.f64	d4, d7, d5
 8011f08:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8011f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f10:	dc4b      	bgt.n	8011faa <_dtoa_r+0x5e2>
 8011f12:	ee35 7b47 	vsub.f64	d7, d5, d7
 8011f16:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f1e:	f57f af3e 	bpl.w	8011d9e <_dtoa_r+0x3d6>
 8011f22:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8011f26:	2a30      	cmp	r2, #48	; 0x30
 8011f28:	f106 31ff 	add.w	r1, r6, #4294967295
 8011f2c:	d001      	beq.n	8011f32 <_dtoa_r+0x56a>
 8011f2e:	469b      	mov	fp, r3
 8011f30:	e02a      	b.n	8011f88 <_dtoa_r+0x5c0>
 8011f32:	460e      	mov	r6, r1
 8011f34:	e7f5      	b.n	8011f22 <_dtoa_r+0x55a>
 8011f36:	ee26 6b03 	vmul.f64	d6, d6, d3
 8011f3a:	e7d4      	b.n	8011ee6 <_dtoa_r+0x51e>
 8011f3c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011f40:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8011f44:	9e04      	ldr	r6, [sp, #16]
 8011f46:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8011f4a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8011f4e:	ee15 3a10 	vmov	r3, s10
 8011f52:	3330      	adds	r3, #48	; 0x30
 8011f54:	f806 3b01 	strb.w	r3, [r6], #1
 8011f58:	9b04      	ldr	r3, [sp, #16]
 8011f5a:	1af3      	subs	r3, r6, r3
 8011f5c:	4599      	cmp	r9, r3
 8011f5e:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8011f62:	eea3 7b46 	vfms.f64	d7, d3, d6
 8011f66:	d133      	bne.n	8011fd0 <_dtoa_r+0x608>
 8011f68:	ee37 7b07 	vadd.f64	d7, d7, d7
 8011f6c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8011f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f74:	dc18      	bgt.n	8011fa8 <_dtoa_r+0x5e0>
 8011f76:	eeb4 7b46 	vcmp.f64	d7, d6
 8011f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f7e:	d103      	bne.n	8011f88 <_dtoa_r+0x5c0>
 8011f80:	ee15 3a10 	vmov	r3, s10
 8011f84:	07db      	lsls	r3, r3, #31
 8011f86:	d40f      	bmi.n	8011fa8 <_dtoa_r+0x5e0>
 8011f88:	9901      	ldr	r1, [sp, #4]
 8011f8a:	4620      	mov	r0, r4
 8011f8c:	f000 fdf0 	bl	8012b70 <_Bfree>
 8011f90:	2300      	movs	r3, #0
 8011f92:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011f94:	7033      	strb	r3, [r6, #0]
 8011f96:	f10b 0301 	add.w	r3, fp, #1
 8011f9a:	6013      	str	r3, [r2, #0]
 8011f9c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	f43f ad5b 	beq.w	8011a5a <_dtoa_r+0x92>
 8011fa4:	601e      	str	r6, [r3, #0]
 8011fa6:	e558      	b.n	8011a5a <_dtoa_r+0x92>
 8011fa8:	465b      	mov	r3, fp
 8011faa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8011fae:	2939      	cmp	r1, #57	; 0x39
 8011fb0:	f106 32ff 	add.w	r2, r6, #4294967295
 8011fb4:	d106      	bne.n	8011fc4 <_dtoa_r+0x5fc>
 8011fb6:	9904      	ldr	r1, [sp, #16]
 8011fb8:	4291      	cmp	r1, r2
 8011fba:	d107      	bne.n	8011fcc <_dtoa_r+0x604>
 8011fbc:	2230      	movs	r2, #48	; 0x30
 8011fbe:	700a      	strb	r2, [r1, #0]
 8011fc0:	3301      	adds	r3, #1
 8011fc2:	460a      	mov	r2, r1
 8011fc4:	7811      	ldrb	r1, [r2, #0]
 8011fc6:	3101      	adds	r1, #1
 8011fc8:	7011      	strb	r1, [r2, #0]
 8011fca:	e7b0      	b.n	8011f2e <_dtoa_r+0x566>
 8011fcc:	4616      	mov	r6, r2
 8011fce:	e7ec      	b.n	8011faa <_dtoa_r+0x5e2>
 8011fd0:	ee27 7b04 	vmul.f64	d7, d7, d4
 8011fd4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fdc:	d1b3      	bne.n	8011f46 <_dtoa_r+0x57e>
 8011fde:	e7d3      	b.n	8011f88 <_dtoa_r+0x5c0>
 8011fe0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011fe2:	2a00      	cmp	r2, #0
 8011fe4:	f000 808d 	beq.w	8012102 <_dtoa_r+0x73a>
 8011fe8:	9a08      	ldr	r2, [sp, #32]
 8011fea:	2a01      	cmp	r2, #1
 8011fec:	dc72      	bgt.n	80120d4 <_dtoa_r+0x70c>
 8011fee:	2f00      	cmp	r7, #0
 8011ff0:	d06c      	beq.n	80120cc <_dtoa_r+0x704>
 8011ff2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8011ff6:	4645      	mov	r5, r8
 8011ff8:	4656      	mov	r6, sl
 8011ffa:	9a07      	ldr	r2, [sp, #28]
 8011ffc:	2101      	movs	r1, #1
 8011ffe:	441a      	add	r2, r3
 8012000:	4620      	mov	r0, r4
 8012002:	449a      	add	sl, r3
 8012004:	9207      	str	r2, [sp, #28]
 8012006:	f000 fe91 	bl	8012d2c <__i2b>
 801200a:	4607      	mov	r7, r0
 801200c:	2e00      	cmp	r6, #0
 801200e:	dd0b      	ble.n	8012028 <_dtoa_r+0x660>
 8012010:	9b07      	ldr	r3, [sp, #28]
 8012012:	2b00      	cmp	r3, #0
 8012014:	dd08      	ble.n	8012028 <_dtoa_r+0x660>
 8012016:	42b3      	cmp	r3, r6
 8012018:	9a07      	ldr	r2, [sp, #28]
 801201a:	bfa8      	it	ge
 801201c:	4633      	movge	r3, r6
 801201e:	ebaa 0a03 	sub.w	sl, sl, r3
 8012022:	1af6      	subs	r6, r6, r3
 8012024:	1ad3      	subs	r3, r2, r3
 8012026:	9307      	str	r3, [sp, #28]
 8012028:	f1b8 0f00 	cmp.w	r8, #0
 801202c:	d01d      	beq.n	801206a <_dtoa_r+0x6a2>
 801202e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012030:	2b00      	cmp	r3, #0
 8012032:	d06a      	beq.n	801210a <_dtoa_r+0x742>
 8012034:	b18d      	cbz	r5, 801205a <_dtoa_r+0x692>
 8012036:	4639      	mov	r1, r7
 8012038:	462a      	mov	r2, r5
 801203a:	4620      	mov	r0, r4
 801203c:	f000 ff16 	bl	8012e6c <__pow5mult>
 8012040:	9a01      	ldr	r2, [sp, #4]
 8012042:	4601      	mov	r1, r0
 8012044:	4607      	mov	r7, r0
 8012046:	4620      	mov	r0, r4
 8012048:	f000 fe79 	bl	8012d3e <__multiply>
 801204c:	9901      	ldr	r1, [sp, #4]
 801204e:	900c      	str	r0, [sp, #48]	; 0x30
 8012050:	4620      	mov	r0, r4
 8012052:	f000 fd8d 	bl	8012b70 <_Bfree>
 8012056:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012058:	9301      	str	r3, [sp, #4]
 801205a:	ebb8 0205 	subs.w	r2, r8, r5
 801205e:	d004      	beq.n	801206a <_dtoa_r+0x6a2>
 8012060:	9901      	ldr	r1, [sp, #4]
 8012062:	4620      	mov	r0, r4
 8012064:	f000 ff02 	bl	8012e6c <__pow5mult>
 8012068:	9001      	str	r0, [sp, #4]
 801206a:	2101      	movs	r1, #1
 801206c:	4620      	mov	r0, r4
 801206e:	f000 fe5d 	bl	8012d2c <__i2b>
 8012072:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012074:	4605      	mov	r5, r0
 8012076:	2b00      	cmp	r3, #0
 8012078:	f000 81ca 	beq.w	8012410 <_dtoa_r+0xa48>
 801207c:	461a      	mov	r2, r3
 801207e:	4601      	mov	r1, r0
 8012080:	4620      	mov	r0, r4
 8012082:	f000 fef3 	bl	8012e6c <__pow5mult>
 8012086:	9b08      	ldr	r3, [sp, #32]
 8012088:	2b01      	cmp	r3, #1
 801208a:	4605      	mov	r5, r0
 801208c:	dc44      	bgt.n	8012118 <_dtoa_r+0x750>
 801208e:	9b02      	ldr	r3, [sp, #8]
 8012090:	2b00      	cmp	r3, #0
 8012092:	d13c      	bne.n	801210e <_dtoa_r+0x746>
 8012094:	9b03      	ldr	r3, [sp, #12]
 8012096:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801209a:	2b00      	cmp	r3, #0
 801209c:	d137      	bne.n	801210e <_dtoa_r+0x746>
 801209e:	9b03      	ldr	r3, [sp, #12]
 80120a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80120a4:	0d1b      	lsrs	r3, r3, #20
 80120a6:	051b      	lsls	r3, r3, #20
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d033      	beq.n	8012114 <_dtoa_r+0x74c>
 80120ac:	9b07      	ldr	r3, [sp, #28]
 80120ae:	3301      	adds	r3, #1
 80120b0:	f10a 0a01 	add.w	sl, sl, #1
 80120b4:	9307      	str	r3, [sp, #28]
 80120b6:	f04f 0801 	mov.w	r8, #1
 80120ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80120bc:	bb73      	cbnz	r3, 801211c <_dtoa_r+0x754>
 80120be:	2001      	movs	r0, #1
 80120c0:	e034      	b.n	801212c <_dtoa_r+0x764>
 80120c2:	bf00      	nop
 80120c4:	08013f28 	.word	0x08013f28
 80120c8:	08013f00 	.word	0x08013f00
 80120cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80120ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80120d2:	e790      	b.n	8011ff6 <_dtoa_r+0x62e>
 80120d4:	f109 35ff 	add.w	r5, r9, #4294967295
 80120d8:	45a8      	cmp	r8, r5
 80120da:	bfbf      	itttt	lt
 80120dc:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 80120de:	eba5 0808 	sublt.w	r8, r5, r8
 80120e2:	4443      	addlt	r3, r8
 80120e4:	930b      	strlt	r3, [sp, #44]	; 0x2c
 80120e6:	bfb6      	itet	lt
 80120e8:	46a8      	movlt	r8, r5
 80120ea:	eba8 0505 	subge.w	r5, r8, r5
 80120ee:	2500      	movlt	r5, #0
 80120f0:	f1b9 0f00 	cmp.w	r9, #0
 80120f4:	bfb9      	ittee	lt
 80120f6:	ebaa 0609 	sublt.w	r6, sl, r9
 80120fa:	2300      	movlt	r3, #0
 80120fc:	4656      	movge	r6, sl
 80120fe:	464b      	movge	r3, r9
 8012100:	e77b      	b.n	8011ffa <_dtoa_r+0x632>
 8012102:	4645      	mov	r5, r8
 8012104:	4656      	mov	r6, sl
 8012106:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8012108:	e780      	b.n	801200c <_dtoa_r+0x644>
 801210a:	4642      	mov	r2, r8
 801210c:	e7a8      	b.n	8012060 <_dtoa_r+0x698>
 801210e:	f04f 0800 	mov.w	r8, #0
 8012112:	e7d2      	b.n	80120ba <_dtoa_r+0x6f2>
 8012114:	4698      	mov	r8, r3
 8012116:	e7d0      	b.n	80120ba <_dtoa_r+0x6f2>
 8012118:	f04f 0800 	mov.w	r8, #0
 801211c:	692b      	ldr	r3, [r5, #16]
 801211e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8012122:	6918      	ldr	r0, [r3, #16]
 8012124:	f000 fdb4 	bl	8012c90 <__hi0bits>
 8012128:	f1c0 0020 	rsb	r0, r0, #32
 801212c:	9b07      	ldr	r3, [sp, #28]
 801212e:	4418      	add	r0, r3
 8012130:	f010 001f 	ands.w	r0, r0, #31
 8012134:	d047      	beq.n	80121c6 <_dtoa_r+0x7fe>
 8012136:	f1c0 0320 	rsb	r3, r0, #32
 801213a:	2b04      	cmp	r3, #4
 801213c:	dd3b      	ble.n	80121b6 <_dtoa_r+0x7ee>
 801213e:	9b07      	ldr	r3, [sp, #28]
 8012140:	f1c0 001c 	rsb	r0, r0, #28
 8012144:	4482      	add	sl, r0
 8012146:	4406      	add	r6, r0
 8012148:	4403      	add	r3, r0
 801214a:	9307      	str	r3, [sp, #28]
 801214c:	f1ba 0f00 	cmp.w	sl, #0
 8012150:	dd05      	ble.n	801215e <_dtoa_r+0x796>
 8012152:	4652      	mov	r2, sl
 8012154:	9901      	ldr	r1, [sp, #4]
 8012156:	4620      	mov	r0, r4
 8012158:	f000 fed6 	bl	8012f08 <__lshift>
 801215c:	9001      	str	r0, [sp, #4]
 801215e:	9b07      	ldr	r3, [sp, #28]
 8012160:	2b00      	cmp	r3, #0
 8012162:	dd05      	ble.n	8012170 <_dtoa_r+0x7a8>
 8012164:	4629      	mov	r1, r5
 8012166:	461a      	mov	r2, r3
 8012168:	4620      	mov	r0, r4
 801216a:	f000 fecd 	bl	8012f08 <__lshift>
 801216e:	4605      	mov	r5, r0
 8012170:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012172:	b353      	cbz	r3, 80121ca <_dtoa_r+0x802>
 8012174:	4629      	mov	r1, r5
 8012176:	9801      	ldr	r0, [sp, #4]
 8012178:	f000 ff1a 	bl	8012fb0 <__mcmp>
 801217c:	2800      	cmp	r0, #0
 801217e:	da24      	bge.n	80121ca <_dtoa_r+0x802>
 8012180:	2300      	movs	r3, #0
 8012182:	220a      	movs	r2, #10
 8012184:	9901      	ldr	r1, [sp, #4]
 8012186:	4620      	mov	r0, r4
 8012188:	f000 fd09 	bl	8012b9e <__multadd>
 801218c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801218e:	9001      	str	r0, [sp, #4]
 8012190:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012194:	2b00      	cmp	r3, #0
 8012196:	f000 8142 	beq.w	801241e <_dtoa_r+0xa56>
 801219a:	2300      	movs	r3, #0
 801219c:	4639      	mov	r1, r7
 801219e:	220a      	movs	r2, #10
 80121a0:	4620      	mov	r0, r4
 80121a2:	f000 fcfc 	bl	8012b9e <__multadd>
 80121a6:	9b06      	ldr	r3, [sp, #24]
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	4607      	mov	r7, r0
 80121ac:	dc4b      	bgt.n	8012246 <_dtoa_r+0x87e>
 80121ae:	9b08      	ldr	r3, [sp, #32]
 80121b0:	2b02      	cmp	r3, #2
 80121b2:	dd48      	ble.n	8012246 <_dtoa_r+0x87e>
 80121b4:	e011      	b.n	80121da <_dtoa_r+0x812>
 80121b6:	d0c9      	beq.n	801214c <_dtoa_r+0x784>
 80121b8:	9a07      	ldr	r2, [sp, #28]
 80121ba:	331c      	adds	r3, #28
 80121bc:	441a      	add	r2, r3
 80121be:	449a      	add	sl, r3
 80121c0:	441e      	add	r6, r3
 80121c2:	4613      	mov	r3, r2
 80121c4:	e7c1      	b.n	801214a <_dtoa_r+0x782>
 80121c6:	4603      	mov	r3, r0
 80121c8:	e7f6      	b.n	80121b8 <_dtoa_r+0x7f0>
 80121ca:	f1b9 0f00 	cmp.w	r9, #0
 80121ce:	dc34      	bgt.n	801223a <_dtoa_r+0x872>
 80121d0:	9b08      	ldr	r3, [sp, #32]
 80121d2:	2b02      	cmp	r3, #2
 80121d4:	dd31      	ble.n	801223a <_dtoa_r+0x872>
 80121d6:	f8cd 9018 	str.w	r9, [sp, #24]
 80121da:	9b06      	ldr	r3, [sp, #24]
 80121dc:	b963      	cbnz	r3, 80121f8 <_dtoa_r+0x830>
 80121de:	4629      	mov	r1, r5
 80121e0:	2205      	movs	r2, #5
 80121e2:	4620      	mov	r0, r4
 80121e4:	f000 fcdb 	bl	8012b9e <__multadd>
 80121e8:	4601      	mov	r1, r0
 80121ea:	4605      	mov	r5, r0
 80121ec:	9801      	ldr	r0, [sp, #4]
 80121ee:	f000 fedf 	bl	8012fb0 <__mcmp>
 80121f2:	2800      	cmp	r0, #0
 80121f4:	f73f adfc 	bgt.w	8011df0 <_dtoa_r+0x428>
 80121f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80121fa:	9e04      	ldr	r6, [sp, #16]
 80121fc:	ea6f 0b03 	mvn.w	fp, r3
 8012200:	f04f 0900 	mov.w	r9, #0
 8012204:	4629      	mov	r1, r5
 8012206:	4620      	mov	r0, r4
 8012208:	f000 fcb2 	bl	8012b70 <_Bfree>
 801220c:	2f00      	cmp	r7, #0
 801220e:	f43f aebb 	beq.w	8011f88 <_dtoa_r+0x5c0>
 8012212:	f1b9 0f00 	cmp.w	r9, #0
 8012216:	d005      	beq.n	8012224 <_dtoa_r+0x85c>
 8012218:	45b9      	cmp	r9, r7
 801221a:	d003      	beq.n	8012224 <_dtoa_r+0x85c>
 801221c:	4649      	mov	r1, r9
 801221e:	4620      	mov	r0, r4
 8012220:	f000 fca6 	bl	8012b70 <_Bfree>
 8012224:	4639      	mov	r1, r7
 8012226:	4620      	mov	r0, r4
 8012228:	f000 fca2 	bl	8012b70 <_Bfree>
 801222c:	e6ac      	b.n	8011f88 <_dtoa_r+0x5c0>
 801222e:	2500      	movs	r5, #0
 8012230:	462f      	mov	r7, r5
 8012232:	e7e1      	b.n	80121f8 <_dtoa_r+0x830>
 8012234:	469b      	mov	fp, r3
 8012236:	462f      	mov	r7, r5
 8012238:	e5da      	b.n	8011df0 <_dtoa_r+0x428>
 801223a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801223c:	f8cd 9018 	str.w	r9, [sp, #24]
 8012240:	2b00      	cmp	r3, #0
 8012242:	f000 80f3 	beq.w	801242c <_dtoa_r+0xa64>
 8012246:	2e00      	cmp	r6, #0
 8012248:	dd05      	ble.n	8012256 <_dtoa_r+0x88e>
 801224a:	4639      	mov	r1, r7
 801224c:	4632      	mov	r2, r6
 801224e:	4620      	mov	r0, r4
 8012250:	f000 fe5a 	bl	8012f08 <__lshift>
 8012254:	4607      	mov	r7, r0
 8012256:	f1b8 0f00 	cmp.w	r8, #0
 801225a:	d04c      	beq.n	80122f6 <_dtoa_r+0x92e>
 801225c:	6879      	ldr	r1, [r7, #4]
 801225e:	4620      	mov	r0, r4
 8012260:	f000 fc52 	bl	8012b08 <_Balloc>
 8012264:	693a      	ldr	r2, [r7, #16]
 8012266:	3202      	adds	r2, #2
 8012268:	4606      	mov	r6, r0
 801226a:	0092      	lsls	r2, r2, #2
 801226c:	f107 010c 	add.w	r1, r7, #12
 8012270:	300c      	adds	r0, #12
 8012272:	f7fd fe39 	bl	800fee8 <memcpy>
 8012276:	2201      	movs	r2, #1
 8012278:	4631      	mov	r1, r6
 801227a:	4620      	mov	r0, r4
 801227c:	f000 fe44 	bl	8012f08 <__lshift>
 8012280:	9b02      	ldr	r3, [sp, #8]
 8012282:	f8dd a010 	ldr.w	sl, [sp, #16]
 8012286:	f003 0301 	and.w	r3, r3, #1
 801228a:	46b9      	mov	r9, r7
 801228c:	9307      	str	r3, [sp, #28]
 801228e:	4607      	mov	r7, r0
 8012290:	4629      	mov	r1, r5
 8012292:	9801      	ldr	r0, [sp, #4]
 8012294:	f7ff fb0a 	bl	80118ac <quorem>
 8012298:	4649      	mov	r1, r9
 801229a:	4606      	mov	r6, r0
 801229c:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80122a0:	9801      	ldr	r0, [sp, #4]
 80122a2:	f000 fe85 	bl	8012fb0 <__mcmp>
 80122a6:	463a      	mov	r2, r7
 80122a8:	9002      	str	r0, [sp, #8]
 80122aa:	4629      	mov	r1, r5
 80122ac:	4620      	mov	r0, r4
 80122ae:	f000 fe99 	bl	8012fe4 <__mdiff>
 80122b2:	68c3      	ldr	r3, [r0, #12]
 80122b4:	4602      	mov	r2, r0
 80122b6:	bb03      	cbnz	r3, 80122fa <_dtoa_r+0x932>
 80122b8:	4601      	mov	r1, r0
 80122ba:	9009      	str	r0, [sp, #36]	; 0x24
 80122bc:	9801      	ldr	r0, [sp, #4]
 80122be:	f000 fe77 	bl	8012fb0 <__mcmp>
 80122c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80122c4:	4603      	mov	r3, r0
 80122c6:	4611      	mov	r1, r2
 80122c8:	4620      	mov	r0, r4
 80122ca:	9309      	str	r3, [sp, #36]	; 0x24
 80122cc:	f000 fc50 	bl	8012b70 <_Bfree>
 80122d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80122d2:	b9a3      	cbnz	r3, 80122fe <_dtoa_r+0x936>
 80122d4:	9a08      	ldr	r2, [sp, #32]
 80122d6:	b992      	cbnz	r2, 80122fe <_dtoa_r+0x936>
 80122d8:	9a07      	ldr	r2, [sp, #28]
 80122da:	b982      	cbnz	r2, 80122fe <_dtoa_r+0x936>
 80122dc:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80122e0:	d029      	beq.n	8012336 <_dtoa_r+0x96e>
 80122e2:	9b02      	ldr	r3, [sp, #8]
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	dd01      	ble.n	80122ec <_dtoa_r+0x924>
 80122e8:	f106 0831 	add.w	r8, r6, #49	; 0x31
 80122ec:	f10a 0601 	add.w	r6, sl, #1
 80122f0:	f88a 8000 	strb.w	r8, [sl]
 80122f4:	e786      	b.n	8012204 <_dtoa_r+0x83c>
 80122f6:	4638      	mov	r0, r7
 80122f8:	e7c2      	b.n	8012280 <_dtoa_r+0x8b8>
 80122fa:	2301      	movs	r3, #1
 80122fc:	e7e3      	b.n	80122c6 <_dtoa_r+0x8fe>
 80122fe:	9a02      	ldr	r2, [sp, #8]
 8012300:	2a00      	cmp	r2, #0
 8012302:	db04      	blt.n	801230e <_dtoa_r+0x946>
 8012304:	d124      	bne.n	8012350 <_dtoa_r+0x988>
 8012306:	9a08      	ldr	r2, [sp, #32]
 8012308:	bb12      	cbnz	r2, 8012350 <_dtoa_r+0x988>
 801230a:	9a07      	ldr	r2, [sp, #28]
 801230c:	bb02      	cbnz	r2, 8012350 <_dtoa_r+0x988>
 801230e:	2b00      	cmp	r3, #0
 8012310:	ddec      	ble.n	80122ec <_dtoa_r+0x924>
 8012312:	2201      	movs	r2, #1
 8012314:	9901      	ldr	r1, [sp, #4]
 8012316:	4620      	mov	r0, r4
 8012318:	f000 fdf6 	bl	8012f08 <__lshift>
 801231c:	4629      	mov	r1, r5
 801231e:	9001      	str	r0, [sp, #4]
 8012320:	f000 fe46 	bl	8012fb0 <__mcmp>
 8012324:	2800      	cmp	r0, #0
 8012326:	dc03      	bgt.n	8012330 <_dtoa_r+0x968>
 8012328:	d1e0      	bne.n	80122ec <_dtoa_r+0x924>
 801232a:	f018 0f01 	tst.w	r8, #1
 801232e:	d0dd      	beq.n	80122ec <_dtoa_r+0x924>
 8012330:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012334:	d1d8      	bne.n	80122e8 <_dtoa_r+0x920>
 8012336:	2339      	movs	r3, #57	; 0x39
 8012338:	f10a 0601 	add.w	r6, sl, #1
 801233c:	f88a 3000 	strb.w	r3, [sl]
 8012340:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012344:	2b39      	cmp	r3, #57	; 0x39
 8012346:	f106 32ff 	add.w	r2, r6, #4294967295
 801234a:	d04c      	beq.n	80123e6 <_dtoa_r+0xa1e>
 801234c:	3301      	adds	r3, #1
 801234e:	e051      	b.n	80123f4 <_dtoa_r+0xa2c>
 8012350:	2b00      	cmp	r3, #0
 8012352:	f10a 0601 	add.w	r6, sl, #1
 8012356:	dd05      	ble.n	8012364 <_dtoa_r+0x99c>
 8012358:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801235c:	d0eb      	beq.n	8012336 <_dtoa_r+0x96e>
 801235e:	f108 0801 	add.w	r8, r8, #1
 8012362:	e7c5      	b.n	80122f0 <_dtoa_r+0x928>
 8012364:	9b04      	ldr	r3, [sp, #16]
 8012366:	9a06      	ldr	r2, [sp, #24]
 8012368:	f806 8c01 	strb.w	r8, [r6, #-1]
 801236c:	1af3      	subs	r3, r6, r3
 801236e:	4293      	cmp	r3, r2
 8012370:	d021      	beq.n	80123b6 <_dtoa_r+0x9ee>
 8012372:	2300      	movs	r3, #0
 8012374:	220a      	movs	r2, #10
 8012376:	9901      	ldr	r1, [sp, #4]
 8012378:	4620      	mov	r0, r4
 801237a:	f000 fc10 	bl	8012b9e <__multadd>
 801237e:	45b9      	cmp	r9, r7
 8012380:	9001      	str	r0, [sp, #4]
 8012382:	f04f 0300 	mov.w	r3, #0
 8012386:	f04f 020a 	mov.w	r2, #10
 801238a:	4649      	mov	r1, r9
 801238c:	4620      	mov	r0, r4
 801238e:	d105      	bne.n	801239c <_dtoa_r+0x9d4>
 8012390:	f000 fc05 	bl	8012b9e <__multadd>
 8012394:	4681      	mov	r9, r0
 8012396:	4607      	mov	r7, r0
 8012398:	46b2      	mov	sl, r6
 801239a:	e779      	b.n	8012290 <_dtoa_r+0x8c8>
 801239c:	f000 fbff 	bl	8012b9e <__multadd>
 80123a0:	4639      	mov	r1, r7
 80123a2:	4681      	mov	r9, r0
 80123a4:	2300      	movs	r3, #0
 80123a6:	220a      	movs	r2, #10
 80123a8:	4620      	mov	r0, r4
 80123aa:	f000 fbf8 	bl	8012b9e <__multadd>
 80123ae:	4607      	mov	r7, r0
 80123b0:	e7f2      	b.n	8012398 <_dtoa_r+0x9d0>
 80123b2:	f04f 0900 	mov.w	r9, #0
 80123b6:	2201      	movs	r2, #1
 80123b8:	9901      	ldr	r1, [sp, #4]
 80123ba:	4620      	mov	r0, r4
 80123bc:	f000 fda4 	bl	8012f08 <__lshift>
 80123c0:	4629      	mov	r1, r5
 80123c2:	9001      	str	r0, [sp, #4]
 80123c4:	f000 fdf4 	bl	8012fb0 <__mcmp>
 80123c8:	2800      	cmp	r0, #0
 80123ca:	dcb9      	bgt.n	8012340 <_dtoa_r+0x978>
 80123cc:	d102      	bne.n	80123d4 <_dtoa_r+0xa0c>
 80123ce:	f018 0f01 	tst.w	r8, #1
 80123d2:	d1b5      	bne.n	8012340 <_dtoa_r+0x978>
 80123d4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80123d8:	2b30      	cmp	r3, #48	; 0x30
 80123da:	f106 32ff 	add.w	r2, r6, #4294967295
 80123de:	f47f af11 	bne.w	8012204 <_dtoa_r+0x83c>
 80123e2:	4616      	mov	r6, r2
 80123e4:	e7f6      	b.n	80123d4 <_dtoa_r+0xa0c>
 80123e6:	9b04      	ldr	r3, [sp, #16]
 80123e8:	4293      	cmp	r3, r2
 80123ea:	d105      	bne.n	80123f8 <_dtoa_r+0xa30>
 80123ec:	9a04      	ldr	r2, [sp, #16]
 80123ee:	f10b 0b01 	add.w	fp, fp, #1
 80123f2:	2331      	movs	r3, #49	; 0x31
 80123f4:	7013      	strb	r3, [r2, #0]
 80123f6:	e705      	b.n	8012204 <_dtoa_r+0x83c>
 80123f8:	4616      	mov	r6, r2
 80123fa:	e7a1      	b.n	8012340 <_dtoa_r+0x978>
 80123fc:	4b16      	ldr	r3, [pc, #88]	; (8012458 <_dtoa_r+0xa90>)
 80123fe:	f7ff bb48 	b.w	8011a92 <_dtoa_r+0xca>
 8012402:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012404:	2b00      	cmp	r3, #0
 8012406:	f47f ab23 	bne.w	8011a50 <_dtoa_r+0x88>
 801240a:	4b14      	ldr	r3, [pc, #80]	; (801245c <_dtoa_r+0xa94>)
 801240c:	f7ff bb41 	b.w	8011a92 <_dtoa_r+0xca>
 8012410:	9b08      	ldr	r3, [sp, #32]
 8012412:	2b01      	cmp	r3, #1
 8012414:	f77f ae3b 	ble.w	801208e <_dtoa_r+0x6c6>
 8012418:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 801241c:	e64f      	b.n	80120be <_dtoa_r+0x6f6>
 801241e:	9b06      	ldr	r3, [sp, #24]
 8012420:	2b00      	cmp	r3, #0
 8012422:	dc03      	bgt.n	801242c <_dtoa_r+0xa64>
 8012424:	9b08      	ldr	r3, [sp, #32]
 8012426:	2b02      	cmp	r3, #2
 8012428:	f73f aed7 	bgt.w	80121da <_dtoa_r+0x812>
 801242c:	9e04      	ldr	r6, [sp, #16]
 801242e:	9801      	ldr	r0, [sp, #4]
 8012430:	4629      	mov	r1, r5
 8012432:	f7ff fa3b 	bl	80118ac <quorem>
 8012436:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801243a:	f806 8b01 	strb.w	r8, [r6], #1
 801243e:	9b04      	ldr	r3, [sp, #16]
 8012440:	9a06      	ldr	r2, [sp, #24]
 8012442:	1af3      	subs	r3, r6, r3
 8012444:	429a      	cmp	r2, r3
 8012446:	ddb4      	ble.n	80123b2 <_dtoa_r+0x9ea>
 8012448:	2300      	movs	r3, #0
 801244a:	220a      	movs	r2, #10
 801244c:	9901      	ldr	r1, [sp, #4]
 801244e:	4620      	mov	r0, r4
 8012450:	f000 fba5 	bl	8012b9e <__multadd>
 8012454:	9001      	str	r0, [sp, #4]
 8012456:	e7ea      	b.n	801242e <_dtoa_r+0xa66>
 8012458:	08013e68 	.word	0x08013e68
 801245c:	08013ee8 	.word	0x08013ee8

08012460 <rshift>:
 8012460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012462:	6906      	ldr	r6, [r0, #16]
 8012464:	114b      	asrs	r3, r1, #5
 8012466:	429e      	cmp	r6, r3
 8012468:	f100 0414 	add.w	r4, r0, #20
 801246c:	dd30      	ble.n	80124d0 <rshift+0x70>
 801246e:	f011 011f 	ands.w	r1, r1, #31
 8012472:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8012476:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 801247a:	d108      	bne.n	801248e <rshift+0x2e>
 801247c:	4621      	mov	r1, r4
 801247e:	42b2      	cmp	r2, r6
 8012480:	460b      	mov	r3, r1
 8012482:	d211      	bcs.n	80124a8 <rshift+0x48>
 8012484:	f852 3b04 	ldr.w	r3, [r2], #4
 8012488:	f841 3b04 	str.w	r3, [r1], #4
 801248c:	e7f7      	b.n	801247e <rshift+0x1e>
 801248e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8012492:	f1c1 0c20 	rsb	ip, r1, #32
 8012496:	40cd      	lsrs	r5, r1
 8012498:	3204      	adds	r2, #4
 801249a:	4623      	mov	r3, r4
 801249c:	42b2      	cmp	r2, r6
 801249e:	4617      	mov	r7, r2
 80124a0:	d30c      	bcc.n	80124bc <rshift+0x5c>
 80124a2:	601d      	str	r5, [r3, #0]
 80124a4:	b105      	cbz	r5, 80124a8 <rshift+0x48>
 80124a6:	3304      	adds	r3, #4
 80124a8:	1b1a      	subs	r2, r3, r4
 80124aa:	42a3      	cmp	r3, r4
 80124ac:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80124b0:	bf08      	it	eq
 80124b2:	2300      	moveq	r3, #0
 80124b4:	6102      	str	r2, [r0, #16]
 80124b6:	bf08      	it	eq
 80124b8:	6143      	streq	r3, [r0, #20]
 80124ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80124bc:	683f      	ldr	r7, [r7, #0]
 80124be:	fa07 f70c 	lsl.w	r7, r7, ip
 80124c2:	433d      	orrs	r5, r7
 80124c4:	f843 5b04 	str.w	r5, [r3], #4
 80124c8:	f852 5b04 	ldr.w	r5, [r2], #4
 80124cc:	40cd      	lsrs	r5, r1
 80124ce:	e7e5      	b.n	801249c <rshift+0x3c>
 80124d0:	4623      	mov	r3, r4
 80124d2:	e7e9      	b.n	80124a8 <rshift+0x48>

080124d4 <__hexdig_fun>:
 80124d4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80124d8:	2b09      	cmp	r3, #9
 80124da:	d802      	bhi.n	80124e2 <__hexdig_fun+0xe>
 80124dc:	3820      	subs	r0, #32
 80124de:	b2c0      	uxtb	r0, r0
 80124e0:	4770      	bx	lr
 80124e2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80124e6:	2b05      	cmp	r3, #5
 80124e8:	d801      	bhi.n	80124ee <__hexdig_fun+0x1a>
 80124ea:	3847      	subs	r0, #71	; 0x47
 80124ec:	e7f7      	b.n	80124de <__hexdig_fun+0xa>
 80124ee:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80124f2:	2b05      	cmp	r3, #5
 80124f4:	d801      	bhi.n	80124fa <__hexdig_fun+0x26>
 80124f6:	3827      	subs	r0, #39	; 0x27
 80124f8:	e7f1      	b.n	80124de <__hexdig_fun+0xa>
 80124fa:	2000      	movs	r0, #0
 80124fc:	4770      	bx	lr

080124fe <__gethex>:
 80124fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012502:	b08b      	sub	sp, #44	; 0x2c
 8012504:	468a      	mov	sl, r1
 8012506:	9002      	str	r0, [sp, #8]
 8012508:	9816      	ldr	r0, [sp, #88]	; 0x58
 801250a:	9306      	str	r3, [sp, #24]
 801250c:	4690      	mov	r8, r2
 801250e:	f000 fad0 	bl	8012ab2 <__localeconv_l>
 8012512:	6803      	ldr	r3, [r0, #0]
 8012514:	9303      	str	r3, [sp, #12]
 8012516:	4618      	mov	r0, r3
 8012518:	f7ed fe9c 	bl	8000254 <strlen>
 801251c:	9b03      	ldr	r3, [sp, #12]
 801251e:	9001      	str	r0, [sp, #4]
 8012520:	4403      	add	r3, r0
 8012522:	f04f 0b00 	mov.w	fp, #0
 8012526:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801252a:	9307      	str	r3, [sp, #28]
 801252c:	f8da 3000 	ldr.w	r3, [sl]
 8012530:	3302      	adds	r3, #2
 8012532:	461f      	mov	r7, r3
 8012534:	f813 0b01 	ldrb.w	r0, [r3], #1
 8012538:	2830      	cmp	r0, #48	; 0x30
 801253a:	d06c      	beq.n	8012616 <__gethex+0x118>
 801253c:	f7ff ffca 	bl	80124d4 <__hexdig_fun>
 8012540:	4604      	mov	r4, r0
 8012542:	2800      	cmp	r0, #0
 8012544:	d16a      	bne.n	801261c <__gethex+0x11e>
 8012546:	9a01      	ldr	r2, [sp, #4]
 8012548:	9903      	ldr	r1, [sp, #12]
 801254a:	4638      	mov	r0, r7
 801254c:	f001 f8f4 	bl	8013738 <strncmp>
 8012550:	2800      	cmp	r0, #0
 8012552:	d166      	bne.n	8012622 <__gethex+0x124>
 8012554:	9b01      	ldr	r3, [sp, #4]
 8012556:	5cf8      	ldrb	r0, [r7, r3]
 8012558:	18fe      	adds	r6, r7, r3
 801255a:	f7ff ffbb 	bl	80124d4 <__hexdig_fun>
 801255e:	2800      	cmp	r0, #0
 8012560:	d062      	beq.n	8012628 <__gethex+0x12a>
 8012562:	4633      	mov	r3, r6
 8012564:	7818      	ldrb	r0, [r3, #0]
 8012566:	2830      	cmp	r0, #48	; 0x30
 8012568:	461f      	mov	r7, r3
 801256a:	f103 0301 	add.w	r3, r3, #1
 801256e:	d0f9      	beq.n	8012564 <__gethex+0x66>
 8012570:	f7ff ffb0 	bl	80124d4 <__hexdig_fun>
 8012574:	fab0 f580 	clz	r5, r0
 8012578:	096d      	lsrs	r5, r5, #5
 801257a:	4634      	mov	r4, r6
 801257c:	f04f 0b01 	mov.w	fp, #1
 8012580:	463a      	mov	r2, r7
 8012582:	4616      	mov	r6, r2
 8012584:	3201      	adds	r2, #1
 8012586:	7830      	ldrb	r0, [r6, #0]
 8012588:	f7ff ffa4 	bl	80124d4 <__hexdig_fun>
 801258c:	2800      	cmp	r0, #0
 801258e:	d1f8      	bne.n	8012582 <__gethex+0x84>
 8012590:	9a01      	ldr	r2, [sp, #4]
 8012592:	9903      	ldr	r1, [sp, #12]
 8012594:	4630      	mov	r0, r6
 8012596:	f001 f8cf 	bl	8013738 <strncmp>
 801259a:	b950      	cbnz	r0, 80125b2 <__gethex+0xb4>
 801259c:	b954      	cbnz	r4, 80125b4 <__gethex+0xb6>
 801259e:	9b01      	ldr	r3, [sp, #4]
 80125a0:	18f4      	adds	r4, r6, r3
 80125a2:	4622      	mov	r2, r4
 80125a4:	4616      	mov	r6, r2
 80125a6:	3201      	adds	r2, #1
 80125a8:	7830      	ldrb	r0, [r6, #0]
 80125aa:	f7ff ff93 	bl	80124d4 <__hexdig_fun>
 80125ae:	2800      	cmp	r0, #0
 80125b0:	d1f8      	bne.n	80125a4 <__gethex+0xa6>
 80125b2:	b10c      	cbz	r4, 80125b8 <__gethex+0xba>
 80125b4:	1ba4      	subs	r4, r4, r6
 80125b6:	00a4      	lsls	r4, r4, #2
 80125b8:	7833      	ldrb	r3, [r6, #0]
 80125ba:	2b50      	cmp	r3, #80	; 0x50
 80125bc:	d001      	beq.n	80125c2 <__gethex+0xc4>
 80125be:	2b70      	cmp	r3, #112	; 0x70
 80125c0:	d140      	bne.n	8012644 <__gethex+0x146>
 80125c2:	7873      	ldrb	r3, [r6, #1]
 80125c4:	2b2b      	cmp	r3, #43	; 0x2b
 80125c6:	d031      	beq.n	801262c <__gethex+0x12e>
 80125c8:	2b2d      	cmp	r3, #45	; 0x2d
 80125ca:	d033      	beq.n	8012634 <__gethex+0x136>
 80125cc:	1c71      	adds	r1, r6, #1
 80125ce:	f04f 0900 	mov.w	r9, #0
 80125d2:	7808      	ldrb	r0, [r1, #0]
 80125d4:	f7ff ff7e 	bl	80124d4 <__hexdig_fun>
 80125d8:	1e43      	subs	r3, r0, #1
 80125da:	b2db      	uxtb	r3, r3
 80125dc:	2b18      	cmp	r3, #24
 80125de:	d831      	bhi.n	8012644 <__gethex+0x146>
 80125e0:	f1a0 0210 	sub.w	r2, r0, #16
 80125e4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80125e8:	f7ff ff74 	bl	80124d4 <__hexdig_fun>
 80125ec:	1e43      	subs	r3, r0, #1
 80125ee:	b2db      	uxtb	r3, r3
 80125f0:	2b18      	cmp	r3, #24
 80125f2:	d922      	bls.n	801263a <__gethex+0x13c>
 80125f4:	f1b9 0f00 	cmp.w	r9, #0
 80125f8:	d000      	beq.n	80125fc <__gethex+0xfe>
 80125fa:	4252      	negs	r2, r2
 80125fc:	4414      	add	r4, r2
 80125fe:	f8ca 1000 	str.w	r1, [sl]
 8012602:	b30d      	cbz	r5, 8012648 <__gethex+0x14a>
 8012604:	f1bb 0f00 	cmp.w	fp, #0
 8012608:	bf0c      	ite	eq
 801260a:	2706      	moveq	r7, #6
 801260c:	2700      	movne	r7, #0
 801260e:	4638      	mov	r0, r7
 8012610:	b00b      	add	sp, #44	; 0x2c
 8012612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012616:	f10b 0b01 	add.w	fp, fp, #1
 801261a:	e78a      	b.n	8012532 <__gethex+0x34>
 801261c:	2500      	movs	r5, #0
 801261e:	462c      	mov	r4, r5
 8012620:	e7ae      	b.n	8012580 <__gethex+0x82>
 8012622:	463e      	mov	r6, r7
 8012624:	2501      	movs	r5, #1
 8012626:	e7c7      	b.n	80125b8 <__gethex+0xba>
 8012628:	4604      	mov	r4, r0
 801262a:	e7fb      	b.n	8012624 <__gethex+0x126>
 801262c:	f04f 0900 	mov.w	r9, #0
 8012630:	1cb1      	adds	r1, r6, #2
 8012632:	e7ce      	b.n	80125d2 <__gethex+0xd4>
 8012634:	f04f 0901 	mov.w	r9, #1
 8012638:	e7fa      	b.n	8012630 <__gethex+0x132>
 801263a:	230a      	movs	r3, #10
 801263c:	fb03 0202 	mla	r2, r3, r2, r0
 8012640:	3a10      	subs	r2, #16
 8012642:	e7cf      	b.n	80125e4 <__gethex+0xe6>
 8012644:	4631      	mov	r1, r6
 8012646:	e7da      	b.n	80125fe <__gethex+0x100>
 8012648:	1bf3      	subs	r3, r6, r7
 801264a:	3b01      	subs	r3, #1
 801264c:	4629      	mov	r1, r5
 801264e:	2b07      	cmp	r3, #7
 8012650:	dc49      	bgt.n	80126e6 <__gethex+0x1e8>
 8012652:	9802      	ldr	r0, [sp, #8]
 8012654:	f000 fa58 	bl	8012b08 <_Balloc>
 8012658:	9b01      	ldr	r3, [sp, #4]
 801265a:	f100 0914 	add.w	r9, r0, #20
 801265e:	f04f 0b00 	mov.w	fp, #0
 8012662:	f1c3 0301 	rsb	r3, r3, #1
 8012666:	4605      	mov	r5, r0
 8012668:	f8cd 9010 	str.w	r9, [sp, #16]
 801266c:	46da      	mov	sl, fp
 801266e:	9308      	str	r3, [sp, #32]
 8012670:	42b7      	cmp	r7, r6
 8012672:	d33b      	bcc.n	80126ec <__gethex+0x1ee>
 8012674:	9804      	ldr	r0, [sp, #16]
 8012676:	f840 ab04 	str.w	sl, [r0], #4
 801267a:	eba0 0009 	sub.w	r0, r0, r9
 801267e:	1080      	asrs	r0, r0, #2
 8012680:	6128      	str	r0, [r5, #16]
 8012682:	0147      	lsls	r7, r0, #5
 8012684:	4650      	mov	r0, sl
 8012686:	f000 fb03 	bl	8012c90 <__hi0bits>
 801268a:	f8d8 6000 	ldr.w	r6, [r8]
 801268e:	1a3f      	subs	r7, r7, r0
 8012690:	42b7      	cmp	r7, r6
 8012692:	dd64      	ble.n	801275e <__gethex+0x260>
 8012694:	1bbf      	subs	r7, r7, r6
 8012696:	4639      	mov	r1, r7
 8012698:	4628      	mov	r0, r5
 801269a:	f000 fe14 	bl	80132c6 <__any_on>
 801269e:	4682      	mov	sl, r0
 80126a0:	b178      	cbz	r0, 80126c2 <__gethex+0x1c4>
 80126a2:	1e7b      	subs	r3, r7, #1
 80126a4:	1159      	asrs	r1, r3, #5
 80126a6:	f003 021f 	and.w	r2, r3, #31
 80126aa:	f04f 0a01 	mov.w	sl, #1
 80126ae:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80126b2:	fa0a f202 	lsl.w	r2, sl, r2
 80126b6:	420a      	tst	r2, r1
 80126b8:	d003      	beq.n	80126c2 <__gethex+0x1c4>
 80126ba:	4553      	cmp	r3, sl
 80126bc:	dc46      	bgt.n	801274c <__gethex+0x24e>
 80126be:	f04f 0a02 	mov.w	sl, #2
 80126c2:	4639      	mov	r1, r7
 80126c4:	4628      	mov	r0, r5
 80126c6:	f7ff fecb 	bl	8012460 <rshift>
 80126ca:	443c      	add	r4, r7
 80126cc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80126d0:	42a3      	cmp	r3, r4
 80126d2:	da52      	bge.n	801277a <__gethex+0x27c>
 80126d4:	4629      	mov	r1, r5
 80126d6:	9802      	ldr	r0, [sp, #8]
 80126d8:	f000 fa4a 	bl	8012b70 <_Bfree>
 80126dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80126de:	2300      	movs	r3, #0
 80126e0:	6013      	str	r3, [r2, #0]
 80126e2:	27a3      	movs	r7, #163	; 0xa3
 80126e4:	e793      	b.n	801260e <__gethex+0x110>
 80126e6:	3101      	adds	r1, #1
 80126e8:	105b      	asrs	r3, r3, #1
 80126ea:	e7b0      	b.n	801264e <__gethex+0x150>
 80126ec:	1e73      	subs	r3, r6, #1
 80126ee:	9305      	str	r3, [sp, #20]
 80126f0:	9a07      	ldr	r2, [sp, #28]
 80126f2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80126f6:	4293      	cmp	r3, r2
 80126f8:	d018      	beq.n	801272c <__gethex+0x22e>
 80126fa:	f1bb 0f20 	cmp.w	fp, #32
 80126fe:	d107      	bne.n	8012710 <__gethex+0x212>
 8012700:	9b04      	ldr	r3, [sp, #16]
 8012702:	f8c3 a000 	str.w	sl, [r3]
 8012706:	3304      	adds	r3, #4
 8012708:	f04f 0a00 	mov.w	sl, #0
 801270c:	9304      	str	r3, [sp, #16]
 801270e:	46d3      	mov	fp, sl
 8012710:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8012714:	f7ff fede 	bl	80124d4 <__hexdig_fun>
 8012718:	f000 000f 	and.w	r0, r0, #15
 801271c:	fa00 f00b 	lsl.w	r0, r0, fp
 8012720:	ea4a 0a00 	orr.w	sl, sl, r0
 8012724:	f10b 0b04 	add.w	fp, fp, #4
 8012728:	9b05      	ldr	r3, [sp, #20]
 801272a:	e00d      	b.n	8012748 <__gethex+0x24a>
 801272c:	9b05      	ldr	r3, [sp, #20]
 801272e:	9a08      	ldr	r2, [sp, #32]
 8012730:	4413      	add	r3, r2
 8012732:	42bb      	cmp	r3, r7
 8012734:	d3e1      	bcc.n	80126fa <__gethex+0x1fc>
 8012736:	4618      	mov	r0, r3
 8012738:	9a01      	ldr	r2, [sp, #4]
 801273a:	9903      	ldr	r1, [sp, #12]
 801273c:	9309      	str	r3, [sp, #36]	; 0x24
 801273e:	f000 fffb 	bl	8013738 <strncmp>
 8012742:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012744:	2800      	cmp	r0, #0
 8012746:	d1d8      	bne.n	80126fa <__gethex+0x1fc>
 8012748:	461e      	mov	r6, r3
 801274a:	e791      	b.n	8012670 <__gethex+0x172>
 801274c:	1eb9      	subs	r1, r7, #2
 801274e:	4628      	mov	r0, r5
 8012750:	f000 fdb9 	bl	80132c6 <__any_on>
 8012754:	2800      	cmp	r0, #0
 8012756:	d0b2      	beq.n	80126be <__gethex+0x1c0>
 8012758:	f04f 0a03 	mov.w	sl, #3
 801275c:	e7b1      	b.n	80126c2 <__gethex+0x1c4>
 801275e:	da09      	bge.n	8012774 <__gethex+0x276>
 8012760:	1bf7      	subs	r7, r6, r7
 8012762:	4629      	mov	r1, r5
 8012764:	463a      	mov	r2, r7
 8012766:	9802      	ldr	r0, [sp, #8]
 8012768:	f000 fbce 	bl	8012f08 <__lshift>
 801276c:	1be4      	subs	r4, r4, r7
 801276e:	4605      	mov	r5, r0
 8012770:	f100 0914 	add.w	r9, r0, #20
 8012774:	f04f 0a00 	mov.w	sl, #0
 8012778:	e7a8      	b.n	80126cc <__gethex+0x1ce>
 801277a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801277e:	42a0      	cmp	r0, r4
 8012780:	dd6a      	ble.n	8012858 <__gethex+0x35a>
 8012782:	1b04      	subs	r4, r0, r4
 8012784:	42a6      	cmp	r6, r4
 8012786:	dc2e      	bgt.n	80127e6 <__gethex+0x2e8>
 8012788:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801278c:	2b02      	cmp	r3, #2
 801278e:	d022      	beq.n	80127d6 <__gethex+0x2d8>
 8012790:	2b03      	cmp	r3, #3
 8012792:	d024      	beq.n	80127de <__gethex+0x2e0>
 8012794:	2b01      	cmp	r3, #1
 8012796:	d115      	bne.n	80127c4 <__gethex+0x2c6>
 8012798:	42a6      	cmp	r6, r4
 801279a:	d113      	bne.n	80127c4 <__gethex+0x2c6>
 801279c:	2e01      	cmp	r6, #1
 801279e:	dc0b      	bgt.n	80127b8 <__gethex+0x2ba>
 80127a0:	9a06      	ldr	r2, [sp, #24]
 80127a2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80127a6:	6013      	str	r3, [r2, #0]
 80127a8:	2301      	movs	r3, #1
 80127aa:	612b      	str	r3, [r5, #16]
 80127ac:	f8c9 3000 	str.w	r3, [r9]
 80127b0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80127b2:	2762      	movs	r7, #98	; 0x62
 80127b4:	601d      	str	r5, [r3, #0]
 80127b6:	e72a      	b.n	801260e <__gethex+0x110>
 80127b8:	1e71      	subs	r1, r6, #1
 80127ba:	4628      	mov	r0, r5
 80127bc:	f000 fd83 	bl	80132c6 <__any_on>
 80127c0:	2800      	cmp	r0, #0
 80127c2:	d1ed      	bne.n	80127a0 <__gethex+0x2a2>
 80127c4:	4629      	mov	r1, r5
 80127c6:	9802      	ldr	r0, [sp, #8]
 80127c8:	f000 f9d2 	bl	8012b70 <_Bfree>
 80127cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80127ce:	2300      	movs	r3, #0
 80127d0:	6013      	str	r3, [r2, #0]
 80127d2:	2750      	movs	r7, #80	; 0x50
 80127d4:	e71b      	b.n	801260e <__gethex+0x110>
 80127d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80127d8:	2b00      	cmp	r3, #0
 80127da:	d0e1      	beq.n	80127a0 <__gethex+0x2a2>
 80127dc:	e7f2      	b.n	80127c4 <__gethex+0x2c6>
 80127de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	d1dd      	bne.n	80127a0 <__gethex+0x2a2>
 80127e4:	e7ee      	b.n	80127c4 <__gethex+0x2c6>
 80127e6:	1e67      	subs	r7, r4, #1
 80127e8:	f1ba 0f00 	cmp.w	sl, #0
 80127ec:	d131      	bne.n	8012852 <__gethex+0x354>
 80127ee:	b127      	cbz	r7, 80127fa <__gethex+0x2fc>
 80127f0:	4639      	mov	r1, r7
 80127f2:	4628      	mov	r0, r5
 80127f4:	f000 fd67 	bl	80132c6 <__any_on>
 80127f8:	4682      	mov	sl, r0
 80127fa:	117a      	asrs	r2, r7, #5
 80127fc:	2301      	movs	r3, #1
 80127fe:	f007 071f 	and.w	r7, r7, #31
 8012802:	fa03 f707 	lsl.w	r7, r3, r7
 8012806:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 801280a:	4621      	mov	r1, r4
 801280c:	421f      	tst	r7, r3
 801280e:	4628      	mov	r0, r5
 8012810:	bf18      	it	ne
 8012812:	f04a 0a02 	orrne.w	sl, sl, #2
 8012816:	1b36      	subs	r6, r6, r4
 8012818:	f7ff fe22 	bl	8012460 <rshift>
 801281c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8012820:	2702      	movs	r7, #2
 8012822:	f1ba 0f00 	cmp.w	sl, #0
 8012826:	d048      	beq.n	80128ba <__gethex+0x3bc>
 8012828:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801282c:	2b02      	cmp	r3, #2
 801282e:	d015      	beq.n	801285c <__gethex+0x35e>
 8012830:	2b03      	cmp	r3, #3
 8012832:	d017      	beq.n	8012864 <__gethex+0x366>
 8012834:	2b01      	cmp	r3, #1
 8012836:	d109      	bne.n	801284c <__gethex+0x34e>
 8012838:	f01a 0f02 	tst.w	sl, #2
 801283c:	d006      	beq.n	801284c <__gethex+0x34e>
 801283e:	f8d9 3000 	ldr.w	r3, [r9]
 8012842:	ea4a 0a03 	orr.w	sl, sl, r3
 8012846:	f01a 0f01 	tst.w	sl, #1
 801284a:	d10e      	bne.n	801286a <__gethex+0x36c>
 801284c:	f047 0710 	orr.w	r7, r7, #16
 8012850:	e033      	b.n	80128ba <__gethex+0x3bc>
 8012852:	f04f 0a01 	mov.w	sl, #1
 8012856:	e7d0      	b.n	80127fa <__gethex+0x2fc>
 8012858:	2701      	movs	r7, #1
 801285a:	e7e2      	b.n	8012822 <__gethex+0x324>
 801285c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801285e:	f1c3 0301 	rsb	r3, r3, #1
 8012862:	9315      	str	r3, [sp, #84]	; 0x54
 8012864:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012866:	2b00      	cmp	r3, #0
 8012868:	d0f0      	beq.n	801284c <__gethex+0x34e>
 801286a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 801286e:	f105 0314 	add.w	r3, r5, #20
 8012872:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8012876:	eb03 010a 	add.w	r1, r3, sl
 801287a:	f04f 0c00 	mov.w	ip, #0
 801287e:	4618      	mov	r0, r3
 8012880:	f853 2b04 	ldr.w	r2, [r3], #4
 8012884:	f1b2 3fff 	cmp.w	r2, #4294967295
 8012888:	d01c      	beq.n	80128c4 <__gethex+0x3c6>
 801288a:	3201      	adds	r2, #1
 801288c:	6002      	str	r2, [r0, #0]
 801288e:	2f02      	cmp	r7, #2
 8012890:	f105 0314 	add.w	r3, r5, #20
 8012894:	d138      	bne.n	8012908 <__gethex+0x40a>
 8012896:	f8d8 2000 	ldr.w	r2, [r8]
 801289a:	3a01      	subs	r2, #1
 801289c:	42b2      	cmp	r2, r6
 801289e:	d10a      	bne.n	80128b6 <__gethex+0x3b8>
 80128a0:	1171      	asrs	r1, r6, #5
 80128a2:	2201      	movs	r2, #1
 80128a4:	f006 061f 	and.w	r6, r6, #31
 80128a8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80128ac:	fa02 f606 	lsl.w	r6, r2, r6
 80128b0:	421e      	tst	r6, r3
 80128b2:	bf18      	it	ne
 80128b4:	4617      	movne	r7, r2
 80128b6:	f047 0720 	orr.w	r7, r7, #32
 80128ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80128bc:	601d      	str	r5, [r3, #0]
 80128be:	9b06      	ldr	r3, [sp, #24]
 80128c0:	601c      	str	r4, [r3, #0]
 80128c2:	e6a4      	b.n	801260e <__gethex+0x110>
 80128c4:	4299      	cmp	r1, r3
 80128c6:	f843 cc04 	str.w	ip, [r3, #-4]
 80128ca:	d8d8      	bhi.n	801287e <__gethex+0x380>
 80128cc:	68ab      	ldr	r3, [r5, #8]
 80128ce:	4599      	cmp	r9, r3
 80128d0:	db12      	blt.n	80128f8 <__gethex+0x3fa>
 80128d2:	6869      	ldr	r1, [r5, #4]
 80128d4:	9802      	ldr	r0, [sp, #8]
 80128d6:	3101      	adds	r1, #1
 80128d8:	f000 f916 	bl	8012b08 <_Balloc>
 80128dc:	692a      	ldr	r2, [r5, #16]
 80128de:	3202      	adds	r2, #2
 80128e0:	f105 010c 	add.w	r1, r5, #12
 80128e4:	4683      	mov	fp, r0
 80128e6:	0092      	lsls	r2, r2, #2
 80128e8:	300c      	adds	r0, #12
 80128ea:	f7fd fafd 	bl	800fee8 <memcpy>
 80128ee:	4629      	mov	r1, r5
 80128f0:	9802      	ldr	r0, [sp, #8]
 80128f2:	f000 f93d 	bl	8012b70 <_Bfree>
 80128f6:	465d      	mov	r5, fp
 80128f8:	692b      	ldr	r3, [r5, #16]
 80128fa:	1c5a      	adds	r2, r3, #1
 80128fc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8012900:	612a      	str	r2, [r5, #16]
 8012902:	2201      	movs	r2, #1
 8012904:	615a      	str	r2, [r3, #20]
 8012906:	e7c2      	b.n	801288e <__gethex+0x390>
 8012908:	692a      	ldr	r2, [r5, #16]
 801290a:	454a      	cmp	r2, r9
 801290c:	dd0b      	ble.n	8012926 <__gethex+0x428>
 801290e:	2101      	movs	r1, #1
 8012910:	4628      	mov	r0, r5
 8012912:	f7ff fda5 	bl	8012460 <rshift>
 8012916:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801291a:	3401      	adds	r4, #1
 801291c:	42a3      	cmp	r3, r4
 801291e:	f6ff aed9 	blt.w	80126d4 <__gethex+0x1d6>
 8012922:	2701      	movs	r7, #1
 8012924:	e7c7      	b.n	80128b6 <__gethex+0x3b8>
 8012926:	f016 061f 	ands.w	r6, r6, #31
 801292a:	d0fa      	beq.n	8012922 <__gethex+0x424>
 801292c:	449a      	add	sl, r3
 801292e:	f1c6 0620 	rsb	r6, r6, #32
 8012932:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8012936:	f000 f9ab 	bl	8012c90 <__hi0bits>
 801293a:	42b0      	cmp	r0, r6
 801293c:	dbe7      	blt.n	801290e <__gethex+0x410>
 801293e:	e7f0      	b.n	8012922 <__gethex+0x424>

08012940 <L_shift>:
 8012940:	f1c2 0208 	rsb	r2, r2, #8
 8012944:	0092      	lsls	r2, r2, #2
 8012946:	b570      	push	{r4, r5, r6, lr}
 8012948:	f1c2 0620 	rsb	r6, r2, #32
 801294c:	6843      	ldr	r3, [r0, #4]
 801294e:	6804      	ldr	r4, [r0, #0]
 8012950:	fa03 f506 	lsl.w	r5, r3, r6
 8012954:	432c      	orrs	r4, r5
 8012956:	40d3      	lsrs	r3, r2
 8012958:	6004      	str	r4, [r0, #0]
 801295a:	f840 3f04 	str.w	r3, [r0, #4]!
 801295e:	4288      	cmp	r0, r1
 8012960:	d3f4      	bcc.n	801294c <L_shift+0xc>
 8012962:	bd70      	pop	{r4, r5, r6, pc}

08012964 <__match>:
 8012964:	b530      	push	{r4, r5, lr}
 8012966:	6803      	ldr	r3, [r0, #0]
 8012968:	3301      	adds	r3, #1
 801296a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801296e:	b914      	cbnz	r4, 8012976 <__match+0x12>
 8012970:	6003      	str	r3, [r0, #0]
 8012972:	2001      	movs	r0, #1
 8012974:	bd30      	pop	{r4, r5, pc}
 8012976:	f813 2b01 	ldrb.w	r2, [r3], #1
 801297a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801297e:	2d19      	cmp	r5, #25
 8012980:	bf98      	it	ls
 8012982:	3220      	addls	r2, #32
 8012984:	42a2      	cmp	r2, r4
 8012986:	d0f0      	beq.n	801296a <__match+0x6>
 8012988:	2000      	movs	r0, #0
 801298a:	e7f3      	b.n	8012974 <__match+0x10>

0801298c <__hexnan>:
 801298c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012990:	680b      	ldr	r3, [r1, #0]
 8012992:	6801      	ldr	r1, [r0, #0]
 8012994:	115f      	asrs	r7, r3, #5
 8012996:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 801299a:	f013 031f 	ands.w	r3, r3, #31
 801299e:	b087      	sub	sp, #28
 80129a0:	bf18      	it	ne
 80129a2:	3704      	addne	r7, #4
 80129a4:	2500      	movs	r5, #0
 80129a6:	1f3e      	subs	r6, r7, #4
 80129a8:	4682      	mov	sl, r0
 80129aa:	4690      	mov	r8, r2
 80129ac:	9301      	str	r3, [sp, #4]
 80129ae:	f847 5c04 	str.w	r5, [r7, #-4]
 80129b2:	46b1      	mov	r9, r6
 80129b4:	4634      	mov	r4, r6
 80129b6:	9502      	str	r5, [sp, #8]
 80129b8:	46ab      	mov	fp, r5
 80129ba:	784a      	ldrb	r2, [r1, #1]
 80129bc:	1c4b      	adds	r3, r1, #1
 80129be:	9303      	str	r3, [sp, #12]
 80129c0:	b342      	cbz	r2, 8012a14 <__hexnan+0x88>
 80129c2:	4610      	mov	r0, r2
 80129c4:	9105      	str	r1, [sp, #20]
 80129c6:	9204      	str	r2, [sp, #16]
 80129c8:	f7ff fd84 	bl	80124d4 <__hexdig_fun>
 80129cc:	2800      	cmp	r0, #0
 80129ce:	d143      	bne.n	8012a58 <__hexnan+0xcc>
 80129d0:	9a04      	ldr	r2, [sp, #16]
 80129d2:	9905      	ldr	r1, [sp, #20]
 80129d4:	2a20      	cmp	r2, #32
 80129d6:	d818      	bhi.n	8012a0a <__hexnan+0x7e>
 80129d8:	9b02      	ldr	r3, [sp, #8]
 80129da:	459b      	cmp	fp, r3
 80129dc:	dd13      	ble.n	8012a06 <__hexnan+0x7a>
 80129de:	454c      	cmp	r4, r9
 80129e0:	d206      	bcs.n	80129f0 <__hexnan+0x64>
 80129e2:	2d07      	cmp	r5, #7
 80129e4:	dc04      	bgt.n	80129f0 <__hexnan+0x64>
 80129e6:	462a      	mov	r2, r5
 80129e8:	4649      	mov	r1, r9
 80129ea:	4620      	mov	r0, r4
 80129ec:	f7ff ffa8 	bl	8012940 <L_shift>
 80129f0:	4544      	cmp	r4, r8
 80129f2:	d944      	bls.n	8012a7e <__hexnan+0xf2>
 80129f4:	2300      	movs	r3, #0
 80129f6:	f1a4 0904 	sub.w	r9, r4, #4
 80129fa:	f844 3c04 	str.w	r3, [r4, #-4]
 80129fe:	f8cd b008 	str.w	fp, [sp, #8]
 8012a02:	464c      	mov	r4, r9
 8012a04:	461d      	mov	r5, r3
 8012a06:	9903      	ldr	r1, [sp, #12]
 8012a08:	e7d7      	b.n	80129ba <__hexnan+0x2e>
 8012a0a:	2a29      	cmp	r2, #41	; 0x29
 8012a0c:	d14a      	bne.n	8012aa4 <__hexnan+0x118>
 8012a0e:	3102      	adds	r1, #2
 8012a10:	f8ca 1000 	str.w	r1, [sl]
 8012a14:	f1bb 0f00 	cmp.w	fp, #0
 8012a18:	d044      	beq.n	8012aa4 <__hexnan+0x118>
 8012a1a:	454c      	cmp	r4, r9
 8012a1c:	d206      	bcs.n	8012a2c <__hexnan+0xa0>
 8012a1e:	2d07      	cmp	r5, #7
 8012a20:	dc04      	bgt.n	8012a2c <__hexnan+0xa0>
 8012a22:	462a      	mov	r2, r5
 8012a24:	4649      	mov	r1, r9
 8012a26:	4620      	mov	r0, r4
 8012a28:	f7ff ff8a 	bl	8012940 <L_shift>
 8012a2c:	4544      	cmp	r4, r8
 8012a2e:	d928      	bls.n	8012a82 <__hexnan+0xf6>
 8012a30:	4643      	mov	r3, r8
 8012a32:	f854 2b04 	ldr.w	r2, [r4], #4
 8012a36:	f843 2b04 	str.w	r2, [r3], #4
 8012a3a:	42a6      	cmp	r6, r4
 8012a3c:	d2f9      	bcs.n	8012a32 <__hexnan+0xa6>
 8012a3e:	2200      	movs	r2, #0
 8012a40:	f843 2b04 	str.w	r2, [r3], #4
 8012a44:	429e      	cmp	r6, r3
 8012a46:	d2fb      	bcs.n	8012a40 <__hexnan+0xb4>
 8012a48:	6833      	ldr	r3, [r6, #0]
 8012a4a:	b91b      	cbnz	r3, 8012a54 <__hexnan+0xc8>
 8012a4c:	4546      	cmp	r6, r8
 8012a4e:	d127      	bne.n	8012aa0 <__hexnan+0x114>
 8012a50:	2301      	movs	r3, #1
 8012a52:	6033      	str	r3, [r6, #0]
 8012a54:	2005      	movs	r0, #5
 8012a56:	e026      	b.n	8012aa6 <__hexnan+0x11a>
 8012a58:	3501      	adds	r5, #1
 8012a5a:	2d08      	cmp	r5, #8
 8012a5c:	f10b 0b01 	add.w	fp, fp, #1
 8012a60:	dd06      	ble.n	8012a70 <__hexnan+0xe4>
 8012a62:	4544      	cmp	r4, r8
 8012a64:	d9cf      	bls.n	8012a06 <__hexnan+0x7a>
 8012a66:	2300      	movs	r3, #0
 8012a68:	f844 3c04 	str.w	r3, [r4, #-4]
 8012a6c:	2501      	movs	r5, #1
 8012a6e:	3c04      	subs	r4, #4
 8012a70:	6822      	ldr	r2, [r4, #0]
 8012a72:	f000 000f 	and.w	r0, r0, #15
 8012a76:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8012a7a:	6020      	str	r0, [r4, #0]
 8012a7c:	e7c3      	b.n	8012a06 <__hexnan+0x7a>
 8012a7e:	2508      	movs	r5, #8
 8012a80:	e7c1      	b.n	8012a06 <__hexnan+0x7a>
 8012a82:	9b01      	ldr	r3, [sp, #4]
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	d0df      	beq.n	8012a48 <__hexnan+0xbc>
 8012a88:	f04f 32ff 	mov.w	r2, #4294967295
 8012a8c:	f1c3 0320 	rsb	r3, r3, #32
 8012a90:	fa22 f303 	lsr.w	r3, r2, r3
 8012a94:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8012a98:	401a      	ands	r2, r3
 8012a9a:	f847 2c04 	str.w	r2, [r7, #-4]
 8012a9e:	e7d3      	b.n	8012a48 <__hexnan+0xbc>
 8012aa0:	3e04      	subs	r6, #4
 8012aa2:	e7d1      	b.n	8012a48 <__hexnan+0xbc>
 8012aa4:	2004      	movs	r0, #4
 8012aa6:	b007      	add	sp, #28
 8012aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012aac <__locale_ctype_ptr_l>:
 8012aac:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8012ab0:	4770      	bx	lr

08012ab2 <__localeconv_l>:
 8012ab2:	30f0      	adds	r0, #240	; 0xf0
 8012ab4:	4770      	bx	lr
	...

08012ab8 <_localeconv_r>:
 8012ab8:	4b04      	ldr	r3, [pc, #16]	; (8012acc <_localeconv_r+0x14>)
 8012aba:	681b      	ldr	r3, [r3, #0]
 8012abc:	6a18      	ldr	r0, [r3, #32]
 8012abe:	4b04      	ldr	r3, [pc, #16]	; (8012ad0 <_localeconv_r+0x18>)
 8012ac0:	2800      	cmp	r0, #0
 8012ac2:	bf08      	it	eq
 8012ac4:	4618      	moveq	r0, r3
 8012ac6:	30f0      	adds	r0, #240	; 0xf0
 8012ac8:	4770      	bx	lr
 8012aca:	bf00      	nop
 8012acc:	20000054 	.word	0x20000054
 8012ad0:	200000b8 	.word	0x200000b8

08012ad4 <malloc>:
 8012ad4:	4b02      	ldr	r3, [pc, #8]	; (8012ae0 <malloc+0xc>)
 8012ad6:	4601      	mov	r1, r0
 8012ad8:	6818      	ldr	r0, [r3, #0]
 8012ada:	f000 bc71 	b.w	80133c0 <_malloc_r>
 8012ade:	bf00      	nop
 8012ae0:	20000054 	.word	0x20000054

08012ae4 <__ascii_mbtowc>:
 8012ae4:	b082      	sub	sp, #8
 8012ae6:	b901      	cbnz	r1, 8012aea <__ascii_mbtowc+0x6>
 8012ae8:	a901      	add	r1, sp, #4
 8012aea:	b142      	cbz	r2, 8012afe <__ascii_mbtowc+0x1a>
 8012aec:	b14b      	cbz	r3, 8012b02 <__ascii_mbtowc+0x1e>
 8012aee:	7813      	ldrb	r3, [r2, #0]
 8012af0:	600b      	str	r3, [r1, #0]
 8012af2:	7812      	ldrb	r2, [r2, #0]
 8012af4:	1c10      	adds	r0, r2, #0
 8012af6:	bf18      	it	ne
 8012af8:	2001      	movne	r0, #1
 8012afa:	b002      	add	sp, #8
 8012afc:	4770      	bx	lr
 8012afe:	4610      	mov	r0, r2
 8012b00:	e7fb      	b.n	8012afa <__ascii_mbtowc+0x16>
 8012b02:	f06f 0001 	mvn.w	r0, #1
 8012b06:	e7f8      	b.n	8012afa <__ascii_mbtowc+0x16>

08012b08 <_Balloc>:
 8012b08:	b570      	push	{r4, r5, r6, lr}
 8012b0a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012b0c:	4604      	mov	r4, r0
 8012b0e:	460e      	mov	r6, r1
 8012b10:	b93d      	cbnz	r5, 8012b22 <_Balloc+0x1a>
 8012b12:	2010      	movs	r0, #16
 8012b14:	f7ff ffde 	bl	8012ad4 <malloc>
 8012b18:	6260      	str	r0, [r4, #36]	; 0x24
 8012b1a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012b1e:	6005      	str	r5, [r0, #0]
 8012b20:	60c5      	str	r5, [r0, #12]
 8012b22:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8012b24:	68eb      	ldr	r3, [r5, #12]
 8012b26:	b183      	cbz	r3, 8012b4a <_Balloc+0x42>
 8012b28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012b2a:	68db      	ldr	r3, [r3, #12]
 8012b2c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8012b30:	b9b8      	cbnz	r0, 8012b62 <_Balloc+0x5a>
 8012b32:	2101      	movs	r1, #1
 8012b34:	fa01 f506 	lsl.w	r5, r1, r6
 8012b38:	1d6a      	adds	r2, r5, #5
 8012b3a:	0092      	lsls	r2, r2, #2
 8012b3c:	4620      	mov	r0, r4
 8012b3e:	f000 fbe3 	bl	8013308 <_calloc_r>
 8012b42:	b160      	cbz	r0, 8012b5e <_Balloc+0x56>
 8012b44:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8012b48:	e00e      	b.n	8012b68 <_Balloc+0x60>
 8012b4a:	2221      	movs	r2, #33	; 0x21
 8012b4c:	2104      	movs	r1, #4
 8012b4e:	4620      	mov	r0, r4
 8012b50:	f000 fbda 	bl	8013308 <_calloc_r>
 8012b54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012b56:	60e8      	str	r0, [r5, #12]
 8012b58:	68db      	ldr	r3, [r3, #12]
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	d1e4      	bne.n	8012b28 <_Balloc+0x20>
 8012b5e:	2000      	movs	r0, #0
 8012b60:	bd70      	pop	{r4, r5, r6, pc}
 8012b62:	6802      	ldr	r2, [r0, #0]
 8012b64:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8012b68:	2300      	movs	r3, #0
 8012b6a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012b6e:	e7f7      	b.n	8012b60 <_Balloc+0x58>

08012b70 <_Bfree>:
 8012b70:	b570      	push	{r4, r5, r6, lr}
 8012b72:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8012b74:	4606      	mov	r6, r0
 8012b76:	460d      	mov	r5, r1
 8012b78:	b93c      	cbnz	r4, 8012b8a <_Bfree+0x1a>
 8012b7a:	2010      	movs	r0, #16
 8012b7c:	f7ff ffaa 	bl	8012ad4 <malloc>
 8012b80:	6270      	str	r0, [r6, #36]	; 0x24
 8012b82:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012b86:	6004      	str	r4, [r0, #0]
 8012b88:	60c4      	str	r4, [r0, #12]
 8012b8a:	b13d      	cbz	r5, 8012b9c <_Bfree+0x2c>
 8012b8c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8012b8e:	686a      	ldr	r2, [r5, #4]
 8012b90:	68db      	ldr	r3, [r3, #12]
 8012b92:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012b96:	6029      	str	r1, [r5, #0]
 8012b98:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8012b9c:	bd70      	pop	{r4, r5, r6, pc}

08012b9e <__multadd>:
 8012b9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ba2:	690d      	ldr	r5, [r1, #16]
 8012ba4:	461f      	mov	r7, r3
 8012ba6:	4606      	mov	r6, r0
 8012ba8:	460c      	mov	r4, r1
 8012baa:	f101 0c14 	add.w	ip, r1, #20
 8012bae:	2300      	movs	r3, #0
 8012bb0:	f8dc 0000 	ldr.w	r0, [ip]
 8012bb4:	b281      	uxth	r1, r0
 8012bb6:	fb02 7101 	mla	r1, r2, r1, r7
 8012bba:	0c0f      	lsrs	r7, r1, #16
 8012bbc:	0c00      	lsrs	r0, r0, #16
 8012bbe:	fb02 7000 	mla	r0, r2, r0, r7
 8012bc2:	b289      	uxth	r1, r1
 8012bc4:	3301      	adds	r3, #1
 8012bc6:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8012bca:	429d      	cmp	r5, r3
 8012bcc:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8012bd0:	f84c 1b04 	str.w	r1, [ip], #4
 8012bd4:	dcec      	bgt.n	8012bb0 <__multadd+0x12>
 8012bd6:	b1d7      	cbz	r7, 8012c0e <__multadd+0x70>
 8012bd8:	68a3      	ldr	r3, [r4, #8]
 8012bda:	42ab      	cmp	r3, r5
 8012bdc:	dc12      	bgt.n	8012c04 <__multadd+0x66>
 8012bde:	6861      	ldr	r1, [r4, #4]
 8012be0:	4630      	mov	r0, r6
 8012be2:	3101      	adds	r1, #1
 8012be4:	f7ff ff90 	bl	8012b08 <_Balloc>
 8012be8:	6922      	ldr	r2, [r4, #16]
 8012bea:	3202      	adds	r2, #2
 8012bec:	f104 010c 	add.w	r1, r4, #12
 8012bf0:	4680      	mov	r8, r0
 8012bf2:	0092      	lsls	r2, r2, #2
 8012bf4:	300c      	adds	r0, #12
 8012bf6:	f7fd f977 	bl	800fee8 <memcpy>
 8012bfa:	4621      	mov	r1, r4
 8012bfc:	4630      	mov	r0, r6
 8012bfe:	f7ff ffb7 	bl	8012b70 <_Bfree>
 8012c02:	4644      	mov	r4, r8
 8012c04:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012c08:	3501      	adds	r5, #1
 8012c0a:	615f      	str	r7, [r3, #20]
 8012c0c:	6125      	str	r5, [r4, #16]
 8012c0e:	4620      	mov	r0, r4
 8012c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012c14 <__s2b>:
 8012c14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012c18:	460c      	mov	r4, r1
 8012c1a:	4615      	mov	r5, r2
 8012c1c:	461f      	mov	r7, r3
 8012c1e:	2209      	movs	r2, #9
 8012c20:	3308      	adds	r3, #8
 8012c22:	4606      	mov	r6, r0
 8012c24:	fb93 f3f2 	sdiv	r3, r3, r2
 8012c28:	2100      	movs	r1, #0
 8012c2a:	2201      	movs	r2, #1
 8012c2c:	429a      	cmp	r2, r3
 8012c2e:	db20      	blt.n	8012c72 <__s2b+0x5e>
 8012c30:	4630      	mov	r0, r6
 8012c32:	f7ff ff69 	bl	8012b08 <_Balloc>
 8012c36:	9b08      	ldr	r3, [sp, #32]
 8012c38:	6143      	str	r3, [r0, #20]
 8012c3a:	2d09      	cmp	r5, #9
 8012c3c:	f04f 0301 	mov.w	r3, #1
 8012c40:	6103      	str	r3, [r0, #16]
 8012c42:	dd19      	ble.n	8012c78 <__s2b+0x64>
 8012c44:	f104 0809 	add.w	r8, r4, #9
 8012c48:	46c1      	mov	r9, r8
 8012c4a:	442c      	add	r4, r5
 8012c4c:	f819 3b01 	ldrb.w	r3, [r9], #1
 8012c50:	4601      	mov	r1, r0
 8012c52:	3b30      	subs	r3, #48	; 0x30
 8012c54:	220a      	movs	r2, #10
 8012c56:	4630      	mov	r0, r6
 8012c58:	f7ff ffa1 	bl	8012b9e <__multadd>
 8012c5c:	45a1      	cmp	r9, r4
 8012c5e:	d1f5      	bne.n	8012c4c <__s2b+0x38>
 8012c60:	eb08 0405 	add.w	r4, r8, r5
 8012c64:	3c08      	subs	r4, #8
 8012c66:	1b2d      	subs	r5, r5, r4
 8012c68:	1963      	adds	r3, r4, r5
 8012c6a:	42bb      	cmp	r3, r7
 8012c6c:	db07      	blt.n	8012c7e <__s2b+0x6a>
 8012c6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012c72:	0052      	lsls	r2, r2, #1
 8012c74:	3101      	adds	r1, #1
 8012c76:	e7d9      	b.n	8012c2c <__s2b+0x18>
 8012c78:	340a      	adds	r4, #10
 8012c7a:	2509      	movs	r5, #9
 8012c7c:	e7f3      	b.n	8012c66 <__s2b+0x52>
 8012c7e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012c82:	4601      	mov	r1, r0
 8012c84:	3b30      	subs	r3, #48	; 0x30
 8012c86:	220a      	movs	r2, #10
 8012c88:	4630      	mov	r0, r6
 8012c8a:	f7ff ff88 	bl	8012b9e <__multadd>
 8012c8e:	e7eb      	b.n	8012c68 <__s2b+0x54>

08012c90 <__hi0bits>:
 8012c90:	0c02      	lsrs	r2, r0, #16
 8012c92:	0412      	lsls	r2, r2, #16
 8012c94:	4603      	mov	r3, r0
 8012c96:	b9b2      	cbnz	r2, 8012cc6 <__hi0bits+0x36>
 8012c98:	0403      	lsls	r3, r0, #16
 8012c9a:	2010      	movs	r0, #16
 8012c9c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8012ca0:	bf04      	itt	eq
 8012ca2:	021b      	lsleq	r3, r3, #8
 8012ca4:	3008      	addeq	r0, #8
 8012ca6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8012caa:	bf04      	itt	eq
 8012cac:	011b      	lsleq	r3, r3, #4
 8012cae:	3004      	addeq	r0, #4
 8012cb0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8012cb4:	bf04      	itt	eq
 8012cb6:	009b      	lsleq	r3, r3, #2
 8012cb8:	3002      	addeq	r0, #2
 8012cba:	2b00      	cmp	r3, #0
 8012cbc:	db06      	blt.n	8012ccc <__hi0bits+0x3c>
 8012cbe:	005b      	lsls	r3, r3, #1
 8012cc0:	d503      	bpl.n	8012cca <__hi0bits+0x3a>
 8012cc2:	3001      	adds	r0, #1
 8012cc4:	4770      	bx	lr
 8012cc6:	2000      	movs	r0, #0
 8012cc8:	e7e8      	b.n	8012c9c <__hi0bits+0xc>
 8012cca:	2020      	movs	r0, #32
 8012ccc:	4770      	bx	lr

08012cce <__lo0bits>:
 8012cce:	6803      	ldr	r3, [r0, #0]
 8012cd0:	f013 0207 	ands.w	r2, r3, #7
 8012cd4:	4601      	mov	r1, r0
 8012cd6:	d00b      	beq.n	8012cf0 <__lo0bits+0x22>
 8012cd8:	07da      	lsls	r2, r3, #31
 8012cda:	d423      	bmi.n	8012d24 <__lo0bits+0x56>
 8012cdc:	0798      	lsls	r0, r3, #30
 8012cde:	bf49      	itett	mi
 8012ce0:	085b      	lsrmi	r3, r3, #1
 8012ce2:	089b      	lsrpl	r3, r3, #2
 8012ce4:	2001      	movmi	r0, #1
 8012ce6:	600b      	strmi	r3, [r1, #0]
 8012ce8:	bf5c      	itt	pl
 8012cea:	600b      	strpl	r3, [r1, #0]
 8012cec:	2002      	movpl	r0, #2
 8012cee:	4770      	bx	lr
 8012cf0:	b298      	uxth	r0, r3
 8012cf2:	b9a8      	cbnz	r0, 8012d20 <__lo0bits+0x52>
 8012cf4:	0c1b      	lsrs	r3, r3, #16
 8012cf6:	2010      	movs	r0, #16
 8012cf8:	f013 0fff 	tst.w	r3, #255	; 0xff
 8012cfc:	bf04      	itt	eq
 8012cfe:	0a1b      	lsreq	r3, r3, #8
 8012d00:	3008      	addeq	r0, #8
 8012d02:	071a      	lsls	r2, r3, #28
 8012d04:	bf04      	itt	eq
 8012d06:	091b      	lsreq	r3, r3, #4
 8012d08:	3004      	addeq	r0, #4
 8012d0a:	079a      	lsls	r2, r3, #30
 8012d0c:	bf04      	itt	eq
 8012d0e:	089b      	lsreq	r3, r3, #2
 8012d10:	3002      	addeq	r0, #2
 8012d12:	07da      	lsls	r2, r3, #31
 8012d14:	d402      	bmi.n	8012d1c <__lo0bits+0x4e>
 8012d16:	085b      	lsrs	r3, r3, #1
 8012d18:	d006      	beq.n	8012d28 <__lo0bits+0x5a>
 8012d1a:	3001      	adds	r0, #1
 8012d1c:	600b      	str	r3, [r1, #0]
 8012d1e:	4770      	bx	lr
 8012d20:	4610      	mov	r0, r2
 8012d22:	e7e9      	b.n	8012cf8 <__lo0bits+0x2a>
 8012d24:	2000      	movs	r0, #0
 8012d26:	4770      	bx	lr
 8012d28:	2020      	movs	r0, #32
 8012d2a:	4770      	bx	lr

08012d2c <__i2b>:
 8012d2c:	b510      	push	{r4, lr}
 8012d2e:	460c      	mov	r4, r1
 8012d30:	2101      	movs	r1, #1
 8012d32:	f7ff fee9 	bl	8012b08 <_Balloc>
 8012d36:	2201      	movs	r2, #1
 8012d38:	6144      	str	r4, [r0, #20]
 8012d3a:	6102      	str	r2, [r0, #16]
 8012d3c:	bd10      	pop	{r4, pc}

08012d3e <__multiply>:
 8012d3e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d42:	4614      	mov	r4, r2
 8012d44:	690a      	ldr	r2, [r1, #16]
 8012d46:	6923      	ldr	r3, [r4, #16]
 8012d48:	429a      	cmp	r2, r3
 8012d4a:	bfb8      	it	lt
 8012d4c:	460b      	movlt	r3, r1
 8012d4e:	4688      	mov	r8, r1
 8012d50:	bfbc      	itt	lt
 8012d52:	46a0      	movlt	r8, r4
 8012d54:	461c      	movlt	r4, r3
 8012d56:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8012d5a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8012d5e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012d62:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012d66:	eb07 0609 	add.w	r6, r7, r9
 8012d6a:	42b3      	cmp	r3, r6
 8012d6c:	bfb8      	it	lt
 8012d6e:	3101      	addlt	r1, #1
 8012d70:	f7ff feca 	bl	8012b08 <_Balloc>
 8012d74:	f100 0514 	add.w	r5, r0, #20
 8012d78:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8012d7c:	462b      	mov	r3, r5
 8012d7e:	2200      	movs	r2, #0
 8012d80:	4573      	cmp	r3, lr
 8012d82:	d316      	bcc.n	8012db2 <__multiply+0x74>
 8012d84:	f104 0214 	add.w	r2, r4, #20
 8012d88:	f108 0114 	add.w	r1, r8, #20
 8012d8c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8012d90:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8012d94:	9300      	str	r3, [sp, #0]
 8012d96:	9b00      	ldr	r3, [sp, #0]
 8012d98:	9201      	str	r2, [sp, #4]
 8012d9a:	4293      	cmp	r3, r2
 8012d9c:	d80c      	bhi.n	8012db8 <__multiply+0x7a>
 8012d9e:	2e00      	cmp	r6, #0
 8012da0:	dd03      	ble.n	8012daa <__multiply+0x6c>
 8012da2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	d05d      	beq.n	8012e66 <__multiply+0x128>
 8012daa:	6106      	str	r6, [r0, #16]
 8012dac:	b003      	add	sp, #12
 8012dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012db2:	f843 2b04 	str.w	r2, [r3], #4
 8012db6:	e7e3      	b.n	8012d80 <__multiply+0x42>
 8012db8:	f8b2 b000 	ldrh.w	fp, [r2]
 8012dbc:	f1bb 0f00 	cmp.w	fp, #0
 8012dc0:	d023      	beq.n	8012e0a <__multiply+0xcc>
 8012dc2:	4689      	mov	r9, r1
 8012dc4:	46ac      	mov	ip, r5
 8012dc6:	f04f 0800 	mov.w	r8, #0
 8012dca:	f859 4b04 	ldr.w	r4, [r9], #4
 8012dce:	f8dc a000 	ldr.w	sl, [ip]
 8012dd2:	b2a3      	uxth	r3, r4
 8012dd4:	fa1f fa8a 	uxth.w	sl, sl
 8012dd8:	fb0b a303 	mla	r3, fp, r3, sl
 8012ddc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8012de0:	f8dc 4000 	ldr.w	r4, [ip]
 8012de4:	4443      	add	r3, r8
 8012de6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8012dea:	fb0b 840a 	mla	r4, fp, sl, r8
 8012dee:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8012df2:	46e2      	mov	sl, ip
 8012df4:	b29b      	uxth	r3, r3
 8012df6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8012dfa:	454f      	cmp	r7, r9
 8012dfc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8012e00:	f84a 3b04 	str.w	r3, [sl], #4
 8012e04:	d82b      	bhi.n	8012e5e <__multiply+0x120>
 8012e06:	f8cc 8004 	str.w	r8, [ip, #4]
 8012e0a:	9b01      	ldr	r3, [sp, #4]
 8012e0c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8012e10:	3204      	adds	r2, #4
 8012e12:	f1ba 0f00 	cmp.w	sl, #0
 8012e16:	d020      	beq.n	8012e5a <__multiply+0x11c>
 8012e18:	682b      	ldr	r3, [r5, #0]
 8012e1a:	4689      	mov	r9, r1
 8012e1c:	46a8      	mov	r8, r5
 8012e1e:	f04f 0b00 	mov.w	fp, #0
 8012e22:	f8b9 c000 	ldrh.w	ip, [r9]
 8012e26:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8012e2a:	fb0a 440c 	mla	r4, sl, ip, r4
 8012e2e:	445c      	add	r4, fp
 8012e30:	46c4      	mov	ip, r8
 8012e32:	b29b      	uxth	r3, r3
 8012e34:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8012e38:	f84c 3b04 	str.w	r3, [ip], #4
 8012e3c:	f859 3b04 	ldr.w	r3, [r9], #4
 8012e40:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8012e44:	0c1b      	lsrs	r3, r3, #16
 8012e46:	fb0a b303 	mla	r3, sl, r3, fp
 8012e4a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8012e4e:	454f      	cmp	r7, r9
 8012e50:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8012e54:	d805      	bhi.n	8012e62 <__multiply+0x124>
 8012e56:	f8c8 3004 	str.w	r3, [r8, #4]
 8012e5a:	3504      	adds	r5, #4
 8012e5c:	e79b      	b.n	8012d96 <__multiply+0x58>
 8012e5e:	46d4      	mov	ip, sl
 8012e60:	e7b3      	b.n	8012dca <__multiply+0x8c>
 8012e62:	46e0      	mov	r8, ip
 8012e64:	e7dd      	b.n	8012e22 <__multiply+0xe4>
 8012e66:	3e01      	subs	r6, #1
 8012e68:	e799      	b.n	8012d9e <__multiply+0x60>
	...

08012e6c <__pow5mult>:
 8012e6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012e70:	4615      	mov	r5, r2
 8012e72:	f012 0203 	ands.w	r2, r2, #3
 8012e76:	4606      	mov	r6, r0
 8012e78:	460f      	mov	r7, r1
 8012e7a:	d007      	beq.n	8012e8c <__pow5mult+0x20>
 8012e7c:	3a01      	subs	r2, #1
 8012e7e:	4c21      	ldr	r4, [pc, #132]	; (8012f04 <__pow5mult+0x98>)
 8012e80:	2300      	movs	r3, #0
 8012e82:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012e86:	f7ff fe8a 	bl	8012b9e <__multadd>
 8012e8a:	4607      	mov	r7, r0
 8012e8c:	10ad      	asrs	r5, r5, #2
 8012e8e:	d035      	beq.n	8012efc <__pow5mult+0x90>
 8012e90:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8012e92:	b93c      	cbnz	r4, 8012ea4 <__pow5mult+0x38>
 8012e94:	2010      	movs	r0, #16
 8012e96:	f7ff fe1d 	bl	8012ad4 <malloc>
 8012e9a:	6270      	str	r0, [r6, #36]	; 0x24
 8012e9c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012ea0:	6004      	str	r4, [r0, #0]
 8012ea2:	60c4      	str	r4, [r0, #12]
 8012ea4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012ea8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012eac:	b94c      	cbnz	r4, 8012ec2 <__pow5mult+0x56>
 8012eae:	f240 2171 	movw	r1, #625	; 0x271
 8012eb2:	4630      	mov	r0, r6
 8012eb4:	f7ff ff3a 	bl	8012d2c <__i2b>
 8012eb8:	2300      	movs	r3, #0
 8012eba:	f8c8 0008 	str.w	r0, [r8, #8]
 8012ebe:	4604      	mov	r4, r0
 8012ec0:	6003      	str	r3, [r0, #0]
 8012ec2:	f04f 0800 	mov.w	r8, #0
 8012ec6:	07eb      	lsls	r3, r5, #31
 8012ec8:	d50a      	bpl.n	8012ee0 <__pow5mult+0x74>
 8012eca:	4639      	mov	r1, r7
 8012ecc:	4622      	mov	r2, r4
 8012ece:	4630      	mov	r0, r6
 8012ed0:	f7ff ff35 	bl	8012d3e <__multiply>
 8012ed4:	4639      	mov	r1, r7
 8012ed6:	4681      	mov	r9, r0
 8012ed8:	4630      	mov	r0, r6
 8012eda:	f7ff fe49 	bl	8012b70 <_Bfree>
 8012ede:	464f      	mov	r7, r9
 8012ee0:	106d      	asrs	r5, r5, #1
 8012ee2:	d00b      	beq.n	8012efc <__pow5mult+0x90>
 8012ee4:	6820      	ldr	r0, [r4, #0]
 8012ee6:	b938      	cbnz	r0, 8012ef8 <__pow5mult+0x8c>
 8012ee8:	4622      	mov	r2, r4
 8012eea:	4621      	mov	r1, r4
 8012eec:	4630      	mov	r0, r6
 8012eee:	f7ff ff26 	bl	8012d3e <__multiply>
 8012ef2:	6020      	str	r0, [r4, #0]
 8012ef4:	f8c0 8000 	str.w	r8, [r0]
 8012ef8:	4604      	mov	r4, r0
 8012efa:	e7e4      	b.n	8012ec6 <__pow5mult+0x5a>
 8012efc:	4638      	mov	r0, r7
 8012efe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012f02:	bf00      	nop
 8012f04:	08013ff0 	.word	0x08013ff0

08012f08 <__lshift>:
 8012f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012f0c:	460c      	mov	r4, r1
 8012f0e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012f12:	6923      	ldr	r3, [r4, #16]
 8012f14:	6849      	ldr	r1, [r1, #4]
 8012f16:	eb0a 0903 	add.w	r9, sl, r3
 8012f1a:	68a3      	ldr	r3, [r4, #8]
 8012f1c:	4607      	mov	r7, r0
 8012f1e:	4616      	mov	r6, r2
 8012f20:	f109 0501 	add.w	r5, r9, #1
 8012f24:	42ab      	cmp	r3, r5
 8012f26:	db32      	blt.n	8012f8e <__lshift+0x86>
 8012f28:	4638      	mov	r0, r7
 8012f2a:	f7ff fded 	bl	8012b08 <_Balloc>
 8012f2e:	2300      	movs	r3, #0
 8012f30:	4680      	mov	r8, r0
 8012f32:	f100 0114 	add.w	r1, r0, #20
 8012f36:	461a      	mov	r2, r3
 8012f38:	4553      	cmp	r3, sl
 8012f3a:	db2b      	blt.n	8012f94 <__lshift+0x8c>
 8012f3c:	6920      	ldr	r0, [r4, #16]
 8012f3e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012f42:	f104 0314 	add.w	r3, r4, #20
 8012f46:	f016 021f 	ands.w	r2, r6, #31
 8012f4a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012f4e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012f52:	d025      	beq.n	8012fa0 <__lshift+0x98>
 8012f54:	f1c2 0e20 	rsb	lr, r2, #32
 8012f58:	2000      	movs	r0, #0
 8012f5a:	681e      	ldr	r6, [r3, #0]
 8012f5c:	468a      	mov	sl, r1
 8012f5e:	4096      	lsls	r6, r2
 8012f60:	4330      	orrs	r0, r6
 8012f62:	f84a 0b04 	str.w	r0, [sl], #4
 8012f66:	f853 0b04 	ldr.w	r0, [r3], #4
 8012f6a:	459c      	cmp	ip, r3
 8012f6c:	fa20 f00e 	lsr.w	r0, r0, lr
 8012f70:	d814      	bhi.n	8012f9c <__lshift+0x94>
 8012f72:	6048      	str	r0, [r1, #4]
 8012f74:	b108      	cbz	r0, 8012f7a <__lshift+0x72>
 8012f76:	f109 0502 	add.w	r5, r9, #2
 8012f7a:	3d01      	subs	r5, #1
 8012f7c:	4638      	mov	r0, r7
 8012f7e:	f8c8 5010 	str.w	r5, [r8, #16]
 8012f82:	4621      	mov	r1, r4
 8012f84:	f7ff fdf4 	bl	8012b70 <_Bfree>
 8012f88:	4640      	mov	r0, r8
 8012f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f8e:	3101      	adds	r1, #1
 8012f90:	005b      	lsls	r3, r3, #1
 8012f92:	e7c7      	b.n	8012f24 <__lshift+0x1c>
 8012f94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8012f98:	3301      	adds	r3, #1
 8012f9a:	e7cd      	b.n	8012f38 <__lshift+0x30>
 8012f9c:	4651      	mov	r1, sl
 8012f9e:	e7dc      	b.n	8012f5a <__lshift+0x52>
 8012fa0:	3904      	subs	r1, #4
 8012fa2:	f853 2b04 	ldr.w	r2, [r3], #4
 8012fa6:	f841 2f04 	str.w	r2, [r1, #4]!
 8012faa:	459c      	cmp	ip, r3
 8012fac:	d8f9      	bhi.n	8012fa2 <__lshift+0x9a>
 8012fae:	e7e4      	b.n	8012f7a <__lshift+0x72>

08012fb0 <__mcmp>:
 8012fb0:	6903      	ldr	r3, [r0, #16]
 8012fb2:	690a      	ldr	r2, [r1, #16]
 8012fb4:	1a9b      	subs	r3, r3, r2
 8012fb6:	b530      	push	{r4, r5, lr}
 8012fb8:	d10c      	bne.n	8012fd4 <__mcmp+0x24>
 8012fba:	0092      	lsls	r2, r2, #2
 8012fbc:	3014      	adds	r0, #20
 8012fbe:	3114      	adds	r1, #20
 8012fc0:	1884      	adds	r4, r0, r2
 8012fc2:	4411      	add	r1, r2
 8012fc4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012fc8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012fcc:	4295      	cmp	r5, r2
 8012fce:	d003      	beq.n	8012fd8 <__mcmp+0x28>
 8012fd0:	d305      	bcc.n	8012fde <__mcmp+0x2e>
 8012fd2:	2301      	movs	r3, #1
 8012fd4:	4618      	mov	r0, r3
 8012fd6:	bd30      	pop	{r4, r5, pc}
 8012fd8:	42a0      	cmp	r0, r4
 8012fda:	d3f3      	bcc.n	8012fc4 <__mcmp+0x14>
 8012fdc:	e7fa      	b.n	8012fd4 <__mcmp+0x24>
 8012fde:	f04f 33ff 	mov.w	r3, #4294967295
 8012fe2:	e7f7      	b.n	8012fd4 <__mcmp+0x24>

08012fe4 <__mdiff>:
 8012fe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012fe8:	460d      	mov	r5, r1
 8012fea:	4607      	mov	r7, r0
 8012fec:	4611      	mov	r1, r2
 8012fee:	4628      	mov	r0, r5
 8012ff0:	4614      	mov	r4, r2
 8012ff2:	f7ff ffdd 	bl	8012fb0 <__mcmp>
 8012ff6:	1e06      	subs	r6, r0, #0
 8012ff8:	d108      	bne.n	801300c <__mdiff+0x28>
 8012ffa:	4631      	mov	r1, r6
 8012ffc:	4638      	mov	r0, r7
 8012ffe:	f7ff fd83 	bl	8012b08 <_Balloc>
 8013002:	2301      	movs	r3, #1
 8013004:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8013008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801300c:	bfa4      	itt	ge
 801300e:	4623      	movge	r3, r4
 8013010:	462c      	movge	r4, r5
 8013012:	4638      	mov	r0, r7
 8013014:	6861      	ldr	r1, [r4, #4]
 8013016:	bfa6      	itte	ge
 8013018:	461d      	movge	r5, r3
 801301a:	2600      	movge	r6, #0
 801301c:	2601      	movlt	r6, #1
 801301e:	f7ff fd73 	bl	8012b08 <_Balloc>
 8013022:	692b      	ldr	r3, [r5, #16]
 8013024:	60c6      	str	r6, [r0, #12]
 8013026:	6926      	ldr	r6, [r4, #16]
 8013028:	f105 0914 	add.w	r9, r5, #20
 801302c:	f104 0214 	add.w	r2, r4, #20
 8013030:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8013034:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8013038:	f100 0514 	add.w	r5, r0, #20
 801303c:	f04f 0e00 	mov.w	lr, #0
 8013040:	f852 ab04 	ldr.w	sl, [r2], #4
 8013044:	f859 4b04 	ldr.w	r4, [r9], #4
 8013048:	fa1e f18a 	uxtah	r1, lr, sl
 801304c:	b2a3      	uxth	r3, r4
 801304e:	1ac9      	subs	r1, r1, r3
 8013050:	0c23      	lsrs	r3, r4, #16
 8013052:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8013056:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801305a:	b289      	uxth	r1, r1
 801305c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8013060:	45c8      	cmp	r8, r9
 8013062:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8013066:	4694      	mov	ip, r2
 8013068:	f845 3b04 	str.w	r3, [r5], #4
 801306c:	d8e8      	bhi.n	8013040 <__mdiff+0x5c>
 801306e:	45bc      	cmp	ip, r7
 8013070:	d304      	bcc.n	801307c <__mdiff+0x98>
 8013072:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8013076:	b183      	cbz	r3, 801309a <__mdiff+0xb6>
 8013078:	6106      	str	r6, [r0, #16]
 801307a:	e7c5      	b.n	8013008 <__mdiff+0x24>
 801307c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8013080:	fa1e f381 	uxtah	r3, lr, r1
 8013084:	141a      	asrs	r2, r3, #16
 8013086:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801308a:	b29b      	uxth	r3, r3
 801308c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013090:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8013094:	f845 3b04 	str.w	r3, [r5], #4
 8013098:	e7e9      	b.n	801306e <__mdiff+0x8a>
 801309a:	3e01      	subs	r6, #1
 801309c:	e7e9      	b.n	8013072 <__mdiff+0x8e>
	...

080130a0 <__ulp>:
 80130a0:	4b12      	ldr	r3, [pc, #72]	; (80130ec <__ulp+0x4c>)
 80130a2:	ee10 2a90 	vmov	r2, s1
 80130a6:	401a      	ands	r2, r3
 80130a8:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	dd04      	ble.n	80130ba <__ulp+0x1a>
 80130b0:	2000      	movs	r0, #0
 80130b2:	4619      	mov	r1, r3
 80130b4:	ec41 0b10 	vmov	d0, r0, r1
 80130b8:	4770      	bx	lr
 80130ba:	425b      	negs	r3, r3
 80130bc:	151b      	asrs	r3, r3, #20
 80130be:	2b13      	cmp	r3, #19
 80130c0:	f04f 0000 	mov.w	r0, #0
 80130c4:	f04f 0100 	mov.w	r1, #0
 80130c8:	dc04      	bgt.n	80130d4 <__ulp+0x34>
 80130ca:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80130ce:	fa42 f103 	asr.w	r1, r2, r3
 80130d2:	e7ef      	b.n	80130b4 <__ulp+0x14>
 80130d4:	3b14      	subs	r3, #20
 80130d6:	2b1e      	cmp	r3, #30
 80130d8:	f04f 0201 	mov.w	r2, #1
 80130dc:	bfda      	itte	le
 80130de:	f1c3 031f 	rsble	r3, r3, #31
 80130e2:	fa02 f303 	lslle.w	r3, r2, r3
 80130e6:	4613      	movgt	r3, r2
 80130e8:	4618      	mov	r0, r3
 80130ea:	e7e3      	b.n	80130b4 <__ulp+0x14>
 80130ec:	7ff00000 	.word	0x7ff00000

080130f0 <__b2d>:
 80130f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130f2:	6905      	ldr	r5, [r0, #16]
 80130f4:	f100 0714 	add.w	r7, r0, #20
 80130f8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80130fc:	1f2e      	subs	r6, r5, #4
 80130fe:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8013102:	4620      	mov	r0, r4
 8013104:	f7ff fdc4 	bl	8012c90 <__hi0bits>
 8013108:	f1c0 0320 	rsb	r3, r0, #32
 801310c:	280a      	cmp	r0, #10
 801310e:	600b      	str	r3, [r1, #0]
 8013110:	f8df c074 	ldr.w	ip, [pc, #116]	; 8013188 <__b2d+0x98>
 8013114:	dc14      	bgt.n	8013140 <__b2d+0x50>
 8013116:	f1c0 0e0b 	rsb	lr, r0, #11
 801311a:	fa24 f10e 	lsr.w	r1, r4, lr
 801311e:	42b7      	cmp	r7, r6
 8013120:	ea41 030c 	orr.w	r3, r1, ip
 8013124:	bf34      	ite	cc
 8013126:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801312a:	2100      	movcs	r1, #0
 801312c:	3015      	adds	r0, #21
 801312e:	fa04 f000 	lsl.w	r0, r4, r0
 8013132:	fa21 f10e 	lsr.w	r1, r1, lr
 8013136:	ea40 0201 	orr.w	r2, r0, r1
 801313a:	ec43 2b10 	vmov	d0, r2, r3
 801313e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013140:	42b7      	cmp	r7, r6
 8013142:	bf3a      	itte	cc
 8013144:	f1a5 0608 	subcc.w	r6, r5, #8
 8013148:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801314c:	2100      	movcs	r1, #0
 801314e:	380b      	subs	r0, #11
 8013150:	d015      	beq.n	801317e <__b2d+0x8e>
 8013152:	4084      	lsls	r4, r0
 8013154:	f1c0 0520 	rsb	r5, r0, #32
 8013158:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 801315c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8013160:	42be      	cmp	r6, r7
 8013162:	fa21 fc05 	lsr.w	ip, r1, r5
 8013166:	ea44 030c 	orr.w	r3, r4, ip
 801316a:	bf8c      	ite	hi
 801316c:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8013170:	2400      	movls	r4, #0
 8013172:	fa01 f000 	lsl.w	r0, r1, r0
 8013176:	40ec      	lsrs	r4, r5
 8013178:	ea40 0204 	orr.w	r2, r0, r4
 801317c:	e7dd      	b.n	801313a <__b2d+0x4a>
 801317e:	ea44 030c 	orr.w	r3, r4, ip
 8013182:	460a      	mov	r2, r1
 8013184:	e7d9      	b.n	801313a <__b2d+0x4a>
 8013186:	bf00      	nop
 8013188:	3ff00000 	.word	0x3ff00000

0801318c <__d2b>:
 801318c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013190:	460e      	mov	r6, r1
 8013192:	2101      	movs	r1, #1
 8013194:	ec59 8b10 	vmov	r8, r9, d0
 8013198:	4615      	mov	r5, r2
 801319a:	f7ff fcb5 	bl	8012b08 <_Balloc>
 801319e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80131a2:	4607      	mov	r7, r0
 80131a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80131a8:	bb34      	cbnz	r4, 80131f8 <__d2b+0x6c>
 80131aa:	9301      	str	r3, [sp, #4]
 80131ac:	f1b8 0300 	subs.w	r3, r8, #0
 80131b0:	d027      	beq.n	8013202 <__d2b+0x76>
 80131b2:	a802      	add	r0, sp, #8
 80131b4:	f840 3d08 	str.w	r3, [r0, #-8]!
 80131b8:	f7ff fd89 	bl	8012cce <__lo0bits>
 80131bc:	9900      	ldr	r1, [sp, #0]
 80131be:	b1f0      	cbz	r0, 80131fe <__d2b+0x72>
 80131c0:	9a01      	ldr	r2, [sp, #4]
 80131c2:	f1c0 0320 	rsb	r3, r0, #32
 80131c6:	fa02 f303 	lsl.w	r3, r2, r3
 80131ca:	430b      	orrs	r3, r1
 80131cc:	40c2      	lsrs	r2, r0
 80131ce:	617b      	str	r3, [r7, #20]
 80131d0:	9201      	str	r2, [sp, #4]
 80131d2:	9b01      	ldr	r3, [sp, #4]
 80131d4:	61bb      	str	r3, [r7, #24]
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	bf14      	ite	ne
 80131da:	2102      	movne	r1, #2
 80131dc:	2101      	moveq	r1, #1
 80131de:	6139      	str	r1, [r7, #16]
 80131e0:	b1c4      	cbz	r4, 8013214 <__d2b+0x88>
 80131e2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80131e6:	4404      	add	r4, r0
 80131e8:	6034      	str	r4, [r6, #0]
 80131ea:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80131ee:	6028      	str	r0, [r5, #0]
 80131f0:	4638      	mov	r0, r7
 80131f2:	b003      	add	sp, #12
 80131f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80131f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80131fc:	e7d5      	b.n	80131aa <__d2b+0x1e>
 80131fe:	6179      	str	r1, [r7, #20]
 8013200:	e7e7      	b.n	80131d2 <__d2b+0x46>
 8013202:	a801      	add	r0, sp, #4
 8013204:	f7ff fd63 	bl	8012cce <__lo0bits>
 8013208:	9b01      	ldr	r3, [sp, #4]
 801320a:	617b      	str	r3, [r7, #20]
 801320c:	2101      	movs	r1, #1
 801320e:	6139      	str	r1, [r7, #16]
 8013210:	3020      	adds	r0, #32
 8013212:	e7e5      	b.n	80131e0 <__d2b+0x54>
 8013214:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8013218:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801321c:	6030      	str	r0, [r6, #0]
 801321e:	6918      	ldr	r0, [r3, #16]
 8013220:	f7ff fd36 	bl	8012c90 <__hi0bits>
 8013224:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8013228:	e7e1      	b.n	80131ee <__d2b+0x62>

0801322a <__ratio>:
 801322a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801322e:	4688      	mov	r8, r1
 8013230:	4669      	mov	r1, sp
 8013232:	4681      	mov	r9, r0
 8013234:	f7ff ff5c 	bl	80130f0 <__b2d>
 8013238:	a901      	add	r1, sp, #4
 801323a:	4640      	mov	r0, r8
 801323c:	ec57 6b10 	vmov	r6, r7, d0
 8013240:	ee10 4a10 	vmov	r4, s0
 8013244:	f7ff ff54 	bl	80130f0 <__b2d>
 8013248:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801324c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8013250:	eba3 0c02 	sub.w	ip, r3, r2
 8013254:	e9dd 3200 	ldrd	r3, r2, [sp]
 8013258:	1a9b      	subs	r3, r3, r2
 801325a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801325e:	ec51 0b10 	vmov	r0, r1, d0
 8013262:	2b00      	cmp	r3, #0
 8013264:	ee10 aa10 	vmov	sl, s0
 8013268:	bfce      	itee	gt
 801326a:	463a      	movgt	r2, r7
 801326c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8013270:	460a      	movle	r2, r1
 8013272:	463d      	mov	r5, r7
 8013274:	468b      	mov	fp, r1
 8013276:	bfcc      	ite	gt
 8013278:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 801327c:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8013280:	ec45 4b17 	vmov	d7, r4, r5
 8013284:	ec4b ab16 	vmov	d6, sl, fp
 8013288:	ee87 0b06 	vdiv.f64	d0, d7, d6
 801328c:	b003      	add	sp, #12
 801328e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013292 <__copybits>:
 8013292:	3901      	subs	r1, #1
 8013294:	b510      	push	{r4, lr}
 8013296:	1149      	asrs	r1, r1, #5
 8013298:	6914      	ldr	r4, [r2, #16]
 801329a:	3101      	adds	r1, #1
 801329c:	f102 0314 	add.w	r3, r2, #20
 80132a0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80132a4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80132a8:	42a3      	cmp	r3, r4
 80132aa:	4602      	mov	r2, r0
 80132ac:	d303      	bcc.n	80132b6 <__copybits+0x24>
 80132ae:	2300      	movs	r3, #0
 80132b0:	428a      	cmp	r2, r1
 80132b2:	d305      	bcc.n	80132c0 <__copybits+0x2e>
 80132b4:	bd10      	pop	{r4, pc}
 80132b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80132ba:	f840 2b04 	str.w	r2, [r0], #4
 80132be:	e7f3      	b.n	80132a8 <__copybits+0x16>
 80132c0:	f842 3b04 	str.w	r3, [r2], #4
 80132c4:	e7f4      	b.n	80132b0 <__copybits+0x1e>

080132c6 <__any_on>:
 80132c6:	f100 0214 	add.w	r2, r0, #20
 80132ca:	6900      	ldr	r0, [r0, #16]
 80132cc:	114b      	asrs	r3, r1, #5
 80132ce:	4298      	cmp	r0, r3
 80132d0:	b510      	push	{r4, lr}
 80132d2:	db11      	blt.n	80132f8 <__any_on+0x32>
 80132d4:	dd0a      	ble.n	80132ec <__any_on+0x26>
 80132d6:	f011 011f 	ands.w	r1, r1, #31
 80132da:	d007      	beq.n	80132ec <__any_on+0x26>
 80132dc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80132e0:	fa24 f001 	lsr.w	r0, r4, r1
 80132e4:	fa00 f101 	lsl.w	r1, r0, r1
 80132e8:	428c      	cmp	r4, r1
 80132ea:	d10b      	bne.n	8013304 <__any_on+0x3e>
 80132ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80132f0:	4293      	cmp	r3, r2
 80132f2:	d803      	bhi.n	80132fc <__any_on+0x36>
 80132f4:	2000      	movs	r0, #0
 80132f6:	bd10      	pop	{r4, pc}
 80132f8:	4603      	mov	r3, r0
 80132fa:	e7f7      	b.n	80132ec <__any_on+0x26>
 80132fc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013300:	2900      	cmp	r1, #0
 8013302:	d0f5      	beq.n	80132f0 <__any_on+0x2a>
 8013304:	2001      	movs	r0, #1
 8013306:	e7f6      	b.n	80132f6 <__any_on+0x30>

08013308 <_calloc_r>:
 8013308:	b538      	push	{r3, r4, r5, lr}
 801330a:	fb02 f401 	mul.w	r4, r2, r1
 801330e:	4621      	mov	r1, r4
 8013310:	f000 f856 	bl	80133c0 <_malloc_r>
 8013314:	4605      	mov	r5, r0
 8013316:	b118      	cbz	r0, 8013320 <_calloc_r+0x18>
 8013318:	4622      	mov	r2, r4
 801331a:	2100      	movs	r1, #0
 801331c:	f7fc fdef 	bl	800fefe <memset>
 8013320:	4628      	mov	r0, r5
 8013322:	bd38      	pop	{r3, r4, r5, pc}

08013324 <_free_r>:
 8013324:	b538      	push	{r3, r4, r5, lr}
 8013326:	4605      	mov	r5, r0
 8013328:	2900      	cmp	r1, #0
 801332a:	d045      	beq.n	80133b8 <_free_r+0x94>
 801332c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013330:	1f0c      	subs	r4, r1, #4
 8013332:	2b00      	cmp	r3, #0
 8013334:	bfb8      	it	lt
 8013336:	18e4      	addlt	r4, r4, r3
 8013338:	f000 fa36 	bl	80137a8 <__malloc_lock>
 801333c:	4a1f      	ldr	r2, [pc, #124]	; (80133bc <_free_r+0x98>)
 801333e:	6813      	ldr	r3, [r2, #0]
 8013340:	4610      	mov	r0, r2
 8013342:	b933      	cbnz	r3, 8013352 <_free_r+0x2e>
 8013344:	6063      	str	r3, [r4, #4]
 8013346:	6014      	str	r4, [r2, #0]
 8013348:	4628      	mov	r0, r5
 801334a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801334e:	f000 ba2c 	b.w	80137aa <__malloc_unlock>
 8013352:	42a3      	cmp	r3, r4
 8013354:	d90c      	bls.n	8013370 <_free_r+0x4c>
 8013356:	6821      	ldr	r1, [r4, #0]
 8013358:	1862      	adds	r2, r4, r1
 801335a:	4293      	cmp	r3, r2
 801335c:	bf04      	itt	eq
 801335e:	681a      	ldreq	r2, [r3, #0]
 8013360:	685b      	ldreq	r3, [r3, #4]
 8013362:	6063      	str	r3, [r4, #4]
 8013364:	bf04      	itt	eq
 8013366:	1852      	addeq	r2, r2, r1
 8013368:	6022      	streq	r2, [r4, #0]
 801336a:	6004      	str	r4, [r0, #0]
 801336c:	e7ec      	b.n	8013348 <_free_r+0x24>
 801336e:	4613      	mov	r3, r2
 8013370:	685a      	ldr	r2, [r3, #4]
 8013372:	b10a      	cbz	r2, 8013378 <_free_r+0x54>
 8013374:	42a2      	cmp	r2, r4
 8013376:	d9fa      	bls.n	801336e <_free_r+0x4a>
 8013378:	6819      	ldr	r1, [r3, #0]
 801337a:	1858      	adds	r0, r3, r1
 801337c:	42a0      	cmp	r0, r4
 801337e:	d10b      	bne.n	8013398 <_free_r+0x74>
 8013380:	6820      	ldr	r0, [r4, #0]
 8013382:	4401      	add	r1, r0
 8013384:	1858      	adds	r0, r3, r1
 8013386:	4282      	cmp	r2, r0
 8013388:	6019      	str	r1, [r3, #0]
 801338a:	d1dd      	bne.n	8013348 <_free_r+0x24>
 801338c:	6810      	ldr	r0, [r2, #0]
 801338e:	6852      	ldr	r2, [r2, #4]
 8013390:	605a      	str	r2, [r3, #4]
 8013392:	4401      	add	r1, r0
 8013394:	6019      	str	r1, [r3, #0]
 8013396:	e7d7      	b.n	8013348 <_free_r+0x24>
 8013398:	d902      	bls.n	80133a0 <_free_r+0x7c>
 801339a:	230c      	movs	r3, #12
 801339c:	602b      	str	r3, [r5, #0]
 801339e:	e7d3      	b.n	8013348 <_free_r+0x24>
 80133a0:	6820      	ldr	r0, [r4, #0]
 80133a2:	1821      	adds	r1, r4, r0
 80133a4:	428a      	cmp	r2, r1
 80133a6:	bf04      	itt	eq
 80133a8:	6811      	ldreq	r1, [r2, #0]
 80133aa:	6852      	ldreq	r2, [r2, #4]
 80133ac:	6062      	str	r2, [r4, #4]
 80133ae:	bf04      	itt	eq
 80133b0:	1809      	addeq	r1, r1, r0
 80133b2:	6021      	streq	r1, [r4, #0]
 80133b4:	605c      	str	r4, [r3, #4]
 80133b6:	e7c7      	b.n	8013348 <_free_r+0x24>
 80133b8:	bd38      	pop	{r3, r4, r5, pc}
 80133ba:	bf00      	nop
 80133bc:	20001328 	.word	0x20001328

080133c0 <_malloc_r>:
 80133c0:	b570      	push	{r4, r5, r6, lr}
 80133c2:	1ccd      	adds	r5, r1, #3
 80133c4:	f025 0503 	bic.w	r5, r5, #3
 80133c8:	3508      	adds	r5, #8
 80133ca:	2d0c      	cmp	r5, #12
 80133cc:	bf38      	it	cc
 80133ce:	250c      	movcc	r5, #12
 80133d0:	2d00      	cmp	r5, #0
 80133d2:	4606      	mov	r6, r0
 80133d4:	db01      	blt.n	80133da <_malloc_r+0x1a>
 80133d6:	42a9      	cmp	r1, r5
 80133d8:	d903      	bls.n	80133e2 <_malloc_r+0x22>
 80133da:	230c      	movs	r3, #12
 80133dc:	6033      	str	r3, [r6, #0]
 80133de:	2000      	movs	r0, #0
 80133e0:	bd70      	pop	{r4, r5, r6, pc}
 80133e2:	f000 f9e1 	bl	80137a8 <__malloc_lock>
 80133e6:	4a21      	ldr	r2, [pc, #132]	; (801346c <_malloc_r+0xac>)
 80133e8:	6814      	ldr	r4, [r2, #0]
 80133ea:	4621      	mov	r1, r4
 80133ec:	b991      	cbnz	r1, 8013414 <_malloc_r+0x54>
 80133ee:	4c20      	ldr	r4, [pc, #128]	; (8013470 <_malloc_r+0xb0>)
 80133f0:	6823      	ldr	r3, [r4, #0]
 80133f2:	b91b      	cbnz	r3, 80133fc <_malloc_r+0x3c>
 80133f4:	4630      	mov	r0, r6
 80133f6:	f000 f98f 	bl	8013718 <_sbrk_r>
 80133fa:	6020      	str	r0, [r4, #0]
 80133fc:	4629      	mov	r1, r5
 80133fe:	4630      	mov	r0, r6
 8013400:	f000 f98a 	bl	8013718 <_sbrk_r>
 8013404:	1c43      	adds	r3, r0, #1
 8013406:	d124      	bne.n	8013452 <_malloc_r+0x92>
 8013408:	230c      	movs	r3, #12
 801340a:	6033      	str	r3, [r6, #0]
 801340c:	4630      	mov	r0, r6
 801340e:	f000 f9cc 	bl	80137aa <__malloc_unlock>
 8013412:	e7e4      	b.n	80133de <_malloc_r+0x1e>
 8013414:	680b      	ldr	r3, [r1, #0]
 8013416:	1b5b      	subs	r3, r3, r5
 8013418:	d418      	bmi.n	801344c <_malloc_r+0x8c>
 801341a:	2b0b      	cmp	r3, #11
 801341c:	d90f      	bls.n	801343e <_malloc_r+0x7e>
 801341e:	600b      	str	r3, [r1, #0]
 8013420:	50cd      	str	r5, [r1, r3]
 8013422:	18cc      	adds	r4, r1, r3
 8013424:	4630      	mov	r0, r6
 8013426:	f000 f9c0 	bl	80137aa <__malloc_unlock>
 801342a:	f104 000b 	add.w	r0, r4, #11
 801342e:	1d23      	adds	r3, r4, #4
 8013430:	f020 0007 	bic.w	r0, r0, #7
 8013434:	1ac3      	subs	r3, r0, r3
 8013436:	d0d3      	beq.n	80133e0 <_malloc_r+0x20>
 8013438:	425a      	negs	r2, r3
 801343a:	50e2      	str	r2, [r4, r3]
 801343c:	e7d0      	b.n	80133e0 <_malloc_r+0x20>
 801343e:	428c      	cmp	r4, r1
 8013440:	684b      	ldr	r3, [r1, #4]
 8013442:	bf16      	itet	ne
 8013444:	6063      	strne	r3, [r4, #4]
 8013446:	6013      	streq	r3, [r2, #0]
 8013448:	460c      	movne	r4, r1
 801344a:	e7eb      	b.n	8013424 <_malloc_r+0x64>
 801344c:	460c      	mov	r4, r1
 801344e:	6849      	ldr	r1, [r1, #4]
 8013450:	e7cc      	b.n	80133ec <_malloc_r+0x2c>
 8013452:	1cc4      	adds	r4, r0, #3
 8013454:	f024 0403 	bic.w	r4, r4, #3
 8013458:	42a0      	cmp	r0, r4
 801345a:	d005      	beq.n	8013468 <_malloc_r+0xa8>
 801345c:	1a21      	subs	r1, r4, r0
 801345e:	4630      	mov	r0, r6
 8013460:	f000 f95a 	bl	8013718 <_sbrk_r>
 8013464:	3001      	adds	r0, #1
 8013466:	d0cf      	beq.n	8013408 <_malloc_r+0x48>
 8013468:	6025      	str	r5, [r4, #0]
 801346a:	e7db      	b.n	8013424 <_malloc_r+0x64>
 801346c:	20001328 	.word	0x20001328
 8013470:	2000132c 	.word	0x2000132c

08013474 <__ssputs_r>:
 8013474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013478:	688e      	ldr	r6, [r1, #8]
 801347a:	429e      	cmp	r6, r3
 801347c:	4682      	mov	sl, r0
 801347e:	460c      	mov	r4, r1
 8013480:	4690      	mov	r8, r2
 8013482:	4699      	mov	r9, r3
 8013484:	d837      	bhi.n	80134f6 <__ssputs_r+0x82>
 8013486:	898a      	ldrh	r2, [r1, #12]
 8013488:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801348c:	d031      	beq.n	80134f2 <__ssputs_r+0x7e>
 801348e:	6825      	ldr	r5, [r4, #0]
 8013490:	6909      	ldr	r1, [r1, #16]
 8013492:	1a6f      	subs	r7, r5, r1
 8013494:	6965      	ldr	r5, [r4, #20]
 8013496:	2302      	movs	r3, #2
 8013498:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801349c:	fb95 f5f3 	sdiv	r5, r5, r3
 80134a0:	f109 0301 	add.w	r3, r9, #1
 80134a4:	443b      	add	r3, r7
 80134a6:	429d      	cmp	r5, r3
 80134a8:	bf38      	it	cc
 80134aa:	461d      	movcc	r5, r3
 80134ac:	0553      	lsls	r3, r2, #21
 80134ae:	d530      	bpl.n	8013512 <__ssputs_r+0x9e>
 80134b0:	4629      	mov	r1, r5
 80134b2:	f7ff ff85 	bl	80133c0 <_malloc_r>
 80134b6:	4606      	mov	r6, r0
 80134b8:	b950      	cbnz	r0, 80134d0 <__ssputs_r+0x5c>
 80134ba:	230c      	movs	r3, #12
 80134bc:	f8ca 3000 	str.w	r3, [sl]
 80134c0:	89a3      	ldrh	r3, [r4, #12]
 80134c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80134c6:	81a3      	strh	r3, [r4, #12]
 80134c8:	f04f 30ff 	mov.w	r0, #4294967295
 80134cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80134d0:	463a      	mov	r2, r7
 80134d2:	6921      	ldr	r1, [r4, #16]
 80134d4:	f7fc fd08 	bl	800fee8 <memcpy>
 80134d8:	89a3      	ldrh	r3, [r4, #12]
 80134da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80134de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80134e2:	81a3      	strh	r3, [r4, #12]
 80134e4:	6126      	str	r6, [r4, #16]
 80134e6:	6165      	str	r5, [r4, #20]
 80134e8:	443e      	add	r6, r7
 80134ea:	1bed      	subs	r5, r5, r7
 80134ec:	6026      	str	r6, [r4, #0]
 80134ee:	60a5      	str	r5, [r4, #8]
 80134f0:	464e      	mov	r6, r9
 80134f2:	454e      	cmp	r6, r9
 80134f4:	d900      	bls.n	80134f8 <__ssputs_r+0x84>
 80134f6:	464e      	mov	r6, r9
 80134f8:	4632      	mov	r2, r6
 80134fa:	4641      	mov	r1, r8
 80134fc:	6820      	ldr	r0, [r4, #0]
 80134fe:	f000 f93a 	bl	8013776 <memmove>
 8013502:	68a3      	ldr	r3, [r4, #8]
 8013504:	1b9b      	subs	r3, r3, r6
 8013506:	60a3      	str	r3, [r4, #8]
 8013508:	6823      	ldr	r3, [r4, #0]
 801350a:	441e      	add	r6, r3
 801350c:	6026      	str	r6, [r4, #0]
 801350e:	2000      	movs	r0, #0
 8013510:	e7dc      	b.n	80134cc <__ssputs_r+0x58>
 8013512:	462a      	mov	r2, r5
 8013514:	f000 f94a 	bl	80137ac <_realloc_r>
 8013518:	4606      	mov	r6, r0
 801351a:	2800      	cmp	r0, #0
 801351c:	d1e2      	bne.n	80134e4 <__ssputs_r+0x70>
 801351e:	6921      	ldr	r1, [r4, #16]
 8013520:	4650      	mov	r0, sl
 8013522:	f7ff feff 	bl	8013324 <_free_r>
 8013526:	e7c8      	b.n	80134ba <__ssputs_r+0x46>

08013528 <_svfiprintf_r>:
 8013528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801352c:	461d      	mov	r5, r3
 801352e:	898b      	ldrh	r3, [r1, #12]
 8013530:	061f      	lsls	r7, r3, #24
 8013532:	b09d      	sub	sp, #116	; 0x74
 8013534:	4680      	mov	r8, r0
 8013536:	460c      	mov	r4, r1
 8013538:	4616      	mov	r6, r2
 801353a:	d50f      	bpl.n	801355c <_svfiprintf_r+0x34>
 801353c:	690b      	ldr	r3, [r1, #16]
 801353e:	b96b      	cbnz	r3, 801355c <_svfiprintf_r+0x34>
 8013540:	2140      	movs	r1, #64	; 0x40
 8013542:	f7ff ff3d 	bl	80133c0 <_malloc_r>
 8013546:	6020      	str	r0, [r4, #0]
 8013548:	6120      	str	r0, [r4, #16]
 801354a:	b928      	cbnz	r0, 8013558 <_svfiprintf_r+0x30>
 801354c:	230c      	movs	r3, #12
 801354e:	f8c8 3000 	str.w	r3, [r8]
 8013552:	f04f 30ff 	mov.w	r0, #4294967295
 8013556:	e0c8      	b.n	80136ea <_svfiprintf_r+0x1c2>
 8013558:	2340      	movs	r3, #64	; 0x40
 801355a:	6163      	str	r3, [r4, #20]
 801355c:	2300      	movs	r3, #0
 801355e:	9309      	str	r3, [sp, #36]	; 0x24
 8013560:	2320      	movs	r3, #32
 8013562:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013566:	2330      	movs	r3, #48	; 0x30
 8013568:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801356c:	9503      	str	r5, [sp, #12]
 801356e:	f04f 0b01 	mov.w	fp, #1
 8013572:	4637      	mov	r7, r6
 8013574:	463d      	mov	r5, r7
 8013576:	f815 3b01 	ldrb.w	r3, [r5], #1
 801357a:	b10b      	cbz	r3, 8013580 <_svfiprintf_r+0x58>
 801357c:	2b25      	cmp	r3, #37	; 0x25
 801357e:	d13e      	bne.n	80135fe <_svfiprintf_r+0xd6>
 8013580:	ebb7 0a06 	subs.w	sl, r7, r6
 8013584:	d00b      	beq.n	801359e <_svfiprintf_r+0x76>
 8013586:	4653      	mov	r3, sl
 8013588:	4632      	mov	r2, r6
 801358a:	4621      	mov	r1, r4
 801358c:	4640      	mov	r0, r8
 801358e:	f7ff ff71 	bl	8013474 <__ssputs_r>
 8013592:	3001      	adds	r0, #1
 8013594:	f000 80a4 	beq.w	80136e0 <_svfiprintf_r+0x1b8>
 8013598:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801359a:	4453      	add	r3, sl
 801359c:	9309      	str	r3, [sp, #36]	; 0x24
 801359e:	783b      	ldrb	r3, [r7, #0]
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	f000 809d 	beq.w	80136e0 <_svfiprintf_r+0x1b8>
 80135a6:	2300      	movs	r3, #0
 80135a8:	f04f 32ff 	mov.w	r2, #4294967295
 80135ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80135b0:	9304      	str	r3, [sp, #16]
 80135b2:	9307      	str	r3, [sp, #28]
 80135b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80135b8:	931a      	str	r3, [sp, #104]	; 0x68
 80135ba:	462f      	mov	r7, r5
 80135bc:	2205      	movs	r2, #5
 80135be:	f817 1b01 	ldrb.w	r1, [r7], #1
 80135c2:	4850      	ldr	r0, [pc, #320]	; (8013704 <_svfiprintf_r+0x1dc>)
 80135c4:	f7ec fe54 	bl	8000270 <memchr>
 80135c8:	9b04      	ldr	r3, [sp, #16]
 80135ca:	b9d0      	cbnz	r0, 8013602 <_svfiprintf_r+0xda>
 80135cc:	06d9      	lsls	r1, r3, #27
 80135ce:	bf44      	itt	mi
 80135d0:	2220      	movmi	r2, #32
 80135d2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80135d6:	071a      	lsls	r2, r3, #28
 80135d8:	bf44      	itt	mi
 80135da:	222b      	movmi	r2, #43	; 0x2b
 80135dc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80135e0:	782a      	ldrb	r2, [r5, #0]
 80135e2:	2a2a      	cmp	r2, #42	; 0x2a
 80135e4:	d015      	beq.n	8013612 <_svfiprintf_r+0xea>
 80135e6:	9a07      	ldr	r2, [sp, #28]
 80135e8:	462f      	mov	r7, r5
 80135ea:	2000      	movs	r0, #0
 80135ec:	250a      	movs	r5, #10
 80135ee:	4639      	mov	r1, r7
 80135f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80135f4:	3b30      	subs	r3, #48	; 0x30
 80135f6:	2b09      	cmp	r3, #9
 80135f8:	d94d      	bls.n	8013696 <_svfiprintf_r+0x16e>
 80135fa:	b1b8      	cbz	r0, 801362c <_svfiprintf_r+0x104>
 80135fc:	e00f      	b.n	801361e <_svfiprintf_r+0xf6>
 80135fe:	462f      	mov	r7, r5
 8013600:	e7b8      	b.n	8013574 <_svfiprintf_r+0x4c>
 8013602:	4a40      	ldr	r2, [pc, #256]	; (8013704 <_svfiprintf_r+0x1dc>)
 8013604:	1a80      	subs	r0, r0, r2
 8013606:	fa0b f000 	lsl.w	r0, fp, r0
 801360a:	4318      	orrs	r0, r3
 801360c:	9004      	str	r0, [sp, #16]
 801360e:	463d      	mov	r5, r7
 8013610:	e7d3      	b.n	80135ba <_svfiprintf_r+0x92>
 8013612:	9a03      	ldr	r2, [sp, #12]
 8013614:	1d11      	adds	r1, r2, #4
 8013616:	6812      	ldr	r2, [r2, #0]
 8013618:	9103      	str	r1, [sp, #12]
 801361a:	2a00      	cmp	r2, #0
 801361c:	db01      	blt.n	8013622 <_svfiprintf_r+0xfa>
 801361e:	9207      	str	r2, [sp, #28]
 8013620:	e004      	b.n	801362c <_svfiprintf_r+0x104>
 8013622:	4252      	negs	r2, r2
 8013624:	f043 0302 	orr.w	r3, r3, #2
 8013628:	9207      	str	r2, [sp, #28]
 801362a:	9304      	str	r3, [sp, #16]
 801362c:	783b      	ldrb	r3, [r7, #0]
 801362e:	2b2e      	cmp	r3, #46	; 0x2e
 8013630:	d10c      	bne.n	801364c <_svfiprintf_r+0x124>
 8013632:	787b      	ldrb	r3, [r7, #1]
 8013634:	2b2a      	cmp	r3, #42	; 0x2a
 8013636:	d133      	bne.n	80136a0 <_svfiprintf_r+0x178>
 8013638:	9b03      	ldr	r3, [sp, #12]
 801363a:	1d1a      	adds	r2, r3, #4
 801363c:	681b      	ldr	r3, [r3, #0]
 801363e:	9203      	str	r2, [sp, #12]
 8013640:	2b00      	cmp	r3, #0
 8013642:	bfb8      	it	lt
 8013644:	f04f 33ff 	movlt.w	r3, #4294967295
 8013648:	3702      	adds	r7, #2
 801364a:	9305      	str	r3, [sp, #20]
 801364c:	4d2e      	ldr	r5, [pc, #184]	; (8013708 <_svfiprintf_r+0x1e0>)
 801364e:	7839      	ldrb	r1, [r7, #0]
 8013650:	2203      	movs	r2, #3
 8013652:	4628      	mov	r0, r5
 8013654:	f7ec fe0c 	bl	8000270 <memchr>
 8013658:	b138      	cbz	r0, 801366a <_svfiprintf_r+0x142>
 801365a:	2340      	movs	r3, #64	; 0x40
 801365c:	1b40      	subs	r0, r0, r5
 801365e:	fa03 f000 	lsl.w	r0, r3, r0
 8013662:	9b04      	ldr	r3, [sp, #16]
 8013664:	4303      	orrs	r3, r0
 8013666:	3701      	adds	r7, #1
 8013668:	9304      	str	r3, [sp, #16]
 801366a:	7839      	ldrb	r1, [r7, #0]
 801366c:	4827      	ldr	r0, [pc, #156]	; (801370c <_svfiprintf_r+0x1e4>)
 801366e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013672:	2206      	movs	r2, #6
 8013674:	1c7e      	adds	r6, r7, #1
 8013676:	f7ec fdfb 	bl	8000270 <memchr>
 801367a:	2800      	cmp	r0, #0
 801367c:	d038      	beq.n	80136f0 <_svfiprintf_r+0x1c8>
 801367e:	4b24      	ldr	r3, [pc, #144]	; (8013710 <_svfiprintf_r+0x1e8>)
 8013680:	bb13      	cbnz	r3, 80136c8 <_svfiprintf_r+0x1a0>
 8013682:	9b03      	ldr	r3, [sp, #12]
 8013684:	3307      	adds	r3, #7
 8013686:	f023 0307 	bic.w	r3, r3, #7
 801368a:	3308      	adds	r3, #8
 801368c:	9303      	str	r3, [sp, #12]
 801368e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013690:	444b      	add	r3, r9
 8013692:	9309      	str	r3, [sp, #36]	; 0x24
 8013694:	e76d      	b.n	8013572 <_svfiprintf_r+0x4a>
 8013696:	fb05 3202 	mla	r2, r5, r2, r3
 801369a:	2001      	movs	r0, #1
 801369c:	460f      	mov	r7, r1
 801369e:	e7a6      	b.n	80135ee <_svfiprintf_r+0xc6>
 80136a0:	2300      	movs	r3, #0
 80136a2:	3701      	adds	r7, #1
 80136a4:	9305      	str	r3, [sp, #20]
 80136a6:	4619      	mov	r1, r3
 80136a8:	250a      	movs	r5, #10
 80136aa:	4638      	mov	r0, r7
 80136ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80136b0:	3a30      	subs	r2, #48	; 0x30
 80136b2:	2a09      	cmp	r2, #9
 80136b4:	d903      	bls.n	80136be <_svfiprintf_r+0x196>
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	d0c8      	beq.n	801364c <_svfiprintf_r+0x124>
 80136ba:	9105      	str	r1, [sp, #20]
 80136bc:	e7c6      	b.n	801364c <_svfiprintf_r+0x124>
 80136be:	fb05 2101 	mla	r1, r5, r1, r2
 80136c2:	2301      	movs	r3, #1
 80136c4:	4607      	mov	r7, r0
 80136c6:	e7f0      	b.n	80136aa <_svfiprintf_r+0x182>
 80136c8:	ab03      	add	r3, sp, #12
 80136ca:	9300      	str	r3, [sp, #0]
 80136cc:	4622      	mov	r2, r4
 80136ce:	4b11      	ldr	r3, [pc, #68]	; (8013714 <_svfiprintf_r+0x1ec>)
 80136d0:	a904      	add	r1, sp, #16
 80136d2:	4640      	mov	r0, r8
 80136d4:	f7fc fca0 	bl	8010018 <_printf_float>
 80136d8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80136dc:	4681      	mov	r9, r0
 80136de:	d1d6      	bne.n	801368e <_svfiprintf_r+0x166>
 80136e0:	89a3      	ldrh	r3, [r4, #12]
 80136e2:	065b      	lsls	r3, r3, #25
 80136e4:	f53f af35 	bmi.w	8013552 <_svfiprintf_r+0x2a>
 80136e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80136ea:	b01d      	add	sp, #116	; 0x74
 80136ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136f0:	ab03      	add	r3, sp, #12
 80136f2:	9300      	str	r3, [sp, #0]
 80136f4:	4622      	mov	r2, r4
 80136f6:	4b07      	ldr	r3, [pc, #28]	; (8013714 <_svfiprintf_r+0x1ec>)
 80136f8:	a904      	add	r1, sp, #16
 80136fa:	4640      	mov	r0, r8
 80136fc:	f7fc ff2e 	bl	801055c <_printf_i>
 8013700:	e7ea      	b.n	80136d8 <_svfiprintf_r+0x1b0>
 8013702:	bf00      	nop
 8013704:	08013ffc 	.word	0x08013ffc
 8013708:	08014002 	.word	0x08014002
 801370c:	08014006 	.word	0x08014006
 8013710:	08010019 	.word	0x08010019
 8013714:	08013475 	.word	0x08013475

08013718 <_sbrk_r>:
 8013718:	b538      	push	{r3, r4, r5, lr}
 801371a:	4c06      	ldr	r4, [pc, #24]	; (8013734 <_sbrk_r+0x1c>)
 801371c:	2300      	movs	r3, #0
 801371e:	4605      	mov	r5, r0
 8013720:	4608      	mov	r0, r1
 8013722:	6023      	str	r3, [r4, #0]
 8013724:	f7f0 fb44 	bl	8003db0 <_sbrk>
 8013728:	1c43      	adds	r3, r0, #1
 801372a:	d102      	bne.n	8013732 <_sbrk_r+0x1a>
 801372c:	6823      	ldr	r3, [r4, #0]
 801372e:	b103      	cbz	r3, 8013732 <_sbrk_r+0x1a>
 8013730:	602b      	str	r3, [r5, #0]
 8013732:	bd38      	pop	{r3, r4, r5, pc}
 8013734:	20004ad0 	.word	0x20004ad0

08013738 <strncmp>:
 8013738:	b510      	push	{r4, lr}
 801373a:	b16a      	cbz	r2, 8013758 <strncmp+0x20>
 801373c:	3901      	subs	r1, #1
 801373e:	1884      	adds	r4, r0, r2
 8013740:	f810 3b01 	ldrb.w	r3, [r0], #1
 8013744:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8013748:	4293      	cmp	r3, r2
 801374a:	d103      	bne.n	8013754 <strncmp+0x1c>
 801374c:	42a0      	cmp	r0, r4
 801374e:	d001      	beq.n	8013754 <strncmp+0x1c>
 8013750:	2b00      	cmp	r3, #0
 8013752:	d1f5      	bne.n	8013740 <strncmp+0x8>
 8013754:	1a98      	subs	r0, r3, r2
 8013756:	bd10      	pop	{r4, pc}
 8013758:	4610      	mov	r0, r2
 801375a:	e7fc      	b.n	8013756 <strncmp+0x1e>

0801375c <__ascii_wctomb>:
 801375c:	b149      	cbz	r1, 8013772 <__ascii_wctomb+0x16>
 801375e:	2aff      	cmp	r2, #255	; 0xff
 8013760:	bf85      	ittet	hi
 8013762:	238a      	movhi	r3, #138	; 0x8a
 8013764:	6003      	strhi	r3, [r0, #0]
 8013766:	700a      	strbls	r2, [r1, #0]
 8013768:	f04f 30ff 	movhi.w	r0, #4294967295
 801376c:	bf98      	it	ls
 801376e:	2001      	movls	r0, #1
 8013770:	4770      	bx	lr
 8013772:	4608      	mov	r0, r1
 8013774:	4770      	bx	lr

08013776 <memmove>:
 8013776:	4288      	cmp	r0, r1
 8013778:	b510      	push	{r4, lr}
 801377a:	eb01 0302 	add.w	r3, r1, r2
 801377e:	d807      	bhi.n	8013790 <memmove+0x1a>
 8013780:	1e42      	subs	r2, r0, #1
 8013782:	4299      	cmp	r1, r3
 8013784:	d00a      	beq.n	801379c <memmove+0x26>
 8013786:	f811 4b01 	ldrb.w	r4, [r1], #1
 801378a:	f802 4f01 	strb.w	r4, [r2, #1]!
 801378e:	e7f8      	b.n	8013782 <memmove+0xc>
 8013790:	4283      	cmp	r3, r0
 8013792:	d9f5      	bls.n	8013780 <memmove+0xa>
 8013794:	1881      	adds	r1, r0, r2
 8013796:	1ad2      	subs	r2, r2, r3
 8013798:	42d3      	cmn	r3, r2
 801379a:	d100      	bne.n	801379e <memmove+0x28>
 801379c:	bd10      	pop	{r4, pc}
 801379e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80137a2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80137a6:	e7f7      	b.n	8013798 <memmove+0x22>

080137a8 <__malloc_lock>:
 80137a8:	4770      	bx	lr

080137aa <__malloc_unlock>:
 80137aa:	4770      	bx	lr

080137ac <_realloc_r>:
 80137ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80137ae:	4607      	mov	r7, r0
 80137b0:	4614      	mov	r4, r2
 80137b2:	460e      	mov	r6, r1
 80137b4:	b921      	cbnz	r1, 80137c0 <_realloc_r+0x14>
 80137b6:	4611      	mov	r1, r2
 80137b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80137bc:	f7ff be00 	b.w	80133c0 <_malloc_r>
 80137c0:	b922      	cbnz	r2, 80137cc <_realloc_r+0x20>
 80137c2:	f7ff fdaf 	bl	8013324 <_free_r>
 80137c6:	4625      	mov	r5, r4
 80137c8:	4628      	mov	r0, r5
 80137ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80137cc:	f000 f814 	bl	80137f8 <_malloc_usable_size_r>
 80137d0:	42a0      	cmp	r0, r4
 80137d2:	d20f      	bcs.n	80137f4 <_realloc_r+0x48>
 80137d4:	4621      	mov	r1, r4
 80137d6:	4638      	mov	r0, r7
 80137d8:	f7ff fdf2 	bl	80133c0 <_malloc_r>
 80137dc:	4605      	mov	r5, r0
 80137de:	2800      	cmp	r0, #0
 80137e0:	d0f2      	beq.n	80137c8 <_realloc_r+0x1c>
 80137e2:	4631      	mov	r1, r6
 80137e4:	4622      	mov	r2, r4
 80137e6:	f7fc fb7f 	bl	800fee8 <memcpy>
 80137ea:	4631      	mov	r1, r6
 80137ec:	4638      	mov	r0, r7
 80137ee:	f7ff fd99 	bl	8013324 <_free_r>
 80137f2:	e7e9      	b.n	80137c8 <_realloc_r+0x1c>
 80137f4:	4635      	mov	r5, r6
 80137f6:	e7e7      	b.n	80137c8 <_realloc_r+0x1c>

080137f8 <_malloc_usable_size_r>:
 80137f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80137fc:	1f18      	subs	r0, r3, #4
 80137fe:	2b00      	cmp	r3, #0
 8013800:	bfbc      	itt	lt
 8013802:	580b      	ldrlt	r3, [r1, r0]
 8013804:	18c0      	addlt	r0, r0, r3
 8013806:	4770      	bx	lr

08013808 <_init>:
 8013808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801380a:	bf00      	nop
 801380c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801380e:	bc08      	pop	{r3}
 8013810:	469e      	mov	lr, r3
 8013812:	4770      	bx	lr

08013814 <_fini>:
 8013814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013816:	bf00      	nop
 8013818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801381a:	bc08      	pop	{r3}
 801381c:	469e      	mov	lr, r3
 801381e:	4770      	bx	lr
